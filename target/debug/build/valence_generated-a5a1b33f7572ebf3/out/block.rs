use valence_math::{Aabb, DVec3};
#[doc = r" Represents the state of a block. This does not include block entity data such as"]
#[doc = r" the text on a sign, the design on a banner, or the content of a spawner."]
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Default, Hash)]
pub struct BlockState(u16);
impl BlockState {
    #[doc = r" Returns the default block state for a given block type."]
    pub const fn from_kind(kind: BlockKind) -> Self {
        match kind {
            BlockKind::Air => BlockState::AIR,
            BlockKind::Stone => BlockState::STONE,
            BlockKind::Granite => BlockState::GRANITE,
            BlockKind::PolishedGranite => BlockState::POLISHED_GRANITE,
            BlockKind::Diorite => BlockState::DIORITE,
            BlockKind::PolishedDiorite => BlockState::POLISHED_DIORITE,
            BlockKind::Andesite => BlockState::ANDESITE,
            BlockKind::PolishedAndesite => BlockState::POLISHED_ANDESITE,
            BlockKind::GrassBlock => BlockState::GRASS_BLOCK,
            BlockKind::Dirt => BlockState::DIRT,
            BlockKind::CoarseDirt => BlockState::COARSE_DIRT,
            BlockKind::Podzol => BlockState::PODZOL,
            BlockKind::Cobblestone => BlockState::COBBLESTONE,
            BlockKind::OakPlanks => BlockState::OAK_PLANKS,
            BlockKind::SprucePlanks => BlockState::SPRUCE_PLANKS,
            BlockKind::BirchPlanks => BlockState::BIRCH_PLANKS,
            BlockKind::JunglePlanks => BlockState::JUNGLE_PLANKS,
            BlockKind::AcaciaPlanks => BlockState::ACACIA_PLANKS,
            BlockKind::CherryPlanks => BlockState::CHERRY_PLANKS,
            BlockKind::DarkOakPlanks => BlockState::DARK_OAK_PLANKS,
            BlockKind::MangrovePlanks => BlockState::MANGROVE_PLANKS,
            BlockKind::BambooPlanks => BlockState::BAMBOO_PLANKS,
            BlockKind::BambooMosaic => BlockState::BAMBOO_MOSAIC,
            BlockKind::OakSapling => BlockState::OAK_SAPLING,
            BlockKind::SpruceSapling => BlockState::SPRUCE_SAPLING,
            BlockKind::BirchSapling => BlockState::BIRCH_SAPLING,
            BlockKind::JungleSapling => BlockState::JUNGLE_SAPLING,
            BlockKind::AcaciaSapling => BlockState::ACACIA_SAPLING,
            BlockKind::CherrySapling => BlockState::CHERRY_SAPLING,
            BlockKind::DarkOakSapling => BlockState::DARK_OAK_SAPLING,
            BlockKind::MangrovePropagule => BlockState::MANGROVE_PROPAGULE,
            BlockKind::Bedrock => BlockState::BEDROCK,
            BlockKind::Water => BlockState::WATER,
            BlockKind::Lava => BlockState::LAVA,
            BlockKind::Sand => BlockState::SAND,
            BlockKind::SuspiciousSand => BlockState::SUSPICIOUS_SAND,
            BlockKind::RedSand => BlockState::RED_SAND,
            BlockKind::Gravel => BlockState::GRAVEL,
            BlockKind::SuspiciousGravel => BlockState::SUSPICIOUS_GRAVEL,
            BlockKind::GoldOre => BlockState::GOLD_ORE,
            BlockKind::DeepslateGoldOre => BlockState::DEEPSLATE_GOLD_ORE,
            BlockKind::IronOre => BlockState::IRON_ORE,
            BlockKind::DeepslateIronOre => BlockState::DEEPSLATE_IRON_ORE,
            BlockKind::CoalOre => BlockState::COAL_ORE,
            BlockKind::DeepslateCoalOre => BlockState::DEEPSLATE_COAL_ORE,
            BlockKind::NetherGoldOre => BlockState::NETHER_GOLD_ORE,
            BlockKind::OakLog => BlockState::OAK_LOG,
            BlockKind::SpruceLog => BlockState::SPRUCE_LOG,
            BlockKind::BirchLog => BlockState::BIRCH_LOG,
            BlockKind::JungleLog => BlockState::JUNGLE_LOG,
            BlockKind::AcaciaLog => BlockState::ACACIA_LOG,
            BlockKind::CherryLog => BlockState::CHERRY_LOG,
            BlockKind::DarkOakLog => BlockState::DARK_OAK_LOG,
            BlockKind::MangroveLog => BlockState::MANGROVE_LOG,
            BlockKind::MangroveRoots => BlockState::MANGROVE_ROOTS,
            BlockKind::MuddyMangroveRoots => BlockState::MUDDY_MANGROVE_ROOTS,
            BlockKind::BambooBlock => BlockState::BAMBOO_BLOCK,
            BlockKind::StrippedSpruceLog => BlockState::STRIPPED_SPRUCE_LOG,
            BlockKind::StrippedBirchLog => BlockState::STRIPPED_BIRCH_LOG,
            BlockKind::StrippedJungleLog => BlockState::STRIPPED_JUNGLE_LOG,
            BlockKind::StrippedAcaciaLog => BlockState::STRIPPED_ACACIA_LOG,
            BlockKind::StrippedCherryLog => BlockState::STRIPPED_CHERRY_LOG,
            BlockKind::StrippedDarkOakLog => BlockState::STRIPPED_DARK_OAK_LOG,
            BlockKind::StrippedOakLog => BlockState::STRIPPED_OAK_LOG,
            BlockKind::StrippedMangroveLog => BlockState::STRIPPED_MANGROVE_LOG,
            BlockKind::StrippedBambooBlock => BlockState::STRIPPED_BAMBOO_BLOCK,
            BlockKind::OakWood => BlockState::OAK_WOOD,
            BlockKind::SpruceWood => BlockState::SPRUCE_WOOD,
            BlockKind::BirchWood => BlockState::BIRCH_WOOD,
            BlockKind::JungleWood => BlockState::JUNGLE_WOOD,
            BlockKind::AcaciaWood => BlockState::ACACIA_WOOD,
            BlockKind::CherryWood => BlockState::CHERRY_WOOD,
            BlockKind::DarkOakWood => BlockState::DARK_OAK_WOOD,
            BlockKind::MangroveWood => BlockState::MANGROVE_WOOD,
            BlockKind::StrippedOakWood => BlockState::STRIPPED_OAK_WOOD,
            BlockKind::StrippedSpruceWood => BlockState::STRIPPED_SPRUCE_WOOD,
            BlockKind::StrippedBirchWood => BlockState::STRIPPED_BIRCH_WOOD,
            BlockKind::StrippedJungleWood => BlockState::STRIPPED_JUNGLE_WOOD,
            BlockKind::StrippedAcaciaWood => BlockState::STRIPPED_ACACIA_WOOD,
            BlockKind::StrippedCherryWood => BlockState::STRIPPED_CHERRY_WOOD,
            BlockKind::StrippedDarkOakWood => BlockState::STRIPPED_DARK_OAK_WOOD,
            BlockKind::StrippedMangroveWood => BlockState::STRIPPED_MANGROVE_WOOD,
            BlockKind::OakLeaves => BlockState::OAK_LEAVES,
            BlockKind::SpruceLeaves => BlockState::SPRUCE_LEAVES,
            BlockKind::BirchLeaves => BlockState::BIRCH_LEAVES,
            BlockKind::JungleLeaves => BlockState::JUNGLE_LEAVES,
            BlockKind::AcaciaLeaves => BlockState::ACACIA_LEAVES,
            BlockKind::CherryLeaves => BlockState::CHERRY_LEAVES,
            BlockKind::DarkOakLeaves => BlockState::DARK_OAK_LEAVES,
            BlockKind::MangroveLeaves => BlockState::MANGROVE_LEAVES,
            BlockKind::AzaleaLeaves => BlockState::AZALEA_LEAVES,
            BlockKind::FloweringAzaleaLeaves => BlockState::FLOWERING_AZALEA_LEAVES,
            BlockKind::Sponge => BlockState::SPONGE,
            BlockKind::WetSponge => BlockState::WET_SPONGE,
            BlockKind::Glass => BlockState::GLASS,
            BlockKind::LapisOre => BlockState::LAPIS_ORE,
            BlockKind::DeepslateLapisOre => BlockState::DEEPSLATE_LAPIS_ORE,
            BlockKind::LapisBlock => BlockState::LAPIS_BLOCK,
            BlockKind::Dispenser => BlockState::DISPENSER,
            BlockKind::Sandstone => BlockState::SANDSTONE,
            BlockKind::ChiseledSandstone => BlockState::CHISELED_SANDSTONE,
            BlockKind::CutSandstone => BlockState::CUT_SANDSTONE,
            BlockKind::NoteBlock => BlockState::NOTE_BLOCK,
            BlockKind::WhiteBed => BlockState::WHITE_BED,
            BlockKind::OrangeBed => BlockState::ORANGE_BED,
            BlockKind::MagentaBed => BlockState::MAGENTA_BED,
            BlockKind::LightBlueBed => BlockState::LIGHT_BLUE_BED,
            BlockKind::YellowBed => BlockState::YELLOW_BED,
            BlockKind::LimeBed => BlockState::LIME_BED,
            BlockKind::PinkBed => BlockState::PINK_BED,
            BlockKind::GrayBed => BlockState::GRAY_BED,
            BlockKind::LightGrayBed => BlockState::LIGHT_GRAY_BED,
            BlockKind::CyanBed => BlockState::CYAN_BED,
            BlockKind::PurpleBed => BlockState::PURPLE_BED,
            BlockKind::BlueBed => BlockState::BLUE_BED,
            BlockKind::BrownBed => BlockState::BROWN_BED,
            BlockKind::GreenBed => BlockState::GREEN_BED,
            BlockKind::RedBed => BlockState::RED_BED,
            BlockKind::BlackBed => BlockState::BLACK_BED,
            BlockKind::PoweredRail => BlockState::POWERED_RAIL,
            BlockKind::DetectorRail => BlockState::DETECTOR_RAIL,
            BlockKind::StickyPiston => BlockState::STICKY_PISTON,
            BlockKind::Cobweb => BlockState::COBWEB,
            BlockKind::Grass => BlockState::GRASS,
            BlockKind::Fern => BlockState::FERN,
            BlockKind::DeadBush => BlockState::DEAD_BUSH,
            BlockKind::Seagrass => BlockState::SEAGRASS,
            BlockKind::TallSeagrass => BlockState::TALL_SEAGRASS,
            BlockKind::Piston => BlockState::PISTON,
            BlockKind::PistonHead => BlockState::PISTON_HEAD,
            BlockKind::WhiteWool => BlockState::WHITE_WOOL,
            BlockKind::OrangeWool => BlockState::ORANGE_WOOL,
            BlockKind::MagentaWool => BlockState::MAGENTA_WOOL,
            BlockKind::LightBlueWool => BlockState::LIGHT_BLUE_WOOL,
            BlockKind::YellowWool => BlockState::YELLOW_WOOL,
            BlockKind::LimeWool => BlockState::LIME_WOOL,
            BlockKind::PinkWool => BlockState::PINK_WOOL,
            BlockKind::GrayWool => BlockState::GRAY_WOOL,
            BlockKind::LightGrayWool => BlockState::LIGHT_GRAY_WOOL,
            BlockKind::CyanWool => BlockState::CYAN_WOOL,
            BlockKind::PurpleWool => BlockState::PURPLE_WOOL,
            BlockKind::BlueWool => BlockState::BLUE_WOOL,
            BlockKind::BrownWool => BlockState::BROWN_WOOL,
            BlockKind::GreenWool => BlockState::GREEN_WOOL,
            BlockKind::RedWool => BlockState::RED_WOOL,
            BlockKind::BlackWool => BlockState::BLACK_WOOL,
            BlockKind::MovingPiston => BlockState::MOVING_PISTON,
            BlockKind::Dandelion => BlockState::DANDELION,
            BlockKind::Torchflower => BlockState::TORCHFLOWER,
            BlockKind::Poppy => BlockState::POPPY,
            BlockKind::BlueOrchid => BlockState::BLUE_ORCHID,
            BlockKind::Allium => BlockState::ALLIUM,
            BlockKind::AzureBluet => BlockState::AZURE_BLUET,
            BlockKind::RedTulip => BlockState::RED_TULIP,
            BlockKind::OrangeTulip => BlockState::ORANGE_TULIP,
            BlockKind::WhiteTulip => BlockState::WHITE_TULIP,
            BlockKind::PinkTulip => BlockState::PINK_TULIP,
            BlockKind::OxeyeDaisy => BlockState::OXEYE_DAISY,
            BlockKind::Cornflower => BlockState::CORNFLOWER,
            BlockKind::WitherRose => BlockState::WITHER_ROSE,
            BlockKind::LilyOfTheValley => BlockState::LILY_OF_THE_VALLEY,
            BlockKind::BrownMushroom => BlockState::BROWN_MUSHROOM,
            BlockKind::RedMushroom => BlockState::RED_MUSHROOM,
            BlockKind::GoldBlock => BlockState::GOLD_BLOCK,
            BlockKind::IronBlock => BlockState::IRON_BLOCK,
            BlockKind::Bricks => BlockState::BRICKS,
            BlockKind::Tnt => BlockState::TNT,
            BlockKind::Bookshelf => BlockState::BOOKSHELF,
            BlockKind::ChiseledBookshelf => BlockState::CHISELED_BOOKSHELF,
            BlockKind::MossyCobblestone => BlockState::MOSSY_COBBLESTONE,
            BlockKind::Obsidian => BlockState::OBSIDIAN,
            BlockKind::Torch => BlockState::TORCH,
            BlockKind::WallTorch => BlockState::WALL_TORCH,
            BlockKind::Fire => BlockState::FIRE,
            BlockKind::SoulFire => BlockState::SOUL_FIRE,
            BlockKind::Spawner => BlockState::SPAWNER,
            BlockKind::OakStairs => BlockState::OAK_STAIRS,
            BlockKind::Chest => BlockState::CHEST,
            BlockKind::RedstoneWire => BlockState::REDSTONE_WIRE,
            BlockKind::DiamondOre => BlockState::DIAMOND_ORE,
            BlockKind::DeepslateDiamondOre => BlockState::DEEPSLATE_DIAMOND_ORE,
            BlockKind::DiamondBlock => BlockState::DIAMOND_BLOCK,
            BlockKind::CraftingTable => BlockState::CRAFTING_TABLE,
            BlockKind::Wheat => BlockState::WHEAT,
            BlockKind::Farmland => BlockState::FARMLAND,
            BlockKind::Furnace => BlockState::FURNACE,
            BlockKind::OakSign => BlockState::OAK_SIGN,
            BlockKind::SpruceSign => BlockState::SPRUCE_SIGN,
            BlockKind::BirchSign => BlockState::BIRCH_SIGN,
            BlockKind::AcaciaSign => BlockState::ACACIA_SIGN,
            BlockKind::CherrySign => BlockState::CHERRY_SIGN,
            BlockKind::JungleSign => BlockState::JUNGLE_SIGN,
            BlockKind::DarkOakSign => BlockState::DARK_OAK_SIGN,
            BlockKind::MangroveSign => BlockState::MANGROVE_SIGN,
            BlockKind::BambooSign => BlockState::BAMBOO_SIGN,
            BlockKind::OakDoor => BlockState::OAK_DOOR,
            BlockKind::Ladder => BlockState::LADDER,
            BlockKind::Rail => BlockState::RAIL,
            BlockKind::CobblestoneStairs => BlockState::COBBLESTONE_STAIRS,
            BlockKind::OakWallSign => BlockState::OAK_WALL_SIGN,
            BlockKind::SpruceWallSign => BlockState::SPRUCE_WALL_SIGN,
            BlockKind::BirchWallSign => BlockState::BIRCH_WALL_SIGN,
            BlockKind::AcaciaWallSign => BlockState::ACACIA_WALL_SIGN,
            BlockKind::CherryWallSign => BlockState::CHERRY_WALL_SIGN,
            BlockKind::JungleWallSign => BlockState::JUNGLE_WALL_SIGN,
            BlockKind::DarkOakWallSign => BlockState::DARK_OAK_WALL_SIGN,
            BlockKind::MangroveWallSign => BlockState::MANGROVE_WALL_SIGN,
            BlockKind::BambooWallSign => BlockState::BAMBOO_WALL_SIGN,
            BlockKind::OakHangingSign => BlockState::OAK_HANGING_SIGN,
            BlockKind::SpruceHangingSign => BlockState::SPRUCE_HANGING_SIGN,
            BlockKind::BirchHangingSign => BlockState::BIRCH_HANGING_SIGN,
            BlockKind::AcaciaHangingSign => BlockState::ACACIA_HANGING_SIGN,
            BlockKind::CherryHangingSign => BlockState::CHERRY_HANGING_SIGN,
            BlockKind::JungleHangingSign => BlockState::JUNGLE_HANGING_SIGN,
            BlockKind::DarkOakHangingSign => BlockState::DARK_OAK_HANGING_SIGN,
            BlockKind::CrimsonHangingSign => BlockState::CRIMSON_HANGING_SIGN,
            BlockKind::WarpedHangingSign => BlockState::WARPED_HANGING_SIGN,
            BlockKind::MangroveHangingSign => BlockState::MANGROVE_HANGING_SIGN,
            BlockKind::BambooHangingSign => BlockState::BAMBOO_HANGING_SIGN,
            BlockKind::OakWallHangingSign => BlockState::OAK_WALL_HANGING_SIGN,
            BlockKind::SpruceWallHangingSign => BlockState::SPRUCE_WALL_HANGING_SIGN,
            BlockKind::BirchWallHangingSign => BlockState::BIRCH_WALL_HANGING_SIGN,
            BlockKind::AcaciaWallHangingSign => BlockState::ACACIA_WALL_HANGING_SIGN,
            BlockKind::CherryWallHangingSign => BlockState::CHERRY_WALL_HANGING_SIGN,
            BlockKind::JungleWallHangingSign => BlockState::JUNGLE_WALL_HANGING_SIGN,
            BlockKind::DarkOakWallHangingSign => BlockState::DARK_OAK_WALL_HANGING_SIGN,
            BlockKind::MangroveWallHangingSign => BlockState::MANGROVE_WALL_HANGING_SIGN,
            BlockKind::CrimsonWallHangingSign => BlockState::CRIMSON_WALL_HANGING_SIGN,
            BlockKind::WarpedWallHangingSign => BlockState::WARPED_WALL_HANGING_SIGN,
            BlockKind::BambooWallHangingSign => BlockState::BAMBOO_WALL_HANGING_SIGN,
            BlockKind::Lever => BlockState::LEVER,
            BlockKind::StonePressurePlate => BlockState::STONE_PRESSURE_PLATE,
            BlockKind::IronDoor => BlockState::IRON_DOOR,
            BlockKind::OakPressurePlate => BlockState::OAK_PRESSURE_PLATE,
            BlockKind::SprucePressurePlate => BlockState::SPRUCE_PRESSURE_PLATE,
            BlockKind::BirchPressurePlate => BlockState::BIRCH_PRESSURE_PLATE,
            BlockKind::JunglePressurePlate => BlockState::JUNGLE_PRESSURE_PLATE,
            BlockKind::AcaciaPressurePlate => BlockState::ACACIA_PRESSURE_PLATE,
            BlockKind::CherryPressurePlate => BlockState::CHERRY_PRESSURE_PLATE,
            BlockKind::DarkOakPressurePlate => BlockState::DARK_OAK_PRESSURE_PLATE,
            BlockKind::MangrovePressurePlate => BlockState::MANGROVE_PRESSURE_PLATE,
            BlockKind::BambooPressurePlate => BlockState::BAMBOO_PRESSURE_PLATE,
            BlockKind::RedstoneOre => BlockState::REDSTONE_ORE,
            BlockKind::DeepslateRedstoneOre => BlockState::DEEPSLATE_REDSTONE_ORE,
            BlockKind::RedstoneTorch => BlockState::REDSTONE_TORCH,
            BlockKind::RedstoneWallTorch => BlockState::REDSTONE_WALL_TORCH,
            BlockKind::StoneButton => BlockState::STONE_BUTTON,
            BlockKind::Snow => BlockState::SNOW,
            BlockKind::Ice => BlockState::ICE,
            BlockKind::SnowBlock => BlockState::SNOW_BLOCK,
            BlockKind::Cactus => BlockState::CACTUS,
            BlockKind::Clay => BlockState::CLAY,
            BlockKind::SugarCane => BlockState::SUGAR_CANE,
            BlockKind::Jukebox => BlockState::JUKEBOX,
            BlockKind::OakFence => BlockState::OAK_FENCE,
            BlockKind::Pumpkin => BlockState::PUMPKIN,
            BlockKind::Netherrack => BlockState::NETHERRACK,
            BlockKind::SoulSand => BlockState::SOUL_SAND,
            BlockKind::SoulSoil => BlockState::SOUL_SOIL,
            BlockKind::Basalt => BlockState::BASALT,
            BlockKind::PolishedBasalt => BlockState::POLISHED_BASALT,
            BlockKind::SoulTorch => BlockState::SOUL_TORCH,
            BlockKind::SoulWallTorch => BlockState::SOUL_WALL_TORCH,
            BlockKind::Glowstone => BlockState::GLOWSTONE,
            BlockKind::NetherPortal => BlockState::NETHER_PORTAL,
            BlockKind::CarvedPumpkin => BlockState::CARVED_PUMPKIN,
            BlockKind::JackOLantern => BlockState::JACK_O_LANTERN,
            BlockKind::Cake => BlockState::CAKE,
            BlockKind::Repeater => BlockState::REPEATER,
            BlockKind::WhiteStainedGlass => BlockState::WHITE_STAINED_GLASS,
            BlockKind::OrangeStainedGlass => BlockState::ORANGE_STAINED_GLASS,
            BlockKind::MagentaStainedGlass => BlockState::MAGENTA_STAINED_GLASS,
            BlockKind::LightBlueStainedGlass => BlockState::LIGHT_BLUE_STAINED_GLASS,
            BlockKind::YellowStainedGlass => BlockState::YELLOW_STAINED_GLASS,
            BlockKind::LimeStainedGlass => BlockState::LIME_STAINED_GLASS,
            BlockKind::PinkStainedGlass => BlockState::PINK_STAINED_GLASS,
            BlockKind::GrayStainedGlass => BlockState::GRAY_STAINED_GLASS,
            BlockKind::LightGrayStainedGlass => BlockState::LIGHT_GRAY_STAINED_GLASS,
            BlockKind::CyanStainedGlass => BlockState::CYAN_STAINED_GLASS,
            BlockKind::PurpleStainedGlass => BlockState::PURPLE_STAINED_GLASS,
            BlockKind::BlueStainedGlass => BlockState::BLUE_STAINED_GLASS,
            BlockKind::BrownStainedGlass => BlockState::BROWN_STAINED_GLASS,
            BlockKind::GreenStainedGlass => BlockState::GREEN_STAINED_GLASS,
            BlockKind::RedStainedGlass => BlockState::RED_STAINED_GLASS,
            BlockKind::BlackStainedGlass => BlockState::BLACK_STAINED_GLASS,
            BlockKind::OakTrapdoor => BlockState::OAK_TRAPDOOR,
            BlockKind::SpruceTrapdoor => BlockState::SPRUCE_TRAPDOOR,
            BlockKind::BirchTrapdoor => BlockState::BIRCH_TRAPDOOR,
            BlockKind::JungleTrapdoor => BlockState::JUNGLE_TRAPDOOR,
            BlockKind::AcaciaTrapdoor => BlockState::ACACIA_TRAPDOOR,
            BlockKind::CherryTrapdoor => BlockState::CHERRY_TRAPDOOR,
            BlockKind::DarkOakTrapdoor => BlockState::DARK_OAK_TRAPDOOR,
            BlockKind::MangroveTrapdoor => BlockState::MANGROVE_TRAPDOOR,
            BlockKind::BambooTrapdoor => BlockState::BAMBOO_TRAPDOOR,
            BlockKind::StoneBricks => BlockState::STONE_BRICKS,
            BlockKind::MossyStoneBricks => BlockState::MOSSY_STONE_BRICKS,
            BlockKind::CrackedStoneBricks => BlockState::CRACKED_STONE_BRICKS,
            BlockKind::ChiseledStoneBricks => BlockState::CHISELED_STONE_BRICKS,
            BlockKind::PackedMud => BlockState::PACKED_MUD,
            BlockKind::MudBricks => BlockState::MUD_BRICKS,
            BlockKind::InfestedStone => BlockState::INFESTED_STONE,
            BlockKind::InfestedCobblestone => BlockState::INFESTED_COBBLESTONE,
            BlockKind::InfestedStoneBricks => BlockState::INFESTED_STONE_BRICKS,
            BlockKind::InfestedMossyStoneBricks => BlockState::INFESTED_MOSSY_STONE_BRICKS,
            BlockKind::InfestedCrackedStoneBricks => BlockState::INFESTED_CRACKED_STONE_BRICKS,
            BlockKind::InfestedChiseledStoneBricks => BlockState::INFESTED_CHISELED_STONE_BRICKS,
            BlockKind::BrownMushroomBlock => BlockState::BROWN_MUSHROOM_BLOCK,
            BlockKind::RedMushroomBlock => BlockState::RED_MUSHROOM_BLOCK,
            BlockKind::MushroomStem => BlockState::MUSHROOM_STEM,
            BlockKind::IronBars => BlockState::IRON_BARS,
            BlockKind::Chain => BlockState::CHAIN,
            BlockKind::GlassPane => BlockState::GLASS_PANE,
            BlockKind::Melon => BlockState::MELON,
            BlockKind::AttachedPumpkinStem => BlockState::ATTACHED_PUMPKIN_STEM,
            BlockKind::AttachedMelonStem => BlockState::ATTACHED_MELON_STEM,
            BlockKind::PumpkinStem => BlockState::PUMPKIN_STEM,
            BlockKind::MelonStem => BlockState::MELON_STEM,
            BlockKind::Vine => BlockState::VINE,
            BlockKind::GlowLichen => BlockState::GLOW_LICHEN,
            BlockKind::OakFenceGate => BlockState::OAK_FENCE_GATE,
            BlockKind::BrickStairs => BlockState::BRICK_STAIRS,
            BlockKind::StoneBrickStairs => BlockState::STONE_BRICK_STAIRS,
            BlockKind::MudBrickStairs => BlockState::MUD_BRICK_STAIRS,
            BlockKind::Mycelium => BlockState::MYCELIUM,
            BlockKind::LilyPad => BlockState::LILY_PAD,
            BlockKind::NetherBricks => BlockState::NETHER_BRICKS,
            BlockKind::NetherBrickFence => BlockState::NETHER_BRICK_FENCE,
            BlockKind::NetherBrickStairs => BlockState::NETHER_BRICK_STAIRS,
            BlockKind::NetherWart => BlockState::NETHER_WART,
            BlockKind::EnchantingTable => BlockState::ENCHANTING_TABLE,
            BlockKind::BrewingStand => BlockState::BREWING_STAND,
            BlockKind::Cauldron => BlockState::CAULDRON,
            BlockKind::WaterCauldron => BlockState::WATER_CAULDRON,
            BlockKind::LavaCauldron => BlockState::LAVA_CAULDRON,
            BlockKind::PowderSnowCauldron => BlockState::POWDER_SNOW_CAULDRON,
            BlockKind::EndPortal => BlockState::END_PORTAL,
            BlockKind::EndPortalFrame => BlockState::END_PORTAL_FRAME,
            BlockKind::EndStone => BlockState::END_STONE,
            BlockKind::DragonEgg => BlockState::DRAGON_EGG,
            BlockKind::RedstoneLamp => BlockState::REDSTONE_LAMP,
            BlockKind::Cocoa => BlockState::COCOA,
            BlockKind::SandstoneStairs => BlockState::SANDSTONE_STAIRS,
            BlockKind::EmeraldOre => BlockState::EMERALD_ORE,
            BlockKind::DeepslateEmeraldOre => BlockState::DEEPSLATE_EMERALD_ORE,
            BlockKind::EnderChest => BlockState::ENDER_CHEST,
            BlockKind::TripwireHook => BlockState::TRIPWIRE_HOOK,
            BlockKind::Tripwire => BlockState::TRIPWIRE,
            BlockKind::EmeraldBlock => BlockState::EMERALD_BLOCK,
            BlockKind::SpruceStairs => BlockState::SPRUCE_STAIRS,
            BlockKind::BirchStairs => BlockState::BIRCH_STAIRS,
            BlockKind::JungleStairs => BlockState::JUNGLE_STAIRS,
            BlockKind::CommandBlock => BlockState::COMMAND_BLOCK,
            BlockKind::Beacon => BlockState::BEACON,
            BlockKind::CobblestoneWall => BlockState::COBBLESTONE_WALL,
            BlockKind::MossyCobblestoneWall => BlockState::MOSSY_COBBLESTONE_WALL,
            BlockKind::FlowerPot => BlockState::FLOWER_POT,
            BlockKind::PottedTorchflower => BlockState::POTTED_TORCHFLOWER,
            BlockKind::PottedOakSapling => BlockState::POTTED_OAK_SAPLING,
            BlockKind::PottedSpruceSapling => BlockState::POTTED_SPRUCE_SAPLING,
            BlockKind::PottedBirchSapling => BlockState::POTTED_BIRCH_SAPLING,
            BlockKind::PottedJungleSapling => BlockState::POTTED_JUNGLE_SAPLING,
            BlockKind::PottedAcaciaSapling => BlockState::POTTED_ACACIA_SAPLING,
            BlockKind::PottedCherrySapling => BlockState::POTTED_CHERRY_SAPLING,
            BlockKind::PottedDarkOakSapling => BlockState::POTTED_DARK_OAK_SAPLING,
            BlockKind::PottedMangrovePropagule => BlockState::POTTED_MANGROVE_PROPAGULE,
            BlockKind::PottedFern => BlockState::POTTED_FERN,
            BlockKind::PottedDandelion => BlockState::POTTED_DANDELION,
            BlockKind::PottedPoppy => BlockState::POTTED_POPPY,
            BlockKind::PottedBlueOrchid => BlockState::POTTED_BLUE_ORCHID,
            BlockKind::PottedAllium => BlockState::POTTED_ALLIUM,
            BlockKind::PottedAzureBluet => BlockState::POTTED_AZURE_BLUET,
            BlockKind::PottedRedTulip => BlockState::POTTED_RED_TULIP,
            BlockKind::PottedOrangeTulip => BlockState::POTTED_ORANGE_TULIP,
            BlockKind::PottedWhiteTulip => BlockState::POTTED_WHITE_TULIP,
            BlockKind::PottedPinkTulip => BlockState::POTTED_PINK_TULIP,
            BlockKind::PottedOxeyeDaisy => BlockState::POTTED_OXEYE_DAISY,
            BlockKind::PottedCornflower => BlockState::POTTED_CORNFLOWER,
            BlockKind::PottedLilyOfTheValley => BlockState::POTTED_LILY_OF_THE_VALLEY,
            BlockKind::PottedWitherRose => BlockState::POTTED_WITHER_ROSE,
            BlockKind::PottedRedMushroom => BlockState::POTTED_RED_MUSHROOM,
            BlockKind::PottedBrownMushroom => BlockState::POTTED_BROWN_MUSHROOM,
            BlockKind::PottedDeadBush => BlockState::POTTED_DEAD_BUSH,
            BlockKind::PottedCactus => BlockState::POTTED_CACTUS,
            BlockKind::Carrots => BlockState::CARROTS,
            BlockKind::Potatoes => BlockState::POTATOES,
            BlockKind::OakButton => BlockState::OAK_BUTTON,
            BlockKind::SpruceButton => BlockState::SPRUCE_BUTTON,
            BlockKind::BirchButton => BlockState::BIRCH_BUTTON,
            BlockKind::JungleButton => BlockState::JUNGLE_BUTTON,
            BlockKind::AcaciaButton => BlockState::ACACIA_BUTTON,
            BlockKind::CherryButton => BlockState::CHERRY_BUTTON,
            BlockKind::DarkOakButton => BlockState::DARK_OAK_BUTTON,
            BlockKind::MangroveButton => BlockState::MANGROVE_BUTTON,
            BlockKind::BambooButton => BlockState::BAMBOO_BUTTON,
            BlockKind::SkeletonSkull => BlockState::SKELETON_SKULL,
            BlockKind::SkeletonWallSkull => BlockState::SKELETON_WALL_SKULL,
            BlockKind::WitherSkeletonSkull => BlockState::WITHER_SKELETON_SKULL,
            BlockKind::WitherSkeletonWallSkull => BlockState::WITHER_SKELETON_WALL_SKULL,
            BlockKind::ZombieHead => BlockState::ZOMBIE_HEAD,
            BlockKind::ZombieWallHead => BlockState::ZOMBIE_WALL_HEAD,
            BlockKind::PlayerHead => BlockState::PLAYER_HEAD,
            BlockKind::PlayerWallHead => BlockState::PLAYER_WALL_HEAD,
            BlockKind::CreeperHead => BlockState::CREEPER_HEAD,
            BlockKind::CreeperWallHead => BlockState::CREEPER_WALL_HEAD,
            BlockKind::DragonHead => BlockState::DRAGON_HEAD,
            BlockKind::DragonWallHead => BlockState::DRAGON_WALL_HEAD,
            BlockKind::PiglinHead => BlockState::PIGLIN_HEAD,
            BlockKind::PiglinWallHead => BlockState::PIGLIN_WALL_HEAD,
            BlockKind::Anvil => BlockState::ANVIL,
            BlockKind::ChippedAnvil => BlockState::CHIPPED_ANVIL,
            BlockKind::DamagedAnvil => BlockState::DAMAGED_ANVIL,
            BlockKind::TrappedChest => BlockState::TRAPPED_CHEST,
            BlockKind::LightWeightedPressurePlate => BlockState::LIGHT_WEIGHTED_PRESSURE_PLATE,
            BlockKind::HeavyWeightedPressurePlate => BlockState::HEAVY_WEIGHTED_PRESSURE_PLATE,
            BlockKind::Comparator => BlockState::COMPARATOR,
            BlockKind::DaylightDetector => BlockState::DAYLIGHT_DETECTOR,
            BlockKind::RedstoneBlock => BlockState::REDSTONE_BLOCK,
            BlockKind::NetherQuartzOre => BlockState::NETHER_QUARTZ_ORE,
            BlockKind::Hopper => BlockState::HOPPER,
            BlockKind::QuartzBlock => BlockState::QUARTZ_BLOCK,
            BlockKind::ChiseledQuartzBlock => BlockState::CHISELED_QUARTZ_BLOCK,
            BlockKind::QuartzPillar => BlockState::QUARTZ_PILLAR,
            BlockKind::QuartzStairs => BlockState::QUARTZ_STAIRS,
            BlockKind::ActivatorRail => BlockState::ACTIVATOR_RAIL,
            BlockKind::Dropper => BlockState::DROPPER,
            BlockKind::WhiteTerracotta => BlockState::WHITE_TERRACOTTA,
            BlockKind::OrangeTerracotta => BlockState::ORANGE_TERRACOTTA,
            BlockKind::MagentaTerracotta => BlockState::MAGENTA_TERRACOTTA,
            BlockKind::LightBlueTerracotta => BlockState::LIGHT_BLUE_TERRACOTTA,
            BlockKind::YellowTerracotta => BlockState::YELLOW_TERRACOTTA,
            BlockKind::LimeTerracotta => BlockState::LIME_TERRACOTTA,
            BlockKind::PinkTerracotta => BlockState::PINK_TERRACOTTA,
            BlockKind::GrayTerracotta => BlockState::GRAY_TERRACOTTA,
            BlockKind::LightGrayTerracotta => BlockState::LIGHT_GRAY_TERRACOTTA,
            BlockKind::CyanTerracotta => BlockState::CYAN_TERRACOTTA,
            BlockKind::PurpleTerracotta => BlockState::PURPLE_TERRACOTTA,
            BlockKind::BlueTerracotta => BlockState::BLUE_TERRACOTTA,
            BlockKind::BrownTerracotta => BlockState::BROWN_TERRACOTTA,
            BlockKind::GreenTerracotta => BlockState::GREEN_TERRACOTTA,
            BlockKind::RedTerracotta => BlockState::RED_TERRACOTTA,
            BlockKind::BlackTerracotta => BlockState::BLACK_TERRACOTTA,
            BlockKind::WhiteStainedGlassPane => BlockState::WHITE_STAINED_GLASS_PANE,
            BlockKind::OrangeStainedGlassPane => BlockState::ORANGE_STAINED_GLASS_PANE,
            BlockKind::MagentaStainedGlassPane => BlockState::MAGENTA_STAINED_GLASS_PANE,
            BlockKind::LightBlueStainedGlassPane => BlockState::LIGHT_BLUE_STAINED_GLASS_PANE,
            BlockKind::YellowStainedGlassPane => BlockState::YELLOW_STAINED_GLASS_PANE,
            BlockKind::LimeStainedGlassPane => BlockState::LIME_STAINED_GLASS_PANE,
            BlockKind::PinkStainedGlassPane => BlockState::PINK_STAINED_GLASS_PANE,
            BlockKind::GrayStainedGlassPane => BlockState::GRAY_STAINED_GLASS_PANE,
            BlockKind::LightGrayStainedGlassPane => BlockState::LIGHT_GRAY_STAINED_GLASS_PANE,
            BlockKind::CyanStainedGlassPane => BlockState::CYAN_STAINED_GLASS_PANE,
            BlockKind::PurpleStainedGlassPane => BlockState::PURPLE_STAINED_GLASS_PANE,
            BlockKind::BlueStainedGlassPane => BlockState::BLUE_STAINED_GLASS_PANE,
            BlockKind::BrownStainedGlassPane => BlockState::BROWN_STAINED_GLASS_PANE,
            BlockKind::GreenStainedGlassPane => BlockState::GREEN_STAINED_GLASS_PANE,
            BlockKind::RedStainedGlassPane => BlockState::RED_STAINED_GLASS_PANE,
            BlockKind::BlackStainedGlassPane => BlockState::BLACK_STAINED_GLASS_PANE,
            BlockKind::AcaciaStairs => BlockState::ACACIA_STAIRS,
            BlockKind::CherryStairs => BlockState::CHERRY_STAIRS,
            BlockKind::DarkOakStairs => BlockState::DARK_OAK_STAIRS,
            BlockKind::MangroveStairs => BlockState::MANGROVE_STAIRS,
            BlockKind::BambooStairs => BlockState::BAMBOO_STAIRS,
            BlockKind::BambooMosaicStairs => BlockState::BAMBOO_MOSAIC_STAIRS,
            BlockKind::SlimeBlock => BlockState::SLIME_BLOCK,
            BlockKind::Barrier => BlockState::BARRIER,
            BlockKind::Light => BlockState::LIGHT,
            BlockKind::IronTrapdoor => BlockState::IRON_TRAPDOOR,
            BlockKind::Prismarine => BlockState::PRISMARINE,
            BlockKind::PrismarineBricks => BlockState::PRISMARINE_BRICKS,
            BlockKind::DarkPrismarine => BlockState::DARK_PRISMARINE,
            BlockKind::PrismarineStairs => BlockState::PRISMARINE_STAIRS,
            BlockKind::PrismarineBrickStairs => BlockState::PRISMARINE_BRICK_STAIRS,
            BlockKind::DarkPrismarineStairs => BlockState::DARK_PRISMARINE_STAIRS,
            BlockKind::PrismarineSlab => BlockState::PRISMARINE_SLAB,
            BlockKind::PrismarineBrickSlab => BlockState::PRISMARINE_BRICK_SLAB,
            BlockKind::DarkPrismarineSlab => BlockState::DARK_PRISMARINE_SLAB,
            BlockKind::SeaLantern => BlockState::SEA_LANTERN,
            BlockKind::HayBlock => BlockState::HAY_BLOCK,
            BlockKind::WhiteCarpet => BlockState::WHITE_CARPET,
            BlockKind::OrangeCarpet => BlockState::ORANGE_CARPET,
            BlockKind::MagentaCarpet => BlockState::MAGENTA_CARPET,
            BlockKind::LightBlueCarpet => BlockState::LIGHT_BLUE_CARPET,
            BlockKind::YellowCarpet => BlockState::YELLOW_CARPET,
            BlockKind::LimeCarpet => BlockState::LIME_CARPET,
            BlockKind::PinkCarpet => BlockState::PINK_CARPET,
            BlockKind::GrayCarpet => BlockState::GRAY_CARPET,
            BlockKind::LightGrayCarpet => BlockState::LIGHT_GRAY_CARPET,
            BlockKind::CyanCarpet => BlockState::CYAN_CARPET,
            BlockKind::PurpleCarpet => BlockState::PURPLE_CARPET,
            BlockKind::BlueCarpet => BlockState::BLUE_CARPET,
            BlockKind::BrownCarpet => BlockState::BROWN_CARPET,
            BlockKind::GreenCarpet => BlockState::GREEN_CARPET,
            BlockKind::RedCarpet => BlockState::RED_CARPET,
            BlockKind::BlackCarpet => BlockState::BLACK_CARPET,
            BlockKind::Terracotta => BlockState::TERRACOTTA,
            BlockKind::CoalBlock => BlockState::COAL_BLOCK,
            BlockKind::PackedIce => BlockState::PACKED_ICE,
            BlockKind::Sunflower => BlockState::SUNFLOWER,
            BlockKind::Lilac => BlockState::LILAC,
            BlockKind::RoseBush => BlockState::ROSE_BUSH,
            BlockKind::Peony => BlockState::PEONY,
            BlockKind::TallGrass => BlockState::TALL_GRASS,
            BlockKind::LargeFern => BlockState::LARGE_FERN,
            BlockKind::WhiteBanner => BlockState::WHITE_BANNER,
            BlockKind::OrangeBanner => BlockState::ORANGE_BANNER,
            BlockKind::MagentaBanner => BlockState::MAGENTA_BANNER,
            BlockKind::LightBlueBanner => BlockState::LIGHT_BLUE_BANNER,
            BlockKind::YellowBanner => BlockState::YELLOW_BANNER,
            BlockKind::LimeBanner => BlockState::LIME_BANNER,
            BlockKind::PinkBanner => BlockState::PINK_BANNER,
            BlockKind::GrayBanner => BlockState::GRAY_BANNER,
            BlockKind::LightGrayBanner => BlockState::LIGHT_GRAY_BANNER,
            BlockKind::CyanBanner => BlockState::CYAN_BANNER,
            BlockKind::PurpleBanner => BlockState::PURPLE_BANNER,
            BlockKind::BlueBanner => BlockState::BLUE_BANNER,
            BlockKind::BrownBanner => BlockState::BROWN_BANNER,
            BlockKind::GreenBanner => BlockState::GREEN_BANNER,
            BlockKind::RedBanner => BlockState::RED_BANNER,
            BlockKind::BlackBanner => BlockState::BLACK_BANNER,
            BlockKind::WhiteWallBanner => BlockState::WHITE_WALL_BANNER,
            BlockKind::OrangeWallBanner => BlockState::ORANGE_WALL_BANNER,
            BlockKind::MagentaWallBanner => BlockState::MAGENTA_WALL_BANNER,
            BlockKind::LightBlueWallBanner => BlockState::LIGHT_BLUE_WALL_BANNER,
            BlockKind::YellowWallBanner => BlockState::YELLOW_WALL_BANNER,
            BlockKind::LimeWallBanner => BlockState::LIME_WALL_BANNER,
            BlockKind::PinkWallBanner => BlockState::PINK_WALL_BANNER,
            BlockKind::GrayWallBanner => BlockState::GRAY_WALL_BANNER,
            BlockKind::LightGrayWallBanner => BlockState::LIGHT_GRAY_WALL_BANNER,
            BlockKind::CyanWallBanner => BlockState::CYAN_WALL_BANNER,
            BlockKind::PurpleWallBanner => BlockState::PURPLE_WALL_BANNER,
            BlockKind::BlueWallBanner => BlockState::BLUE_WALL_BANNER,
            BlockKind::BrownWallBanner => BlockState::BROWN_WALL_BANNER,
            BlockKind::GreenWallBanner => BlockState::GREEN_WALL_BANNER,
            BlockKind::RedWallBanner => BlockState::RED_WALL_BANNER,
            BlockKind::BlackWallBanner => BlockState::BLACK_WALL_BANNER,
            BlockKind::RedSandstone => BlockState::RED_SANDSTONE,
            BlockKind::ChiseledRedSandstone => BlockState::CHISELED_RED_SANDSTONE,
            BlockKind::CutRedSandstone => BlockState::CUT_RED_SANDSTONE,
            BlockKind::RedSandstoneStairs => BlockState::RED_SANDSTONE_STAIRS,
            BlockKind::OakSlab => BlockState::OAK_SLAB,
            BlockKind::SpruceSlab => BlockState::SPRUCE_SLAB,
            BlockKind::BirchSlab => BlockState::BIRCH_SLAB,
            BlockKind::JungleSlab => BlockState::JUNGLE_SLAB,
            BlockKind::AcaciaSlab => BlockState::ACACIA_SLAB,
            BlockKind::CherrySlab => BlockState::CHERRY_SLAB,
            BlockKind::DarkOakSlab => BlockState::DARK_OAK_SLAB,
            BlockKind::MangroveSlab => BlockState::MANGROVE_SLAB,
            BlockKind::BambooSlab => BlockState::BAMBOO_SLAB,
            BlockKind::BambooMosaicSlab => BlockState::BAMBOO_MOSAIC_SLAB,
            BlockKind::StoneSlab => BlockState::STONE_SLAB,
            BlockKind::SmoothStoneSlab => BlockState::SMOOTH_STONE_SLAB,
            BlockKind::SandstoneSlab => BlockState::SANDSTONE_SLAB,
            BlockKind::CutSandstoneSlab => BlockState::CUT_SANDSTONE_SLAB,
            BlockKind::PetrifiedOakSlab => BlockState::PETRIFIED_OAK_SLAB,
            BlockKind::CobblestoneSlab => BlockState::COBBLESTONE_SLAB,
            BlockKind::BrickSlab => BlockState::BRICK_SLAB,
            BlockKind::StoneBrickSlab => BlockState::STONE_BRICK_SLAB,
            BlockKind::MudBrickSlab => BlockState::MUD_BRICK_SLAB,
            BlockKind::NetherBrickSlab => BlockState::NETHER_BRICK_SLAB,
            BlockKind::QuartzSlab => BlockState::QUARTZ_SLAB,
            BlockKind::RedSandstoneSlab => BlockState::RED_SANDSTONE_SLAB,
            BlockKind::CutRedSandstoneSlab => BlockState::CUT_RED_SANDSTONE_SLAB,
            BlockKind::PurpurSlab => BlockState::PURPUR_SLAB,
            BlockKind::SmoothStone => BlockState::SMOOTH_STONE,
            BlockKind::SmoothSandstone => BlockState::SMOOTH_SANDSTONE,
            BlockKind::SmoothQuartz => BlockState::SMOOTH_QUARTZ,
            BlockKind::SmoothRedSandstone => BlockState::SMOOTH_RED_SANDSTONE,
            BlockKind::SpruceFenceGate => BlockState::SPRUCE_FENCE_GATE,
            BlockKind::BirchFenceGate => BlockState::BIRCH_FENCE_GATE,
            BlockKind::JungleFenceGate => BlockState::JUNGLE_FENCE_GATE,
            BlockKind::AcaciaFenceGate => BlockState::ACACIA_FENCE_GATE,
            BlockKind::CherryFenceGate => BlockState::CHERRY_FENCE_GATE,
            BlockKind::DarkOakFenceGate => BlockState::DARK_OAK_FENCE_GATE,
            BlockKind::MangroveFenceGate => BlockState::MANGROVE_FENCE_GATE,
            BlockKind::BambooFenceGate => BlockState::BAMBOO_FENCE_GATE,
            BlockKind::SpruceFence => BlockState::SPRUCE_FENCE,
            BlockKind::BirchFence => BlockState::BIRCH_FENCE,
            BlockKind::JungleFence => BlockState::JUNGLE_FENCE,
            BlockKind::AcaciaFence => BlockState::ACACIA_FENCE,
            BlockKind::CherryFence => BlockState::CHERRY_FENCE,
            BlockKind::DarkOakFence => BlockState::DARK_OAK_FENCE,
            BlockKind::MangroveFence => BlockState::MANGROVE_FENCE,
            BlockKind::BambooFence => BlockState::BAMBOO_FENCE,
            BlockKind::SpruceDoor => BlockState::SPRUCE_DOOR,
            BlockKind::BirchDoor => BlockState::BIRCH_DOOR,
            BlockKind::JungleDoor => BlockState::JUNGLE_DOOR,
            BlockKind::AcaciaDoor => BlockState::ACACIA_DOOR,
            BlockKind::CherryDoor => BlockState::CHERRY_DOOR,
            BlockKind::DarkOakDoor => BlockState::DARK_OAK_DOOR,
            BlockKind::MangroveDoor => BlockState::MANGROVE_DOOR,
            BlockKind::BambooDoor => BlockState::BAMBOO_DOOR,
            BlockKind::EndRod => BlockState::END_ROD,
            BlockKind::ChorusPlant => BlockState::CHORUS_PLANT,
            BlockKind::ChorusFlower => BlockState::CHORUS_FLOWER,
            BlockKind::PurpurBlock => BlockState::PURPUR_BLOCK,
            BlockKind::PurpurPillar => BlockState::PURPUR_PILLAR,
            BlockKind::PurpurStairs => BlockState::PURPUR_STAIRS,
            BlockKind::EndStoneBricks => BlockState::END_STONE_BRICKS,
            BlockKind::TorchflowerCrop => BlockState::TORCHFLOWER_CROP,
            BlockKind::PitcherCrop => BlockState::PITCHER_CROP,
            BlockKind::PitcherPlant => BlockState::PITCHER_PLANT,
            BlockKind::Beetroots => BlockState::BEETROOTS,
            BlockKind::DirtPath => BlockState::DIRT_PATH,
            BlockKind::EndGateway => BlockState::END_GATEWAY,
            BlockKind::RepeatingCommandBlock => BlockState::REPEATING_COMMAND_BLOCK,
            BlockKind::ChainCommandBlock => BlockState::CHAIN_COMMAND_BLOCK,
            BlockKind::FrostedIce => BlockState::FROSTED_ICE,
            BlockKind::MagmaBlock => BlockState::MAGMA_BLOCK,
            BlockKind::NetherWartBlock => BlockState::NETHER_WART_BLOCK,
            BlockKind::RedNetherBricks => BlockState::RED_NETHER_BRICKS,
            BlockKind::BoneBlock => BlockState::BONE_BLOCK,
            BlockKind::StructureVoid => BlockState::STRUCTURE_VOID,
            BlockKind::Observer => BlockState::OBSERVER,
            BlockKind::ShulkerBox => BlockState::SHULKER_BOX,
            BlockKind::WhiteShulkerBox => BlockState::WHITE_SHULKER_BOX,
            BlockKind::OrangeShulkerBox => BlockState::ORANGE_SHULKER_BOX,
            BlockKind::MagentaShulkerBox => BlockState::MAGENTA_SHULKER_BOX,
            BlockKind::LightBlueShulkerBox => BlockState::LIGHT_BLUE_SHULKER_BOX,
            BlockKind::YellowShulkerBox => BlockState::YELLOW_SHULKER_BOX,
            BlockKind::LimeShulkerBox => BlockState::LIME_SHULKER_BOX,
            BlockKind::PinkShulkerBox => BlockState::PINK_SHULKER_BOX,
            BlockKind::GrayShulkerBox => BlockState::GRAY_SHULKER_BOX,
            BlockKind::LightGrayShulkerBox => BlockState::LIGHT_GRAY_SHULKER_BOX,
            BlockKind::CyanShulkerBox => BlockState::CYAN_SHULKER_BOX,
            BlockKind::PurpleShulkerBox => BlockState::PURPLE_SHULKER_BOX,
            BlockKind::BlueShulkerBox => BlockState::BLUE_SHULKER_BOX,
            BlockKind::BrownShulkerBox => BlockState::BROWN_SHULKER_BOX,
            BlockKind::GreenShulkerBox => BlockState::GREEN_SHULKER_BOX,
            BlockKind::RedShulkerBox => BlockState::RED_SHULKER_BOX,
            BlockKind::BlackShulkerBox => BlockState::BLACK_SHULKER_BOX,
            BlockKind::WhiteGlazedTerracotta => BlockState::WHITE_GLAZED_TERRACOTTA,
            BlockKind::OrangeGlazedTerracotta => BlockState::ORANGE_GLAZED_TERRACOTTA,
            BlockKind::MagentaGlazedTerracotta => BlockState::MAGENTA_GLAZED_TERRACOTTA,
            BlockKind::LightBlueGlazedTerracotta => BlockState::LIGHT_BLUE_GLAZED_TERRACOTTA,
            BlockKind::YellowGlazedTerracotta => BlockState::YELLOW_GLAZED_TERRACOTTA,
            BlockKind::LimeGlazedTerracotta => BlockState::LIME_GLAZED_TERRACOTTA,
            BlockKind::PinkGlazedTerracotta => BlockState::PINK_GLAZED_TERRACOTTA,
            BlockKind::GrayGlazedTerracotta => BlockState::GRAY_GLAZED_TERRACOTTA,
            BlockKind::LightGrayGlazedTerracotta => BlockState::LIGHT_GRAY_GLAZED_TERRACOTTA,
            BlockKind::CyanGlazedTerracotta => BlockState::CYAN_GLAZED_TERRACOTTA,
            BlockKind::PurpleGlazedTerracotta => BlockState::PURPLE_GLAZED_TERRACOTTA,
            BlockKind::BlueGlazedTerracotta => BlockState::BLUE_GLAZED_TERRACOTTA,
            BlockKind::BrownGlazedTerracotta => BlockState::BROWN_GLAZED_TERRACOTTA,
            BlockKind::GreenGlazedTerracotta => BlockState::GREEN_GLAZED_TERRACOTTA,
            BlockKind::RedGlazedTerracotta => BlockState::RED_GLAZED_TERRACOTTA,
            BlockKind::BlackGlazedTerracotta => BlockState::BLACK_GLAZED_TERRACOTTA,
            BlockKind::WhiteConcrete => BlockState::WHITE_CONCRETE,
            BlockKind::OrangeConcrete => BlockState::ORANGE_CONCRETE,
            BlockKind::MagentaConcrete => BlockState::MAGENTA_CONCRETE,
            BlockKind::LightBlueConcrete => BlockState::LIGHT_BLUE_CONCRETE,
            BlockKind::YellowConcrete => BlockState::YELLOW_CONCRETE,
            BlockKind::LimeConcrete => BlockState::LIME_CONCRETE,
            BlockKind::PinkConcrete => BlockState::PINK_CONCRETE,
            BlockKind::GrayConcrete => BlockState::GRAY_CONCRETE,
            BlockKind::LightGrayConcrete => BlockState::LIGHT_GRAY_CONCRETE,
            BlockKind::CyanConcrete => BlockState::CYAN_CONCRETE,
            BlockKind::PurpleConcrete => BlockState::PURPLE_CONCRETE,
            BlockKind::BlueConcrete => BlockState::BLUE_CONCRETE,
            BlockKind::BrownConcrete => BlockState::BROWN_CONCRETE,
            BlockKind::GreenConcrete => BlockState::GREEN_CONCRETE,
            BlockKind::RedConcrete => BlockState::RED_CONCRETE,
            BlockKind::BlackConcrete => BlockState::BLACK_CONCRETE,
            BlockKind::WhiteConcretePowder => BlockState::WHITE_CONCRETE_POWDER,
            BlockKind::OrangeConcretePowder => BlockState::ORANGE_CONCRETE_POWDER,
            BlockKind::MagentaConcretePowder => BlockState::MAGENTA_CONCRETE_POWDER,
            BlockKind::LightBlueConcretePowder => BlockState::LIGHT_BLUE_CONCRETE_POWDER,
            BlockKind::YellowConcretePowder => BlockState::YELLOW_CONCRETE_POWDER,
            BlockKind::LimeConcretePowder => BlockState::LIME_CONCRETE_POWDER,
            BlockKind::PinkConcretePowder => BlockState::PINK_CONCRETE_POWDER,
            BlockKind::GrayConcretePowder => BlockState::GRAY_CONCRETE_POWDER,
            BlockKind::LightGrayConcretePowder => BlockState::LIGHT_GRAY_CONCRETE_POWDER,
            BlockKind::CyanConcretePowder => BlockState::CYAN_CONCRETE_POWDER,
            BlockKind::PurpleConcretePowder => BlockState::PURPLE_CONCRETE_POWDER,
            BlockKind::BlueConcretePowder => BlockState::BLUE_CONCRETE_POWDER,
            BlockKind::BrownConcretePowder => BlockState::BROWN_CONCRETE_POWDER,
            BlockKind::GreenConcretePowder => BlockState::GREEN_CONCRETE_POWDER,
            BlockKind::RedConcretePowder => BlockState::RED_CONCRETE_POWDER,
            BlockKind::BlackConcretePowder => BlockState::BLACK_CONCRETE_POWDER,
            BlockKind::Kelp => BlockState::KELP,
            BlockKind::KelpPlant => BlockState::KELP_PLANT,
            BlockKind::DriedKelpBlock => BlockState::DRIED_KELP_BLOCK,
            BlockKind::TurtleEgg => BlockState::TURTLE_EGG,
            BlockKind::SnifferEgg => BlockState::SNIFFER_EGG,
            BlockKind::DeadTubeCoralBlock => BlockState::DEAD_TUBE_CORAL_BLOCK,
            BlockKind::DeadBrainCoralBlock => BlockState::DEAD_BRAIN_CORAL_BLOCK,
            BlockKind::DeadBubbleCoralBlock => BlockState::DEAD_BUBBLE_CORAL_BLOCK,
            BlockKind::DeadFireCoralBlock => BlockState::DEAD_FIRE_CORAL_BLOCK,
            BlockKind::DeadHornCoralBlock => BlockState::DEAD_HORN_CORAL_BLOCK,
            BlockKind::TubeCoralBlock => BlockState::TUBE_CORAL_BLOCK,
            BlockKind::BrainCoralBlock => BlockState::BRAIN_CORAL_BLOCK,
            BlockKind::BubbleCoralBlock => BlockState::BUBBLE_CORAL_BLOCK,
            BlockKind::FireCoralBlock => BlockState::FIRE_CORAL_BLOCK,
            BlockKind::HornCoralBlock => BlockState::HORN_CORAL_BLOCK,
            BlockKind::DeadTubeCoral => BlockState::DEAD_TUBE_CORAL,
            BlockKind::DeadBrainCoral => BlockState::DEAD_BRAIN_CORAL,
            BlockKind::DeadBubbleCoral => BlockState::DEAD_BUBBLE_CORAL,
            BlockKind::DeadFireCoral => BlockState::DEAD_FIRE_CORAL,
            BlockKind::DeadHornCoral => BlockState::DEAD_HORN_CORAL,
            BlockKind::TubeCoral => BlockState::TUBE_CORAL,
            BlockKind::BrainCoral => BlockState::BRAIN_CORAL,
            BlockKind::BubbleCoral => BlockState::BUBBLE_CORAL,
            BlockKind::FireCoral => BlockState::FIRE_CORAL,
            BlockKind::HornCoral => BlockState::HORN_CORAL,
            BlockKind::DeadTubeCoralFan => BlockState::DEAD_TUBE_CORAL_FAN,
            BlockKind::DeadBrainCoralFan => BlockState::DEAD_BRAIN_CORAL_FAN,
            BlockKind::DeadBubbleCoralFan => BlockState::DEAD_BUBBLE_CORAL_FAN,
            BlockKind::DeadFireCoralFan => BlockState::DEAD_FIRE_CORAL_FAN,
            BlockKind::DeadHornCoralFan => BlockState::DEAD_HORN_CORAL_FAN,
            BlockKind::TubeCoralFan => BlockState::TUBE_CORAL_FAN,
            BlockKind::BrainCoralFan => BlockState::BRAIN_CORAL_FAN,
            BlockKind::BubbleCoralFan => BlockState::BUBBLE_CORAL_FAN,
            BlockKind::FireCoralFan => BlockState::FIRE_CORAL_FAN,
            BlockKind::HornCoralFan => BlockState::HORN_CORAL_FAN,
            BlockKind::DeadTubeCoralWallFan => BlockState::DEAD_TUBE_CORAL_WALL_FAN,
            BlockKind::DeadBrainCoralWallFan => BlockState::DEAD_BRAIN_CORAL_WALL_FAN,
            BlockKind::DeadBubbleCoralWallFan => BlockState::DEAD_BUBBLE_CORAL_WALL_FAN,
            BlockKind::DeadFireCoralWallFan => BlockState::DEAD_FIRE_CORAL_WALL_FAN,
            BlockKind::DeadHornCoralWallFan => BlockState::DEAD_HORN_CORAL_WALL_FAN,
            BlockKind::TubeCoralWallFan => BlockState::TUBE_CORAL_WALL_FAN,
            BlockKind::BrainCoralWallFan => BlockState::BRAIN_CORAL_WALL_FAN,
            BlockKind::BubbleCoralWallFan => BlockState::BUBBLE_CORAL_WALL_FAN,
            BlockKind::FireCoralWallFan => BlockState::FIRE_CORAL_WALL_FAN,
            BlockKind::HornCoralWallFan => BlockState::HORN_CORAL_WALL_FAN,
            BlockKind::SeaPickle => BlockState::SEA_PICKLE,
            BlockKind::BlueIce => BlockState::BLUE_ICE,
            BlockKind::Conduit => BlockState::CONDUIT,
            BlockKind::BambooSapling => BlockState::BAMBOO_SAPLING,
            BlockKind::Bamboo => BlockState::BAMBOO,
            BlockKind::PottedBamboo => BlockState::POTTED_BAMBOO,
            BlockKind::VoidAir => BlockState::VOID_AIR,
            BlockKind::CaveAir => BlockState::CAVE_AIR,
            BlockKind::BubbleColumn => BlockState::BUBBLE_COLUMN,
            BlockKind::PolishedGraniteStairs => BlockState::POLISHED_GRANITE_STAIRS,
            BlockKind::SmoothRedSandstoneStairs => BlockState::SMOOTH_RED_SANDSTONE_STAIRS,
            BlockKind::MossyStoneBrickStairs => BlockState::MOSSY_STONE_BRICK_STAIRS,
            BlockKind::PolishedDioriteStairs => BlockState::POLISHED_DIORITE_STAIRS,
            BlockKind::MossyCobblestoneStairs => BlockState::MOSSY_COBBLESTONE_STAIRS,
            BlockKind::EndStoneBrickStairs => BlockState::END_STONE_BRICK_STAIRS,
            BlockKind::StoneStairs => BlockState::STONE_STAIRS,
            BlockKind::SmoothSandstoneStairs => BlockState::SMOOTH_SANDSTONE_STAIRS,
            BlockKind::SmoothQuartzStairs => BlockState::SMOOTH_QUARTZ_STAIRS,
            BlockKind::GraniteStairs => BlockState::GRANITE_STAIRS,
            BlockKind::AndesiteStairs => BlockState::ANDESITE_STAIRS,
            BlockKind::RedNetherBrickStairs => BlockState::RED_NETHER_BRICK_STAIRS,
            BlockKind::PolishedAndesiteStairs => BlockState::POLISHED_ANDESITE_STAIRS,
            BlockKind::DioriteStairs => BlockState::DIORITE_STAIRS,
            BlockKind::PolishedGraniteSlab => BlockState::POLISHED_GRANITE_SLAB,
            BlockKind::SmoothRedSandstoneSlab => BlockState::SMOOTH_RED_SANDSTONE_SLAB,
            BlockKind::MossyStoneBrickSlab => BlockState::MOSSY_STONE_BRICK_SLAB,
            BlockKind::PolishedDioriteSlab => BlockState::POLISHED_DIORITE_SLAB,
            BlockKind::MossyCobblestoneSlab => BlockState::MOSSY_COBBLESTONE_SLAB,
            BlockKind::EndStoneBrickSlab => BlockState::END_STONE_BRICK_SLAB,
            BlockKind::SmoothSandstoneSlab => BlockState::SMOOTH_SANDSTONE_SLAB,
            BlockKind::SmoothQuartzSlab => BlockState::SMOOTH_QUARTZ_SLAB,
            BlockKind::GraniteSlab => BlockState::GRANITE_SLAB,
            BlockKind::AndesiteSlab => BlockState::ANDESITE_SLAB,
            BlockKind::RedNetherBrickSlab => BlockState::RED_NETHER_BRICK_SLAB,
            BlockKind::PolishedAndesiteSlab => BlockState::POLISHED_ANDESITE_SLAB,
            BlockKind::DioriteSlab => BlockState::DIORITE_SLAB,
            BlockKind::BrickWall => BlockState::BRICK_WALL,
            BlockKind::PrismarineWall => BlockState::PRISMARINE_WALL,
            BlockKind::RedSandstoneWall => BlockState::RED_SANDSTONE_WALL,
            BlockKind::MossyStoneBrickWall => BlockState::MOSSY_STONE_BRICK_WALL,
            BlockKind::GraniteWall => BlockState::GRANITE_WALL,
            BlockKind::StoneBrickWall => BlockState::STONE_BRICK_WALL,
            BlockKind::MudBrickWall => BlockState::MUD_BRICK_WALL,
            BlockKind::NetherBrickWall => BlockState::NETHER_BRICK_WALL,
            BlockKind::AndesiteWall => BlockState::ANDESITE_WALL,
            BlockKind::RedNetherBrickWall => BlockState::RED_NETHER_BRICK_WALL,
            BlockKind::SandstoneWall => BlockState::SANDSTONE_WALL,
            BlockKind::EndStoneBrickWall => BlockState::END_STONE_BRICK_WALL,
            BlockKind::DioriteWall => BlockState::DIORITE_WALL,
            BlockKind::Scaffolding => BlockState::SCAFFOLDING,
            BlockKind::Loom => BlockState::LOOM,
            BlockKind::Barrel => BlockState::BARREL,
            BlockKind::Smoker => BlockState::SMOKER,
            BlockKind::BlastFurnace => BlockState::BLAST_FURNACE,
            BlockKind::CartographyTable => BlockState::CARTOGRAPHY_TABLE,
            BlockKind::FletchingTable => BlockState::FLETCHING_TABLE,
            BlockKind::Grindstone => BlockState::GRINDSTONE,
            BlockKind::Lectern => BlockState::LECTERN,
            BlockKind::SmithingTable => BlockState::SMITHING_TABLE,
            BlockKind::Stonecutter => BlockState::STONECUTTER,
            BlockKind::Bell => BlockState::BELL,
            BlockKind::Lantern => BlockState::LANTERN,
            BlockKind::SoulLantern => BlockState::SOUL_LANTERN,
            BlockKind::Campfire => BlockState::CAMPFIRE,
            BlockKind::SoulCampfire => BlockState::SOUL_CAMPFIRE,
            BlockKind::SweetBerryBush => BlockState::SWEET_BERRY_BUSH,
            BlockKind::WarpedStem => BlockState::WARPED_STEM,
            BlockKind::StrippedWarpedStem => BlockState::STRIPPED_WARPED_STEM,
            BlockKind::WarpedHyphae => BlockState::WARPED_HYPHAE,
            BlockKind::StrippedWarpedHyphae => BlockState::STRIPPED_WARPED_HYPHAE,
            BlockKind::WarpedNylium => BlockState::WARPED_NYLIUM,
            BlockKind::WarpedFungus => BlockState::WARPED_FUNGUS,
            BlockKind::WarpedWartBlock => BlockState::WARPED_WART_BLOCK,
            BlockKind::WarpedRoots => BlockState::WARPED_ROOTS,
            BlockKind::NetherSprouts => BlockState::NETHER_SPROUTS,
            BlockKind::CrimsonStem => BlockState::CRIMSON_STEM,
            BlockKind::StrippedCrimsonStem => BlockState::STRIPPED_CRIMSON_STEM,
            BlockKind::CrimsonHyphae => BlockState::CRIMSON_HYPHAE,
            BlockKind::StrippedCrimsonHyphae => BlockState::STRIPPED_CRIMSON_HYPHAE,
            BlockKind::CrimsonNylium => BlockState::CRIMSON_NYLIUM,
            BlockKind::CrimsonFungus => BlockState::CRIMSON_FUNGUS,
            BlockKind::Shroomlight => BlockState::SHROOMLIGHT,
            BlockKind::WeepingVines => BlockState::WEEPING_VINES,
            BlockKind::WeepingVinesPlant => BlockState::WEEPING_VINES_PLANT,
            BlockKind::TwistingVines => BlockState::TWISTING_VINES,
            BlockKind::TwistingVinesPlant => BlockState::TWISTING_VINES_PLANT,
            BlockKind::CrimsonRoots => BlockState::CRIMSON_ROOTS,
            BlockKind::CrimsonPlanks => BlockState::CRIMSON_PLANKS,
            BlockKind::WarpedPlanks => BlockState::WARPED_PLANKS,
            BlockKind::CrimsonSlab => BlockState::CRIMSON_SLAB,
            BlockKind::WarpedSlab => BlockState::WARPED_SLAB,
            BlockKind::CrimsonPressurePlate => BlockState::CRIMSON_PRESSURE_PLATE,
            BlockKind::WarpedPressurePlate => BlockState::WARPED_PRESSURE_PLATE,
            BlockKind::CrimsonFence => BlockState::CRIMSON_FENCE,
            BlockKind::WarpedFence => BlockState::WARPED_FENCE,
            BlockKind::CrimsonTrapdoor => BlockState::CRIMSON_TRAPDOOR,
            BlockKind::WarpedTrapdoor => BlockState::WARPED_TRAPDOOR,
            BlockKind::CrimsonFenceGate => BlockState::CRIMSON_FENCE_GATE,
            BlockKind::WarpedFenceGate => BlockState::WARPED_FENCE_GATE,
            BlockKind::CrimsonStairs => BlockState::CRIMSON_STAIRS,
            BlockKind::WarpedStairs => BlockState::WARPED_STAIRS,
            BlockKind::CrimsonButton => BlockState::CRIMSON_BUTTON,
            BlockKind::WarpedButton => BlockState::WARPED_BUTTON,
            BlockKind::CrimsonDoor => BlockState::CRIMSON_DOOR,
            BlockKind::WarpedDoor => BlockState::WARPED_DOOR,
            BlockKind::CrimsonSign => BlockState::CRIMSON_SIGN,
            BlockKind::WarpedSign => BlockState::WARPED_SIGN,
            BlockKind::CrimsonWallSign => BlockState::CRIMSON_WALL_SIGN,
            BlockKind::WarpedWallSign => BlockState::WARPED_WALL_SIGN,
            BlockKind::StructureBlock => BlockState::STRUCTURE_BLOCK,
            BlockKind::Jigsaw => BlockState::JIGSAW,
            BlockKind::Composter => BlockState::COMPOSTER,
            BlockKind::Target => BlockState::TARGET,
            BlockKind::BeeNest => BlockState::BEE_NEST,
            BlockKind::Beehive => BlockState::BEEHIVE,
            BlockKind::HoneyBlock => BlockState::HONEY_BLOCK,
            BlockKind::HoneycombBlock => BlockState::HONEYCOMB_BLOCK,
            BlockKind::NetheriteBlock => BlockState::NETHERITE_BLOCK,
            BlockKind::AncientDebris => BlockState::ANCIENT_DEBRIS,
            BlockKind::CryingObsidian => BlockState::CRYING_OBSIDIAN,
            BlockKind::RespawnAnchor => BlockState::RESPAWN_ANCHOR,
            BlockKind::PottedCrimsonFungus => BlockState::POTTED_CRIMSON_FUNGUS,
            BlockKind::PottedWarpedFungus => BlockState::POTTED_WARPED_FUNGUS,
            BlockKind::PottedCrimsonRoots => BlockState::POTTED_CRIMSON_ROOTS,
            BlockKind::PottedWarpedRoots => BlockState::POTTED_WARPED_ROOTS,
            BlockKind::Lodestone => BlockState::LODESTONE,
            BlockKind::Blackstone => BlockState::BLACKSTONE,
            BlockKind::BlackstoneStairs => BlockState::BLACKSTONE_STAIRS,
            BlockKind::BlackstoneWall => BlockState::BLACKSTONE_WALL,
            BlockKind::BlackstoneSlab => BlockState::BLACKSTONE_SLAB,
            BlockKind::PolishedBlackstone => BlockState::POLISHED_BLACKSTONE,
            BlockKind::PolishedBlackstoneBricks => BlockState::POLISHED_BLACKSTONE_BRICKS,
            BlockKind::CrackedPolishedBlackstoneBricks => {
                BlockState::CRACKED_POLISHED_BLACKSTONE_BRICKS
            }
            BlockKind::ChiseledPolishedBlackstone => BlockState::CHISELED_POLISHED_BLACKSTONE,
            BlockKind::PolishedBlackstoneBrickSlab => BlockState::POLISHED_BLACKSTONE_BRICK_SLAB,
            BlockKind::PolishedBlackstoneBrickStairs => {
                BlockState::POLISHED_BLACKSTONE_BRICK_STAIRS
            }
            BlockKind::PolishedBlackstoneBrickWall => BlockState::POLISHED_BLACKSTONE_BRICK_WALL,
            BlockKind::GildedBlackstone => BlockState::GILDED_BLACKSTONE,
            BlockKind::PolishedBlackstoneStairs => BlockState::POLISHED_BLACKSTONE_STAIRS,
            BlockKind::PolishedBlackstoneSlab => BlockState::POLISHED_BLACKSTONE_SLAB,
            BlockKind::PolishedBlackstonePressurePlate => {
                BlockState::POLISHED_BLACKSTONE_PRESSURE_PLATE
            }
            BlockKind::PolishedBlackstoneButton => BlockState::POLISHED_BLACKSTONE_BUTTON,
            BlockKind::PolishedBlackstoneWall => BlockState::POLISHED_BLACKSTONE_WALL,
            BlockKind::ChiseledNetherBricks => BlockState::CHISELED_NETHER_BRICKS,
            BlockKind::CrackedNetherBricks => BlockState::CRACKED_NETHER_BRICKS,
            BlockKind::QuartzBricks => BlockState::QUARTZ_BRICKS,
            BlockKind::Candle => BlockState::CANDLE,
            BlockKind::WhiteCandle => BlockState::WHITE_CANDLE,
            BlockKind::OrangeCandle => BlockState::ORANGE_CANDLE,
            BlockKind::MagentaCandle => BlockState::MAGENTA_CANDLE,
            BlockKind::LightBlueCandle => BlockState::LIGHT_BLUE_CANDLE,
            BlockKind::YellowCandle => BlockState::YELLOW_CANDLE,
            BlockKind::LimeCandle => BlockState::LIME_CANDLE,
            BlockKind::PinkCandle => BlockState::PINK_CANDLE,
            BlockKind::GrayCandle => BlockState::GRAY_CANDLE,
            BlockKind::LightGrayCandle => BlockState::LIGHT_GRAY_CANDLE,
            BlockKind::CyanCandle => BlockState::CYAN_CANDLE,
            BlockKind::PurpleCandle => BlockState::PURPLE_CANDLE,
            BlockKind::BlueCandle => BlockState::BLUE_CANDLE,
            BlockKind::BrownCandle => BlockState::BROWN_CANDLE,
            BlockKind::GreenCandle => BlockState::GREEN_CANDLE,
            BlockKind::RedCandle => BlockState::RED_CANDLE,
            BlockKind::BlackCandle => BlockState::BLACK_CANDLE,
            BlockKind::CandleCake => BlockState::CANDLE_CAKE,
            BlockKind::WhiteCandleCake => BlockState::WHITE_CANDLE_CAKE,
            BlockKind::OrangeCandleCake => BlockState::ORANGE_CANDLE_CAKE,
            BlockKind::MagentaCandleCake => BlockState::MAGENTA_CANDLE_CAKE,
            BlockKind::LightBlueCandleCake => BlockState::LIGHT_BLUE_CANDLE_CAKE,
            BlockKind::YellowCandleCake => BlockState::YELLOW_CANDLE_CAKE,
            BlockKind::LimeCandleCake => BlockState::LIME_CANDLE_CAKE,
            BlockKind::PinkCandleCake => BlockState::PINK_CANDLE_CAKE,
            BlockKind::GrayCandleCake => BlockState::GRAY_CANDLE_CAKE,
            BlockKind::LightGrayCandleCake => BlockState::LIGHT_GRAY_CANDLE_CAKE,
            BlockKind::CyanCandleCake => BlockState::CYAN_CANDLE_CAKE,
            BlockKind::PurpleCandleCake => BlockState::PURPLE_CANDLE_CAKE,
            BlockKind::BlueCandleCake => BlockState::BLUE_CANDLE_CAKE,
            BlockKind::BrownCandleCake => BlockState::BROWN_CANDLE_CAKE,
            BlockKind::GreenCandleCake => BlockState::GREEN_CANDLE_CAKE,
            BlockKind::RedCandleCake => BlockState::RED_CANDLE_CAKE,
            BlockKind::BlackCandleCake => BlockState::BLACK_CANDLE_CAKE,
            BlockKind::AmethystBlock => BlockState::AMETHYST_BLOCK,
            BlockKind::BuddingAmethyst => BlockState::BUDDING_AMETHYST,
            BlockKind::AmethystCluster => BlockState::AMETHYST_CLUSTER,
            BlockKind::LargeAmethystBud => BlockState::LARGE_AMETHYST_BUD,
            BlockKind::MediumAmethystBud => BlockState::MEDIUM_AMETHYST_BUD,
            BlockKind::SmallAmethystBud => BlockState::SMALL_AMETHYST_BUD,
            BlockKind::Tuff => BlockState::TUFF,
            BlockKind::Calcite => BlockState::CALCITE,
            BlockKind::TintedGlass => BlockState::TINTED_GLASS,
            BlockKind::PowderSnow => BlockState::POWDER_SNOW,
            BlockKind::SculkSensor => BlockState::SCULK_SENSOR,
            BlockKind::CalibratedSculkSensor => BlockState::CALIBRATED_SCULK_SENSOR,
            BlockKind::Sculk => BlockState::SCULK,
            BlockKind::SculkVein => BlockState::SCULK_VEIN,
            BlockKind::SculkCatalyst => BlockState::SCULK_CATALYST,
            BlockKind::SculkShrieker => BlockState::SCULK_SHRIEKER,
            BlockKind::OxidizedCopper => BlockState::OXIDIZED_COPPER,
            BlockKind::WeatheredCopper => BlockState::WEATHERED_COPPER,
            BlockKind::ExposedCopper => BlockState::EXPOSED_COPPER,
            BlockKind::CopperBlock => BlockState::COPPER_BLOCK,
            BlockKind::CopperOre => BlockState::COPPER_ORE,
            BlockKind::DeepslateCopperOre => BlockState::DEEPSLATE_COPPER_ORE,
            BlockKind::OxidizedCutCopper => BlockState::OXIDIZED_CUT_COPPER,
            BlockKind::WeatheredCutCopper => BlockState::WEATHERED_CUT_COPPER,
            BlockKind::ExposedCutCopper => BlockState::EXPOSED_CUT_COPPER,
            BlockKind::CutCopper => BlockState::CUT_COPPER,
            BlockKind::OxidizedCutCopperStairs => BlockState::OXIDIZED_CUT_COPPER_STAIRS,
            BlockKind::WeatheredCutCopperStairs => BlockState::WEATHERED_CUT_COPPER_STAIRS,
            BlockKind::ExposedCutCopperStairs => BlockState::EXPOSED_CUT_COPPER_STAIRS,
            BlockKind::CutCopperStairs => BlockState::CUT_COPPER_STAIRS,
            BlockKind::OxidizedCutCopperSlab => BlockState::OXIDIZED_CUT_COPPER_SLAB,
            BlockKind::WeatheredCutCopperSlab => BlockState::WEATHERED_CUT_COPPER_SLAB,
            BlockKind::ExposedCutCopperSlab => BlockState::EXPOSED_CUT_COPPER_SLAB,
            BlockKind::CutCopperSlab => BlockState::CUT_COPPER_SLAB,
            BlockKind::WaxedCopperBlock => BlockState::WAXED_COPPER_BLOCK,
            BlockKind::WaxedWeatheredCopper => BlockState::WAXED_WEATHERED_COPPER,
            BlockKind::WaxedExposedCopper => BlockState::WAXED_EXPOSED_COPPER,
            BlockKind::WaxedOxidizedCopper => BlockState::WAXED_OXIDIZED_COPPER,
            BlockKind::WaxedOxidizedCutCopper => BlockState::WAXED_OXIDIZED_CUT_COPPER,
            BlockKind::WaxedWeatheredCutCopper => BlockState::WAXED_WEATHERED_CUT_COPPER,
            BlockKind::WaxedExposedCutCopper => BlockState::WAXED_EXPOSED_CUT_COPPER,
            BlockKind::WaxedCutCopper => BlockState::WAXED_CUT_COPPER,
            BlockKind::WaxedOxidizedCutCopperStairs => BlockState::WAXED_OXIDIZED_CUT_COPPER_STAIRS,
            BlockKind::WaxedWeatheredCutCopperStairs => {
                BlockState::WAXED_WEATHERED_CUT_COPPER_STAIRS
            }
            BlockKind::WaxedExposedCutCopperStairs => BlockState::WAXED_EXPOSED_CUT_COPPER_STAIRS,
            BlockKind::WaxedCutCopperStairs => BlockState::WAXED_CUT_COPPER_STAIRS,
            BlockKind::WaxedOxidizedCutCopperSlab => BlockState::WAXED_OXIDIZED_CUT_COPPER_SLAB,
            BlockKind::WaxedWeatheredCutCopperSlab => BlockState::WAXED_WEATHERED_CUT_COPPER_SLAB,
            BlockKind::WaxedExposedCutCopperSlab => BlockState::WAXED_EXPOSED_CUT_COPPER_SLAB,
            BlockKind::WaxedCutCopperSlab => BlockState::WAXED_CUT_COPPER_SLAB,
            BlockKind::LightningRod => BlockState::LIGHTNING_ROD,
            BlockKind::PointedDripstone => BlockState::POINTED_DRIPSTONE,
            BlockKind::DripstoneBlock => BlockState::DRIPSTONE_BLOCK,
            BlockKind::CaveVines => BlockState::CAVE_VINES,
            BlockKind::CaveVinesPlant => BlockState::CAVE_VINES_PLANT,
            BlockKind::SporeBlossom => BlockState::SPORE_BLOSSOM,
            BlockKind::Azalea => BlockState::AZALEA,
            BlockKind::FloweringAzalea => BlockState::FLOWERING_AZALEA,
            BlockKind::MossCarpet => BlockState::MOSS_CARPET,
            BlockKind::PinkPetals => BlockState::PINK_PETALS,
            BlockKind::MossBlock => BlockState::MOSS_BLOCK,
            BlockKind::BigDripleaf => BlockState::BIG_DRIPLEAF,
            BlockKind::BigDripleafStem => BlockState::BIG_DRIPLEAF_STEM,
            BlockKind::SmallDripleaf => BlockState::SMALL_DRIPLEAF,
            BlockKind::HangingRoots => BlockState::HANGING_ROOTS,
            BlockKind::RootedDirt => BlockState::ROOTED_DIRT,
            BlockKind::Mud => BlockState::MUD,
            BlockKind::Deepslate => BlockState::DEEPSLATE,
            BlockKind::CobbledDeepslate => BlockState::COBBLED_DEEPSLATE,
            BlockKind::CobbledDeepslateStairs => BlockState::COBBLED_DEEPSLATE_STAIRS,
            BlockKind::CobbledDeepslateSlab => BlockState::COBBLED_DEEPSLATE_SLAB,
            BlockKind::CobbledDeepslateWall => BlockState::COBBLED_DEEPSLATE_WALL,
            BlockKind::PolishedDeepslate => BlockState::POLISHED_DEEPSLATE,
            BlockKind::PolishedDeepslateStairs => BlockState::POLISHED_DEEPSLATE_STAIRS,
            BlockKind::PolishedDeepslateSlab => BlockState::POLISHED_DEEPSLATE_SLAB,
            BlockKind::PolishedDeepslateWall => BlockState::POLISHED_DEEPSLATE_WALL,
            BlockKind::DeepslateTiles => BlockState::DEEPSLATE_TILES,
            BlockKind::DeepslateTileStairs => BlockState::DEEPSLATE_TILE_STAIRS,
            BlockKind::DeepslateTileSlab => BlockState::DEEPSLATE_TILE_SLAB,
            BlockKind::DeepslateTileWall => BlockState::DEEPSLATE_TILE_WALL,
            BlockKind::DeepslateBricks => BlockState::DEEPSLATE_BRICKS,
            BlockKind::DeepslateBrickStairs => BlockState::DEEPSLATE_BRICK_STAIRS,
            BlockKind::DeepslateBrickSlab => BlockState::DEEPSLATE_BRICK_SLAB,
            BlockKind::DeepslateBrickWall => BlockState::DEEPSLATE_BRICK_WALL,
            BlockKind::ChiseledDeepslate => BlockState::CHISELED_DEEPSLATE,
            BlockKind::CrackedDeepslateBricks => BlockState::CRACKED_DEEPSLATE_BRICKS,
            BlockKind::CrackedDeepslateTiles => BlockState::CRACKED_DEEPSLATE_TILES,
            BlockKind::InfestedDeepslate => BlockState::INFESTED_DEEPSLATE,
            BlockKind::SmoothBasalt => BlockState::SMOOTH_BASALT,
            BlockKind::RawIronBlock => BlockState::RAW_IRON_BLOCK,
            BlockKind::RawCopperBlock => BlockState::RAW_COPPER_BLOCK,
            BlockKind::RawGoldBlock => BlockState::RAW_GOLD_BLOCK,
            BlockKind::PottedAzaleaBush => BlockState::POTTED_AZALEA_BUSH,
            BlockKind::PottedFloweringAzaleaBush => BlockState::POTTED_FLOWERING_AZALEA_BUSH,
            BlockKind::OchreFroglight => BlockState::OCHRE_FROGLIGHT,
            BlockKind::VerdantFroglight => BlockState::VERDANT_FROGLIGHT,
            BlockKind::PearlescentFroglight => BlockState::PEARLESCENT_FROGLIGHT,
            BlockKind::Frogspawn => BlockState::FROGSPAWN,
            BlockKind::ReinforcedDeepslate => BlockState::REINFORCED_DEEPSLATE,
            BlockKind::DecoratedPot => BlockState::DECORATED_POT,
        }
    }
    #[doc = r" Constructs a block state from a raw block state ID."]
    #[doc = r""]
    #[doc = r" If the given ID is invalid, `None` is returned."]
    pub const fn from_raw(id: u16) -> Option<Self> {
        if id <= 24134u16 {
            Some(Self(id))
        } else {
            None
        }
    }
    #[doc = r" Returns the [`BlockKind`] of this block state."]
    pub const fn to_kind(self) -> BlockKind {
        match self.0 {
            0u16 => BlockKind::Air,
            1u16 => BlockKind::Stone,
            2u16 => BlockKind::Granite,
            3u16 => BlockKind::PolishedGranite,
            4u16 => BlockKind::Diorite,
            5u16 => BlockKind::PolishedDiorite,
            6u16 => BlockKind::Andesite,
            7u16 => BlockKind::PolishedAndesite,
            8u16 | 9u16 => BlockKind::GrassBlock,
            10u16 => BlockKind::Dirt,
            11u16 => BlockKind::CoarseDirt,
            12u16 | 13u16 => BlockKind::Podzol,
            14u16 => BlockKind::Cobblestone,
            15u16 => BlockKind::OakPlanks,
            16u16 => BlockKind::SprucePlanks,
            17u16 => BlockKind::BirchPlanks,
            18u16 => BlockKind::JunglePlanks,
            19u16 => BlockKind::AcaciaPlanks,
            20u16 => BlockKind::CherryPlanks,
            21u16 => BlockKind::DarkOakPlanks,
            22u16 => BlockKind::MangrovePlanks,
            23u16 => BlockKind::BambooPlanks,
            24u16 => BlockKind::BambooMosaic,
            25u16 | 26u16 => BlockKind::OakSapling,
            27u16 | 28u16 => BlockKind::SpruceSapling,
            29u16 | 30u16 => BlockKind::BirchSapling,
            31u16 | 32u16 => BlockKind::JungleSapling,
            33u16 | 34u16 => BlockKind::AcaciaSapling,
            35u16 | 36u16 => BlockKind::CherrySapling,
            37u16 | 38u16 => BlockKind::DarkOakSapling,
            39u16 | 40u16 | 41u16 | 42u16 | 43u16 | 44u16 | 45u16 | 46u16 | 47u16 | 48u16
            | 49u16 | 50u16 | 51u16 | 52u16 | 53u16 | 54u16 | 55u16 | 56u16 | 57u16 | 58u16
            | 59u16 | 60u16 | 61u16 | 62u16 | 63u16 | 64u16 | 65u16 | 66u16 | 67u16 | 68u16
            | 69u16 | 70u16 | 71u16 | 72u16 | 73u16 | 74u16 | 75u16 | 76u16 | 77u16 | 78u16 => {
                BlockKind::MangrovePropagule
            }
            79u16 => BlockKind::Bedrock,
            80u16 | 81u16 | 82u16 | 83u16 | 84u16 | 85u16 | 86u16 | 87u16 | 88u16 | 89u16
            | 90u16 | 91u16 | 92u16 | 93u16 | 94u16 | 95u16 => BlockKind::Water,
            96u16 | 97u16 | 98u16 | 99u16 | 100u16 | 101u16 | 102u16 | 103u16 | 104u16 | 105u16
            | 106u16 | 107u16 | 108u16 | 109u16 | 110u16 | 111u16 => BlockKind::Lava,
            112u16 => BlockKind::Sand,
            113u16 | 114u16 | 115u16 | 116u16 => BlockKind::SuspiciousSand,
            117u16 => BlockKind::RedSand,
            118u16 => BlockKind::Gravel,
            119u16 | 120u16 | 121u16 | 122u16 => BlockKind::SuspiciousGravel,
            123u16 => BlockKind::GoldOre,
            124u16 => BlockKind::DeepslateGoldOre,
            125u16 => BlockKind::IronOre,
            126u16 => BlockKind::DeepslateIronOre,
            127u16 => BlockKind::CoalOre,
            128u16 => BlockKind::DeepslateCoalOre,
            129u16 => BlockKind::NetherGoldOre,
            130u16 | 131u16 | 132u16 => BlockKind::OakLog,
            133u16 | 134u16 | 135u16 => BlockKind::SpruceLog,
            136u16 | 137u16 | 138u16 => BlockKind::BirchLog,
            139u16 | 140u16 | 141u16 => BlockKind::JungleLog,
            142u16 | 143u16 | 144u16 => BlockKind::AcaciaLog,
            145u16 | 146u16 | 147u16 => BlockKind::CherryLog,
            148u16 | 149u16 | 150u16 => BlockKind::DarkOakLog,
            151u16 | 152u16 | 153u16 => BlockKind::MangroveLog,
            154u16 | 155u16 => BlockKind::MangroveRoots,
            156u16 | 157u16 | 158u16 => BlockKind::MuddyMangroveRoots,
            159u16 | 160u16 | 161u16 => BlockKind::BambooBlock,
            162u16 | 163u16 | 164u16 => BlockKind::StrippedSpruceLog,
            165u16 | 166u16 | 167u16 => BlockKind::StrippedBirchLog,
            168u16 | 169u16 | 170u16 => BlockKind::StrippedJungleLog,
            171u16 | 172u16 | 173u16 => BlockKind::StrippedAcaciaLog,
            174u16 | 175u16 | 176u16 => BlockKind::StrippedCherryLog,
            177u16 | 178u16 | 179u16 => BlockKind::StrippedDarkOakLog,
            180u16 | 181u16 | 182u16 => BlockKind::StrippedOakLog,
            183u16 | 184u16 | 185u16 => BlockKind::StrippedMangroveLog,
            186u16 | 187u16 | 188u16 => BlockKind::StrippedBambooBlock,
            189u16 | 190u16 | 191u16 => BlockKind::OakWood,
            192u16 | 193u16 | 194u16 => BlockKind::SpruceWood,
            195u16 | 196u16 | 197u16 => BlockKind::BirchWood,
            198u16 | 199u16 | 200u16 => BlockKind::JungleWood,
            201u16 | 202u16 | 203u16 => BlockKind::AcaciaWood,
            204u16 | 205u16 | 206u16 => BlockKind::CherryWood,
            207u16 | 208u16 | 209u16 => BlockKind::DarkOakWood,
            210u16 | 211u16 | 212u16 => BlockKind::MangroveWood,
            213u16 | 214u16 | 215u16 => BlockKind::StrippedOakWood,
            216u16 | 217u16 | 218u16 => BlockKind::StrippedSpruceWood,
            219u16 | 220u16 | 221u16 => BlockKind::StrippedBirchWood,
            222u16 | 223u16 | 224u16 => BlockKind::StrippedJungleWood,
            225u16 | 226u16 | 227u16 => BlockKind::StrippedAcaciaWood,
            228u16 | 229u16 | 230u16 => BlockKind::StrippedCherryWood,
            231u16 | 232u16 | 233u16 => BlockKind::StrippedDarkOakWood,
            234u16 | 235u16 | 236u16 => BlockKind::StrippedMangroveWood,
            237u16 | 238u16 | 239u16 | 240u16 | 241u16 | 242u16 | 243u16 | 244u16 | 245u16
            | 246u16 | 247u16 | 248u16 | 249u16 | 250u16 | 251u16 | 252u16 | 253u16 | 254u16
            | 255u16 | 256u16 | 257u16 | 258u16 | 259u16 | 260u16 | 261u16 | 262u16 | 263u16
            | 264u16 => BlockKind::OakLeaves,
            265u16 | 266u16 | 267u16 | 268u16 | 269u16 | 270u16 | 271u16 | 272u16 | 273u16
            | 274u16 | 275u16 | 276u16 | 277u16 | 278u16 | 279u16 | 280u16 | 281u16 | 282u16
            | 283u16 | 284u16 | 285u16 | 286u16 | 287u16 | 288u16 | 289u16 | 290u16 | 291u16
            | 292u16 => BlockKind::SpruceLeaves,
            293u16 | 294u16 | 295u16 | 296u16 | 297u16 | 298u16 | 299u16 | 300u16 | 301u16
            | 302u16 | 303u16 | 304u16 | 305u16 | 306u16 | 307u16 | 308u16 | 309u16 | 310u16
            | 311u16 | 312u16 | 313u16 | 314u16 | 315u16 | 316u16 | 317u16 | 318u16 | 319u16
            | 320u16 => BlockKind::BirchLeaves,
            321u16 | 322u16 | 323u16 | 324u16 | 325u16 | 326u16 | 327u16 | 328u16 | 329u16
            | 330u16 | 331u16 | 332u16 | 333u16 | 334u16 | 335u16 | 336u16 | 337u16 | 338u16
            | 339u16 | 340u16 | 341u16 | 342u16 | 343u16 | 344u16 | 345u16 | 346u16 | 347u16
            | 348u16 => BlockKind::JungleLeaves,
            349u16 | 350u16 | 351u16 | 352u16 | 353u16 | 354u16 | 355u16 | 356u16 | 357u16
            | 358u16 | 359u16 | 360u16 | 361u16 | 362u16 | 363u16 | 364u16 | 365u16 | 366u16
            | 367u16 | 368u16 | 369u16 | 370u16 | 371u16 | 372u16 | 373u16 | 374u16 | 375u16
            | 376u16 => BlockKind::AcaciaLeaves,
            377u16 | 378u16 | 379u16 | 380u16 | 381u16 | 382u16 | 383u16 | 384u16 | 385u16
            | 386u16 | 387u16 | 388u16 | 389u16 | 390u16 | 391u16 | 392u16 | 393u16 | 394u16
            | 395u16 | 396u16 | 397u16 | 398u16 | 399u16 | 400u16 | 401u16 | 402u16 | 403u16
            | 404u16 => BlockKind::CherryLeaves,
            405u16 | 406u16 | 407u16 | 408u16 | 409u16 | 410u16 | 411u16 | 412u16 | 413u16
            | 414u16 | 415u16 | 416u16 | 417u16 | 418u16 | 419u16 | 420u16 | 421u16 | 422u16
            | 423u16 | 424u16 | 425u16 | 426u16 | 427u16 | 428u16 | 429u16 | 430u16 | 431u16
            | 432u16 => BlockKind::DarkOakLeaves,
            433u16 | 434u16 | 435u16 | 436u16 | 437u16 | 438u16 | 439u16 | 440u16 | 441u16
            | 442u16 | 443u16 | 444u16 | 445u16 | 446u16 | 447u16 | 448u16 | 449u16 | 450u16
            | 451u16 | 452u16 | 453u16 | 454u16 | 455u16 | 456u16 | 457u16 | 458u16 | 459u16
            | 460u16 => BlockKind::MangroveLeaves,
            461u16 | 462u16 | 463u16 | 464u16 | 465u16 | 466u16 | 467u16 | 468u16 | 469u16
            | 470u16 | 471u16 | 472u16 | 473u16 | 474u16 | 475u16 | 476u16 | 477u16 | 478u16
            | 479u16 | 480u16 | 481u16 | 482u16 | 483u16 | 484u16 | 485u16 | 486u16 | 487u16
            | 488u16 => BlockKind::AzaleaLeaves,
            489u16 | 490u16 | 491u16 | 492u16 | 493u16 | 494u16 | 495u16 | 496u16 | 497u16
            | 498u16 | 499u16 | 500u16 | 501u16 | 502u16 | 503u16 | 504u16 | 505u16 | 506u16
            | 507u16 | 508u16 | 509u16 | 510u16 | 511u16 | 512u16 | 513u16 | 514u16 | 515u16
            | 516u16 => BlockKind::FloweringAzaleaLeaves,
            517u16 => BlockKind::Sponge,
            518u16 => BlockKind::WetSponge,
            519u16 => BlockKind::Glass,
            520u16 => BlockKind::LapisOre,
            521u16 => BlockKind::DeepslateLapisOre,
            522u16 => BlockKind::LapisBlock,
            523u16 | 524u16 | 525u16 | 526u16 | 527u16 | 528u16 | 529u16 | 530u16 | 531u16
            | 532u16 | 533u16 | 534u16 => BlockKind::Dispenser,
            535u16 => BlockKind::Sandstone,
            536u16 => BlockKind::ChiseledSandstone,
            537u16 => BlockKind::CutSandstone,
            538u16 | 539u16 | 540u16 | 541u16 | 542u16 | 543u16 | 544u16 | 545u16 | 546u16
            | 547u16 | 548u16 | 549u16 | 550u16 | 551u16 | 552u16 | 553u16 | 554u16 | 555u16
            | 556u16 | 557u16 | 558u16 | 559u16 | 560u16 | 561u16 | 562u16 | 563u16 | 564u16
            | 565u16 | 566u16 | 567u16 | 568u16 | 569u16 | 570u16 | 571u16 | 572u16 | 573u16
            | 574u16 | 575u16 | 576u16 | 577u16 | 578u16 | 579u16 | 580u16 | 581u16 | 582u16
            | 583u16 | 584u16 | 585u16 | 586u16 | 587u16 | 588u16 | 589u16 | 590u16 | 591u16
            | 592u16 | 593u16 | 594u16 | 595u16 | 596u16 | 597u16 | 598u16 | 599u16 | 600u16
            | 601u16 | 602u16 | 603u16 | 604u16 | 605u16 | 606u16 | 607u16 | 608u16 | 609u16
            | 610u16 | 611u16 | 612u16 | 613u16 | 614u16 | 615u16 | 616u16 | 617u16 | 618u16
            | 619u16 | 620u16 | 621u16 | 622u16 | 623u16 | 624u16 | 625u16 | 626u16 | 627u16
            | 628u16 | 629u16 | 630u16 | 631u16 | 632u16 | 633u16 | 634u16 | 635u16 | 636u16
            | 637u16 | 638u16 | 639u16 | 640u16 | 641u16 | 642u16 | 643u16 | 644u16 | 645u16
            | 646u16 | 647u16 | 648u16 | 649u16 | 650u16 | 651u16 | 652u16 | 653u16 | 654u16
            | 655u16 | 656u16 | 657u16 | 658u16 | 659u16 | 660u16 | 661u16 | 662u16 | 663u16
            | 664u16 | 665u16 | 666u16 | 667u16 | 668u16 | 669u16 | 670u16 | 671u16 | 672u16
            | 673u16 | 674u16 | 675u16 | 676u16 | 677u16 | 678u16 | 679u16 | 680u16 | 681u16
            | 682u16 | 683u16 | 684u16 | 685u16 | 686u16 | 687u16 | 688u16 | 689u16 | 690u16
            | 691u16 | 692u16 | 693u16 | 694u16 | 695u16 | 696u16 | 697u16 | 698u16 | 699u16
            | 700u16 | 701u16 | 702u16 | 703u16 | 704u16 | 705u16 | 706u16 | 707u16 | 708u16
            | 709u16 | 710u16 | 711u16 | 712u16 | 713u16 | 714u16 | 715u16 | 716u16 | 717u16
            | 718u16 | 719u16 | 720u16 | 721u16 | 722u16 | 723u16 | 724u16 | 725u16 | 726u16
            | 727u16 | 728u16 | 729u16 | 730u16 | 731u16 | 732u16 | 733u16 | 734u16 | 735u16
            | 736u16 | 737u16 | 738u16 | 739u16 | 740u16 | 741u16 | 742u16 | 743u16 | 744u16
            | 745u16 | 746u16 | 747u16 | 748u16 | 749u16 | 750u16 | 751u16 | 752u16 | 753u16
            | 754u16 | 755u16 | 756u16 | 757u16 | 758u16 | 759u16 | 760u16 | 761u16 | 762u16
            | 763u16 | 764u16 | 765u16 | 766u16 | 767u16 | 768u16 | 769u16 | 770u16 | 771u16
            | 772u16 | 773u16 | 774u16 | 775u16 | 776u16 | 777u16 | 778u16 | 779u16 | 780u16
            | 781u16 | 782u16 | 783u16 | 784u16 | 785u16 | 786u16 | 787u16 | 788u16 | 789u16
            | 790u16 | 791u16 | 792u16 | 793u16 | 794u16 | 795u16 | 796u16 | 797u16 | 798u16
            | 799u16 | 800u16 | 801u16 | 802u16 | 803u16 | 804u16 | 805u16 | 806u16 | 807u16
            | 808u16 | 809u16 | 810u16 | 811u16 | 812u16 | 813u16 | 814u16 | 815u16 | 816u16
            | 817u16 | 818u16 | 819u16 | 820u16 | 821u16 | 822u16 | 823u16 | 824u16 | 825u16
            | 826u16 | 827u16 | 828u16 | 829u16 | 830u16 | 831u16 | 832u16 | 833u16 | 834u16
            | 835u16 | 836u16 | 837u16 | 838u16 | 839u16 | 840u16 | 841u16 | 842u16 | 843u16
            | 844u16 | 845u16 | 846u16 | 847u16 | 848u16 | 849u16 | 850u16 | 851u16 | 852u16
            | 853u16 | 854u16 | 855u16 | 856u16 | 857u16 | 858u16 | 859u16 | 860u16 | 861u16
            | 862u16 | 863u16 | 864u16 | 865u16 | 866u16 | 867u16 | 868u16 | 869u16 | 870u16
            | 871u16 | 872u16 | 873u16 | 874u16 | 875u16 | 876u16 | 877u16 | 878u16 | 879u16
            | 880u16 | 881u16 | 882u16 | 883u16 | 884u16 | 885u16 | 886u16 | 887u16 | 888u16
            | 889u16 | 890u16 | 891u16 | 892u16 | 893u16 | 894u16 | 895u16 | 896u16 | 897u16
            | 898u16 | 899u16 | 900u16 | 901u16 | 902u16 | 903u16 | 904u16 | 905u16 | 906u16
            | 907u16 | 908u16 | 909u16 | 910u16 | 911u16 | 912u16 | 913u16 | 914u16 | 915u16
            | 916u16 | 917u16 | 918u16 | 919u16 | 920u16 | 921u16 | 922u16 | 923u16 | 924u16
            | 925u16 | 926u16 | 927u16 | 928u16 | 929u16 | 930u16 | 931u16 | 932u16 | 933u16
            | 934u16 | 935u16 | 936u16 | 937u16 | 938u16 | 939u16 | 940u16 | 941u16 | 942u16
            | 943u16 | 944u16 | 945u16 | 946u16 | 947u16 | 948u16 | 949u16 | 950u16 | 951u16
            | 952u16 | 953u16 | 954u16 | 955u16 | 956u16 | 957u16 | 958u16 | 959u16 | 960u16
            | 961u16 | 962u16 | 963u16 | 964u16 | 965u16 | 966u16 | 967u16 | 968u16 | 969u16
            | 970u16 | 971u16 | 972u16 | 973u16 | 974u16 | 975u16 | 976u16 | 977u16 | 978u16
            | 979u16 | 980u16 | 981u16 | 982u16 | 983u16 | 984u16 | 985u16 | 986u16 | 987u16
            | 988u16 | 989u16 | 990u16 | 991u16 | 992u16 | 993u16 | 994u16 | 995u16 | 996u16
            | 997u16 | 998u16 | 999u16 | 1000u16 | 1001u16 | 1002u16 | 1003u16 | 1004u16
            | 1005u16 | 1006u16 | 1007u16 | 1008u16 | 1009u16 | 1010u16 | 1011u16 | 1012u16
            | 1013u16 | 1014u16 | 1015u16 | 1016u16 | 1017u16 | 1018u16 | 1019u16 | 1020u16
            | 1021u16 | 1022u16 | 1023u16 | 1024u16 | 1025u16 | 1026u16 | 1027u16 | 1028u16
            | 1029u16 | 1030u16 | 1031u16 | 1032u16 | 1033u16 | 1034u16 | 1035u16 | 1036u16
            | 1037u16 | 1038u16 | 1039u16 | 1040u16 | 1041u16 | 1042u16 | 1043u16 | 1044u16
            | 1045u16 | 1046u16 | 1047u16 | 1048u16 | 1049u16 | 1050u16 | 1051u16 | 1052u16
            | 1053u16 | 1054u16 | 1055u16 | 1056u16 | 1057u16 | 1058u16 | 1059u16 | 1060u16
            | 1061u16 | 1062u16 | 1063u16 | 1064u16 | 1065u16 | 1066u16 | 1067u16 | 1068u16
            | 1069u16 | 1070u16 | 1071u16 | 1072u16 | 1073u16 | 1074u16 | 1075u16 | 1076u16
            | 1077u16 | 1078u16 | 1079u16 | 1080u16 | 1081u16 | 1082u16 | 1083u16 | 1084u16
            | 1085u16 | 1086u16 | 1087u16 | 1088u16 | 1089u16 | 1090u16 | 1091u16 | 1092u16
            | 1093u16 | 1094u16 | 1095u16 | 1096u16 | 1097u16 | 1098u16 | 1099u16 | 1100u16
            | 1101u16 | 1102u16 | 1103u16 | 1104u16 | 1105u16 | 1106u16 | 1107u16 | 1108u16
            | 1109u16 | 1110u16 | 1111u16 | 1112u16 | 1113u16 | 1114u16 | 1115u16 | 1116u16
            | 1117u16 | 1118u16 | 1119u16 | 1120u16 | 1121u16 | 1122u16 | 1123u16 | 1124u16
            | 1125u16 | 1126u16 | 1127u16 | 1128u16 | 1129u16 | 1130u16 | 1131u16 | 1132u16
            | 1133u16 | 1134u16 | 1135u16 | 1136u16 | 1137u16 | 1138u16 | 1139u16 | 1140u16
            | 1141u16 | 1142u16 | 1143u16 | 1144u16 | 1145u16 | 1146u16 | 1147u16 | 1148u16
            | 1149u16 | 1150u16 | 1151u16 | 1152u16 | 1153u16 | 1154u16 | 1155u16 | 1156u16
            | 1157u16 | 1158u16 | 1159u16 | 1160u16 | 1161u16 | 1162u16 | 1163u16 | 1164u16
            | 1165u16 | 1166u16 | 1167u16 | 1168u16 | 1169u16 | 1170u16 | 1171u16 | 1172u16
            | 1173u16 | 1174u16 | 1175u16 | 1176u16 | 1177u16 | 1178u16 | 1179u16 | 1180u16
            | 1181u16 | 1182u16 | 1183u16 | 1184u16 | 1185u16 | 1186u16 | 1187u16 | 1188u16
            | 1189u16 | 1190u16 | 1191u16 | 1192u16 | 1193u16 | 1194u16 | 1195u16 | 1196u16
            | 1197u16 | 1198u16 | 1199u16 | 1200u16 | 1201u16 | 1202u16 | 1203u16 | 1204u16
            | 1205u16 | 1206u16 | 1207u16 | 1208u16 | 1209u16 | 1210u16 | 1211u16 | 1212u16
            | 1213u16 | 1214u16 | 1215u16 | 1216u16 | 1217u16 | 1218u16 | 1219u16 | 1220u16
            | 1221u16 | 1222u16 | 1223u16 | 1224u16 | 1225u16 | 1226u16 | 1227u16 | 1228u16
            | 1229u16 | 1230u16 | 1231u16 | 1232u16 | 1233u16 | 1234u16 | 1235u16 | 1236u16
            | 1237u16 | 1238u16 | 1239u16 | 1240u16 | 1241u16 | 1242u16 | 1243u16 | 1244u16
            | 1245u16 | 1246u16 | 1247u16 | 1248u16 | 1249u16 | 1250u16 | 1251u16 | 1252u16
            | 1253u16 | 1254u16 | 1255u16 | 1256u16 | 1257u16 | 1258u16 | 1259u16 | 1260u16
            | 1261u16 | 1262u16 | 1263u16 | 1264u16 | 1265u16 | 1266u16 | 1267u16 | 1268u16
            | 1269u16 | 1270u16 | 1271u16 | 1272u16 | 1273u16 | 1274u16 | 1275u16 | 1276u16
            | 1277u16 | 1278u16 | 1279u16 | 1280u16 | 1281u16 | 1282u16 | 1283u16 | 1284u16
            | 1285u16 | 1286u16 | 1287u16 | 1288u16 | 1289u16 | 1290u16 | 1291u16 | 1292u16
            | 1293u16 | 1294u16 | 1295u16 | 1296u16 | 1297u16 | 1298u16 | 1299u16 | 1300u16
            | 1301u16 | 1302u16 | 1303u16 | 1304u16 | 1305u16 | 1306u16 | 1307u16 | 1308u16
            | 1309u16 | 1310u16 | 1311u16 | 1312u16 | 1313u16 | 1314u16 | 1315u16 | 1316u16
            | 1317u16 | 1318u16 | 1319u16 | 1320u16 | 1321u16 | 1322u16 | 1323u16 | 1324u16
            | 1325u16 | 1326u16 | 1327u16 | 1328u16 | 1329u16 | 1330u16 | 1331u16 | 1332u16
            | 1333u16 | 1334u16 | 1335u16 | 1336u16 | 1337u16 | 1338u16 | 1339u16 | 1340u16
            | 1341u16 | 1342u16 | 1343u16 | 1344u16 | 1345u16 | 1346u16 | 1347u16 | 1348u16
            | 1349u16 | 1350u16 | 1351u16 | 1352u16 | 1353u16 | 1354u16 | 1355u16 | 1356u16
            | 1357u16 | 1358u16 | 1359u16 | 1360u16 | 1361u16 | 1362u16 | 1363u16 | 1364u16
            | 1365u16 | 1366u16 | 1367u16 | 1368u16 | 1369u16 | 1370u16 | 1371u16 | 1372u16
            | 1373u16 | 1374u16 | 1375u16 | 1376u16 | 1377u16 | 1378u16 | 1379u16 | 1380u16
            | 1381u16 | 1382u16 | 1383u16 | 1384u16 | 1385u16 | 1386u16 | 1387u16 | 1388u16
            | 1389u16 | 1390u16 | 1391u16 | 1392u16 | 1393u16 | 1394u16 | 1395u16 | 1396u16
            | 1397u16 | 1398u16 | 1399u16 | 1400u16 | 1401u16 | 1402u16 | 1403u16 | 1404u16
            | 1405u16 | 1406u16 | 1407u16 | 1408u16 | 1409u16 | 1410u16 | 1411u16 | 1412u16
            | 1413u16 | 1414u16 | 1415u16 | 1416u16 | 1417u16 | 1418u16 | 1419u16 | 1420u16
            | 1421u16 | 1422u16 | 1423u16 | 1424u16 | 1425u16 | 1426u16 | 1427u16 | 1428u16
            | 1429u16 | 1430u16 | 1431u16 | 1432u16 | 1433u16 | 1434u16 | 1435u16 | 1436u16
            | 1437u16 | 1438u16 | 1439u16 | 1440u16 | 1441u16 | 1442u16 | 1443u16 | 1444u16
            | 1445u16 | 1446u16 | 1447u16 | 1448u16 | 1449u16 | 1450u16 | 1451u16 | 1452u16
            | 1453u16 | 1454u16 | 1455u16 | 1456u16 | 1457u16 | 1458u16 | 1459u16 | 1460u16
            | 1461u16 | 1462u16 | 1463u16 | 1464u16 | 1465u16 | 1466u16 | 1467u16 | 1468u16
            | 1469u16 | 1470u16 | 1471u16 | 1472u16 | 1473u16 | 1474u16 | 1475u16 | 1476u16
            | 1477u16 | 1478u16 | 1479u16 | 1480u16 | 1481u16 | 1482u16 | 1483u16 | 1484u16
            | 1485u16 | 1486u16 | 1487u16 | 1488u16 | 1489u16 | 1490u16 | 1491u16 | 1492u16
            | 1493u16 | 1494u16 | 1495u16 | 1496u16 | 1497u16 | 1498u16 | 1499u16 | 1500u16
            | 1501u16 | 1502u16 | 1503u16 | 1504u16 | 1505u16 | 1506u16 | 1507u16 | 1508u16
            | 1509u16 | 1510u16 | 1511u16 | 1512u16 | 1513u16 | 1514u16 | 1515u16 | 1516u16
            | 1517u16 | 1518u16 | 1519u16 | 1520u16 | 1521u16 | 1522u16 | 1523u16 | 1524u16
            | 1525u16 | 1526u16 | 1527u16 | 1528u16 | 1529u16 | 1530u16 | 1531u16 | 1532u16
            | 1533u16 | 1534u16 | 1535u16 | 1536u16 | 1537u16 | 1538u16 | 1539u16 | 1540u16
            | 1541u16 | 1542u16 | 1543u16 | 1544u16 | 1545u16 | 1546u16 | 1547u16 | 1548u16
            | 1549u16 | 1550u16 | 1551u16 | 1552u16 | 1553u16 | 1554u16 | 1555u16 | 1556u16
            | 1557u16 | 1558u16 | 1559u16 | 1560u16 | 1561u16 | 1562u16 | 1563u16 | 1564u16
            | 1565u16 | 1566u16 | 1567u16 | 1568u16 | 1569u16 | 1570u16 | 1571u16 | 1572u16
            | 1573u16 | 1574u16 | 1575u16 | 1576u16 | 1577u16 | 1578u16 | 1579u16 | 1580u16
            | 1581u16 | 1582u16 | 1583u16 | 1584u16 | 1585u16 | 1586u16 | 1587u16 | 1588u16
            | 1589u16 | 1590u16 | 1591u16 | 1592u16 | 1593u16 | 1594u16 | 1595u16 | 1596u16
            | 1597u16 | 1598u16 | 1599u16 | 1600u16 | 1601u16 | 1602u16 | 1603u16 | 1604u16
            | 1605u16 | 1606u16 | 1607u16 | 1608u16 | 1609u16 | 1610u16 | 1611u16 | 1612u16
            | 1613u16 | 1614u16 | 1615u16 | 1616u16 | 1617u16 | 1618u16 | 1619u16 | 1620u16
            | 1621u16 | 1622u16 | 1623u16 | 1624u16 | 1625u16 | 1626u16 | 1627u16 | 1628u16
            | 1629u16 | 1630u16 | 1631u16 | 1632u16 | 1633u16 | 1634u16 | 1635u16 | 1636u16
            | 1637u16 | 1638u16 | 1639u16 | 1640u16 | 1641u16 | 1642u16 | 1643u16 | 1644u16
            | 1645u16 | 1646u16 | 1647u16 | 1648u16 | 1649u16 | 1650u16 | 1651u16 | 1652u16
            | 1653u16 | 1654u16 | 1655u16 | 1656u16 | 1657u16 | 1658u16 | 1659u16 | 1660u16
            | 1661u16 | 1662u16 | 1663u16 | 1664u16 | 1665u16 | 1666u16 | 1667u16 | 1668u16
            | 1669u16 | 1670u16 | 1671u16 | 1672u16 | 1673u16 | 1674u16 | 1675u16 | 1676u16
            | 1677u16 | 1678u16 | 1679u16 | 1680u16 | 1681u16 | 1682u16 | 1683u16 | 1684u16
            | 1685u16 | 1686u16 | 1687u16 => BlockKind::NoteBlock,
            1688u16 | 1689u16 | 1690u16 | 1691u16 | 1692u16 | 1693u16 | 1694u16 | 1695u16
            | 1696u16 | 1697u16 | 1698u16 | 1699u16 | 1700u16 | 1701u16 | 1702u16 | 1703u16 => {
                BlockKind::WhiteBed
            }
            1704u16 | 1705u16 | 1706u16 | 1707u16 | 1708u16 | 1709u16 | 1710u16 | 1711u16
            | 1712u16 | 1713u16 | 1714u16 | 1715u16 | 1716u16 | 1717u16 | 1718u16 | 1719u16 => {
                BlockKind::OrangeBed
            }
            1720u16 | 1721u16 | 1722u16 | 1723u16 | 1724u16 | 1725u16 | 1726u16 | 1727u16
            | 1728u16 | 1729u16 | 1730u16 | 1731u16 | 1732u16 | 1733u16 | 1734u16 | 1735u16 => {
                BlockKind::MagentaBed
            }
            1736u16 | 1737u16 | 1738u16 | 1739u16 | 1740u16 | 1741u16 | 1742u16 | 1743u16
            | 1744u16 | 1745u16 | 1746u16 | 1747u16 | 1748u16 | 1749u16 | 1750u16 | 1751u16 => {
                BlockKind::LightBlueBed
            }
            1752u16 | 1753u16 | 1754u16 | 1755u16 | 1756u16 | 1757u16 | 1758u16 | 1759u16
            | 1760u16 | 1761u16 | 1762u16 | 1763u16 | 1764u16 | 1765u16 | 1766u16 | 1767u16 => {
                BlockKind::YellowBed
            }
            1768u16 | 1769u16 | 1770u16 | 1771u16 | 1772u16 | 1773u16 | 1774u16 | 1775u16
            | 1776u16 | 1777u16 | 1778u16 | 1779u16 | 1780u16 | 1781u16 | 1782u16 | 1783u16 => {
                BlockKind::LimeBed
            }
            1784u16 | 1785u16 | 1786u16 | 1787u16 | 1788u16 | 1789u16 | 1790u16 | 1791u16
            | 1792u16 | 1793u16 | 1794u16 | 1795u16 | 1796u16 | 1797u16 | 1798u16 | 1799u16 => {
                BlockKind::PinkBed
            }
            1800u16 | 1801u16 | 1802u16 | 1803u16 | 1804u16 | 1805u16 | 1806u16 | 1807u16
            | 1808u16 | 1809u16 | 1810u16 | 1811u16 | 1812u16 | 1813u16 | 1814u16 | 1815u16 => {
                BlockKind::GrayBed
            }
            1816u16 | 1817u16 | 1818u16 | 1819u16 | 1820u16 | 1821u16 | 1822u16 | 1823u16
            | 1824u16 | 1825u16 | 1826u16 | 1827u16 | 1828u16 | 1829u16 | 1830u16 | 1831u16 => {
                BlockKind::LightGrayBed
            }
            1832u16 | 1833u16 | 1834u16 | 1835u16 | 1836u16 | 1837u16 | 1838u16 | 1839u16
            | 1840u16 | 1841u16 | 1842u16 | 1843u16 | 1844u16 | 1845u16 | 1846u16 | 1847u16 => {
                BlockKind::CyanBed
            }
            1848u16 | 1849u16 | 1850u16 | 1851u16 | 1852u16 | 1853u16 | 1854u16 | 1855u16
            | 1856u16 | 1857u16 | 1858u16 | 1859u16 | 1860u16 | 1861u16 | 1862u16 | 1863u16 => {
                BlockKind::PurpleBed
            }
            1864u16 | 1865u16 | 1866u16 | 1867u16 | 1868u16 | 1869u16 | 1870u16 | 1871u16
            | 1872u16 | 1873u16 | 1874u16 | 1875u16 | 1876u16 | 1877u16 | 1878u16 | 1879u16 => {
                BlockKind::BlueBed
            }
            1880u16 | 1881u16 | 1882u16 | 1883u16 | 1884u16 | 1885u16 | 1886u16 | 1887u16
            | 1888u16 | 1889u16 | 1890u16 | 1891u16 | 1892u16 | 1893u16 | 1894u16 | 1895u16 => {
                BlockKind::BrownBed
            }
            1896u16 | 1897u16 | 1898u16 | 1899u16 | 1900u16 | 1901u16 | 1902u16 | 1903u16
            | 1904u16 | 1905u16 | 1906u16 | 1907u16 | 1908u16 | 1909u16 | 1910u16 | 1911u16 => {
                BlockKind::GreenBed
            }
            1912u16 | 1913u16 | 1914u16 | 1915u16 | 1916u16 | 1917u16 | 1918u16 | 1919u16
            | 1920u16 | 1921u16 | 1922u16 | 1923u16 | 1924u16 | 1925u16 | 1926u16 | 1927u16 => {
                BlockKind::RedBed
            }
            1928u16 | 1929u16 | 1930u16 | 1931u16 | 1932u16 | 1933u16 | 1934u16 | 1935u16
            | 1936u16 | 1937u16 | 1938u16 | 1939u16 | 1940u16 | 1941u16 | 1942u16 | 1943u16 => {
                BlockKind::BlackBed
            }
            1944u16 | 1945u16 | 1946u16 | 1947u16 | 1948u16 | 1949u16 | 1950u16 | 1951u16
            | 1952u16 | 1953u16 | 1954u16 | 1955u16 | 1956u16 | 1957u16 | 1958u16 | 1959u16
            | 1960u16 | 1961u16 | 1962u16 | 1963u16 | 1964u16 | 1965u16 | 1966u16 | 1967u16 => {
                BlockKind::PoweredRail
            }
            1968u16 | 1969u16 | 1970u16 | 1971u16 | 1972u16 | 1973u16 | 1974u16 | 1975u16
            | 1976u16 | 1977u16 | 1978u16 | 1979u16 | 1980u16 | 1981u16 | 1982u16 | 1983u16
            | 1984u16 | 1985u16 | 1986u16 | 1987u16 | 1988u16 | 1989u16 | 1990u16 | 1991u16 => {
                BlockKind::DetectorRail
            }
            1992u16 | 1993u16 | 1994u16 | 1995u16 | 1996u16 | 1997u16 | 1998u16 | 1999u16
            | 2000u16 | 2001u16 | 2002u16 | 2003u16 => BlockKind::StickyPiston,
            2004u16 => BlockKind::Cobweb,
            2005u16 => BlockKind::Grass,
            2006u16 => BlockKind::Fern,
            2007u16 => BlockKind::DeadBush,
            2008u16 => BlockKind::Seagrass,
            2009u16 | 2010u16 => BlockKind::TallSeagrass,
            2011u16 | 2012u16 | 2013u16 | 2014u16 | 2015u16 | 2016u16 | 2017u16 | 2018u16
            | 2019u16 | 2020u16 | 2021u16 | 2022u16 => BlockKind::Piston,
            2023u16 | 2024u16 | 2025u16 | 2026u16 | 2027u16 | 2028u16 | 2029u16 | 2030u16
            | 2031u16 | 2032u16 | 2033u16 | 2034u16 | 2035u16 | 2036u16 | 2037u16 | 2038u16
            | 2039u16 | 2040u16 | 2041u16 | 2042u16 | 2043u16 | 2044u16 | 2045u16 | 2046u16 => {
                BlockKind::PistonHead
            }
            2047u16 => BlockKind::WhiteWool,
            2048u16 => BlockKind::OrangeWool,
            2049u16 => BlockKind::MagentaWool,
            2050u16 => BlockKind::LightBlueWool,
            2051u16 => BlockKind::YellowWool,
            2052u16 => BlockKind::LimeWool,
            2053u16 => BlockKind::PinkWool,
            2054u16 => BlockKind::GrayWool,
            2055u16 => BlockKind::LightGrayWool,
            2056u16 => BlockKind::CyanWool,
            2057u16 => BlockKind::PurpleWool,
            2058u16 => BlockKind::BlueWool,
            2059u16 => BlockKind::BrownWool,
            2060u16 => BlockKind::GreenWool,
            2061u16 => BlockKind::RedWool,
            2062u16 => BlockKind::BlackWool,
            2063u16 | 2064u16 | 2065u16 | 2066u16 | 2067u16 | 2068u16 | 2069u16 | 2070u16
            | 2071u16 | 2072u16 | 2073u16 | 2074u16 => BlockKind::MovingPiston,
            2075u16 => BlockKind::Dandelion,
            2076u16 => BlockKind::Torchflower,
            2077u16 => BlockKind::Poppy,
            2078u16 => BlockKind::BlueOrchid,
            2079u16 => BlockKind::Allium,
            2080u16 => BlockKind::AzureBluet,
            2081u16 => BlockKind::RedTulip,
            2082u16 => BlockKind::OrangeTulip,
            2083u16 => BlockKind::WhiteTulip,
            2084u16 => BlockKind::PinkTulip,
            2085u16 => BlockKind::OxeyeDaisy,
            2086u16 => BlockKind::Cornflower,
            2087u16 => BlockKind::WitherRose,
            2088u16 => BlockKind::LilyOfTheValley,
            2089u16 => BlockKind::BrownMushroom,
            2090u16 => BlockKind::RedMushroom,
            2091u16 => BlockKind::GoldBlock,
            2092u16 => BlockKind::IronBlock,
            2093u16 => BlockKind::Bricks,
            2094u16 | 2095u16 => BlockKind::Tnt,
            2096u16 => BlockKind::Bookshelf,
            2097u16 | 2098u16 | 2099u16 | 2100u16 | 2101u16 | 2102u16 | 2103u16 | 2104u16
            | 2105u16 | 2106u16 | 2107u16 | 2108u16 | 2109u16 | 2110u16 | 2111u16 | 2112u16
            | 2113u16 | 2114u16 | 2115u16 | 2116u16 | 2117u16 | 2118u16 | 2119u16 | 2120u16
            | 2121u16 | 2122u16 | 2123u16 | 2124u16 | 2125u16 | 2126u16 | 2127u16 | 2128u16
            | 2129u16 | 2130u16 | 2131u16 | 2132u16 | 2133u16 | 2134u16 | 2135u16 | 2136u16
            | 2137u16 | 2138u16 | 2139u16 | 2140u16 | 2141u16 | 2142u16 | 2143u16 | 2144u16
            | 2145u16 | 2146u16 | 2147u16 | 2148u16 | 2149u16 | 2150u16 | 2151u16 | 2152u16
            | 2153u16 | 2154u16 | 2155u16 | 2156u16 | 2157u16 | 2158u16 | 2159u16 | 2160u16
            | 2161u16 | 2162u16 | 2163u16 | 2164u16 | 2165u16 | 2166u16 | 2167u16 | 2168u16
            | 2169u16 | 2170u16 | 2171u16 | 2172u16 | 2173u16 | 2174u16 | 2175u16 | 2176u16
            | 2177u16 | 2178u16 | 2179u16 | 2180u16 | 2181u16 | 2182u16 | 2183u16 | 2184u16
            | 2185u16 | 2186u16 | 2187u16 | 2188u16 | 2189u16 | 2190u16 | 2191u16 | 2192u16
            | 2193u16 | 2194u16 | 2195u16 | 2196u16 | 2197u16 | 2198u16 | 2199u16 | 2200u16
            | 2201u16 | 2202u16 | 2203u16 | 2204u16 | 2205u16 | 2206u16 | 2207u16 | 2208u16
            | 2209u16 | 2210u16 | 2211u16 | 2212u16 | 2213u16 | 2214u16 | 2215u16 | 2216u16
            | 2217u16 | 2218u16 | 2219u16 | 2220u16 | 2221u16 | 2222u16 | 2223u16 | 2224u16
            | 2225u16 | 2226u16 | 2227u16 | 2228u16 | 2229u16 | 2230u16 | 2231u16 | 2232u16
            | 2233u16 | 2234u16 | 2235u16 | 2236u16 | 2237u16 | 2238u16 | 2239u16 | 2240u16
            | 2241u16 | 2242u16 | 2243u16 | 2244u16 | 2245u16 | 2246u16 | 2247u16 | 2248u16
            | 2249u16 | 2250u16 | 2251u16 | 2252u16 | 2253u16 | 2254u16 | 2255u16 | 2256u16
            | 2257u16 | 2258u16 | 2259u16 | 2260u16 | 2261u16 | 2262u16 | 2263u16 | 2264u16
            | 2265u16 | 2266u16 | 2267u16 | 2268u16 | 2269u16 | 2270u16 | 2271u16 | 2272u16
            | 2273u16 | 2274u16 | 2275u16 | 2276u16 | 2277u16 | 2278u16 | 2279u16 | 2280u16
            | 2281u16 | 2282u16 | 2283u16 | 2284u16 | 2285u16 | 2286u16 | 2287u16 | 2288u16
            | 2289u16 | 2290u16 | 2291u16 | 2292u16 | 2293u16 | 2294u16 | 2295u16 | 2296u16
            | 2297u16 | 2298u16 | 2299u16 | 2300u16 | 2301u16 | 2302u16 | 2303u16 | 2304u16
            | 2305u16 | 2306u16 | 2307u16 | 2308u16 | 2309u16 | 2310u16 | 2311u16 | 2312u16
            | 2313u16 | 2314u16 | 2315u16 | 2316u16 | 2317u16 | 2318u16 | 2319u16 | 2320u16
            | 2321u16 | 2322u16 | 2323u16 | 2324u16 | 2325u16 | 2326u16 | 2327u16 | 2328u16
            | 2329u16 | 2330u16 | 2331u16 | 2332u16 | 2333u16 | 2334u16 | 2335u16 | 2336u16
            | 2337u16 | 2338u16 | 2339u16 | 2340u16 | 2341u16 | 2342u16 | 2343u16 | 2344u16
            | 2345u16 | 2346u16 | 2347u16 | 2348u16 | 2349u16 | 2350u16 | 2351u16 | 2352u16 => {
                BlockKind::ChiseledBookshelf
            }
            2353u16 => BlockKind::MossyCobblestone,
            2354u16 => BlockKind::Obsidian,
            2355u16 => BlockKind::Torch,
            2356u16 | 2357u16 | 2358u16 | 2359u16 => BlockKind::WallTorch,
            2360u16 | 2361u16 | 2362u16 | 2363u16 | 2364u16 | 2365u16 | 2366u16 | 2367u16
            | 2368u16 | 2369u16 | 2370u16 | 2371u16 | 2372u16 | 2373u16 | 2374u16 | 2375u16
            | 2376u16 | 2377u16 | 2378u16 | 2379u16 | 2380u16 | 2381u16 | 2382u16 | 2383u16
            | 2384u16 | 2385u16 | 2386u16 | 2387u16 | 2388u16 | 2389u16 | 2390u16 | 2391u16
            | 2392u16 | 2393u16 | 2394u16 | 2395u16 | 2396u16 | 2397u16 | 2398u16 | 2399u16
            | 2400u16 | 2401u16 | 2402u16 | 2403u16 | 2404u16 | 2405u16 | 2406u16 | 2407u16
            | 2408u16 | 2409u16 | 2410u16 | 2411u16 | 2412u16 | 2413u16 | 2414u16 | 2415u16
            | 2416u16 | 2417u16 | 2418u16 | 2419u16 | 2420u16 | 2421u16 | 2422u16 | 2423u16
            | 2424u16 | 2425u16 | 2426u16 | 2427u16 | 2428u16 | 2429u16 | 2430u16 | 2431u16
            | 2432u16 | 2433u16 | 2434u16 | 2435u16 | 2436u16 | 2437u16 | 2438u16 | 2439u16
            | 2440u16 | 2441u16 | 2442u16 | 2443u16 | 2444u16 | 2445u16 | 2446u16 | 2447u16
            | 2448u16 | 2449u16 | 2450u16 | 2451u16 | 2452u16 | 2453u16 | 2454u16 | 2455u16
            | 2456u16 | 2457u16 | 2458u16 | 2459u16 | 2460u16 | 2461u16 | 2462u16 | 2463u16
            | 2464u16 | 2465u16 | 2466u16 | 2467u16 | 2468u16 | 2469u16 | 2470u16 | 2471u16
            | 2472u16 | 2473u16 | 2474u16 | 2475u16 | 2476u16 | 2477u16 | 2478u16 | 2479u16
            | 2480u16 | 2481u16 | 2482u16 | 2483u16 | 2484u16 | 2485u16 | 2486u16 | 2487u16
            | 2488u16 | 2489u16 | 2490u16 | 2491u16 | 2492u16 | 2493u16 | 2494u16 | 2495u16
            | 2496u16 | 2497u16 | 2498u16 | 2499u16 | 2500u16 | 2501u16 | 2502u16 | 2503u16
            | 2504u16 | 2505u16 | 2506u16 | 2507u16 | 2508u16 | 2509u16 | 2510u16 | 2511u16
            | 2512u16 | 2513u16 | 2514u16 | 2515u16 | 2516u16 | 2517u16 | 2518u16 | 2519u16
            | 2520u16 | 2521u16 | 2522u16 | 2523u16 | 2524u16 | 2525u16 | 2526u16 | 2527u16
            | 2528u16 | 2529u16 | 2530u16 | 2531u16 | 2532u16 | 2533u16 | 2534u16 | 2535u16
            | 2536u16 | 2537u16 | 2538u16 | 2539u16 | 2540u16 | 2541u16 | 2542u16 | 2543u16
            | 2544u16 | 2545u16 | 2546u16 | 2547u16 | 2548u16 | 2549u16 | 2550u16 | 2551u16
            | 2552u16 | 2553u16 | 2554u16 | 2555u16 | 2556u16 | 2557u16 | 2558u16 | 2559u16
            | 2560u16 | 2561u16 | 2562u16 | 2563u16 | 2564u16 | 2565u16 | 2566u16 | 2567u16
            | 2568u16 | 2569u16 | 2570u16 | 2571u16 | 2572u16 | 2573u16 | 2574u16 | 2575u16
            | 2576u16 | 2577u16 | 2578u16 | 2579u16 | 2580u16 | 2581u16 | 2582u16 | 2583u16
            | 2584u16 | 2585u16 | 2586u16 | 2587u16 | 2588u16 | 2589u16 | 2590u16 | 2591u16
            | 2592u16 | 2593u16 | 2594u16 | 2595u16 | 2596u16 | 2597u16 | 2598u16 | 2599u16
            | 2600u16 | 2601u16 | 2602u16 | 2603u16 | 2604u16 | 2605u16 | 2606u16 | 2607u16
            | 2608u16 | 2609u16 | 2610u16 | 2611u16 | 2612u16 | 2613u16 | 2614u16 | 2615u16
            | 2616u16 | 2617u16 | 2618u16 | 2619u16 | 2620u16 | 2621u16 | 2622u16 | 2623u16
            | 2624u16 | 2625u16 | 2626u16 | 2627u16 | 2628u16 | 2629u16 | 2630u16 | 2631u16
            | 2632u16 | 2633u16 | 2634u16 | 2635u16 | 2636u16 | 2637u16 | 2638u16 | 2639u16
            | 2640u16 | 2641u16 | 2642u16 | 2643u16 | 2644u16 | 2645u16 | 2646u16 | 2647u16
            | 2648u16 | 2649u16 | 2650u16 | 2651u16 | 2652u16 | 2653u16 | 2654u16 | 2655u16
            | 2656u16 | 2657u16 | 2658u16 | 2659u16 | 2660u16 | 2661u16 | 2662u16 | 2663u16
            | 2664u16 | 2665u16 | 2666u16 | 2667u16 | 2668u16 | 2669u16 | 2670u16 | 2671u16
            | 2672u16 | 2673u16 | 2674u16 | 2675u16 | 2676u16 | 2677u16 | 2678u16 | 2679u16
            | 2680u16 | 2681u16 | 2682u16 | 2683u16 | 2684u16 | 2685u16 | 2686u16 | 2687u16
            | 2688u16 | 2689u16 | 2690u16 | 2691u16 | 2692u16 | 2693u16 | 2694u16 | 2695u16
            | 2696u16 | 2697u16 | 2698u16 | 2699u16 | 2700u16 | 2701u16 | 2702u16 | 2703u16
            | 2704u16 | 2705u16 | 2706u16 | 2707u16 | 2708u16 | 2709u16 | 2710u16 | 2711u16
            | 2712u16 | 2713u16 | 2714u16 | 2715u16 | 2716u16 | 2717u16 | 2718u16 | 2719u16
            | 2720u16 | 2721u16 | 2722u16 | 2723u16 | 2724u16 | 2725u16 | 2726u16 | 2727u16
            | 2728u16 | 2729u16 | 2730u16 | 2731u16 | 2732u16 | 2733u16 | 2734u16 | 2735u16
            | 2736u16 | 2737u16 | 2738u16 | 2739u16 | 2740u16 | 2741u16 | 2742u16 | 2743u16
            | 2744u16 | 2745u16 | 2746u16 | 2747u16 | 2748u16 | 2749u16 | 2750u16 | 2751u16
            | 2752u16 | 2753u16 | 2754u16 | 2755u16 | 2756u16 | 2757u16 | 2758u16 | 2759u16
            | 2760u16 | 2761u16 | 2762u16 | 2763u16 | 2764u16 | 2765u16 | 2766u16 | 2767u16
            | 2768u16 | 2769u16 | 2770u16 | 2771u16 | 2772u16 | 2773u16 | 2774u16 | 2775u16
            | 2776u16 | 2777u16 | 2778u16 | 2779u16 | 2780u16 | 2781u16 | 2782u16 | 2783u16
            | 2784u16 | 2785u16 | 2786u16 | 2787u16 | 2788u16 | 2789u16 | 2790u16 | 2791u16
            | 2792u16 | 2793u16 | 2794u16 | 2795u16 | 2796u16 | 2797u16 | 2798u16 | 2799u16
            | 2800u16 | 2801u16 | 2802u16 | 2803u16 | 2804u16 | 2805u16 | 2806u16 | 2807u16
            | 2808u16 | 2809u16 | 2810u16 | 2811u16 | 2812u16 | 2813u16 | 2814u16 | 2815u16
            | 2816u16 | 2817u16 | 2818u16 | 2819u16 | 2820u16 | 2821u16 | 2822u16 | 2823u16
            | 2824u16 | 2825u16 | 2826u16 | 2827u16 | 2828u16 | 2829u16 | 2830u16 | 2831u16
            | 2832u16 | 2833u16 | 2834u16 | 2835u16 | 2836u16 | 2837u16 | 2838u16 | 2839u16
            | 2840u16 | 2841u16 | 2842u16 | 2843u16 | 2844u16 | 2845u16 | 2846u16 | 2847u16
            | 2848u16 | 2849u16 | 2850u16 | 2851u16 | 2852u16 | 2853u16 | 2854u16 | 2855u16
            | 2856u16 | 2857u16 | 2858u16 | 2859u16 | 2860u16 | 2861u16 | 2862u16 | 2863u16
            | 2864u16 | 2865u16 | 2866u16 | 2867u16 | 2868u16 | 2869u16 | 2870u16 | 2871u16 => {
                BlockKind::Fire
            }
            2872u16 => BlockKind::SoulFire,
            2873u16 => BlockKind::Spawner,
            2874u16 | 2875u16 | 2876u16 | 2877u16 | 2878u16 | 2879u16 | 2880u16 | 2881u16
            | 2882u16 | 2883u16 | 2884u16 | 2885u16 | 2886u16 | 2887u16 | 2888u16 | 2889u16
            | 2890u16 | 2891u16 | 2892u16 | 2893u16 | 2894u16 | 2895u16 | 2896u16 | 2897u16
            | 2898u16 | 2899u16 | 2900u16 | 2901u16 | 2902u16 | 2903u16 | 2904u16 | 2905u16
            | 2906u16 | 2907u16 | 2908u16 | 2909u16 | 2910u16 | 2911u16 | 2912u16 | 2913u16
            | 2914u16 | 2915u16 | 2916u16 | 2917u16 | 2918u16 | 2919u16 | 2920u16 | 2921u16
            | 2922u16 | 2923u16 | 2924u16 | 2925u16 | 2926u16 | 2927u16 | 2928u16 | 2929u16
            | 2930u16 | 2931u16 | 2932u16 | 2933u16 | 2934u16 | 2935u16 | 2936u16 | 2937u16
            | 2938u16 | 2939u16 | 2940u16 | 2941u16 | 2942u16 | 2943u16 | 2944u16 | 2945u16
            | 2946u16 | 2947u16 | 2948u16 | 2949u16 | 2950u16 | 2951u16 | 2952u16 | 2953u16 => {
                BlockKind::OakStairs
            }
            2954u16 | 2955u16 | 2956u16 | 2957u16 | 2958u16 | 2959u16 | 2960u16 | 2961u16
            | 2962u16 | 2963u16 | 2964u16 | 2965u16 | 2966u16 | 2967u16 | 2968u16 | 2969u16
            | 2970u16 | 2971u16 | 2972u16 | 2973u16 | 2974u16 | 2975u16 | 2976u16 | 2977u16 => {
                BlockKind::Chest
            }
            2978u16 | 2979u16 | 2980u16 | 2981u16 | 2982u16 | 2983u16 | 2984u16 | 2985u16
            | 2986u16 | 2987u16 | 2988u16 | 2989u16 | 2990u16 | 2991u16 | 2992u16 | 2993u16
            | 2994u16 | 2995u16 | 2996u16 | 2997u16 | 2998u16 | 2999u16 | 3000u16 | 3001u16
            | 3002u16 | 3003u16 | 3004u16 | 3005u16 | 3006u16 | 3007u16 | 3008u16 | 3009u16
            | 3010u16 | 3011u16 | 3012u16 | 3013u16 | 3014u16 | 3015u16 | 3016u16 | 3017u16
            | 3018u16 | 3019u16 | 3020u16 | 3021u16 | 3022u16 | 3023u16 | 3024u16 | 3025u16
            | 3026u16 | 3027u16 | 3028u16 | 3029u16 | 3030u16 | 3031u16 | 3032u16 | 3033u16
            | 3034u16 | 3035u16 | 3036u16 | 3037u16 | 3038u16 | 3039u16 | 3040u16 | 3041u16
            | 3042u16 | 3043u16 | 3044u16 | 3045u16 | 3046u16 | 3047u16 | 3048u16 | 3049u16
            | 3050u16 | 3051u16 | 3052u16 | 3053u16 | 3054u16 | 3055u16 | 3056u16 | 3057u16
            | 3058u16 | 3059u16 | 3060u16 | 3061u16 | 3062u16 | 3063u16 | 3064u16 | 3065u16
            | 3066u16 | 3067u16 | 3068u16 | 3069u16 | 3070u16 | 3071u16 | 3072u16 | 3073u16
            | 3074u16 | 3075u16 | 3076u16 | 3077u16 | 3078u16 | 3079u16 | 3080u16 | 3081u16
            | 3082u16 | 3083u16 | 3084u16 | 3085u16 | 3086u16 | 3087u16 | 3088u16 | 3089u16
            | 3090u16 | 3091u16 | 3092u16 | 3093u16 | 3094u16 | 3095u16 | 3096u16 | 3097u16
            | 3098u16 | 3099u16 | 3100u16 | 3101u16 | 3102u16 | 3103u16 | 3104u16 | 3105u16
            | 3106u16 | 3107u16 | 3108u16 | 3109u16 | 3110u16 | 3111u16 | 3112u16 | 3113u16
            | 3114u16 | 3115u16 | 3116u16 | 3117u16 | 3118u16 | 3119u16 | 3120u16 | 3121u16
            | 3122u16 | 3123u16 | 3124u16 | 3125u16 | 3126u16 | 3127u16 | 3128u16 | 3129u16
            | 3130u16 | 3131u16 | 3132u16 | 3133u16 | 3134u16 | 3135u16 | 3136u16 | 3137u16
            | 3138u16 | 3139u16 | 3140u16 | 3141u16 | 3142u16 | 3143u16 | 3144u16 | 3145u16
            | 3146u16 | 3147u16 | 3148u16 | 3149u16 | 3150u16 | 3151u16 | 3152u16 | 3153u16
            | 3154u16 | 3155u16 | 3156u16 | 3157u16 | 3158u16 | 3159u16 | 3160u16 | 3161u16
            | 3162u16 | 3163u16 | 3164u16 | 3165u16 | 3166u16 | 3167u16 | 3168u16 | 3169u16
            | 3170u16 | 3171u16 | 3172u16 | 3173u16 | 3174u16 | 3175u16 | 3176u16 | 3177u16
            | 3178u16 | 3179u16 | 3180u16 | 3181u16 | 3182u16 | 3183u16 | 3184u16 | 3185u16
            | 3186u16 | 3187u16 | 3188u16 | 3189u16 | 3190u16 | 3191u16 | 3192u16 | 3193u16
            | 3194u16 | 3195u16 | 3196u16 | 3197u16 | 3198u16 | 3199u16 | 3200u16 | 3201u16
            | 3202u16 | 3203u16 | 3204u16 | 3205u16 | 3206u16 | 3207u16 | 3208u16 | 3209u16
            | 3210u16 | 3211u16 | 3212u16 | 3213u16 | 3214u16 | 3215u16 | 3216u16 | 3217u16
            | 3218u16 | 3219u16 | 3220u16 | 3221u16 | 3222u16 | 3223u16 | 3224u16 | 3225u16
            | 3226u16 | 3227u16 | 3228u16 | 3229u16 | 3230u16 | 3231u16 | 3232u16 | 3233u16
            | 3234u16 | 3235u16 | 3236u16 | 3237u16 | 3238u16 | 3239u16 | 3240u16 | 3241u16
            | 3242u16 | 3243u16 | 3244u16 | 3245u16 | 3246u16 | 3247u16 | 3248u16 | 3249u16
            | 3250u16 | 3251u16 | 3252u16 | 3253u16 | 3254u16 | 3255u16 | 3256u16 | 3257u16
            | 3258u16 | 3259u16 | 3260u16 | 3261u16 | 3262u16 | 3263u16 | 3264u16 | 3265u16
            | 3266u16 | 3267u16 | 3268u16 | 3269u16 | 3270u16 | 3271u16 | 3272u16 | 3273u16
            | 3274u16 | 3275u16 | 3276u16 | 3277u16 | 3278u16 | 3279u16 | 3280u16 | 3281u16
            | 3282u16 | 3283u16 | 3284u16 | 3285u16 | 3286u16 | 3287u16 | 3288u16 | 3289u16
            | 3290u16 | 3291u16 | 3292u16 | 3293u16 | 3294u16 | 3295u16 | 3296u16 | 3297u16
            | 3298u16 | 3299u16 | 3300u16 | 3301u16 | 3302u16 | 3303u16 | 3304u16 | 3305u16
            | 3306u16 | 3307u16 | 3308u16 | 3309u16 | 3310u16 | 3311u16 | 3312u16 | 3313u16
            | 3314u16 | 3315u16 | 3316u16 | 3317u16 | 3318u16 | 3319u16 | 3320u16 | 3321u16
            | 3322u16 | 3323u16 | 3324u16 | 3325u16 | 3326u16 | 3327u16 | 3328u16 | 3329u16
            | 3330u16 | 3331u16 | 3332u16 | 3333u16 | 3334u16 | 3335u16 | 3336u16 | 3337u16
            | 3338u16 | 3339u16 | 3340u16 | 3341u16 | 3342u16 | 3343u16 | 3344u16 | 3345u16
            | 3346u16 | 3347u16 | 3348u16 | 3349u16 | 3350u16 | 3351u16 | 3352u16 | 3353u16
            | 3354u16 | 3355u16 | 3356u16 | 3357u16 | 3358u16 | 3359u16 | 3360u16 | 3361u16
            | 3362u16 | 3363u16 | 3364u16 | 3365u16 | 3366u16 | 3367u16 | 3368u16 | 3369u16
            | 3370u16 | 3371u16 | 3372u16 | 3373u16 | 3374u16 | 3375u16 | 3376u16 | 3377u16
            | 3378u16 | 3379u16 | 3380u16 | 3381u16 | 3382u16 | 3383u16 | 3384u16 | 3385u16
            | 3386u16 | 3387u16 | 3388u16 | 3389u16 | 3390u16 | 3391u16 | 3392u16 | 3393u16
            | 3394u16 | 3395u16 | 3396u16 | 3397u16 | 3398u16 | 3399u16 | 3400u16 | 3401u16
            | 3402u16 | 3403u16 | 3404u16 | 3405u16 | 3406u16 | 3407u16 | 3408u16 | 3409u16
            | 3410u16 | 3411u16 | 3412u16 | 3413u16 | 3414u16 | 3415u16 | 3416u16 | 3417u16
            | 3418u16 | 3419u16 | 3420u16 | 3421u16 | 3422u16 | 3423u16 | 3424u16 | 3425u16
            | 3426u16 | 3427u16 | 3428u16 | 3429u16 | 3430u16 | 3431u16 | 3432u16 | 3433u16
            | 3434u16 | 3435u16 | 3436u16 | 3437u16 | 3438u16 | 3439u16 | 3440u16 | 3441u16
            | 3442u16 | 3443u16 | 3444u16 | 3445u16 | 3446u16 | 3447u16 | 3448u16 | 3449u16
            | 3450u16 | 3451u16 | 3452u16 | 3453u16 | 3454u16 | 3455u16 | 3456u16 | 3457u16
            | 3458u16 | 3459u16 | 3460u16 | 3461u16 | 3462u16 | 3463u16 | 3464u16 | 3465u16
            | 3466u16 | 3467u16 | 3468u16 | 3469u16 | 3470u16 | 3471u16 | 3472u16 | 3473u16
            | 3474u16 | 3475u16 | 3476u16 | 3477u16 | 3478u16 | 3479u16 | 3480u16 | 3481u16
            | 3482u16 | 3483u16 | 3484u16 | 3485u16 | 3486u16 | 3487u16 | 3488u16 | 3489u16
            | 3490u16 | 3491u16 | 3492u16 | 3493u16 | 3494u16 | 3495u16 | 3496u16 | 3497u16
            | 3498u16 | 3499u16 | 3500u16 | 3501u16 | 3502u16 | 3503u16 | 3504u16 | 3505u16
            | 3506u16 | 3507u16 | 3508u16 | 3509u16 | 3510u16 | 3511u16 | 3512u16 | 3513u16
            | 3514u16 | 3515u16 | 3516u16 | 3517u16 | 3518u16 | 3519u16 | 3520u16 | 3521u16
            | 3522u16 | 3523u16 | 3524u16 | 3525u16 | 3526u16 | 3527u16 | 3528u16 | 3529u16
            | 3530u16 | 3531u16 | 3532u16 | 3533u16 | 3534u16 | 3535u16 | 3536u16 | 3537u16
            | 3538u16 | 3539u16 | 3540u16 | 3541u16 | 3542u16 | 3543u16 | 3544u16 | 3545u16
            | 3546u16 | 3547u16 | 3548u16 | 3549u16 | 3550u16 | 3551u16 | 3552u16 | 3553u16
            | 3554u16 | 3555u16 | 3556u16 | 3557u16 | 3558u16 | 3559u16 | 3560u16 | 3561u16
            | 3562u16 | 3563u16 | 3564u16 | 3565u16 | 3566u16 | 3567u16 | 3568u16 | 3569u16
            | 3570u16 | 3571u16 | 3572u16 | 3573u16 | 3574u16 | 3575u16 | 3576u16 | 3577u16
            | 3578u16 | 3579u16 | 3580u16 | 3581u16 | 3582u16 | 3583u16 | 3584u16 | 3585u16
            | 3586u16 | 3587u16 | 3588u16 | 3589u16 | 3590u16 | 3591u16 | 3592u16 | 3593u16
            | 3594u16 | 3595u16 | 3596u16 | 3597u16 | 3598u16 | 3599u16 | 3600u16 | 3601u16
            | 3602u16 | 3603u16 | 3604u16 | 3605u16 | 3606u16 | 3607u16 | 3608u16 | 3609u16
            | 3610u16 | 3611u16 | 3612u16 | 3613u16 | 3614u16 | 3615u16 | 3616u16 | 3617u16
            | 3618u16 | 3619u16 | 3620u16 | 3621u16 | 3622u16 | 3623u16 | 3624u16 | 3625u16
            | 3626u16 | 3627u16 | 3628u16 | 3629u16 | 3630u16 | 3631u16 | 3632u16 | 3633u16
            | 3634u16 | 3635u16 | 3636u16 | 3637u16 | 3638u16 | 3639u16 | 3640u16 | 3641u16
            | 3642u16 | 3643u16 | 3644u16 | 3645u16 | 3646u16 | 3647u16 | 3648u16 | 3649u16
            | 3650u16 | 3651u16 | 3652u16 | 3653u16 | 3654u16 | 3655u16 | 3656u16 | 3657u16
            | 3658u16 | 3659u16 | 3660u16 | 3661u16 | 3662u16 | 3663u16 | 3664u16 | 3665u16
            | 3666u16 | 3667u16 | 3668u16 | 3669u16 | 3670u16 | 3671u16 | 3672u16 | 3673u16
            | 3674u16 | 3675u16 | 3676u16 | 3677u16 | 3678u16 | 3679u16 | 3680u16 | 3681u16
            | 3682u16 | 3683u16 | 3684u16 | 3685u16 | 3686u16 | 3687u16 | 3688u16 | 3689u16
            | 3690u16 | 3691u16 | 3692u16 | 3693u16 | 3694u16 | 3695u16 | 3696u16 | 3697u16
            | 3698u16 | 3699u16 | 3700u16 | 3701u16 | 3702u16 | 3703u16 | 3704u16 | 3705u16
            | 3706u16 | 3707u16 | 3708u16 | 3709u16 | 3710u16 | 3711u16 | 3712u16 | 3713u16
            | 3714u16 | 3715u16 | 3716u16 | 3717u16 | 3718u16 | 3719u16 | 3720u16 | 3721u16
            | 3722u16 | 3723u16 | 3724u16 | 3725u16 | 3726u16 | 3727u16 | 3728u16 | 3729u16
            | 3730u16 | 3731u16 | 3732u16 | 3733u16 | 3734u16 | 3735u16 | 3736u16 | 3737u16
            | 3738u16 | 3739u16 | 3740u16 | 3741u16 | 3742u16 | 3743u16 | 3744u16 | 3745u16
            | 3746u16 | 3747u16 | 3748u16 | 3749u16 | 3750u16 | 3751u16 | 3752u16 | 3753u16
            | 3754u16 | 3755u16 | 3756u16 | 3757u16 | 3758u16 | 3759u16 | 3760u16 | 3761u16
            | 3762u16 | 3763u16 | 3764u16 | 3765u16 | 3766u16 | 3767u16 | 3768u16 | 3769u16
            | 3770u16 | 3771u16 | 3772u16 | 3773u16 | 3774u16 | 3775u16 | 3776u16 | 3777u16
            | 3778u16 | 3779u16 | 3780u16 | 3781u16 | 3782u16 | 3783u16 | 3784u16 | 3785u16
            | 3786u16 | 3787u16 | 3788u16 | 3789u16 | 3790u16 | 3791u16 | 3792u16 | 3793u16
            | 3794u16 | 3795u16 | 3796u16 | 3797u16 | 3798u16 | 3799u16 | 3800u16 | 3801u16
            | 3802u16 | 3803u16 | 3804u16 | 3805u16 | 3806u16 | 3807u16 | 3808u16 | 3809u16
            | 3810u16 | 3811u16 | 3812u16 | 3813u16 | 3814u16 | 3815u16 | 3816u16 | 3817u16
            | 3818u16 | 3819u16 | 3820u16 | 3821u16 | 3822u16 | 3823u16 | 3824u16 | 3825u16
            | 3826u16 | 3827u16 | 3828u16 | 3829u16 | 3830u16 | 3831u16 | 3832u16 | 3833u16
            | 3834u16 | 3835u16 | 3836u16 | 3837u16 | 3838u16 | 3839u16 | 3840u16 | 3841u16
            | 3842u16 | 3843u16 | 3844u16 | 3845u16 | 3846u16 | 3847u16 | 3848u16 | 3849u16
            | 3850u16 | 3851u16 | 3852u16 | 3853u16 | 3854u16 | 3855u16 | 3856u16 | 3857u16
            | 3858u16 | 3859u16 | 3860u16 | 3861u16 | 3862u16 | 3863u16 | 3864u16 | 3865u16
            | 3866u16 | 3867u16 | 3868u16 | 3869u16 | 3870u16 | 3871u16 | 3872u16 | 3873u16
            | 3874u16 | 3875u16 | 3876u16 | 3877u16 | 3878u16 | 3879u16 | 3880u16 | 3881u16
            | 3882u16 | 3883u16 | 3884u16 | 3885u16 | 3886u16 | 3887u16 | 3888u16 | 3889u16
            | 3890u16 | 3891u16 | 3892u16 | 3893u16 | 3894u16 | 3895u16 | 3896u16 | 3897u16
            | 3898u16 | 3899u16 | 3900u16 | 3901u16 | 3902u16 | 3903u16 | 3904u16 | 3905u16
            | 3906u16 | 3907u16 | 3908u16 | 3909u16 | 3910u16 | 3911u16 | 3912u16 | 3913u16
            | 3914u16 | 3915u16 | 3916u16 | 3917u16 | 3918u16 | 3919u16 | 3920u16 | 3921u16
            | 3922u16 | 3923u16 | 3924u16 | 3925u16 | 3926u16 | 3927u16 | 3928u16 | 3929u16
            | 3930u16 | 3931u16 | 3932u16 | 3933u16 | 3934u16 | 3935u16 | 3936u16 | 3937u16
            | 3938u16 | 3939u16 | 3940u16 | 3941u16 | 3942u16 | 3943u16 | 3944u16 | 3945u16
            | 3946u16 | 3947u16 | 3948u16 | 3949u16 | 3950u16 | 3951u16 | 3952u16 | 3953u16
            | 3954u16 | 3955u16 | 3956u16 | 3957u16 | 3958u16 | 3959u16 | 3960u16 | 3961u16
            | 3962u16 | 3963u16 | 3964u16 | 3965u16 | 3966u16 | 3967u16 | 3968u16 | 3969u16
            | 3970u16 | 3971u16 | 3972u16 | 3973u16 | 3974u16 | 3975u16 | 3976u16 | 3977u16
            | 3978u16 | 3979u16 | 3980u16 | 3981u16 | 3982u16 | 3983u16 | 3984u16 | 3985u16
            | 3986u16 | 3987u16 | 3988u16 | 3989u16 | 3990u16 | 3991u16 | 3992u16 | 3993u16
            | 3994u16 | 3995u16 | 3996u16 | 3997u16 | 3998u16 | 3999u16 | 4000u16 | 4001u16
            | 4002u16 | 4003u16 | 4004u16 | 4005u16 | 4006u16 | 4007u16 | 4008u16 | 4009u16
            | 4010u16 | 4011u16 | 4012u16 | 4013u16 | 4014u16 | 4015u16 | 4016u16 | 4017u16
            | 4018u16 | 4019u16 | 4020u16 | 4021u16 | 4022u16 | 4023u16 | 4024u16 | 4025u16
            | 4026u16 | 4027u16 | 4028u16 | 4029u16 | 4030u16 | 4031u16 | 4032u16 | 4033u16
            | 4034u16 | 4035u16 | 4036u16 | 4037u16 | 4038u16 | 4039u16 | 4040u16 | 4041u16
            | 4042u16 | 4043u16 | 4044u16 | 4045u16 | 4046u16 | 4047u16 | 4048u16 | 4049u16
            | 4050u16 | 4051u16 | 4052u16 | 4053u16 | 4054u16 | 4055u16 | 4056u16 | 4057u16
            | 4058u16 | 4059u16 | 4060u16 | 4061u16 | 4062u16 | 4063u16 | 4064u16 | 4065u16
            | 4066u16 | 4067u16 | 4068u16 | 4069u16 | 4070u16 | 4071u16 | 4072u16 | 4073u16
            | 4074u16 | 4075u16 | 4076u16 | 4077u16 | 4078u16 | 4079u16 | 4080u16 | 4081u16
            | 4082u16 | 4083u16 | 4084u16 | 4085u16 | 4086u16 | 4087u16 | 4088u16 | 4089u16
            | 4090u16 | 4091u16 | 4092u16 | 4093u16 | 4094u16 | 4095u16 | 4096u16 | 4097u16
            | 4098u16 | 4099u16 | 4100u16 | 4101u16 | 4102u16 | 4103u16 | 4104u16 | 4105u16
            | 4106u16 | 4107u16 | 4108u16 | 4109u16 | 4110u16 | 4111u16 | 4112u16 | 4113u16
            | 4114u16 | 4115u16 | 4116u16 | 4117u16 | 4118u16 | 4119u16 | 4120u16 | 4121u16
            | 4122u16 | 4123u16 | 4124u16 | 4125u16 | 4126u16 | 4127u16 | 4128u16 | 4129u16
            | 4130u16 | 4131u16 | 4132u16 | 4133u16 | 4134u16 | 4135u16 | 4136u16 | 4137u16
            | 4138u16 | 4139u16 | 4140u16 | 4141u16 | 4142u16 | 4143u16 | 4144u16 | 4145u16
            | 4146u16 | 4147u16 | 4148u16 | 4149u16 | 4150u16 | 4151u16 | 4152u16 | 4153u16
            | 4154u16 | 4155u16 | 4156u16 | 4157u16 | 4158u16 | 4159u16 | 4160u16 | 4161u16
            | 4162u16 | 4163u16 | 4164u16 | 4165u16 | 4166u16 | 4167u16 | 4168u16 | 4169u16
            | 4170u16 | 4171u16 | 4172u16 | 4173u16 | 4174u16 | 4175u16 | 4176u16 | 4177u16
            | 4178u16 | 4179u16 | 4180u16 | 4181u16 | 4182u16 | 4183u16 | 4184u16 | 4185u16
            | 4186u16 | 4187u16 | 4188u16 | 4189u16 | 4190u16 | 4191u16 | 4192u16 | 4193u16
            | 4194u16 | 4195u16 | 4196u16 | 4197u16 | 4198u16 | 4199u16 | 4200u16 | 4201u16
            | 4202u16 | 4203u16 | 4204u16 | 4205u16 | 4206u16 | 4207u16 | 4208u16 | 4209u16
            | 4210u16 | 4211u16 | 4212u16 | 4213u16 | 4214u16 | 4215u16 | 4216u16 | 4217u16
            | 4218u16 | 4219u16 | 4220u16 | 4221u16 | 4222u16 | 4223u16 | 4224u16 | 4225u16
            | 4226u16 | 4227u16 | 4228u16 | 4229u16 | 4230u16 | 4231u16 | 4232u16 | 4233u16
            | 4234u16 | 4235u16 | 4236u16 | 4237u16 | 4238u16 | 4239u16 | 4240u16 | 4241u16
            | 4242u16 | 4243u16 | 4244u16 | 4245u16 | 4246u16 | 4247u16 | 4248u16 | 4249u16
            | 4250u16 | 4251u16 | 4252u16 | 4253u16 | 4254u16 | 4255u16 | 4256u16 | 4257u16
            | 4258u16 | 4259u16 | 4260u16 | 4261u16 | 4262u16 | 4263u16 | 4264u16 | 4265u16
            | 4266u16 | 4267u16 | 4268u16 | 4269u16 | 4270u16 | 4271u16 | 4272u16 | 4273u16 => {
                BlockKind::RedstoneWire
            }
            4274u16 => BlockKind::DiamondOre,
            4275u16 => BlockKind::DeepslateDiamondOre,
            4276u16 => BlockKind::DiamondBlock,
            4277u16 => BlockKind::CraftingTable,
            4278u16 | 4279u16 | 4280u16 | 4281u16 | 4282u16 | 4283u16 | 4284u16 | 4285u16 => {
                BlockKind::Wheat
            }
            4286u16 | 4287u16 | 4288u16 | 4289u16 | 4290u16 | 4291u16 | 4292u16 | 4293u16 => {
                BlockKind::Farmland
            }
            4294u16 | 4295u16 | 4296u16 | 4297u16 | 4298u16 | 4299u16 | 4300u16 | 4301u16 => {
                BlockKind::Furnace
            }
            4302u16 | 4303u16 | 4304u16 | 4305u16 | 4306u16 | 4307u16 | 4308u16 | 4309u16
            | 4310u16 | 4311u16 | 4312u16 | 4313u16 | 4314u16 | 4315u16 | 4316u16 | 4317u16
            | 4318u16 | 4319u16 | 4320u16 | 4321u16 | 4322u16 | 4323u16 | 4324u16 | 4325u16
            | 4326u16 | 4327u16 | 4328u16 | 4329u16 | 4330u16 | 4331u16 | 4332u16 | 4333u16 => {
                BlockKind::OakSign
            }
            4334u16 | 4335u16 | 4336u16 | 4337u16 | 4338u16 | 4339u16 | 4340u16 | 4341u16
            | 4342u16 | 4343u16 | 4344u16 | 4345u16 | 4346u16 | 4347u16 | 4348u16 | 4349u16
            | 4350u16 | 4351u16 | 4352u16 | 4353u16 | 4354u16 | 4355u16 | 4356u16 | 4357u16
            | 4358u16 | 4359u16 | 4360u16 | 4361u16 | 4362u16 | 4363u16 | 4364u16 | 4365u16 => {
                BlockKind::SpruceSign
            }
            4366u16 | 4367u16 | 4368u16 | 4369u16 | 4370u16 | 4371u16 | 4372u16 | 4373u16
            | 4374u16 | 4375u16 | 4376u16 | 4377u16 | 4378u16 | 4379u16 | 4380u16 | 4381u16
            | 4382u16 | 4383u16 | 4384u16 | 4385u16 | 4386u16 | 4387u16 | 4388u16 | 4389u16
            | 4390u16 | 4391u16 | 4392u16 | 4393u16 | 4394u16 | 4395u16 | 4396u16 | 4397u16 => {
                BlockKind::BirchSign
            }
            4398u16 | 4399u16 | 4400u16 | 4401u16 | 4402u16 | 4403u16 | 4404u16 | 4405u16
            | 4406u16 | 4407u16 | 4408u16 | 4409u16 | 4410u16 | 4411u16 | 4412u16 | 4413u16
            | 4414u16 | 4415u16 | 4416u16 | 4417u16 | 4418u16 | 4419u16 | 4420u16 | 4421u16
            | 4422u16 | 4423u16 | 4424u16 | 4425u16 | 4426u16 | 4427u16 | 4428u16 | 4429u16 => {
                BlockKind::AcaciaSign
            }
            4430u16 | 4431u16 | 4432u16 | 4433u16 | 4434u16 | 4435u16 | 4436u16 | 4437u16
            | 4438u16 | 4439u16 | 4440u16 | 4441u16 | 4442u16 | 4443u16 | 4444u16 | 4445u16
            | 4446u16 | 4447u16 | 4448u16 | 4449u16 | 4450u16 | 4451u16 | 4452u16 | 4453u16
            | 4454u16 | 4455u16 | 4456u16 | 4457u16 | 4458u16 | 4459u16 | 4460u16 | 4461u16 => {
                BlockKind::CherrySign
            }
            4462u16 | 4463u16 | 4464u16 | 4465u16 | 4466u16 | 4467u16 | 4468u16 | 4469u16
            | 4470u16 | 4471u16 | 4472u16 | 4473u16 | 4474u16 | 4475u16 | 4476u16 | 4477u16
            | 4478u16 | 4479u16 | 4480u16 | 4481u16 | 4482u16 | 4483u16 | 4484u16 | 4485u16
            | 4486u16 | 4487u16 | 4488u16 | 4489u16 | 4490u16 | 4491u16 | 4492u16 | 4493u16 => {
                BlockKind::JungleSign
            }
            4494u16 | 4495u16 | 4496u16 | 4497u16 | 4498u16 | 4499u16 | 4500u16 | 4501u16
            | 4502u16 | 4503u16 | 4504u16 | 4505u16 | 4506u16 | 4507u16 | 4508u16 | 4509u16
            | 4510u16 | 4511u16 | 4512u16 | 4513u16 | 4514u16 | 4515u16 | 4516u16 | 4517u16
            | 4518u16 | 4519u16 | 4520u16 | 4521u16 | 4522u16 | 4523u16 | 4524u16 | 4525u16 => {
                BlockKind::DarkOakSign
            }
            4526u16 | 4527u16 | 4528u16 | 4529u16 | 4530u16 | 4531u16 | 4532u16 | 4533u16
            | 4534u16 | 4535u16 | 4536u16 | 4537u16 | 4538u16 | 4539u16 | 4540u16 | 4541u16
            | 4542u16 | 4543u16 | 4544u16 | 4545u16 | 4546u16 | 4547u16 | 4548u16 | 4549u16
            | 4550u16 | 4551u16 | 4552u16 | 4553u16 | 4554u16 | 4555u16 | 4556u16 | 4557u16 => {
                BlockKind::MangroveSign
            }
            4558u16 | 4559u16 | 4560u16 | 4561u16 | 4562u16 | 4563u16 | 4564u16 | 4565u16
            | 4566u16 | 4567u16 | 4568u16 | 4569u16 | 4570u16 | 4571u16 | 4572u16 | 4573u16
            | 4574u16 | 4575u16 | 4576u16 | 4577u16 | 4578u16 | 4579u16 | 4580u16 | 4581u16
            | 4582u16 | 4583u16 | 4584u16 | 4585u16 | 4586u16 | 4587u16 | 4588u16 | 4589u16 => {
                BlockKind::BambooSign
            }
            4590u16 | 4591u16 | 4592u16 | 4593u16 | 4594u16 | 4595u16 | 4596u16 | 4597u16
            | 4598u16 | 4599u16 | 4600u16 | 4601u16 | 4602u16 | 4603u16 | 4604u16 | 4605u16
            | 4606u16 | 4607u16 | 4608u16 | 4609u16 | 4610u16 | 4611u16 | 4612u16 | 4613u16
            | 4614u16 | 4615u16 | 4616u16 | 4617u16 | 4618u16 | 4619u16 | 4620u16 | 4621u16
            | 4622u16 | 4623u16 | 4624u16 | 4625u16 | 4626u16 | 4627u16 | 4628u16 | 4629u16
            | 4630u16 | 4631u16 | 4632u16 | 4633u16 | 4634u16 | 4635u16 | 4636u16 | 4637u16
            | 4638u16 | 4639u16 | 4640u16 | 4641u16 | 4642u16 | 4643u16 | 4644u16 | 4645u16
            | 4646u16 | 4647u16 | 4648u16 | 4649u16 | 4650u16 | 4651u16 | 4652u16 | 4653u16 => {
                BlockKind::OakDoor
            }
            4654u16 | 4655u16 | 4656u16 | 4657u16 | 4658u16 | 4659u16 | 4660u16 | 4661u16 => {
                BlockKind::Ladder
            }
            4662u16 | 4663u16 | 4664u16 | 4665u16 | 4666u16 | 4667u16 | 4668u16 | 4669u16
            | 4670u16 | 4671u16 | 4672u16 | 4673u16 | 4674u16 | 4675u16 | 4676u16 | 4677u16
            | 4678u16 | 4679u16 | 4680u16 | 4681u16 => BlockKind::Rail,
            4682u16 | 4683u16 | 4684u16 | 4685u16 | 4686u16 | 4687u16 | 4688u16 | 4689u16
            | 4690u16 | 4691u16 | 4692u16 | 4693u16 | 4694u16 | 4695u16 | 4696u16 | 4697u16
            | 4698u16 | 4699u16 | 4700u16 | 4701u16 | 4702u16 | 4703u16 | 4704u16 | 4705u16
            | 4706u16 | 4707u16 | 4708u16 | 4709u16 | 4710u16 | 4711u16 | 4712u16 | 4713u16
            | 4714u16 | 4715u16 | 4716u16 | 4717u16 | 4718u16 | 4719u16 | 4720u16 | 4721u16
            | 4722u16 | 4723u16 | 4724u16 | 4725u16 | 4726u16 | 4727u16 | 4728u16 | 4729u16
            | 4730u16 | 4731u16 | 4732u16 | 4733u16 | 4734u16 | 4735u16 | 4736u16 | 4737u16
            | 4738u16 | 4739u16 | 4740u16 | 4741u16 | 4742u16 | 4743u16 | 4744u16 | 4745u16
            | 4746u16 | 4747u16 | 4748u16 | 4749u16 | 4750u16 | 4751u16 | 4752u16 | 4753u16
            | 4754u16 | 4755u16 | 4756u16 | 4757u16 | 4758u16 | 4759u16 | 4760u16 | 4761u16 => {
                BlockKind::CobblestoneStairs
            }
            4762u16 | 4763u16 | 4764u16 | 4765u16 | 4766u16 | 4767u16 | 4768u16 | 4769u16 => {
                BlockKind::OakWallSign
            }
            4770u16 | 4771u16 | 4772u16 | 4773u16 | 4774u16 | 4775u16 | 4776u16 | 4777u16 => {
                BlockKind::SpruceWallSign
            }
            4778u16 | 4779u16 | 4780u16 | 4781u16 | 4782u16 | 4783u16 | 4784u16 | 4785u16 => {
                BlockKind::BirchWallSign
            }
            4786u16 | 4787u16 | 4788u16 | 4789u16 | 4790u16 | 4791u16 | 4792u16 | 4793u16 => {
                BlockKind::AcaciaWallSign
            }
            4794u16 | 4795u16 | 4796u16 | 4797u16 | 4798u16 | 4799u16 | 4800u16 | 4801u16 => {
                BlockKind::CherryWallSign
            }
            4802u16 | 4803u16 | 4804u16 | 4805u16 | 4806u16 | 4807u16 | 4808u16 | 4809u16 => {
                BlockKind::JungleWallSign
            }
            4810u16 | 4811u16 | 4812u16 | 4813u16 | 4814u16 | 4815u16 | 4816u16 | 4817u16 => {
                BlockKind::DarkOakWallSign
            }
            4818u16 | 4819u16 | 4820u16 | 4821u16 | 4822u16 | 4823u16 | 4824u16 | 4825u16 => {
                BlockKind::MangroveWallSign
            }
            4826u16 | 4827u16 | 4828u16 | 4829u16 | 4830u16 | 4831u16 | 4832u16 | 4833u16 => {
                BlockKind::BambooWallSign
            }
            4834u16 | 4835u16 | 4836u16 | 4837u16 | 4838u16 | 4839u16 | 4840u16 | 4841u16
            | 4842u16 | 4843u16 | 4844u16 | 4845u16 | 4846u16 | 4847u16 | 4848u16 | 4849u16
            | 4850u16 | 4851u16 | 4852u16 | 4853u16 | 4854u16 | 4855u16 | 4856u16 | 4857u16
            | 4858u16 | 4859u16 | 4860u16 | 4861u16 | 4862u16 | 4863u16 | 4864u16 | 4865u16
            | 4866u16 | 4867u16 | 4868u16 | 4869u16 | 4870u16 | 4871u16 | 4872u16 | 4873u16
            | 4874u16 | 4875u16 | 4876u16 | 4877u16 | 4878u16 | 4879u16 | 4880u16 | 4881u16
            | 4882u16 | 4883u16 | 4884u16 | 4885u16 | 4886u16 | 4887u16 | 4888u16 | 4889u16
            | 4890u16 | 4891u16 | 4892u16 | 4893u16 | 4894u16 | 4895u16 | 4896u16 | 4897u16 => {
                BlockKind::OakHangingSign
            }
            4898u16 | 4899u16 | 4900u16 | 4901u16 | 4902u16 | 4903u16 | 4904u16 | 4905u16
            | 4906u16 | 4907u16 | 4908u16 | 4909u16 | 4910u16 | 4911u16 | 4912u16 | 4913u16
            | 4914u16 | 4915u16 | 4916u16 | 4917u16 | 4918u16 | 4919u16 | 4920u16 | 4921u16
            | 4922u16 | 4923u16 | 4924u16 | 4925u16 | 4926u16 | 4927u16 | 4928u16 | 4929u16
            | 4930u16 | 4931u16 | 4932u16 | 4933u16 | 4934u16 | 4935u16 | 4936u16 | 4937u16
            | 4938u16 | 4939u16 | 4940u16 | 4941u16 | 4942u16 | 4943u16 | 4944u16 | 4945u16
            | 4946u16 | 4947u16 | 4948u16 | 4949u16 | 4950u16 | 4951u16 | 4952u16 | 4953u16
            | 4954u16 | 4955u16 | 4956u16 | 4957u16 | 4958u16 | 4959u16 | 4960u16 | 4961u16 => {
                BlockKind::SpruceHangingSign
            }
            4962u16 | 4963u16 | 4964u16 | 4965u16 | 4966u16 | 4967u16 | 4968u16 | 4969u16
            | 4970u16 | 4971u16 | 4972u16 | 4973u16 | 4974u16 | 4975u16 | 4976u16 | 4977u16
            | 4978u16 | 4979u16 | 4980u16 | 4981u16 | 4982u16 | 4983u16 | 4984u16 | 4985u16
            | 4986u16 | 4987u16 | 4988u16 | 4989u16 | 4990u16 | 4991u16 | 4992u16 | 4993u16
            | 4994u16 | 4995u16 | 4996u16 | 4997u16 | 4998u16 | 4999u16 | 5000u16 | 5001u16
            | 5002u16 | 5003u16 | 5004u16 | 5005u16 | 5006u16 | 5007u16 | 5008u16 | 5009u16
            | 5010u16 | 5011u16 | 5012u16 | 5013u16 | 5014u16 | 5015u16 | 5016u16 | 5017u16
            | 5018u16 | 5019u16 | 5020u16 | 5021u16 | 5022u16 | 5023u16 | 5024u16 | 5025u16 => {
                BlockKind::BirchHangingSign
            }
            5026u16 | 5027u16 | 5028u16 | 5029u16 | 5030u16 | 5031u16 | 5032u16 | 5033u16
            | 5034u16 | 5035u16 | 5036u16 | 5037u16 | 5038u16 | 5039u16 | 5040u16 | 5041u16
            | 5042u16 | 5043u16 | 5044u16 | 5045u16 | 5046u16 | 5047u16 | 5048u16 | 5049u16
            | 5050u16 | 5051u16 | 5052u16 | 5053u16 | 5054u16 | 5055u16 | 5056u16 | 5057u16
            | 5058u16 | 5059u16 | 5060u16 | 5061u16 | 5062u16 | 5063u16 | 5064u16 | 5065u16
            | 5066u16 | 5067u16 | 5068u16 | 5069u16 | 5070u16 | 5071u16 | 5072u16 | 5073u16
            | 5074u16 | 5075u16 | 5076u16 | 5077u16 | 5078u16 | 5079u16 | 5080u16 | 5081u16
            | 5082u16 | 5083u16 | 5084u16 | 5085u16 | 5086u16 | 5087u16 | 5088u16 | 5089u16 => {
                BlockKind::AcaciaHangingSign
            }
            5090u16 | 5091u16 | 5092u16 | 5093u16 | 5094u16 | 5095u16 | 5096u16 | 5097u16
            | 5098u16 | 5099u16 | 5100u16 | 5101u16 | 5102u16 | 5103u16 | 5104u16 | 5105u16
            | 5106u16 | 5107u16 | 5108u16 | 5109u16 | 5110u16 | 5111u16 | 5112u16 | 5113u16
            | 5114u16 | 5115u16 | 5116u16 | 5117u16 | 5118u16 | 5119u16 | 5120u16 | 5121u16
            | 5122u16 | 5123u16 | 5124u16 | 5125u16 | 5126u16 | 5127u16 | 5128u16 | 5129u16
            | 5130u16 | 5131u16 | 5132u16 | 5133u16 | 5134u16 | 5135u16 | 5136u16 | 5137u16
            | 5138u16 | 5139u16 | 5140u16 | 5141u16 | 5142u16 | 5143u16 | 5144u16 | 5145u16
            | 5146u16 | 5147u16 | 5148u16 | 5149u16 | 5150u16 | 5151u16 | 5152u16 | 5153u16 => {
                BlockKind::CherryHangingSign
            }
            5154u16 | 5155u16 | 5156u16 | 5157u16 | 5158u16 | 5159u16 | 5160u16 | 5161u16
            | 5162u16 | 5163u16 | 5164u16 | 5165u16 | 5166u16 | 5167u16 | 5168u16 | 5169u16
            | 5170u16 | 5171u16 | 5172u16 | 5173u16 | 5174u16 | 5175u16 | 5176u16 | 5177u16
            | 5178u16 | 5179u16 | 5180u16 | 5181u16 | 5182u16 | 5183u16 | 5184u16 | 5185u16
            | 5186u16 | 5187u16 | 5188u16 | 5189u16 | 5190u16 | 5191u16 | 5192u16 | 5193u16
            | 5194u16 | 5195u16 | 5196u16 | 5197u16 | 5198u16 | 5199u16 | 5200u16 | 5201u16
            | 5202u16 | 5203u16 | 5204u16 | 5205u16 | 5206u16 | 5207u16 | 5208u16 | 5209u16
            | 5210u16 | 5211u16 | 5212u16 | 5213u16 | 5214u16 | 5215u16 | 5216u16 | 5217u16 => {
                BlockKind::JungleHangingSign
            }
            5218u16 | 5219u16 | 5220u16 | 5221u16 | 5222u16 | 5223u16 | 5224u16 | 5225u16
            | 5226u16 | 5227u16 | 5228u16 | 5229u16 | 5230u16 | 5231u16 | 5232u16 | 5233u16
            | 5234u16 | 5235u16 | 5236u16 | 5237u16 | 5238u16 | 5239u16 | 5240u16 | 5241u16
            | 5242u16 | 5243u16 | 5244u16 | 5245u16 | 5246u16 | 5247u16 | 5248u16 | 5249u16
            | 5250u16 | 5251u16 | 5252u16 | 5253u16 | 5254u16 | 5255u16 | 5256u16 | 5257u16
            | 5258u16 | 5259u16 | 5260u16 | 5261u16 | 5262u16 | 5263u16 | 5264u16 | 5265u16
            | 5266u16 | 5267u16 | 5268u16 | 5269u16 | 5270u16 | 5271u16 | 5272u16 | 5273u16
            | 5274u16 | 5275u16 | 5276u16 | 5277u16 | 5278u16 | 5279u16 | 5280u16 | 5281u16 => {
                BlockKind::DarkOakHangingSign
            }
            5282u16 | 5283u16 | 5284u16 | 5285u16 | 5286u16 | 5287u16 | 5288u16 | 5289u16
            | 5290u16 | 5291u16 | 5292u16 | 5293u16 | 5294u16 | 5295u16 | 5296u16 | 5297u16
            | 5298u16 | 5299u16 | 5300u16 | 5301u16 | 5302u16 | 5303u16 | 5304u16 | 5305u16
            | 5306u16 | 5307u16 | 5308u16 | 5309u16 | 5310u16 | 5311u16 | 5312u16 | 5313u16
            | 5314u16 | 5315u16 | 5316u16 | 5317u16 | 5318u16 | 5319u16 | 5320u16 | 5321u16
            | 5322u16 | 5323u16 | 5324u16 | 5325u16 | 5326u16 | 5327u16 | 5328u16 | 5329u16
            | 5330u16 | 5331u16 | 5332u16 | 5333u16 | 5334u16 | 5335u16 | 5336u16 | 5337u16
            | 5338u16 | 5339u16 | 5340u16 | 5341u16 | 5342u16 | 5343u16 | 5344u16 | 5345u16 => {
                BlockKind::CrimsonHangingSign
            }
            5346u16 | 5347u16 | 5348u16 | 5349u16 | 5350u16 | 5351u16 | 5352u16 | 5353u16
            | 5354u16 | 5355u16 | 5356u16 | 5357u16 | 5358u16 | 5359u16 | 5360u16 | 5361u16
            | 5362u16 | 5363u16 | 5364u16 | 5365u16 | 5366u16 | 5367u16 | 5368u16 | 5369u16
            | 5370u16 | 5371u16 | 5372u16 | 5373u16 | 5374u16 | 5375u16 | 5376u16 | 5377u16
            | 5378u16 | 5379u16 | 5380u16 | 5381u16 | 5382u16 | 5383u16 | 5384u16 | 5385u16
            | 5386u16 | 5387u16 | 5388u16 | 5389u16 | 5390u16 | 5391u16 | 5392u16 | 5393u16
            | 5394u16 | 5395u16 | 5396u16 | 5397u16 | 5398u16 | 5399u16 | 5400u16 | 5401u16
            | 5402u16 | 5403u16 | 5404u16 | 5405u16 | 5406u16 | 5407u16 | 5408u16 | 5409u16 => {
                BlockKind::WarpedHangingSign
            }
            5410u16 | 5411u16 | 5412u16 | 5413u16 | 5414u16 | 5415u16 | 5416u16 | 5417u16
            | 5418u16 | 5419u16 | 5420u16 | 5421u16 | 5422u16 | 5423u16 | 5424u16 | 5425u16
            | 5426u16 | 5427u16 | 5428u16 | 5429u16 | 5430u16 | 5431u16 | 5432u16 | 5433u16
            | 5434u16 | 5435u16 | 5436u16 | 5437u16 | 5438u16 | 5439u16 | 5440u16 | 5441u16
            | 5442u16 | 5443u16 | 5444u16 | 5445u16 | 5446u16 | 5447u16 | 5448u16 | 5449u16
            | 5450u16 | 5451u16 | 5452u16 | 5453u16 | 5454u16 | 5455u16 | 5456u16 | 5457u16
            | 5458u16 | 5459u16 | 5460u16 | 5461u16 | 5462u16 | 5463u16 | 5464u16 | 5465u16
            | 5466u16 | 5467u16 | 5468u16 | 5469u16 | 5470u16 | 5471u16 | 5472u16 | 5473u16 => {
                BlockKind::MangroveHangingSign
            }
            5474u16 | 5475u16 | 5476u16 | 5477u16 | 5478u16 | 5479u16 | 5480u16 | 5481u16
            | 5482u16 | 5483u16 | 5484u16 | 5485u16 | 5486u16 | 5487u16 | 5488u16 | 5489u16
            | 5490u16 | 5491u16 | 5492u16 | 5493u16 | 5494u16 | 5495u16 | 5496u16 | 5497u16
            | 5498u16 | 5499u16 | 5500u16 | 5501u16 | 5502u16 | 5503u16 | 5504u16 | 5505u16
            | 5506u16 | 5507u16 | 5508u16 | 5509u16 | 5510u16 | 5511u16 | 5512u16 | 5513u16
            | 5514u16 | 5515u16 | 5516u16 | 5517u16 | 5518u16 | 5519u16 | 5520u16 | 5521u16
            | 5522u16 | 5523u16 | 5524u16 | 5525u16 | 5526u16 | 5527u16 | 5528u16 | 5529u16
            | 5530u16 | 5531u16 | 5532u16 | 5533u16 | 5534u16 | 5535u16 | 5536u16 | 5537u16 => {
                BlockKind::BambooHangingSign
            }
            5538u16 | 5539u16 | 5540u16 | 5541u16 | 5542u16 | 5543u16 | 5544u16 | 5545u16 => {
                BlockKind::OakWallHangingSign
            }
            5546u16 | 5547u16 | 5548u16 | 5549u16 | 5550u16 | 5551u16 | 5552u16 | 5553u16 => {
                BlockKind::SpruceWallHangingSign
            }
            5554u16 | 5555u16 | 5556u16 | 5557u16 | 5558u16 | 5559u16 | 5560u16 | 5561u16 => {
                BlockKind::BirchWallHangingSign
            }
            5562u16 | 5563u16 | 5564u16 | 5565u16 | 5566u16 | 5567u16 | 5568u16 | 5569u16 => {
                BlockKind::AcaciaWallHangingSign
            }
            5570u16 | 5571u16 | 5572u16 | 5573u16 | 5574u16 | 5575u16 | 5576u16 | 5577u16 => {
                BlockKind::CherryWallHangingSign
            }
            5578u16 | 5579u16 | 5580u16 | 5581u16 | 5582u16 | 5583u16 | 5584u16 | 5585u16 => {
                BlockKind::JungleWallHangingSign
            }
            5586u16 | 5587u16 | 5588u16 | 5589u16 | 5590u16 | 5591u16 | 5592u16 | 5593u16 => {
                BlockKind::DarkOakWallHangingSign
            }
            5594u16 | 5595u16 | 5596u16 | 5597u16 | 5598u16 | 5599u16 | 5600u16 | 5601u16 => {
                BlockKind::MangroveWallHangingSign
            }
            5602u16 | 5603u16 | 5604u16 | 5605u16 | 5606u16 | 5607u16 | 5608u16 | 5609u16 => {
                BlockKind::CrimsonWallHangingSign
            }
            5610u16 | 5611u16 | 5612u16 | 5613u16 | 5614u16 | 5615u16 | 5616u16 | 5617u16 => {
                BlockKind::WarpedWallHangingSign
            }
            5618u16 | 5619u16 | 5620u16 | 5621u16 | 5622u16 | 5623u16 | 5624u16 | 5625u16 => {
                BlockKind::BambooWallHangingSign
            }
            5626u16 | 5627u16 | 5628u16 | 5629u16 | 5630u16 | 5631u16 | 5632u16 | 5633u16
            | 5634u16 | 5635u16 | 5636u16 | 5637u16 | 5638u16 | 5639u16 | 5640u16 | 5641u16
            | 5642u16 | 5643u16 | 5644u16 | 5645u16 | 5646u16 | 5647u16 | 5648u16 | 5649u16 => {
                BlockKind::Lever
            }
            5650u16 | 5651u16 => BlockKind::StonePressurePlate,
            5652u16 | 5653u16 | 5654u16 | 5655u16 | 5656u16 | 5657u16 | 5658u16 | 5659u16
            | 5660u16 | 5661u16 | 5662u16 | 5663u16 | 5664u16 | 5665u16 | 5666u16 | 5667u16
            | 5668u16 | 5669u16 | 5670u16 | 5671u16 | 5672u16 | 5673u16 | 5674u16 | 5675u16
            | 5676u16 | 5677u16 | 5678u16 | 5679u16 | 5680u16 | 5681u16 | 5682u16 | 5683u16
            | 5684u16 | 5685u16 | 5686u16 | 5687u16 | 5688u16 | 5689u16 | 5690u16 | 5691u16
            | 5692u16 | 5693u16 | 5694u16 | 5695u16 | 5696u16 | 5697u16 | 5698u16 | 5699u16
            | 5700u16 | 5701u16 | 5702u16 | 5703u16 | 5704u16 | 5705u16 | 5706u16 | 5707u16
            | 5708u16 | 5709u16 | 5710u16 | 5711u16 | 5712u16 | 5713u16 | 5714u16 | 5715u16 => {
                BlockKind::IronDoor
            }
            5716u16 | 5717u16 => BlockKind::OakPressurePlate,
            5718u16 | 5719u16 => BlockKind::SprucePressurePlate,
            5720u16 | 5721u16 => BlockKind::BirchPressurePlate,
            5722u16 | 5723u16 => BlockKind::JunglePressurePlate,
            5724u16 | 5725u16 => BlockKind::AcaciaPressurePlate,
            5726u16 | 5727u16 => BlockKind::CherryPressurePlate,
            5728u16 | 5729u16 => BlockKind::DarkOakPressurePlate,
            5730u16 | 5731u16 => BlockKind::MangrovePressurePlate,
            5732u16 | 5733u16 => BlockKind::BambooPressurePlate,
            5734u16 | 5735u16 => BlockKind::RedstoneOre,
            5736u16 | 5737u16 => BlockKind::DeepslateRedstoneOre,
            5738u16 | 5739u16 => BlockKind::RedstoneTorch,
            5740u16 | 5741u16 | 5742u16 | 5743u16 | 5744u16 | 5745u16 | 5746u16 | 5747u16 => {
                BlockKind::RedstoneWallTorch
            }
            5748u16 | 5749u16 | 5750u16 | 5751u16 | 5752u16 | 5753u16 | 5754u16 | 5755u16
            | 5756u16 | 5757u16 | 5758u16 | 5759u16 | 5760u16 | 5761u16 | 5762u16 | 5763u16
            | 5764u16 | 5765u16 | 5766u16 | 5767u16 | 5768u16 | 5769u16 | 5770u16 | 5771u16 => {
                BlockKind::StoneButton
            }
            5772u16 | 5773u16 | 5774u16 | 5775u16 | 5776u16 | 5777u16 | 5778u16 | 5779u16 => {
                BlockKind::Snow
            }
            5780u16 => BlockKind::Ice,
            5781u16 => BlockKind::SnowBlock,
            5782u16 | 5783u16 | 5784u16 | 5785u16 | 5786u16 | 5787u16 | 5788u16 | 5789u16
            | 5790u16 | 5791u16 | 5792u16 | 5793u16 | 5794u16 | 5795u16 | 5796u16 | 5797u16 => {
                BlockKind::Cactus
            }
            5798u16 => BlockKind::Clay,
            5799u16 | 5800u16 | 5801u16 | 5802u16 | 5803u16 | 5804u16 | 5805u16 | 5806u16
            | 5807u16 | 5808u16 | 5809u16 | 5810u16 | 5811u16 | 5812u16 | 5813u16 | 5814u16 => {
                BlockKind::SugarCane
            }
            5815u16 | 5816u16 => BlockKind::Jukebox,
            5817u16 | 5818u16 | 5819u16 | 5820u16 | 5821u16 | 5822u16 | 5823u16 | 5824u16
            | 5825u16 | 5826u16 | 5827u16 | 5828u16 | 5829u16 | 5830u16 | 5831u16 | 5832u16
            | 5833u16 | 5834u16 | 5835u16 | 5836u16 | 5837u16 | 5838u16 | 5839u16 | 5840u16
            | 5841u16 | 5842u16 | 5843u16 | 5844u16 | 5845u16 | 5846u16 | 5847u16 | 5848u16 => {
                BlockKind::OakFence
            }
            5849u16 => BlockKind::Pumpkin,
            5850u16 => BlockKind::Netherrack,
            5851u16 => BlockKind::SoulSand,
            5852u16 => BlockKind::SoulSoil,
            5853u16 | 5854u16 | 5855u16 => BlockKind::Basalt,
            5856u16 | 5857u16 | 5858u16 => BlockKind::PolishedBasalt,
            5859u16 => BlockKind::SoulTorch,
            5860u16 | 5861u16 | 5862u16 | 5863u16 => BlockKind::SoulWallTorch,
            5864u16 => BlockKind::Glowstone,
            5865u16 | 5866u16 => BlockKind::NetherPortal,
            5867u16 | 5868u16 | 5869u16 | 5870u16 => BlockKind::CarvedPumpkin,
            5871u16 | 5872u16 | 5873u16 | 5874u16 => BlockKind::JackOLantern,
            5875u16 | 5876u16 | 5877u16 | 5878u16 | 5879u16 | 5880u16 | 5881u16 => BlockKind::Cake,
            5882u16 | 5883u16 | 5884u16 | 5885u16 | 5886u16 | 5887u16 | 5888u16 | 5889u16
            | 5890u16 | 5891u16 | 5892u16 | 5893u16 | 5894u16 | 5895u16 | 5896u16 | 5897u16
            | 5898u16 | 5899u16 | 5900u16 | 5901u16 | 5902u16 | 5903u16 | 5904u16 | 5905u16
            | 5906u16 | 5907u16 | 5908u16 | 5909u16 | 5910u16 | 5911u16 | 5912u16 | 5913u16
            | 5914u16 | 5915u16 | 5916u16 | 5917u16 | 5918u16 | 5919u16 | 5920u16 | 5921u16
            | 5922u16 | 5923u16 | 5924u16 | 5925u16 | 5926u16 | 5927u16 | 5928u16 | 5929u16
            | 5930u16 | 5931u16 | 5932u16 | 5933u16 | 5934u16 | 5935u16 | 5936u16 | 5937u16
            | 5938u16 | 5939u16 | 5940u16 | 5941u16 | 5942u16 | 5943u16 | 5944u16 | 5945u16 => {
                BlockKind::Repeater
            }
            5946u16 => BlockKind::WhiteStainedGlass,
            5947u16 => BlockKind::OrangeStainedGlass,
            5948u16 => BlockKind::MagentaStainedGlass,
            5949u16 => BlockKind::LightBlueStainedGlass,
            5950u16 => BlockKind::YellowStainedGlass,
            5951u16 => BlockKind::LimeStainedGlass,
            5952u16 => BlockKind::PinkStainedGlass,
            5953u16 => BlockKind::GrayStainedGlass,
            5954u16 => BlockKind::LightGrayStainedGlass,
            5955u16 => BlockKind::CyanStainedGlass,
            5956u16 => BlockKind::PurpleStainedGlass,
            5957u16 => BlockKind::BlueStainedGlass,
            5958u16 => BlockKind::BrownStainedGlass,
            5959u16 => BlockKind::GreenStainedGlass,
            5960u16 => BlockKind::RedStainedGlass,
            5961u16 => BlockKind::BlackStainedGlass,
            5962u16 | 5963u16 | 5964u16 | 5965u16 | 5966u16 | 5967u16 | 5968u16 | 5969u16
            | 5970u16 | 5971u16 | 5972u16 | 5973u16 | 5974u16 | 5975u16 | 5976u16 | 5977u16
            | 5978u16 | 5979u16 | 5980u16 | 5981u16 | 5982u16 | 5983u16 | 5984u16 | 5985u16
            | 5986u16 | 5987u16 | 5988u16 | 5989u16 | 5990u16 | 5991u16 | 5992u16 | 5993u16
            | 5994u16 | 5995u16 | 5996u16 | 5997u16 | 5998u16 | 5999u16 | 6000u16 | 6001u16
            | 6002u16 | 6003u16 | 6004u16 | 6005u16 | 6006u16 | 6007u16 | 6008u16 | 6009u16
            | 6010u16 | 6011u16 | 6012u16 | 6013u16 | 6014u16 | 6015u16 | 6016u16 | 6017u16
            | 6018u16 | 6019u16 | 6020u16 | 6021u16 | 6022u16 | 6023u16 | 6024u16 | 6025u16 => {
                BlockKind::OakTrapdoor
            }
            6026u16 | 6027u16 | 6028u16 | 6029u16 | 6030u16 | 6031u16 | 6032u16 | 6033u16
            | 6034u16 | 6035u16 | 6036u16 | 6037u16 | 6038u16 | 6039u16 | 6040u16 | 6041u16
            | 6042u16 | 6043u16 | 6044u16 | 6045u16 | 6046u16 | 6047u16 | 6048u16 | 6049u16
            | 6050u16 | 6051u16 | 6052u16 | 6053u16 | 6054u16 | 6055u16 | 6056u16 | 6057u16
            | 6058u16 | 6059u16 | 6060u16 | 6061u16 | 6062u16 | 6063u16 | 6064u16 | 6065u16
            | 6066u16 | 6067u16 | 6068u16 | 6069u16 | 6070u16 | 6071u16 | 6072u16 | 6073u16
            | 6074u16 | 6075u16 | 6076u16 | 6077u16 | 6078u16 | 6079u16 | 6080u16 | 6081u16
            | 6082u16 | 6083u16 | 6084u16 | 6085u16 | 6086u16 | 6087u16 | 6088u16 | 6089u16 => {
                BlockKind::SpruceTrapdoor
            }
            6090u16 | 6091u16 | 6092u16 | 6093u16 | 6094u16 | 6095u16 | 6096u16 | 6097u16
            | 6098u16 | 6099u16 | 6100u16 | 6101u16 | 6102u16 | 6103u16 | 6104u16 | 6105u16
            | 6106u16 | 6107u16 | 6108u16 | 6109u16 | 6110u16 | 6111u16 | 6112u16 | 6113u16
            | 6114u16 | 6115u16 | 6116u16 | 6117u16 | 6118u16 | 6119u16 | 6120u16 | 6121u16
            | 6122u16 | 6123u16 | 6124u16 | 6125u16 | 6126u16 | 6127u16 | 6128u16 | 6129u16
            | 6130u16 | 6131u16 | 6132u16 | 6133u16 | 6134u16 | 6135u16 | 6136u16 | 6137u16
            | 6138u16 | 6139u16 | 6140u16 | 6141u16 | 6142u16 | 6143u16 | 6144u16 | 6145u16
            | 6146u16 | 6147u16 | 6148u16 | 6149u16 | 6150u16 | 6151u16 | 6152u16 | 6153u16 => {
                BlockKind::BirchTrapdoor
            }
            6154u16 | 6155u16 | 6156u16 | 6157u16 | 6158u16 | 6159u16 | 6160u16 | 6161u16
            | 6162u16 | 6163u16 | 6164u16 | 6165u16 | 6166u16 | 6167u16 | 6168u16 | 6169u16
            | 6170u16 | 6171u16 | 6172u16 | 6173u16 | 6174u16 | 6175u16 | 6176u16 | 6177u16
            | 6178u16 | 6179u16 | 6180u16 | 6181u16 | 6182u16 | 6183u16 | 6184u16 | 6185u16
            | 6186u16 | 6187u16 | 6188u16 | 6189u16 | 6190u16 | 6191u16 | 6192u16 | 6193u16
            | 6194u16 | 6195u16 | 6196u16 | 6197u16 | 6198u16 | 6199u16 | 6200u16 | 6201u16
            | 6202u16 | 6203u16 | 6204u16 | 6205u16 | 6206u16 | 6207u16 | 6208u16 | 6209u16
            | 6210u16 | 6211u16 | 6212u16 | 6213u16 | 6214u16 | 6215u16 | 6216u16 | 6217u16 => {
                BlockKind::JungleTrapdoor
            }
            6218u16 | 6219u16 | 6220u16 | 6221u16 | 6222u16 | 6223u16 | 6224u16 | 6225u16
            | 6226u16 | 6227u16 | 6228u16 | 6229u16 | 6230u16 | 6231u16 | 6232u16 | 6233u16
            | 6234u16 | 6235u16 | 6236u16 | 6237u16 | 6238u16 | 6239u16 | 6240u16 | 6241u16
            | 6242u16 | 6243u16 | 6244u16 | 6245u16 | 6246u16 | 6247u16 | 6248u16 | 6249u16
            | 6250u16 | 6251u16 | 6252u16 | 6253u16 | 6254u16 | 6255u16 | 6256u16 | 6257u16
            | 6258u16 | 6259u16 | 6260u16 | 6261u16 | 6262u16 | 6263u16 | 6264u16 | 6265u16
            | 6266u16 | 6267u16 | 6268u16 | 6269u16 | 6270u16 | 6271u16 | 6272u16 | 6273u16
            | 6274u16 | 6275u16 | 6276u16 | 6277u16 | 6278u16 | 6279u16 | 6280u16 | 6281u16 => {
                BlockKind::AcaciaTrapdoor
            }
            6282u16 | 6283u16 | 6284u16 | 6285u16 | 6286u16 | 6287u16 | 6288u16 | 6289u16
            | 6290u16 | 6291u16 | 6292u16 | 6293u16 | 6294u16 | 6295u16 | 6296u16 | 6297u16
            | 6298u16 | 6299u16 | 6300u16 | 6301u16 | 6302u16 | 6303u16 | 6304u16 | 6305u16
            | 6306u16 | 6307u16 | 6308u16 | 6309u16 | 6310u16 | 6311u16 | 6312u16 | 6313u16
            | 6314u16 | 6315u16 | 6316u16 | 6317u16 | 6318u16 | 6319u16 | 6320u16 | 6321u16
            | 6322u16 | 6323u16 | 6324u16 | 6325u16 | 6326u16 | 6327u16 | 6328u16 | 6329u16
            | 6330u16 | 6331u16 | 6332u16 | 6333u16 | 6334u16 | 6335u16 | 6336u16 | 6337u16
            | 6338u16 | 6339u16 | 6340u16 | 6341u16 | 6342u16 | 6343u16 | 6344u16 | 6345u16 => {
                BlockKind::CherryTrapdoor
            }
            6346u16 | 6347u16 | 6348u16 | 6349u16 | 6350u16 | 6351u16 | 6352u16 | 6353u16
            | 6354u16 | 6355u16 | 6356u16 | 6357u16 | 6358u16 | 6359u16 | 6360u16 | 6361u16
            | 6362u16 | 6363u16 | 6364u16 | 6365u16 | 6366u16 | 6367u16 | 6368u16 | 6369u16
            | 6370u16 | 6371u16 | 6372u16 | 6373u16 | 6374u16 | 6375u16 | 6376u16 | 6377u16
            | 6378u16 | 6379u16 | 6380u16 | 6381u16 | 6382u16 | 6383u16 | 6384u16 | 6385u16
            | 6386u16 | 6387u16 | 6388u16 | 6389u16 | 6390u16 | 6391u16 | 6392u16 | 6393u16
            | 6394u16 | 6395u16 | 6396u16 | 6397u16 | 6398u16 | 6399u16 | 6400u16 | 6401u16
            | 6402u16 | 6403u16 | 6404u16 | 6405u16 | 6406u16 | 6407u16 | 6408u16 | 6409u16 => {
                BlockKind::DarkOakTrapdoor
            }
            6410u16 | 6411u16 | 6412u16 | 6413u16 | 6414u16 | 6415u16 | 6416u16 | 6417u16
            | 6418u16 | 6419u16 | 6420u16 | 6421u16 | 6422u16 | 6423u16 | 6424u16 | 6425u16
            | 6426u16 | 6427u16 | 6428u16 | 6429u16 | 6430u16 | 6431u16 | 6432u16 | 6433u16
            | 6434u16 | 6435u16 | 6436u16 | 6437u16 | 6438u16 | 6439u16 | 6440u16 | 6441u16
            | 6442u16 | 6443u16 | 6444u16 | 6445u16 | 6446u16 | 6447u16 | 6448u16 | 6449u16
            | 6450u16 | 6451u16 | 6452u16 | 6453u16 | 6454u16 | 6455u16 | 6456u16 | 6457u16
            | 6458u16 | 6459u16 | 6460u16 | 6461u16 | 6462u16 | 6463u16 | 6464u16 | 6465u16
            | 6466u16 | 6467u16 | 6468u16 | 6469u16 | 6470u16 | 6471u16 | 6472u16 | 6473u16 => {
                BlockKind::MangroveTrapdoor
            }
            6474u16 | 6475u16 | 6476u16 | 6477u16 | 6478u16 | 6479u16 | 6480u16 | 6481u16
            | 6482u16 | 6483u16 | 6484u16 | 6485u16 | 6486u16 | 6487u16 | 6488u16 | 6489u16
            | 6490u16 | 6491u16 | 6492u16 | 6493u16 | 6494u16 | 6495u16 | 6496u16 | 6497u16
            | 6498u16 | 6499u16 | 6500u16 | 6501u16 | 6502u16 | 6503u16 | 6504u16 | 6505u16
            | 6506u16 | 6507u16 | 6508u16 | 6509u16 | 6510u16 | 6511u16 | 6512u16 | 6513u16
            | 6514u16 | 6515u16 | 6516u16 | 6517u16 | 6518u16 | 6519u16 | 6520u16 | 6521u16
            | 6522u16 | 6523u16 | 6524u16 | 6525u16 | 6526u16 | 6527u16 | 6528u16 | 6529u16
            | 6530u16 | 6531u16 | 6532u16 | 6533u16 | 6534u16 | 6535u16 | 6536u16 | 6537u16 => {
                BlockKind::BambooTrapdoor
            }
            6538u16 => BlockKind::StoneBricks,
            6539u16 => BlockKind::MossyStoneBricks,
            6540u16 => BlockKind::CrackedStoneBricks,
            6541u16 => BlockKind::ChiseledStoneBricks,
            6542u16 => BlockKind::PackedMud,
            6543u16 => BlockKind::MudBricks,
            6544u16 => BlockKind::InfestedStone,
            6545u16 => BlockKind::InfestedCobblestone,
            6546u16 => BlockKind::InfestedStoneBricks,
            6547u16 => BlockKind::InfestedMossyStoneBricks,
            6548u16 => BlockKind::InfestedCrackedStoneBricks,
            6549u16 => BlockKind::InfestedChiseledStoneBricks,
            6550u16 | 6551u16 | 6552u16 | 6553u16 | 6554u16 | 6555u16 | 6556u16 | 6557u16
            | 6558u16 | 6559u16 | 6560u16 | 6561u16 | 6562u16 | 6563u16 | 6564u16 | 6565u16
            | 6566u16 | 6567u16 | 6568u16 | 6569u16 | 6570u16 | 6571u16 | 6572u16 | 6573u16
            | 6574u16 | 6575u16 | 6576u16 | 6577u16 | 6578u16 | 6579u16 | 6580u16 | 6581u16
            | 6582u16 | 6583u16 | 6584u16 | 6585u16 | 6586u16 | 6587u16 | 6588u16 | 6589u16
            | 6590u16 | 6591u16 | 6592u16 | 6593u16 | 6594u16 | 6595u16 | 6596u16 | 6597u16
            | 6598u16 | 6599u16 | 6600u16 | 6601u16 | 6602u16 | 6603u16 | 6604u16 | 6605u16
            | 6606u16 | 6607u16 | 6608u16 | 6609u16 | 6610u16 | 6611u16 | 6612u16 | 6613u16 => {
                BlockKind::BrownMushroomBlock
            }
            6614u16 | 6615u16 | 6616u16 | 6617u16 | 6618u16 | 6619u16 | 6620u16 | 6621u16
            | 6622u16 | 6623u16 | 6624u16 | 6625u16 | 6626u16 | 6627u16 | 6628u16 | 6629u16
            | 6630u16 | 6631u16 | 6632u16 | 6633u16 | 6634u16 | 6635u16 | 6636u16 | 6637u16
            | 6638u16 | 6639u16 | 6640u16 | 6641u16 | 6642u16 | 6643u16 | 6644u16 | 6645u16
            | 6646u16 | 6647u16 | 6648u16 | 6649u16 | 6650u16 | 6651u16 | 6652u16 | 6653u16
            | 6654u16 | 6655u16 | 6656u16 | 6657u16 | 6658u16 | 6659u16 | 6660u16 | 6661u16
            | 6662u16 | 6663u16 | 6664u16 | 6665u16 | 6666u16 | 6667u16 | 6668u16 | 6669u16
            | 6670u16 | 6671u16 | 6672u16 | 6673u16 | 6674u16 | 6675u16 | 6676u16 | 6677u16 => {
                BlockKind::RedMushroomBlock
            }
            6678u16 | 6679u16 | 6680u16 | 6681u16 | 6682u16 | 6683u16 | 6684u16 | 6685u16
            | 6686u16 | 6687u16 | 6688u16 | 6689u16 | 6690u16 | 6691u16 | 6692u16 | 6693u16
            | 6694u16 | 6695u16 | 6696u16 | 6697u16 | 6698u16 | 6699u16 | 6700u16 | 6701u16
            | 6702u16 | 6703u16 | 6704u16 | 6705u16 | 6706u16 | 6707u16 | 6708u16 | 6709u16
            | 6710u16 | 6711u16 | 6712u16 | 6713u16 | 6714u16 | 6715u16 | 6716u16 | 6717u16
            | 6718u16 | 6719u16 | 6720u16 | 6721u16 | 6722u16 | 6723u16 | 6724u16 | 6725u16
            | 6726u16 | 6727u16 | 6728u16 | 6729u16 | 6730u16 | 6731u16 | 6732u16 | 6733u16
            | 6734u16 | 6735u16 | 6736u16 | 6737u16 | 6738u16 | 6739u16 | 6740u16 | 6741u16 => {
                BlockKind::MushroomStem
            }
            6742u16 | 6743u16 | 6744u16 | 6745u16 | 6746u16 | 6747u16 | 6748u16 | 6749u16
            | 6750u16 | 6751u16 | 6752u16 | 6753u16 | 6754u16 | 6755u16 | 6756u16 | 6757u16
            | 6758u16 | 6759u16 | 6760u16 | 6761u16 | 6762u16 | 6763u16 | 6764u16 | 6765u16
            | 6766u16 | 6767u16 | 6768u16 | 6769u16 | 6770u16 | 6771u16 | 6772u16 | 6773u16 => {
                BlockKind::IronBars
            }
            6774u16 | 6775u16 | 6776u16 | 6777u16 | 6778u16 | 6779u16 => BlockKind::Chain,
            6780u16 | 6781u16 | 6782u16 | 6783u16 | 6784u16 | 6785u16 | 6786u16 | 6787u16
            | 6788u16 | 6789u16 | 6790u16 | 6791u16 | 6792u16 | 6793u16 | 6794u16 | 6795u16
            | 6796u16 | 6797u16 | 6798u16 | 6799u16 | 6800u16 | 6801u16 | 6802u16 | 6803u16
            | 6804u16 | 6805u16 | 6806u16 | 6807u16 | 6808u16 | 6809u16 | 6810u16 | 6811u16 => {
                BlockKind::GlassPane
            }
            6812u16 => BlockKind::Melon,
            6813u16 | 6814u16 | 6815u16 | 6816u16 => BlockKind::AttachedPumpkinStem,
            6817u16 | 6818u16 | 6819u16 | 6820u16 => BlockKind::AttachedMelonStem,
            6821u16 | 6822u16 | 6823u16 | 6824u16 | 6825u16 | 6826u16 | 6827u16 | 6828u16 => {
                BlockKind::PumpkinStem
            }
            6829u16 | 6830u16 | 6831u16 | 6832u16 | 6833u16 | 6834u16 | 6835u16 | 6836u16 => {
                BlockKind::MelonStem
            }
            6837u16 | 6838u16 | 6839u16 | 6840u16 | 6841u16 | 6842u16 | 6843u16 | 6844u16
            | 6845u16 | 6846u16 | 6847u16 | 6848u16 | 6849u16 | 6850u16 | 6851u16 | 6852u16
            | 6853u16 | 6854u16 | 6855u16 | 6856u16 | 6857u16 | 6858u16 | 6859u16 | 6860u16
            | 6861u16 | 6862u16 | 6863u16 | 6864u16 | 6865u16 | 6866u16 | 6867u16 | 6868u16 => {
                BlockKind::Vine
            }
            6869u16 | 6870u16 | 6871u16 | 6872u16 | 6873u16 | 6874u16 | 6875u16 | 6876u16
            | 6877u16 | 6878u16 | 6879u16 | 6880u16 | 6881u16 | 6882u16 | 6883u16 | 6884u16
            | 6885u16 | 6886u16 | 6887u16 | 6888u16 | 6889u16 | 6890u16 | 6891u16 | 6892u16
            | 6893u16 | 6894u16 | 6895u16 | 6896u16 | 6897u16 | 6898u16 | 6899u16 | 6900u16
            | 6901u16 | 6902u16 | 6903u16 | 6904u16 | 6905u16 | 6906u16 | 6907u16 | 6908u16
            | 6909u16 | 6910u16 | 6911u16 | 6912u16 | 6913u16 | 6914u16 | 6915u16 | 6916u16
            | 6917u16 | 6918u16 | 6919u16 | 6920u16 | 6921u16 | 6922u16 | 6923u16 | 6924u16
            | 6925u16 | 6926u16 | 6927u16 | 6928u16 | 6929u16 | 6930u16 | 6931u16 | 6932u16
            | 6933u16 | 6934u16 | 6935u16 | 6936u16 | 6937u16 | 6938u16 | 6939u16 | 6940u16
            | 6941u16 | 6942u16 | 6943u16 | 6944u16 | 6945u16 | 6946u16 | 6947u16 | 6948u16
            | 6949u16 | 6950u16 | 6951u16 | 6952u16 | 6953u16 | 6954u16 | 6955u16 | 6956u16
            | 6957u16 | 6958u16 | 6959u16 | 6960u16 | 6961u16 | 6962u16 | 6963u16 | 6964u16
            | 6965u16 | 6966u16 | 6967u16 | 6968u16 | 6969u16 | 6970u16 | 6971u16 | 6972u16
            | 6973u16 | 6974u16 | 6975u16 | 6976u16 | 6977u16 | 6978u16 | 6979u16 | 6980u16
            | 6981u16 | 6982u16 | 6983u16 | 6984u16 | 6985u16 | 6986u16 | 6987u16 | 6988u16
            | 6989u16 | 6990u16 | 6991u16 | 6992u16 | 6993u16 | 6994u16 | 6995u16 | 6996u16 => {
                BlockKind::GlowLichen
            }
            6997u16 | 6998u16 | 6999u16 | 7000u16 | 7001u16 | 7002u16 | 7003u16 | 7004u16
            | 7005u16 | 7006u16 | 7007u16 | 7008u16 | 7009u16 | 7010u16 | 7011u16 | 7012u16
            | 7013u16 | 7014u16 | 7015u16 | 7016u16 | 7017u16 | 7018u16 | 7019u16 | 7020u16
            | 7021u16 | 7022u16 | 7023u16 | 7024u16 | 7025u16 | 7026u16 | 7027u16 | 7028u16 => {
                BlockKind::OakFenceGate
            }
            7029u16 | 7030u16 | 7031u16 | 7032u16 | 7033u16 | 7034u16 | 7035u16 | 7036u16
            | 7037u16 | 7038u16 | 7039u16 | 7040u16 | 7041u16 | 7042u16 | 7043u16 | 7044u16
            | 7045u16 | 7046u16 | 7047u16 | 7048u16 | 7049u16 | 7050u16 | 7051u16 | 7052u16
            | 7053u16 | 7054u16 | 7055u16 | 7056u16 | 7057u16 | 7058u16 | 7059u16 | 7060u16
            | 7061u16 | 7062u16 | 7063u16 | 7064u16 | 7065u16 | 7066u16 | 7067u16 | 7068u16
            | 7069u16 | 7070u16 | 7071u16 | 7072u16 | 7073u16 | 7074u16 | 7075u16 | 7076u16
            | 7077u16 | 7078u16 | 7079u16 | 7080u16 | 7081u16 | 7082u16 | 7083u16 | 7084u16
            | 7085u16 | 7086u16 | 7087u16 | 7088u16 | 7089u16 | 7090u16 | 7091u16 | 7092u16
            | 7093u16 | 7094u16 | 7095u16 | 7096u16 | 7097u16 | 7098u16 | 7099u16 | 7100u16
            | 7101u16 | 7102u16 | 7103u16 | 7104u16 | 7105u16 | 7106u16 | 7107u16 | 7108u16 => {
                BlockKind::BrickStairs
            }
            7109u16 | 7110u16 | 7111u16 | 7112u16 | 7113u16 | 7114u16 | 7115u16 | 7116u16
            | 7117u16 | 7118u16 | 7119u16 | 7120u16 | 7121u16 | 7122u16 | 7123u16 | 7124u16
            | 7125u16 | 7126u16 | 7127u16 | 7128u16 | 7129u16 | 7130u16 | 7131u16 | 7132u16
            | 7133u16 | 7134u16 | 7135u16 | 7136u16 | 7137u16 | 7138u16 | 7139u16 | 7140u16
            | 7141u16 | 7142u16 | 7143u16 | 7144u16 | 7145u16 | 7146u16 | 7147u16 | 7148u16
            | 7149u16 | 7150u16 | 7151u16 | 7152u16 | 7153u16 | 7154u16 | 7155u16 | 7156u16
            | 7157u16 | 7158u16 | 7159u16 | 7160u16 | 7161u16 | 7162u16 | 7163u16 | 7164u16
            | 7165u16 | 7166u16 | 7167u16 | 7168u16 | 7169u16 | 7170u16 | 7171u16 | 7172u16
            | 7173u16 | 7174u16 | 7175u16 | 7176u16 | 7177u16 | 7178u16 | 7179u16 | 7180u16
            | 7181u16 | 7182u16 | 7183u16 | 7184u16 | 7185u16 | 7186u16 | 7187u16 | 7188u16 => {
                BlockKind::StoneBrickStairs
            }
            7189u16 | 7190u16 | 7191u16 | 7192u16 | 7193u16 | 7194u16 | 7195u16 | 7196u16
            | 7197u16 | 7198u16 | 7199u16 | 7200u16 | 7201u16 | 7202u16 | 7203u16 | 7204u16
            | 7205u16 | 7206u16 | 7207u16 | 7208u16 | 7209u16 | 7210u16 | 7211u16 | 7212u16
            | 7213u16 | 7214u16 | 7215u16 | 7216u16 | 7217u16 | 7218u16 | 7219u16 | 7220u16
            | 7221u16 | 7222u16 | 7223u16 | 7224u16 | 7225u16 | 7226u16 | 7227u16 | 7228u16
            | 7229u16 | 7230u16 | 7231u16 | 7232u16 | 7233u16 | 7234u16 | 7235u16 | 7236u16
            | 7237u16 | 7238u16 | 7239u16 | 7240u16 | 7241u16 | 7242u16 | 7243u16 | 7244u16
            | 7245u16 | 7246u16 | 7247u16 | 7248u16 | 7249u16 | 7250u16 | 7251u16 | 7252u16
            | 7253u16 | 7254u16 | 7255u16 | 7256u16 | 7257u16 | 7258u16 | 7259u16 | 7260u16
            | 7261u16 | 7262u16 | 7263u16 | 7264u16 | 7265u16 | 7266u16 | 7267u16 | 7268u16 => {
                BlockKind::MudBrickStairs
            }
            7269u16 | 7270u16 => BlockKind::Mycelium,
            7271u16 => BlockKind::LilyPad,
            7272u16 => BlockKind::NetherBricks,
            7273u16 | 7274u16 | 7275u16 | 7276u16 | 7277u16 | 7278u16 | 7279u16 | 7280u16
            | 7281u16 | 7282u16 | 7283u16 | 7284u16 | 7285u16 | 7286u16 | 7287u16 | 7288u16
            | 7289u16 | 7290u16 | 7291u16 | 7292u16 | 7293u16 | 7294u16 | 7295u16 | 7296u16
            | 7297u16 | 7298u16 | 7299u16 | 7300u16 | 7301u16 | 7302u16 | 7303u16 | 7304u16 => {
                BlockKind::NetherBrickFence
            }
            7305u16 | 7306u16 | 7307u16 | 7308u16 | 7309u16 | 7310u16 | 7311u16 | 7312u16
            | 7313u16 | 7314u16 | 7315u16 | 7316u16 | 7317u16 | 7318u16 | 7319u16 | 7320u16
            | 7321u16 | 7322u16 | 7323u16 | 7324u16 | 7325u16 | 7326u16 | 7327u16 | 7328u16
            | 7329u16 | 7330u16 | 7331u16 | 7332u16 | 7333u16 | 7334u16 | 7335u16 | 7336u16
            | 7337u16 | 7338u16 | 7339u16 | 7340u16 | 7341u16 | 7342u16 | 7343u16 | 7344u16
            | 7345u16 | 7346u16 | 7347u16 | 7348u16 | 7349u16 | 7350u16 | 7351u16 | 7352u16
            | 7353u16 | 7354u16 | 7355u16 | 7356u16 | 7357u16 | 7358u16 | 7359u16 | 7360u16
            | 7361u16 | 7362u16 | 7363u16 | 7364u16 | 7365u16 | 7366u16 | 7367u16 | 7368u16
            | 7369u16 | 7370u16 | 7371u16 | 7372u16 | 7373u16 | 7374u16 | 7375u16 | 7376u16
            | 7377u16 | 7378u16 | 7379u16 | 7380u16 | 7381u16 | 7382u16 | 7383u16 | 7384u16 => {
                BlockKind::NetherBrickStairs
            }
            7385u16 | 7386u16 | 7387u16 | 7388u16 => BlockKind::NetherWart,
            7389u16 => BlockKind::EnchantingTable,
            7390u16 | 7391u16 | 7392u16 | 7393u16 | 7394u16 | 7395u16 | 7396u16 | 7397u16 => {
                BlockKind::BrewingStand
            }
            7398u16 => BlockKind::Cauldron,
            7399u16 | 7400u16 | 7401u16 => BlockKind::WaterCauldron,
            7402u16 => BlockKind::LavaCauldron,
            7403u16 | 7404u16 | 7405u16 => BlockKind::PowderSnowCauldron,
            7406u16 => BlockKind::EndPortal,
            7407u16 | 7408u16 | 7409u16 | 7410u16 | 7411u16 | 7412u16 | 7413u16 | 7414u16 => {
                BlockKind::EndPortalFrame
            }
            7415u16 => BlockKind::EndStone,
            7416u16 => BlockKind::DragonEgg,
            7417u16 | 7418u16 => BlockKind::RedstoneLamp,
            7419u16 | 7420u16 | 7421u16 | 7422u16 | 7423u16 | 7424u16 | 7425u16 | 7426u16
            | 7427u16 | 7428u16 | 7429u16 | 7430u16 => BlockKind::Cocoa,
            7431u16 | 7432u16 | 7433u16 | 7434u16 | 7435u16 | 7436u16 | 7437u16 | 7438u16
            | 7439u16 | 7440u16 | 7441u16 | 7442u16 | 7443u16 | 7444u16 | 7445u16 | 7446u16
            | 7447u16 | 7448u16 | 7449u16 | 7450u16 | 7451u16 | 7452u16 | 7453u16 | 7454u16
            | 7455u16 | 7456u16 | 7457u16 | 7458u16 | 7459u16 | 7460u16 | 7461u16 | 7462u16
            | 7463u16 | 7464u16 | 7465u16 | 7466u16 | 7467u16 | 7468u16 | 7469u16 | 7470u16
            | 7471u16 | 7472u16 | 7473u16 | 7474u16 | 7475u16 | 7476u16 | 7477u16 | 7478u16
            | 7479u16 | 7480u16 | 7481u16 | 7482u16 | 7483u16 | 7484u16 | 7485u16 | 7486u16
            | 7487u16 | 7488u16 | 7489u16 | 7490u16 | 7491u16 | 7492u16 | 7493u16 | 7494u16
            | 7495u16 | 7496u16 | 7497u16 | 7498u16 | 7499u16 | 7500u16 | 7501u16 | 7502u16
            | 7503u16 | 7504u16 | 7505u16 | 7506u16 | 7507u16 | 7508u16 | 7509u16 | 7510u16 => {
                BlockKind::SandstoneStairs
            }
            7511u16 => BlockKind::EmeraldOre,
            7512u16 => BlockKind::DeepslateEmeraldOre,
            7513u16 | 7514u16 | 7515u16 | 7516u16 | 7517u16 | 7518u16 | 7519u16 | 7520u16 => {
                BlockKind::EnderChest
            }
            7521u16 | 7522u16 | 7523u16 | 7524u16 | 7525u16 | 7526u16 | 7527u16 | 7528u16
            | 7529u16 | 7530u16 | 7531u16 | 7532u16 | 7533u16 | 7534u16 | 7535u16 | 7536u16 => {
                BlockKind::TripwireHook
            }
            7537u16 | 7538u16 | 7539u16 | 7540u16 | 7541u16 | 7542u16 | 7543u16 | 7544u16
            | 7545u16 | 7546u16 | 7547u16 | 7548u16 | 7549u16 | 7550u16 | 7551u16 | 7552u16
            | 7553u16 | 7554u16 | 7555u16 | 7556u16 | 7557u16 | 7558u16 | 7559u16 | 7560u16
            | 7561u16 | 7562u16 | 7563u16 | 7564u16 | 7565u16 | 7566u16 | 7567u16 | 7568u16
            | 7569u16 | 7570u16 | 7571u16 | 7572u16 | 7573u16 | 7574u16 | 7575u16 | 7576u16
            | 7577u16 | 7578u16 | 7579u16 | 7580u16 | 7581u16 | 7582u16 | 7583u16 | 7584u16
            | 7585u16 | 7586u16 | 7587u16 | 7588u16 | 7589u16 | 7590u16 | 7591u16 | 7592u16
            | 7593u16 | 7594u16 | 7595u16 | 7596u16 | 7597u16 | 7598u16 | 7599u16 | 7600u16
            | 7601u16 | 7602u16 | 7603u16 | 7604u16 | 7605u16 | 7606u16 | 7607u16 | 7608u16
            | 7609u16 | 7610u16 | 7611u16 | 7612u16 | 7613u16 | 7614u16 | 7615u16 | 7616u16
            | 7617u16 | 7618u16 | 7619u16 | 7620u16 | 7621u16 | 7622u16 | 7623u16 | 7624u16
            | 7625u16 | 7626u16 | 7627u16 | 7628u16 | 7629u16 | 7630u16 | 7631u16 | 7632u16
            | 7633u16 | 7634u16 | 7635u16 | 7636u16 | 7637u16 | 7638u16 | 7639u16 | 7640u16
            | 7641u16 | 7642u16 | 7643u16 | 7644u16 | 7645u16 | 7646u16 | 7647u16 | 7648u16
            | 7649u16 | 7650u16 | 7651u16 | 7652u16 | 7653u16 | 7654u16 | 7655u16 | 7656u16
            | 7657u16 | 7658u16 | 7659u16 | 7660u16 | 7661u16 | 7662u16 | 7663u16 | 7664u16 => {
                BlockKind::Tripwire
            }
            7665u16 => BlockKind::EmeraldBlock,
            7666u16 | 7667u16 | 7668u16 | 7669u16 | 7670u16 | 7671u16 | 7672u16 | 7673u16
            | 7674u16 | 7675u16 | 7676u16 | 7677u16 | 7678u16 | 7679u16 | 7680u16 | 7681u16
            | 7682u16 | 7683u16 | 7684u16 | 7685u16 | 7686u16 | 7687u16 | 7688u16 | 7689u16
            | 7690u16 | 7691u16 | 7692u16 | 7693u16 | 7694u16 | 7695u16 | 7696u16 | 7697u16
            | 7698u16 | 7699u16 | 7700u16 | 7701u16 | 7702u16 | 7703u16 | 7704u16 | 7705u16
            | 7706u16 | 7707u16 | 7708u16 | 7709u16 | 7710u16 | 7711u16 | 7712u16 | 7713u16
            | 7714u16 | 7715u16 | 7716u16 | 7717u16 | 7718u16 | 7719u16 | 7720u16 | 7721u16
            | 7722u16 | 7723u16 | 7724u16 | 7725u16 | 7726u16 | 7727u16 | 7728u16 | 7729u16
            | 7730u16 | 7731u16 | 7732u16 | 7733u16 | 7734u16 | 7735u16 | 7736u16 | 7737u16
            | 7738u16 | 7739u16 | 7740u16 | 7741u16 | 7742u16 | 7743u16 | 7744u16 | 7745u16 => {
                BlockKind::SpruceStairs
            }
            7746u16 | 7747u16 | 7748u16 | 7749u16 | 7750u16 | 7751u16 | 7752u16 | 7753u16
            | 7754u16 | 7755u16 | 7756u16 | 7757u16 | 7758u16 | 7759u16 | 7760u16 | 7761u16
            | 7762u16 | 7763u16 | 7764u16 | 7765u16 | 7766u16 | 7767u16 | 7768u16 | 7769u16
            | 7770u16 | 7771u16 | 7772u16 | 7773u16 | 7774u16 | 7775u16 | 7776u16 | 7777u16
            | 7778u16 | 7779u16 | 7780u16 | 7781u16 | 7782u16 | 7783u16 | 7784u16 | 7785u16
            | 7786u16 | 7787u16 | 7788u16 | 7789u16 | 7790u16 | 7791u16 | 7792u16 | 7793u16
            | 7794u16 | 7795u16 | 7796u16 | 7797u16 | 7798u16 | 7799u16 | 7800u16 | 7801u16
            | 7802u16 | 7803u16 | 7804u16 | 7805u16 | 7806u16 | 7807u16 | 7808u16 | 7809u16
            | 7810u16 | 7811u16 | 7812u16 | 7813u16 | 7814u16 | 7815u16 | 7816u16 | 7817u16
            | 7818u16 | 7819u16 | 7820u16 | 7821u16 | 7822u16 | 7823u16 | 7824u16 | 7825u16 => {
                BlockKind::BirchStairs
            }
            7826u16 | 7827u16 | 7828u16 | 7829u16 | 7830u16 | 7831u16 | 7832u16 | 7833u16
            | 7834u16 | 7835u16 | 7836u16 | 7837u16 | 7838u16 | 7839u16 | 7840u16 | 7841u16
            | 7842u16 | 7843u16 | 7844u16 | 7845u16 | 7846u16 | 7847u16 | 7848u16 | 7849u16
            | 7850u16 | 7851u16 | 7852u16 | 7853u16 | 7854u16 | 7855u16 | 7856u16 | 7857u16
            | 7858u16 | 7859u16 | 7860u16 | 7861u16 | 7862u16 | 7863u16 | 7864u16 | 7865u16
            | 7866u16 | 7867u16 | 7868u16 | 7869u16 | 7870u16 | 7871u16 | 7872u16 | 7873u16
            | 7874u16 | 7875u16 | 7876u16 | 7877u16 | 7878u16 | 7879u16 | 7880u16 | 7881u16
            | 7882u16 | 7883u16 | 7884u16 | 7885u16 | 7886u16 | 7887u16 | 7888u16 | 7889u16
            | 7890u16 | 7891u16 | 7892u16 | 7893u16 | 7894u16 | 7895u16 | 7896u16 | 7897u16
            | 7898u16 | 7899u16 | 7900u16 | 7901u16 | 7902u16 | 7903u16 | 7904u16 | 7905u16 => {
                BlockKind::JungleStairs
            }
            7906u16 | 7907u16 | 7908u16 | 7909u16 | 7910u16 | 7911u16 | 7912u16 | 7913u16
            | 7914u16 | 7915u16 | 7916u16 | 7917u16 => BlockKind::CommandBlock,
            7918u16 => BlockKind::Beacon,
            7919u16 | 7920u16 | 7921u16 | 7922u16 | 7923u16 | 7924u16 | 7925u16 | 7926u16
            | 7927u16 | 7928u16 | 7929u16 | 7930u16 | 7931u16 | 7932u16 | 7933u16 | 7934u16
            | 7935u16 | 7936u16 | 7937u16 | 7938u16 | 7939u16 | 7940u16 | 7941u16 | 7942u16
            | 7943u16 | 7944u16 | 7945u16 | 7946u16 | 7947u16 | 7948u16 | 7949u16 | 7950u16
            | 7951u16 | 7952u16 | 7953u16 | 7954u16 | 7955u16 | 7956u16 | 7957u16 | 7958u16
            | 7959u16 | 7960u16 | 7961u16 | 7962u16 | 7963u16 | 7964u16 | 7965u16 | 7966u16
            | 7967u16 | 7968u16 | 7969u16 | 7970u16 | 7971u16 | 7972u16 | 7973u16 | 7974u16
            | 7975u16 | 7976u16 | 7977u16 | 7978u16 | 7979u16 | 7980u16 | 7981u16 | 7982u16
            | 7983u16 | 7984u16 | 7985u16 | 7986u16 | 7987u16 | 7988u16 | 7989u16 | 7990u16
            | 7991u16 | 7992u16 | 7993u16 | 7994u16 | 7995u16 | 7996u16 | 7997u16 | 7998u16
            | 7999u16 | 8000u16 | 8001u16 | 8002u16 | 8003u16 | 8004u16 | 8005u16 | 8006u16
            | 8007u16 | 8008u16 | 8009u16 | 8010u16 | 8011u16 | 8012u16 | 8013u16 | 8014u16
            | 8015u16 | 8016u16 | 8017u16 | 8018u16 | 8019u16 | 8020u16 | 8021u16 | 8022u16
            | 8023u16 | 8024u16 | 8025u16 | 8026u16 | 8027u16 | 8028u16 | 8029u16 | 8030u16
            | 8031u16 | 8032u16 | 8033u16 | 8034u16 | 8035u16 | 8036u16 | 8037u16 | 8038u16
            | 8039u16 | 8040u16 | 8041u16 | 8042u16 | 8043u16 | 8044u16 | 8045u16 | 8046u16
            | 8047u16 | 8048u16 | 8049u16 | 8050u16 | 8051u16 | 8052u16 | 8053u16 | 8054u16
            | 8055u16 | 8056u16 | 8057u16 | 8058u16 | 8059u16 | 8060u16 | 8061u16 | 8062u16
            | 8063u16 | 8064u16 | 8065u16 | 8066u16 | 8067u16 | 8068u16 | 8069u16 | 8070u16
            | 8071u16 | 8072u16 | 8073u16 | 8074u16 | 8075u16 | 8076u16 | 8077u16 | 8078u16
            | 8079u16 | 8080u16 | 8081u16 | 8082u16 | 8083u16 | 8084u16 | 8085u16 | 8086u16
            | 8087u16 | 8088u16 | 8089u16 | 8090u16 | 8091u16 | 8092u16 | 8093u16 | 8094u16
            | 8095u16 | 8096u16 | 8097u16 | 8098u16 | 8099u16 | 8100u16 | 8101u16 | 8102u16
            | 8103u16 | 8104u16 | 8105u16 | 8106u16 | 8107u16 | 8108u16 | 8109u16 | 8110u16
            | 8111u16 | 8112u16 | 8113u16 | 8114u16 | 8115u16 | 8116u16 | 8117u16 | 8118u16
            | 8119u16 | 8120u16 | 8121u16 | 8122u16 | 8123u16 | 8124u16 | 8125u16 | 8126u16
            | 8127u16 | 8128u16 | 8129u16 | 8130u16 | 8131u16 | 8132u16 | 8133u16 | 8134u16
            | 8135u16 | 8136u16 | 8137u16 | 8138u16 | 8139u16 | 8140u16 | 8141u16 | 8142u16
            | 8143u16 | 8144u16 | 8145u16 | 8146u16 | 8147u16 | 8148u16 | 8149u16 | 8150u16
            | 8151u16 | 8152u16 | 8153u16 | 8154u16 | 8155u16 | 8156u16 | 8157u16 | 8158u16
            | 8159u16 | 8160u16 | 8161u16 | 8162u16 | 8163u16 | 8164u16 | 8165u16 | 8166u16
            | 8167u16 | 8168u16 | 8169u16 | 8170u16 | 8171u16 | 8172u16 | 8173u16 | 8174u16
            | 8175u16 | 8176u16 | 8177u16 | 8178u16 | 8179u16 | 8180u16 | 8181u16 | 8182u16
            | 8183u16 | 8184u16 | 8185u16 | 8186u16 | 8187u16 | 8188u16 | 8189u16 | 8190u16
            | 8191u16 | 8192u16 | 8193u16 | 8194u16 | 8195u16 | 8196u16 | 8197u16 | 8198u16
            | 8199u16 | 8200u16 | 8201u16 | 8202u16 | 8203u16 | 8204u16 | 8205u16 | 8206u16
            | 8207u16 | 8208u16 | 8209u16 | 8210u16 | 8211u16 | 8212u16 | 8213u16 | 8214u16
            | 8215u16 | 8216u16 | 8217u16 | 8218u16 | 8219u16 | 8220u16 | 8221u16 | 8222u16
            | 8223u16 | 8224u16 | 8225u16 | 8226u16 | 8227u16 | 8228u16 | 8229u16 | 8230u16
            | 8231u16 | 8232u16 | 8233u16 | 8234u16 | 8235u16 | 8236u16 | 8237u16 | 8238u16
            | 8239u16 | 8240u16 | 8241u16 | 8242u16 => BlockKind::CobblestoneWall,
            8243u16 | 8244u16 | 8245u16 | 8246u16 | 8247u16 | 8248u16 | 8249u16 | 8250u16
            | 8251u16 | 8252u16 | 8253u16 | 8254u16 | 8255u16 | 8256u16 | 8257u16 | 8258u16
            | 8259u16 | 8260u16 | 8261u16 | 8262u16 | 8263u16 | 8264u16 | 8265u16 | 8266u16
            | 8267u16 | 8268u16 | 8269u16 | 8270u16 | 8271u16 | 8272u16 | 8273u16 | 8274u16
            | 8275u16 | 8276u16 | 8277u16 | 8278u16 | 8279u16 | 8280u16 | 8281u16 | 8282u16
            | 8283u16 | 8284u16 | 8285u16 | 8286u16 | 8287u16 | 8288u16 | 8289u16 | 8290u16
            | 8291u16 | 8292u16 | 8293u16 | 8294u16 | 8295u16 | 8296u16 | 8297u16 | 8298u16
            | 8299u16 | 8300u16 | 8301u16 | 8302u16 | 8303u16 | 8304u16 | 8305u16 | 8306u16
            | 8307u16 | 8308u16 | 8309u16 | 8310u16 | 8311u16 | 8312u16 | 8313u16 | 8314u16
            | 8315u16 | 8316u16 | 8317u16 | 8318u16 | 8319u16 | 8320u16 | 8321u16 | 8322u16
            | 8323u16 | 8324u16 | 8325u16 | 8326u16 | 8327u16 | 8328u16 | 8329u16 | 8330u16
            | 8331u16 | 8332u16 | 8333u16 | 8334u16 | 8335u16 | 8336u16 | 8337u16 | 8338u16
            | 8339u16 | 8340u16 | 8341u16 | 8342u16 | 8343u16 | 8344u16 | 8345u16 | 8346u16
            | 8347u16 | 8348u16 | 8349u16 | 8350u16 | 8351u16 | 8352u16 | 8353u16 | 8354u16
            | 8355u16 | 8356u16 | 8357u16 | 8358u16 | 8359u16 | 8360u16 | 8361u16 | 8362u16
            | 8363u16 | 8364u16 | 8365u16 | 8366u16 | 8367u16 | 8368u16 | 8369u16 | 8370u16
            | 8371u16 | 8372u16 | 8373u16 | 8374u16 | 8375u16 | 8376u16 | 8377u16 | 8378u16
            | 8379u16 | 8380u16 | 8381u16 | 8382u16 | 8383u16 | 8384u16 | 8385u16 | 8386u16
            | 8387u16 | 8388u16 | 8389u16 | 8390u16 | 8391u16 | 8392u16 | 8393u16 | 8394u16
            | 8395u16 | 8396u16 | 8397u16 | 8398u16 | 8399u16 | 8400u16 | 8401u16 | 8402u16
            | 8403u16 | 8404u16 | 8405u16 | 8406u16 | 8407u16 | 8408u16 | 8409u16 | 8410u16
            | 8411u16 | 8412u16 | 8413u16 | 8414u16 | 8415u16 | 8416u16 | 8417u16 | 8418u16
            | 8419u16 | 8420u16 | 8421u16 | 8422u16 | 8423u16 | 8424u16 | 8425u16 | 8426u16
            | 8427u16 | 8428u16 | 8429u16 | 8430u16 | 8431u16 | 8432u16 | 8433u16 | 8434u16
            | 8435u16 | 8436u16 | 8437u16 | 8438u16 | 8439u16 | 8440u16 | 8441u16 | 8442u16
            | 8443u16 | 8444u16 | 8445u16 | 8446u16 | 8447u16 | 8448u16 | 8449u16 | 8450u16
            | 8451u16 | 8452u16 | 8453u16 | 8454u16 | 8455u16 | 8456u16 | 8457u16 | 8458u16
            | 8459u16 | 8460u16 | 8461u16 | 8462u16 | 8463u16 | 8464u16 | 8465u16 | 8466u16
            | 8467u16 | 8468u16 | 8469u16 | 8470u16 | 8471u16 | 8472u16 | 8473u16 | 8474u16
            | 8475u16 | 8476u16 | 8477u16 | 8478u16 | 8479u16 | 8480u16 | 8481u16 | 8482u16
            | 8483u16 | 8484u16 | 8485u16 | 8486u16 | 8487u16 | 8488u16 | 8489u16 | 8490u16
            | 8491u16 | 8492u16 | 8493u16 | 8494u16 | 8495u16 | 8496u16 | 8497u16 | 8498u16
            | 8499u16 | 8500u16 | 8501u16 | 8502u16 | 8503u16 | 8504u16 | 8505u16 | 8506u16
            | 8507u16 | 8508u16 | 8509u16 | 8510u16 | 8511u16 | 8512u16 | 8513u16 | 8514u16
            | 8515u16 | 8516u16 | 8517u16 | 8518u16 | 8519u16 | 8520u16 | 8521u16 | 8522u16
            | 8523u16 | 8524u16 | 8525u16 | 8526u16 | 8527u16 | 8528u16 | 8529u16 | 8530u16
            | 8531u16 | 8532u16 | 8533u16 | 8534u16 | 8535u16 | 8536u16 | 8537u16 | 8538u16
            | 8539u16 | 8540u16 | 8541u16 | 8542u16 | 8543u16 | 8544u16 | 8545u16 | 8546u16
            | 8547u16 | 8548u16 | 8549u16 | 8550u16 | 8551u16 | 8552u16 | 8553u16 | 8554u16
            | 8555u16 | 8556u16 | 8557u16 | 8558u16 | 8559u16 | 8560u16 | 8561u16 | 8562u16
            | 8563u16 | 8564u16 | 8565u16 | 8566u16 => BlockKind::MossyCobblestoneWall,
            8567u16 => BlockKind::FlowerPot,
            8568u16 => BlockKind::PottedTorchflower,
            8569u16 => BlockKind::PottedOakSapling,
            8570u16 => BlockKind::PottedSpruceSapling,
            8571u16 => BlockKind::PottedBirchSapling,
            8572u16 => BlockKind::PottedJungleSapling,
            8573u16 => BlockKind::PottedAcaciaSapling,
            8574u16 => BlockKind::PottedCherrySapling,
            8575u16 => BlockKind::PottedDarkOakSapling,
            8576u16 => BlockKind::PottedMangrovePropagule,
            8577u16 => BlockKind::PottedFern,
            8578u16 => BlockKind::PottedDandelion,
            8579u16 => BlockKind::PottedPoppy,
            8580u16 => BlockKind::PottedBlueOrchid,
            8581u16 => BlockKind::PottedAllium,
            8582u16 => BlockKind::PottedAzureBluet,
            8583u16 => BlockKind::PottedRedTulip,
            8584u16 => BlockKind::PottedOrangeTulip,
            8585u16 => BlockKind::PottedWhiteTulip,
            8586u16 => BlockKind::PottedPinkTulip,
            8587u16 => BlockKind::PottedOxeyeDaisy,
            8588u16 => BlockKind::PottedCornflower,
            8589u16 => BlockKind::PottedLilyOfTheValley,
            8590u16 => BlockKind::PottedWitherRose,
            8591u16 => BlockKind::PottedRedMushroom,
            8592u16 => BlockKind::PottedBrownMushroom,
            8593u16 => BlockKind::PottedDeadBush,
            8594u16 => BlockKind::PottedCactus,
            8595u16 | 8596u16 | 8597u16 | 8598u16 | 8599u16 | 8600u16 | 8601u16 | 8602u16 => {
                BlockKind::Carrots
            }
            8603u16 | 8604u16 | 8605u16 | 8606u16 | 8607u16 | 8608u16 | 8609u16 | 8610u16 => {
                BlockKind::Potatoes
            }
            8611u16 | 8612u16 | 8613u16 | 8614u16 | 8615u16 | 8616u16 | 8617u16 | 8618u16
            | 8619u16 | 8620u16 | 8621u16 | 8622u16 | 8623u16 | 8624u16 | 8625u16 | 8626u16
            | 8627u16 | 8628u16 | 8629u16 | 8630u16 | 8631u16 | 8632u16 | 8633u16 | 8634u16 => {
                BlockKind::OakButton
            }
            8635u16 | 8636u16 | 8637u16 | 8638u16 | 8639u16 | 8640u16 | 8641u16 | 8642u16
            | 8643u16 | 8644u16 | 8645u16 | 8646u16 | 8647u16 | 8648u16 | 8649u16 | 8650u16
            | 8651u16 | 8652u16 | 8653u16 | 8654u16 | 8655u16 | 8656u16 | 8657u16 | 8658u16 => {
                BlockKind::SpruceButton
            }
            8659u16 | 8660u16 | 8661u16 | 8662u16 | 8663u16 | 8664u16 | 8665u16 | 8666u16
            | 8667u16 | 8668u16 | 8669u16 | 8670u16 | 8671u16 | 8672u16 | 8673u16 | 8674u16
            | 8675u16 | 8676u16 | 8677u16 | 8678u16 | 8679u16 | 8680u16 | 8681u16 | 8682u16 => {
                BlockKind::BirchButton
            }
            8683u16 | 8684u16 | 8685u16 | 8686u16 | 8687u16 | 8688u16 | 8689u16 | 8690u16
            | 8691u16 | 8692u16 | 8693u16 | 8694u16 | 8695u16 | 8696u16 | 8697u16 | 8698u16
            | 8699u16 | 8700u16 | 8701u16 | 8702u16 | 8703u16 | 8704u16 | 8705u16 | 8706u16 => {
                BlockKind::JungleButton
            }
            8707u16 | 8708u16 | 8709u16 | 8710u16 | 8711u16 | 8712u16 | 8713u16 | 8714u16
            | 8715u16 | 8716u16 | 8717u16 | 8718u16 | 8719u16 | 8720u16 | 8721u16 | 8722u16
            | 8723u16 | 8724u16 | 8725u16 | 8726u16 | 8727u16 | 8728u16 | 8729u16 | 8730u16 => {
                BlockKind::AcaciaButton
            }
            8731u16 | 8732u16 | 8733u16 | 8734u16 | 8735u16 | 8736u16 | 8737u16 | 8738u16
            | 8739u16 | 8740u16 | 8741u16 | 8742u16 | 8743u16 | 8744u16 | 8745u16 | 8746u16
            | 8747u16 | 8748u16 | 8749u16 | 8750u16 | 8751u16 | 8752u16 | 8753u16 | 8754u16 => {
                BlockKind::CherryButton
            }
            8755u16 | 8756u16 | 8757u16 | 8758u16 | 8759u16 | 8760u16 | 8761u16 | 8762u16
            | 8763u16 | 8764u16 | 8765u16 | 8766u16 | 8767u16 | 8768u16 | 8769u16 | 8770u16
            | 8771u16 | 8772u16 | 8773u16 | 8774u16 | 8775u16 | 8776u16 | 8777u16 | 8778u16 => {
                BlockKind::DarkOakButton
            }
            8779u16 | 8780u16 | 8781u16 | 8782u16 | 8783u16 | 8784u16 | 8785u16 | 8786u16
            | 8787u16 | 8788u16 | 8789u16 | 8790u16 | 8791u16 | 8792u16 | 8793u16 | 8794u16
            | 8795u16 | 8796u16 | 8797u16 | 8798u16 | 8799u16 | 8800u16 | 8801u16 | 8802u16 => {
                BlockKind::MangroveButton
            }
            8803u16 | 8804u16 | 8805u16 | 8806u16 | 8807u16 | 8808u16 | 8809u16 | 8810u16
            | 8811u16 | 8812u16 | 8813u16 | 8814u16 | 8815u16 | 8816u16 | 8817u16 | 8818u16
            | 8819u16 | 8820u16 | 8821u16 | 8822u16 | 8823u16 | 8824u16 | 8825u16 | 8826u16 => {
                BlockKind::BambooButton
            }
            8827u16 | 8828u16 | 8829u16 | 8830u16 | 8831u16 | 8832u16 | 8833u16 | 8834u16
            | 8835u16 | 8836u16 | 8837u16 | 8838u16 | 8839u16 | 8840u16 | 8841u16 | 8842u16 => {
                BlockKind::SkeletonSkull
            }
            8843u16 | 8844u16 | 8845u16 | 8846u16 => BlockKind::SkeletonWallSkull,
            8847u16 | 8848u16 | 8849u16 | 8850u16 | 8851u16 | 8852u16 | 8853u16 | 8854u16
            | 8855u16 | 8856u16 | 8857u16 | 8858u16 | 8859u16 | 8860u16 | 8861u16 | 8862u16 => {
                BlockKind::WitherSkeletonSkull
            }
            8863u16 | 8864u16 | 8865u16 | 8866u16 => BlockKind::WitherSkeletonWallSkull,
            8867u16 | 8868u16 | 8869u16 | 8870u16 | 8871u16 | 8872u16 | 8873u16 | 8874u16
            | 8875u16 | 8876u16 | 8877u16 | 8878u16 | 8879u16 | 8880u16 | 8881u16 | 8882u16 => {
                BlockKind::ZombieHead
            }
            8883u16 | 8884u16 | 8885u16 | 8886u16 => BlockKind::ZombieWallHead,
            8887u16 | 8888u16 | 8889u16 | 8890u16 | 8891u16 | 8892u16 | 8893u16 | 8894u16
            | 8895u16 | 8896u16 | 8897u16 | 8898u16 | 8899u16 | 8900u16 | 8901u16 | 8902u16 => {
                BlockKind::PlayerHead
            }
            8903u16 | 8904u16 | 8905u16 | 8906u16 => BlockKind::PlayerWallHead,
            8907u16 | 8908u16 | 8909u16 | 8910u16 | 8911u16 | 8912u16 | 8913u16 | 8914u16
            | 8915u16 | 8916u16 | 8917u16 | 8918u16 | 8919u16 | 8920u16 | 8921u16 | 8922u16 => {
                BlockKind::CreeperHead
            }
            8923u16 | 8924u16 | 8925u16 | 8926u16 => BlockKind::CreeperWallHead,
            8927u16 | 8928u16 | 8929u16 | 8930u16 | 8931u16 | 8932u16 | 8933u16 | 8934u16
            | 8935u16 | 8936u16 | 8937u16 | 8938u16 | 8939u16 | 8940u16 | 8941u16 | 8942u16 => {
                BlockKind::DragonHead
            }
            8943u16 | 8944u16 | 8945u16 | 8946u16 => BlockKind::DragonWallHead,
            8947u16 | 8948u16 | 8949u16 | 8950u16 | 8951u16 | 8952u16 | 8953u16 | 8954u16
            | 8955u16 | 8956u16 | 8957u16 | 8958u16 | 8959u16 | 8960u16 | 8961u16 | 8962u16 => {
                BlockKind::PiglinHead
            }
            8963u16 | 8964u16 | 8965u16 | 8966u16 => BlockKind::PiglinWallHead,
            8967u16 | 8968u16 | 8969u16 | 8970u16 => BlockKind::Anvil,
            8971u16 | 8972u16 | 8973u16 | 8974u16 => BlockKind::ChippedAnvil,
            8975u16 | 8976u16 | 8977u16 | 8978u16 => BlockKind::DamagedAnvil,
            8979u16 | 8980u16 | 8981u16 | 8982u16 | 8983u16 | 8984u16 | 8985u16 | 8986u16
            | 8987u16 | 8988u16 | 8989u16 | 8990u16 | 8991u16 | 8992u16 | 8993u16 | 8994u16
            | 8995u16 | 8996u16 | 8997u16 | 8998u16 | 8999u16 | 9000u16 | 9001u16 | 9002u16 => {
                BlockKind::TrappedChest
            }
            9003u16 | 9004u16 | 9005u16 | 9006u16 | 9007u16 | 9008u16 | 9009u16 | 9010u16
            | 9011u16 | 9012u16 | 9013u16 | 9014u16 | 9015u16 | 9016u16 | 9017u16 | 9018u16 => {
                BlockKind::LightWeightedPressurePlate
            }
            9019u16 | 9020u16 | 9021u16 | 9022u16 | 9023u16 | 9024u16 | 9025u16 | 9026u16
            | 9027u16 | 9028u16 | 9029u16 | 9030u16 | 9031u16 | 9032u16 | 9033u16 | 9034u16 => {
                BlockKind::HeavyWeightedPressurePlate
            }
            9035u16 | 9036u16 | 9037u16 | 9038u16 | 9039u16 | 9040u16 | 9041u16 | 9042u16
            | 9043u16 | 9044u16 | 9045u16 | 9046u16 | 9047u16 | 9048u16 | 9049u16 | 9050u16 => {
                BlockKind::Comparator
            }
            9051u16 | 9052u16 | 9053u16 | 9054u16 | 9055u16 | 9056u16 | 9057u16 | 9058u16
            | 9059u16 | 9060u16 | 9061u16 | 9062u16 | 9063u16 | 9064u16 | 9065u16 | 9066u16
            | 9067u16 | 9068u16 | 9069u16 | 9070u16 | 9071u16 | 9072u16 | 9073u16 | 9074u16
            | 9075u16 | 9076u16 | 9077u16 | 9078u16 | 9079u16 | 9080u16 | 9081u16 | 9082u16 => {
                BlockKind::DaylightDetector
            }
            9083u16 => BlockKind::RedstoneBlock,
            9084u16 => BlockKind::NetherQuartzOre,
            9085u16 | 9086u16 | 9087u16 | 9088u16 | 9089u16 | 9090u16 | 9091u16 | 9092u16
            | 9093u16 | 9094u16 => BlockKind::Hopper,
            9095u16 => BlockKind::QuartzBlock,
            9096u16 => BlockKind::ChiseledQuartzBlock,
            9097u16 | 9098u16 | 9099u16 => BlockKind::QuartzPillar,
            9100u16 | 9101u16 | 9102u16 | 9103u16 | 9104u16 | 9105u16 | 9106u16 | 9107u16
            | 9108u16 | 9109u16 | 9110u16 | 9111u16 | 9112u16 | 9113u16 | 9114u16 | 9115u16
            | 9116u16 | 9117u16 | 9118u16 | 9119u16 | 9120u16 | 9121u16 | 9122u16 | 9123u16
            | 9124u16 | 9125u16 | 9126u16 | 9127u16 | 9128u16 | 9129u16 | 9130u16 | 9131u16
            | 9132u16 | 9133u16 | 9134u16 | 9135u16 | 9136u16 | 9137u16 | 9138u16 | 9139u16
            | 9140u16 | 9141u16 | 9142u16 | 9143u16 | 9144u16 | 9145u16 | 9146u16 | 9147u16
            | 9148u16 | 9149u16 | 9150u16 | 9151u16 | 9152u16 | 9153u16 | 9154u16 | 9155u16
            | 9156u16 | 9157u16 | 9158u16 | 9159u16 | 9160u16 | 9161u16 | 9162u16 | 9163u16
            | 9164u16 | 9165u16 | 9166u16 | 9167u16 | 9168u16 | 9169u16 | 9170u16 | 9171u16
            | 9172u16 | 9173u16 | 9174u16 | 9175u16 | 9176u16 | 9177u16 | 9178u16 | 9179u16 => {
                BlockKind::QuartzStairs
            }
            9180u16 | 9181u16 | 9182u16 | 9183u16 | 9184u16 | 9185u16 | 9186u16 | 9187u16
            | 9188u16 | 9189u16 | 9190u16 | 9191u16 | 9192u16 | 9193u16 | 9194u16 | 9195u16
            | 9196u16 | 9197u16 | 9198u16 | 9199u16 | 9200u16 | 9201u16 | 9202u16 | 9203u16 => {
                BlockKind::ActivatorRail
            }
            9204u16 | 9205u16 | 9206u16 | 9207u16 | 9208u16 | 9209u16 | 9210u16 | 9211u16
            | 9212u16 | 9213u16 | 9214u16 | 9215u16 => BlockKind::Dropper,
            9216u16 => BlockKind::WhiteTerracotta,
            9217u16 => BlockKind::OrangeTerracotta,
            9218u16 => BlockKind::MagentaTerracotta,
            9219u16 => BlockKind::LightBlueTerracotta,
            9220u16 => BlockKind::YellowTerracotta,
            9221u16 => BlockKind::LimeTerracotta,
            9222u16 => BlockKind::PinkTerracotta,
            9223u16 => BlockKind::GrayTerracotta,
            9224u16 => BlockKind::LightGrayTerracotta,
            9225u16 => BlockKind::CyanTerracotta,
            9226u16 => BlockKind::PurpleTerracotta,
            9227u16 => BlockKind::BlueTerracotta,
            9228u16 => BlockKind::BrownTerracotta,
            9229u16 => BlockKind::GreenTerracotta,
            9230u16 => BlockKind::RedTerracotta,
            9231u16 => BlockKind::BlackTerracotta,
            9232u16 | 9233u16 | 9234u16 | 9235u16 | 9236u16 | 9237u16 | 9238u16 | 9239u16
            | 9240u16 | 9241u16 | 9242u16 | 9243u16 | 9244u16 | 9245u16 | 9246u16 | 9247u16
            | 9248u16 | 9249u16 | 9250u16 | 9251u16 | 9252u16 | 9253u16 | 9254u16 | 9255u16
            | 9256u16 | 9257u16 | 9258u16 | 9259u16 | 9260u16 | 9261u16 | 9262u16 | 9263u16 => {
                BlockKind::WhiteStainedGlassPane
            }
            9264u16 | 9265u16 | 9266u16 | 9267u16 | 9268u16 | 9269u16 | 9270u16 | 9271u16
            | 9272u16 | 9273u16 | 9274u16 | 9275u16 | 9276u16 | 9277u16 | 9278u16 | 9279u16
            | 9280u16 | 9281u16 | 9282u16 | 9283u16 | 9284u16 | 9285u16 | 9286u16 | 9287u16
            | 9288u16 | 9289u16 | 9290u16 | 9291u16 | 9292u16 | 9293u16 | 9294u16 | 9295u16 => {
                BlockKind::OrangeStainedGlassPane
            }
            9296u16 | 9297u16 | 9298u16 | 9299u16 | 9300u16 | 9301u16 | 9302u16 | 9303u16
            | 9304u16 | 9305u16 | 9306u16 | 9307u16 | 9308u16 | 9309u16 | 9310u16 | 9311u16
            | 9312u16 | 9313u16 | 9314u16 | 9315u16 | 9316u16 | 9317u16 | 9318u16 | 9319u16
            | 9320u16 | 9321u16 | 9322u16 | 9323u16 | 9324u16 | 9325u16 | 9326u16 | 9327u16 => {
                BlockKind::MagentaStainedGlassPane
            }
            9328u16 | 9329u16 | 9330u16 | 9331u16 | 9332u16 | 9333u16 | 9334u16 | 9335u16
            | 9336u16 | 9337u16 | 9338u16 | 9339u16 | 9340u16 | 9341u16 | 9342u16 | 9343u16
            | 9344u16 | 9345u16 | 9346u16 | 9347u16 | 9348u16 | 9349u16 | 9350u16 | 9351u16
            | 9352u16 | 9353u16 | 9354u16 | 9355u16 | 9356u16 | 9357u16 | 9358u16 | 9359u16 => {
                BlockKind::LightBlueStainedGlassPane
            }
            9360u16 | 9361u16 | 9362u16 | 9363u16 | 9364u16 | 9365u16 | 9366u16 | 9367u16
            | 9368u16 | 9369u16 | 9370u16 | 9371u16 | 9372u16 | 9373u16 | 9374u16 | 9375u16
            | 9376u16 | 9377u16 | 9378u16 | 9379u16 | 9380u16 | 9381u16 | 9382u16 | 9383u16
            | 9384u16 | 9385u16 | 9386u16 | 9387u16 | 9388u16 | 9389u16 | 9390u16 | 9391u16 => {
                BlockKind::YellowStainedGlassPane
            }
            9392u16 | 9393u16 | 9394u16 | 9395u16 | 9396u16 | 9397u16 | 9398u16 | 9399u16
            | 9400u16 | 9401u16 | 9402u16 | 9403u16 | 9404u16 | 9405u16 | 9406u16 | 9407u16
            | 9408u16 | 9409u16 | 9410u16 | 9411u16 | 9412u16 | 9413u16 | 9414u16 | 9415u16
            | 9416u16 | 9417u16 | 9418u16 | 9419u16 | 9420u16 | 9421u16 | 9422u16 | 9423u16 => {
                BlockKind::LimeStainedGlassPane
            }
            9424u16 | 9425u16 | 9426u16 | 9427u16 | 9428u16 | 9429u16 | 9430u16 | 9431u16
            | 9432u16 | 9433u16 | 9434u16 | 9435u16 | 9436u16 | 9437u16 | 9438u16 | 9439u16
            | 9440u16 | 9441u16 | 9442u16 | 9443u16 | 9444u16 | 9445u16 | 9446u16 | 9447u16
            | 9448u16 | 9449u16 | 9450u16 | 9451u16 | 9452u16 | 9453u16 | 9454u16 | 9455u16 => {
                BlockKind::PinkStainedGlassPane
            }
            9456u16 | 9457u16 | 9458u16 | 9459u16 | 9460u16 | 9461u16 | 9462u16 | 9463u16
            | 9464u16 | 9465u16 | 9466u16 | 9467u16 | 9468u16 | 9469u16 | 9470u16 | 9471u16
            | 9472u16 | 9473u16 | 9474u16 | 9475u16 | 9476u16 | 9477u16 | 9478u16 | 9479u16
            | 9480u16 | 9481u16 | 9482u16 | 9483u16 | 9484u16 | 9485u16 | 9486u16 | 9487u16 => {
                BlockKind::GrayStainedGlassPane
            }
            9488u16 | 9489u16 | 9490u16 | 9491u16 | 9492u16 | 9493u16 | 9494u16 | 9495u16
            | 9496u16 | 9497u16 | 9498u16 | 9499u16 | 9500u16 | 9501u16 | 9502u16 | 9503u16
            | 9504u16 | 9505u16 | 9506u16 | 9507u16 | 9508u16 | 9509u16 | 9510u16 | 9511u16
            | 9512u16 | 9513u16 | 9514u16 | 9515u16 | 9516u16 | 9517u16 | 9518u16 | 9519u16 => {
                BlockKind::LightGrayStainedGlassPane
            }
            9520u16 | 9521u16 | 9522u16 | 9523u16 | 9524u16 | 9525u16 | 9526u16 | 9527u16
            | 9528u16 | 9529u16 | 9530u16 | 9531u16 | 9532u16 | 9533u16 | 9534u16 | 9535u16
            | 9536u16 | 9537u16 | 9538u16 | 9539u16 | 9540u16 | 9541u16 | 9542u16 | 9543u16
            | 9544u16 | 9545u16 | 9546u16 | 9547u16 | 9548u16 | 9549u16 | 9550u16 | 9551u16 => {
                BlockKind::CyanStainedGlassPane
            }
            9552u16 | 9553u16 | 9554u16 | 9555u16 | 9556u16 | 9557u16 | 9558u16 | 9559u16
            | 9560u16 | 9561u16 | 9562u16 | 9563u16 | 9564u16 | 9565u16 | 9566u16 | 9567u16
            | 9568u16 | 9569u16 | 9570u16 | 9571u16 | 9572u16 | 9573u16 | 9574u16 | 9575u16
            | 9576u16 | 9577u16 | 9578u16 | 9579u16 | 9580u16 | 9581u16 | 9582u16 | 9583u16 => {
                BlockKind::PurpleStainedGlassPane
            }
            9584u16 | 9585u16 | 9586u16 | 9587u16 | 9588u16 | 9589u16 | 9590u16 | 9591u16
            | 9592u16 | 9593u16 | 9594u16 | 9595u16 | 9596u16 | 9597u16 | 9598u16 | 9599u16
            | 9600u16 | 9601u16 | 9602u16 | 9603u16 | 9604u16 | 9605u16 | 9606u16 | 9607u16
            | 9608u16 | 9609u16 | 9610u16 | 9611u16 | 9612u16 | 9613u16 | 9614u16 | 9615u16 => {
                BlockKind::BlueStainedGlassPane
            }
            9616u16 | 9617u16 | 9618u16 | 9619u16 | 9620u16 | 9621u16 | 9622u16 | 9623u16
            | 9624u16 | 9625u16 | 9626u16 | 9627u16 | 9628u16 | 9629u16 | 9630u16 | 9631u16
            | 9632u16 | 9633u16 | 9634u16 | 9635u16 | 9636u16 | 9637u16 | 9638u16 | 9639u16
            | 9640u16 | 9641u16 | 9642u16 | 9643u16 | 9644u16 | 9645u16 | 9646u16 | 9647u16 => {
                BlockKind::BrownStainedGlassPane
            }
            9648u16 | 9649u16 | 9650u16 | 9651u16 | 9652u16 | 9653u16 | 9654u16 | 9655u16
            | 9656u16 | 9657u16 | 9658u16 | 9659u16 | 9660u16 | 9661u16 | 9662u16 | 9663u16
            | 9664u16 | 9665u16 | 9666u16 | 9667u16 | 9668u16 | 9669u16 | 9670u16 | 9671u16
            | 9672u16 | 9673u16 | 9674u16 | 9675u16 | 9676u16 | 9677u16 | 9678u16 | 9679u16 => {
                BlockKind::GreenStainedGlassPane
            }
            9680u16 | 9681u16 | 9682u16 | 9683u16 | 9684u16 | 9685u16 | 9686u16 | 9687u16
            | 9688u16 | 9689u16 | 9690u16 | 9691u16 | 9692u16 | 9693u16 | 9694u16 | 9695u16
            | 9696u16 | 9697u16 | 9698u16 | 9699u16 | 9700u16 | 9701u16 | 9702u16 | 9703u16
            | 9704u16 | 9705u16 | 9706u16 | 9707u16 | 9708u16 | 9709u16 | 9710u16 | 9711u16 => {
                BlockKind::RedStainedGlassPane
            }
            9712u16 | 9713u16 | 9714u16 | 9715u16 | 9716u16 | 9717u16 | 9718u16 | 9719u16
            | 9720u16 | 9721u16 | 9722u16 | 9723u16 | 9724u16 | 9725u16 | 9726u16 | 9727u16
            | 9728u16 | 9729u16 | 9730u16 | 9731u16 | 9732u16 | 9733u16 | 9734u16 | 9735u16
            | 9736u16 | 9737u16 | 9738u16 | 9739u16 | 9740u16 | 9741u16 | 9742u16 | 9743u16 => {
                BlockKind::BlackStainedGlassPane
            }
            9744u16 | 9745u16 | 9746u16 | 9747u16 | 9748u16 | 9749u16 | 9750u16 | 9751u16
            | 9752u16 | 9753u16 | 9754u16 | 9755u16 | 9756u16 | 9757u16 | 9758u16 | 9759u16
            | 9760u16 | 9761u16 | 9762u16 | 9763u16 | 9764u16 | 9765u16 | 9766u16 | 9767u16
            | 9768u16 | 9769u16 | 9770u16 | 9771u16 | 9772u16 | 9773u16 | 9774u16 | 9775u16
            | 9776u16 | 9777u16 | 9778u16 | 9779u16 | 9780u16 | 9781u16 | 9782u16 | 9783u16
            | 9784u16 | 9785u16 | 9786u16 | 9787u16 | 9788u16 | 9789u16 | 9790u16 | 9791u16
            | 9792u16 | 9793u16 | 9794u16 | 9795u16 | 9796u16 | 9797u16 | 9798u16 | 9799u16
            | 9800u16 | 9801u16 | 9802u16 | 9803u16 | 9804u16 | 9805u16 | 9806u16 | 9807u16
            | 9808u16 | 9809u16 | 9810u16 | 9811u16 | 9812u16 | 9813u16 | 9814u16 | 9815u16
            | 9816u16 | 9817u16 | 9818u16 | 9819u16 | 9820u16 | 9821u16 | 9822u16 | 9823u16 => {
                BlockKind::AcaciaStairs
            }
            9824u16 | 9825u16 | 9826u16 | 9827u16 | 9828u16 | 9829u16 | 9830u16 | 9831u16
            | 9832u16 | 9833u16 | 9834u16 | 9835u16 | 9836u16 | 9837u16 | 9838u16 | 9839u16
            | 9840u16 | 9841u16 | 9842u16 | 9843u16 | 9844u16 | 9845u16 | 9846u16 | 9847u16
            | 9848u16 | 9849u16 | 9850u16 | 9851u16 | 9852u16 | 9853u16 | 9854u16 | 9855u16
            | 9856u16 | 9857u16 | 9858u16 | 9859u16 | 9860u16 | 9861u16 | 9862u16 | 9863u16
            | 9864u16 | 9865u16 | 9866u16 | 9867u16 | 9868u16 | 9869u16 | 9870u16 | 9871u16
            | 9872u16 | 9873u16 | 9874u16 | 9875u16 | 9876u16 | 9877u16 | 9878u16 | 9879u16
            | 9880u16 | 9881u16 | 9882u16 | 9883u16 | 9884u16 | 9885u16 | 9886u16 | 9887u16
            | 9888u16 | 9889u16 | 9890u16 | 9891u16 | 9892u16 | 9893u16 | 9894u16 | 9895u16
            | 9896u16 | 9897u16 | 9898u16 | 9899u16 | 9900u16 | 9901u16 | 9902u16 | 9903u16 => {
                BlockKind::CherryStairs
            }
            9904u16 | 9905u16 | 9906u16 | 9907u16 | 9908u16 | 9909u16 | 9910u16 | 9911u16
            | 9912u16 | 9913u16 | 9914u16 | 9915u16 | 9916u16 | 9917u16 | 9918u16 | 9919u16
            | 9920u16 | 9921u16 | 9922u16 | 9923u16 | 9924u16 | 9925u16 | 9926u16 | 9927u16
            | 9928u16 | 9929u16 | 9930u16 | 9931u16 | 9932u16 | 9933u16 | 9934u16 | 9935u16
            | 9936u16 | 9937u16 | 9938u16 | 9939u16 | 9940u16 | 9941u16 | 9942u16 | 9943u16
            | 9944u16 | 9945u16 | 9946u16 | 9947u16 | 9948u16 | 9949u16 | 9950u16 | 9951u16
            | 9952u16 | 9953u16 | 9954u16 | 9955u16 | 9956u16 | 9957u16 | 9958u16 | 9959u16
            | 9960u16 | 9961u16 | 9962u16 | 9963u16 | 9964u16 | 9965u16 | 9966u16 | 9967u16
            | 9968u16 | 9969u16 | 9970u16 | 9971u16 | 9972u16 | 9973u16 | 9974u16 | 9975u16
            | 9976u16 | 9977u16 | 9978u16 | 9979u16 | 9980u16 | 9981u16 | 9982u16 | 9983u16 => {
                BlockKind::DarkOakStairs
            }
            9984u16 | 9985u16 | 9986u16 | 9987u16 | 9988u16 | 9989u16 | 9990u16 | 9991u16
            | 9992u16 | 9993u16 | 9994u16 | 9995u16 | 9996u16 | 9997u16 | 9998u16 | 9999u16
            | 10000u16 | 10001u16 | 10002u16 | 10003u16 | 10004u16 | 10005u16 | 10006u16
            | 10007u16 | 10008u16 | 10009u16 | 10010u16 | 10011u16 | 10012u16 | 10013u16
            | 10014u16 | 10015u16 | 10016u16 | 10017u16 | 10018u16 | 10019u16 | 10020u16
            | 10021u16 | 10022u16 | 10023u16 | 10024u16 | 10025u16 | 10026u16 | 10027u16
            | 10028u16 | 10029u16 | 10030u16 | 10031u16 | 10032u16 | 10033u16 | 10034u16
            | 10035u16 | 10036u16 | 10037u16 | 10038u16 | 10039u16 | 10040u16 | 10041u16
            | 10042u16 | 10043u16 | 10044u16 | 10045u16 | 10046u16 | 10047u16 | 10048u16
            | 10049u16 | 10050u16 | 10051u16 | 10052u16 | 10053u16 | 10054u16 | 10055u16
            | 10056u16 | 10057u16 | 10058u16 | 10059u16 | 10060u16 | 10061u16 | 10062u16
            | 10063u16 => BlockKind::MangroveStairs,
            10064u16 | 10065u16 | 10066u16 | 10067u16 | 10068u16 | 10069u16 | 10070u16
            | 10071u16 | 10072u16 | 10073u16 | 10074u16 | 10075u16 | 10076u16 | 10077u16
            | 10078u16 | 10079u16 | 10080u16 | 10081u16 | 10082u16 | 10083u16 | 10084u16
            | 10085u16 | 10086u16 | 10087u16 | 10088u16 | 10089u16 | 10090u16 | 10091u16
            | 10092u16 | 10093u16 | 10094u16 | 10095u16 | 10096u16 | 10097u16 | 10098u16
            | 10099u16 | 10100u16 | 10101u16 | 10102u16 | 10103u16 | 10104u16 | 10105u16
            | 10106u16 | 10107u16 | 10108u16 | 10109u16 | 10110u16 | 10111u16 | 10112u16
            | 10113u16 | 10114u16 | 10115u16 | 10116u16 | 10117u16 | 10118u16 | 10119u16
            | 10120u16 | 10121u16 | 10122u16 | 10123u16 | 10124u16 | 10125u16 | 10126u16
            | 10127u16 | 10128u16 | 10129u16 | 10130u16 | 10131u16 | 10132u16 | 10133u16
            | 10134u16 | 10135u16 | 10136u16 | 10137u16 | 10138u16 | 10139u16 | 10140u16
            | 10141u16 | 10142u16 | 10143u16 => BlockKind::BambooStairs,
            10144u16 | 10145u16 | 10146u16 | 10147u16 | 10148u16 | 10149u16 | 10150u16
            | 10151u16 | 10152u16 | 10153u16 | 10154u16 | 10155u16 | 10156u16 | 10157u16
            | 10158u16 | 10159u16 | 10160u16 | 10161u16 | 10162u16 | 10163u16 | 10164u16
            | 10165u16 | 10166u16 | 10167u16 | 10168u16 | 10169u16 | 10170u16 | 10171u16
            | 10172u16 | 10173u16 | 10174u16 | 10175u16 | 10176u16 | 10177u16 | 10178u16
            | 10179u16 | 10180u16 | 10181u16 | 10182u16 | 10183u16 | 10184u16 | 10185u16
            | 10186u16 | 10187u16 | 10188u16 | 10189u16 | 10190u16 | 10191u16 | 10192u16
            | 10193u16 | 10194u16 | 10195u16 | 10196u16 | 10197u16 | 10198u16 | 10199u16
            | 10200u16 | 10201u16 | 10202u16 | 10203u16 | 10204u16 | 10205u16 | 10206u16
            | 10207u16 | 10208u16 | 10209u16 | 10210u16 | 10211u16 | 10212u16 | 10213u16
            | 10214u16 | 10215u16 | 10216u16 | 10217u16 | 10218u16 | 10219u16 | 10220u16
            | 10221u16 | 10222u16 | 10223u16 => BlockKind::BambooMosaicStairs,
            10224u16 => BlockKind::SlimeBlock,
            10225u16 => BlockKind::Barrier,
            10226u16 | 10227u16 | 10228u16 | 10229u16 | 10230u16 | 10231u16 | 10232u16
            | 10233u16 | 10234u16 | 10235u16 | 10236u16 | 10237u16 | 10238u16 | 10239u16
            | 10240u16 | 10241u16 | 10242u16 | 10243u16 | 10244u16 | 10245u16 | 10246u16
            | 10247u16 | 10248u16 | 10249u16 | 10250u16 | 10251u16 | 10252u16 | 10253u16
            | 10254u16 | 10255u16 | 10256u16 | 10257u16 => BlockKind::Light,
            10258u16 | 10259u16 | 10260u16 | 10261u16 | 10262u16 | 10263u16 | 10264u16
            | 10265u16 | 10266u16 | 10267u16 | 10268u16 | 10269u16 | 10270u16 | 10271u16
            | 10272u16 | 10273u16 | 10274u16 | 10275u16 | 10276u16 | 10277u16 | 10278u16
            | 10279u16 | 10280u16 | 10281u16 | 10282u16 | 10283u16 | 10284u16 | 10285u16
            | 10286u16 | 10287u16 | 10288u16 | 10289u16 | 10290u16 | 10291u16 | 10292u16
            | 10293u16 | 10294u16 | 10295u16 | 10296u16 | 10297u16 | 10298u16 | 10299u16
            | 10300u16 | 10301u16 | 10302u16 | 10303u16 | 10304u16 | 10305u16 | 10306u16
            | 10307u16 | 10308u16 | 10309u16 | 10310u16 | 10311u16 | 10312u16 | 10313u16
            | 10314u16 | 10315u16 | 10316u16 | 10317u16 | 10318u16 | 10319u16 | 10320u16
            | 10321u16 => BlockKind::IronTrapdoor,
            10322u16 => BlockKind::Prismarine,
            10323u16 => BlockKind::PrismarineBricks,
            10324u16 => BlockKind::DarkPrismarine,
            10325u16 | 10326u16 | 10327u16 | 10328u16 | 10329u16 | 10330u16 | 10331u16
            | 10332u16 | 10333u16 | 10334u16 | 10335u16 | 10336u16 | 10337u16 | 10338u16
            | 10339u16 | 10340u16 | 10341u16 | 10342u16 | 10343u16 | 10344u16 | 10345u16
            | 10346u16 | 10347u16 | 10348u16 | 10349u16 | 10350u16 | 10351u16 | 10352u16
            | 10353u16 | 10354u16 | 10355u16 | 10356u16 | 10357u16 | 10358u16 | 10359u16
            | 10360u16 | 10361u16 | 10362u16 | 10363u16 | 10364u16 | 10365u16 | 10366u16
            | 10367u16 | 10368u16 | 10369u16 | 10370u16 | 10371u16 | 10372u16 | 10373u16
            | 10374u16 | 10375u16 | 10376u16 | 10377u16 | 10378u16 | 10379u16 | 10380u16
            | 10381u16 | 10382u16 | 10383u16 | 10384u16 | 10385u16 | 10386u16 | 10387u16
            | 10388u16 | 10389u16 | 10390u16 | 10391u16 | 10392u16 | 10393u16 | 10394u16
            | 10395u16 | 10396u16 | 10397u16 | 10398u16 | 10399u16 | 10400u16 | 10401u16
            | 10402u16 | 10403u16 | 10404u16 => BlockKind::PrismarineStairs,
            10405u16 | 10406u16 | 10407u16 | 10408u16 | 10409u16 | 10410u16 | 10411u16
            | 10412u16 | 10413u16 | 10414u16 | 10415u16 | 10416u16 | 10417u16 | 10418u16
            | 10419u16 | 10420u16 | 10421u16 | 10422u16 | 10423u16 | 10424u16 | 10425u16
            | 10426u16 | 10427u16 | 10428u16 | 10429u16 | 10430u16 | 10431u16 | 10432u16
            | 10433u16 | 10434u16 | 10435u16 | 10436u16 | 10437u16 | 10438u16 | 10439u16
            | 10440u16 | 10441u16 | 10442u16 | 10443u16 | 10444u16 | 10445u16 | 10446u16
            | 10447u16 | 10448u16 | 10449u16 | 10450u16 | 10451u16 | 10452u16 | 10453u16
            | 10454u16 | 10455u16 | 10456u16 | 10457u16 | 10458u16 | 10459u16 | 10460u16
            | 10461u16 | 10462u16 | 10463u16 | 10464u16 | 10465u16 | 10466u16 | 10467u16
            | 10468u16 | 10469u16 | 10470u16 | 10471u16 | 10472u16 | 10473u16 | 10474u16
            | 10475u16 | 10476u16 | 10477u16 | 10478u16 | 10479u16 | 10480u16 | 10481u16
            | 10482u16 | 10483u16 | 10484u16 => BlockKind::PrismarineBrickStairs,
            10485u16 | 10486u16 | 10487u16 | 10488u16 | 10489u16 | 10490u16 | 10491u16
            | 10492u16 | 10493u16 | 10494u16 | 10495u16 | 10496u16 | 10497u16 | 10498u16
            | 10499u16 | 10500u16 | 10501u16 | 10502u16 | 10503u16 | 10504u16 | 10505u16
            | 10506u16 | 10507u16 | 10508u16 | 10509u16 | 10510u16 | 10511u16 | 10512u16
            | 10513u16 | 10514u16 | 10515u16 | 10516u16 | 10517u16 | 10518u16 | 10519u16
            | 10520u16 | 10521u16 | 10522u16 | 10523u16 | 10524u16 | 10525u16 | 10526u16
            | 10527u16 | 10528u16 | 10529u16 | 10530u16 | 10531u16 | 10532u16 | 10533u16
            | 10534u16 | 10535u16 | 10536u16 | 10537u16 | 10538u16 | 10539u16 | 10540u16
            | 10541u16 | 10542u16 | 10543u16 | 10544u16 | 10545u16 | 10546u16 | 10547u16
            | 10548u16 | 10549u16 | 10550u16 | 10551u16 | 10552u16 | 10553u16 | 10554u16
            | 10555u16 | 10556u16 | 10557u16 | 10558u16 | 10559u16 | 10560u16 | 10561u16
            | 10562u16 | 10563u16 | 10564u16 => BlockKind::DarkPrismarineStairs,
            10565u16 | 10566u16 | 10567u16 | 10568u16 | 10569u16 | 10570u16 => {
                BlockKind::PrismarineSlab
            }
            10571u16 | 10572u16 | 10573u16 | 10574u16 | 10575u16 | 10576u16 => {
                BlockKind::PrismarineBrickSlab
            }
            10577u16 | 10578u16 | 10579u16 | 10580u16 | 10581u16 | 10582u16 => {
                BlockKind::DarkPrismarineSlab
            }
            10583u16 => BlockKind::SeaLantern,
            10584u16 | 10585u16 | 10586u16 => BlockKind::HayBlock,
            10587u16 => BlockKind::WhiteCarpet,
            10588u16 => BlockKind::OrangeCarpet,
            10589u16 => BlockKind::MagentaCarpet,
            10590u16 => BlockKind::LightBlueCarpet,
            10591u16 => BlockKind::YellowCarpet,
            10592u16 => BlockKind::LimeCarpet,
            10593u16 => BlockKind::PinkCarpet,
            10594u16 => BlockKind::GrayCarpet,
            10595u16 => BlockKind::LightGrayCarpet,
            10596u16 => BlockKind::CyanCarpet,
            10597u16 => BlockKind::PurpleCarpet,
            10598u16 => BlockKind::BlueCarpet,
            10599u16 => BlockKind::BrownCarpet,
            10600u16 => BlockKind::GreenCarpet,
            10601u16 => BlockKind::RedCarpet,
            10602u16 => BlockKind::BlackCarpet,
            10603u16 => BlockKind::Terracotta,
            10604u16 => BlockKind::CoalBlock,
            10605u16 => BlockKind::PackedIce,
            10606u16 | 10607u16 => BlockKind::Sunflower,
            10608u16 | 10609u16 => BlockKind::Lilac,
            10610u16 | 10611u16 => BlockKind::RoseBush,
            10612u16 | 10613u16 => BlockKind::Peony,
            10614u16 | 10615u16 => BlockKind::TallGrass,
            10616u16 | 10617u16 => BlockKind::LargeFern,
            10618u16 | 10619u16 | 10620u16 | 10621u16 | 10622u16 | 10623u16 | 10624u16
            | 10625u16 | 10626u16 | 10627u16 | 10628u16 | 10629u16 | 10630u16 | 10631u16
            | 10632u16 | 10633u16 => BlockKind::WhiteBanner,
            10634u16 | 10635u16 | 10636u16 | 10637u16 | 10638u16 | 10639u16 | 10640u16
            | 10641u16 | 10642u16 | 10643u16 | 10644u16 | 10645u16 | 10646u16 | 10647u16
            | 10648u16 | 10649u16 => BlockKind::OrangeBanner,
            10650u16 | 10651u16 | 10652u16 | 10653u16 | 10654u16 | 10655u16 | 10656u16
            | 10657u16 | 10658u16 | 10659u16 | 10660u16 | 10661u16 | 10662u16 | 10663u16
            | 10664u16 | 10665u16 => BlockKind::MagentaBanner,
            10666u16 | 10667u16 | 10668u16 | 10669u16 | 10670u16 | 10671u16 | 10672u16
            | 10673u16 | 10674u16 | 10675u16 | 10676u16 | 10677u16 | 10678u16 | 10679u16
            | 10680u16 | 10681u16 => BlockKind::LightBlueBanner,
            10682u16 | 10683u16 | 10684u16 | 10685u16 | 10686u16 | 10687u16 | 10688u16
            | 10689u16 | 10690u16 | 10691u16 | 10692u16 | 10693u16 | 10694u16 | 10695u16
            | 10696u16 | 10697u16 => BlockKind::YellowBanner,
            10698u16 | 10699u16 | 10700u16 | 10701u16 | 10702u16 | 10703u16 | 10704u16
            | 10705u16 | 10706u16 | 10707u16 | 10708u16 | 10709u16 | 10710u16 | 10711u16
            | 10712u16 | 10713u16 => BlockKind::LimeBanner,
            10714u16 | 10715u16 | 10716u16 | 10717u16 | 10718u16 | 10719u16 | 10720u16
            | 10721u16 | 10722u16 | 10723u16 | 10724u16 | 10725u16 | 10726u16 | 10727u16
            | 10728u16 | 10729u16 => BlockKind::PinkBanner,
            10730u16 | 10731u16 | 10732u16 | 10733u16 | 10734u16 | 10735u16 | 10736u16
            | 10737u16 | 10738u16 | 10739u16 | 10740u16 | 10741u16 | 10742u16 | 10743u16
            | 10744u16 | 10745u16 => BlockKind::GrayBanner,
            10746u16 | 10747u16 | 10748u16 | 10749u16 | 10750u16 | 10751u16 | 10752u16
            | 10753u16 | 10754u16 | 10755u16 | 10756u16 | 10757u16 | 10758u16 | 10759u16
            | 10760u16 | 10761u16 => BlockKind::LightGrayBanner,
            10762u16 | 10763u16 | 10764u16 | 10765u16 | 10766u16 | 10767u16 | 10768u16
            | 10769u16 | 10770u16 | 10771u16 | 10772u16 | 10773u16 | 10774u16 | 10775u16
            | 10776u16 | 10777u16 => BlockKind::CyanBanner,
            10778u16 | 10779u16 | 10780u16 | 10781u16 | 10782u16 | 10783u16 | 10784u16
            | 10785u16 | 10786u16 | 10787u16 | 10788u16 | 10789u16 | 10790u16 | 10791u16
            | 10792u16 | 10793u16 => BlockKind::PurpleBanner,
            10794u16 | 10795u16 | 10796u16 | 10797u16 | 10798u16 | 10799u16 | 10800u16
            | 10801u16 | 10802u16 | 10803u16 | 10804u16 | 10805u16 | 10806u16 | 10807u16
            | 10808u16 | 10809u16 => BlockKind::BlueBanner,
            10810u16 | 10811u16 | 10812u16 | 10813u16 | 10814u16 | 10815u16 | 10816u16
            | 10817u16 | 10818u16 | 10819u16 | 10820u16 | 10821u16 | 10822u16 | 10823u16
            | 10824u16 | 10825u16 => BlockKind::BrownBanner,
            10826u16 | 10827u16 | 10828u16 | 10829u16 | 10830u16 | 10831u16 | 10832u16
            | 10833u16 | 10834u16 | 10835u16 | 10836u16 | 10837u16 | 10838u16 | 10839u16
            | 10840u16 | 10841u16 => BlockKind::GreenBanner,
            10842u16 | 10843u16 | 10844u16 | 10845u16 | 10846u16 | 10847u16 | 10848u16
            | 10849u16 | 10850u16 | 10851u16 | 10852u16 | 10853u16 | 10854u16 | 10855u16
            | 10856u16 | 10857u16 => BlockKind::RedBanner,
            10858u16 | 10859u16 | 10860u16 | 10861u16 | 10862u16 | 10863u16 | 10864u16
            | 10865u16 | 10866u16 | 10867u16 | 10868u16 | 10869u16 | 10870u16 | 10871u16
            | 10872u16 | 10873u16 => BlockKind::BlackBanner,
            10874u16 | 10875u16 | 10876u16 | 10877u16 => BlockKind::WhiteWallBanner,
            10878u16 | 10879u16 | 10880u16 | 10881u16 => BlockKind::OrangeWallBanner,
            10882u16 | 10883u16 | 10884u16 | 10885u16 => BlockKind::MagentaWallBanner,
            10886u16 | 10887u16 | 10888u16 | 10889u16 => BlockKind::LightBlueWallBanner,
            10890u16 | 10891u16 | 10892u16 | 10893u16 => BlockKind::YellowWallBanner,
            10894u16 | 10895u16 | 10896u16 | 10897u16 => BlockKind::LimeWallBanner,
            10898u16 | 10899u16 | 10900u16 | 10901u16 => BlockKind::PinkWallBanner,
            10902u16 | 10903u16 | 10904u16 | 10905u16 => BlockKind::GrayWallBanner,
            10906u16 | 10907u16 | 10908u16 | 10909u16 => BlockKind::LightGrayWallBanner,
            10910u16 | 10911u16 | 10912u16 | 10913u16 => BlockKind::CyanWallBanner,
            10914u16 | 10915u16 | 10916u16 | 10917u16 => BlockKind::PurpleWallBanner,
            10918u16 | 10919u16 | 10920u16 | 10921u16 => BlockKind::BlueWallBanner,
            10922u16 | 10923u16 | 10924u16 | 10925u16 => BlockKind::BrownWallBanner,
            10926u16 | 10927u16 | 10928u16 | 10929u16 => BlockKind::GreenWallBanner,
            10930u16 | 10931u16 | 10932u16 | 10933u16 => BlockKind::RedWallBanner,
            10934u16 | 10935u16 | 10936u16 | 10937u16 => BlockKind::BlackWallBanner,
            10938u16 => BlockKind::RedSandstone,
            10939u16 => BlockKind::ChiseledRedSandstone,
            10940u16 => BlockKind::CutRedSandstone,
            10941u16 | 10942u16 | 10943u16 | 10944u16 | 10945u16 | 10946u16 | 10947u16
            | 10948u16 | 10949u16 | 10950u16 | 10951u16 | 10952u16 | 10953u16 | 10954u16
            | 10955u16 | 10956u16 | 10957u16 | 10958u16 | 10959u16 | 10960u16 | 10961u16
            | 10962u16 | 10963u16 | 10964u16 | 10965u16 | 10966u16 | 10967u16 | 10968u16
            | 10969u16 | 10970u16 | 10971u16 | 10972u16 | 10973u16 | 10974u16 | 10975u16
            | 10976u16 | 10977u16 | 10978u16 | 10979u16 | 10980u16 | 10981u16 | 10982u16
            | 10983u16 | 10984u16 | 10985u16 | 10986u16 | 10987u16 | 10988u16 | 10989u16
            | 10990u16 | 10991u16 | 10992u16 | 10993u16 | 10994u16 | 10995u16 | 10996u16
            | 10997u16 | 10998u16 | 10999u16 | 11000u16 | 11001u16 | 11002u16 | 11003u16
            | 11004u16 | 11005u16 | 11006u16 | 11007u16 | 11008u16 | 11009u16 | 11010u16
            | 11011u16 | 11012u16 | 11013u16 | 11014u16 | 11015u16 | 11016u16 | 11017u16
            | 11018u16 | 11019u16 | 11020u16 => BlockKind::RedSandstoneStairs,
            11021u16 | 11022u16 | 11023u16 | 11024u16 | 11025u16 | 11026u16 => BlockKind::OakSlab,
            11027u16 | 11028u16 | 11029u16 | 11030u16 | 11031u16 | 11032u16 => {
                BlockKind::SpruceSlab
            }
            11033u16 | 11034u16 | 11035u16 | 11036u16 | 11037u16 | 11038u16 => BlockKind::BirchSlab,
            11039u16 | 11040u16 | 11041u16 | 11042u16 | 11043u16 | 11044u16 => {
                BlockKind::JungleSlab
            }
            11045u16 | 11046u16 | 11047u16 | 11048u16 | 11049u16 | 11050u16 => {
                BlockKind::AcaciaSlab
            }
            11051u16 | 11052u16 | 11053u16 | 11054u16 | 11055u16 | 11056u16 => {
                BlockKind::CherrySlab
            }
            11057u16 | 11058u16 | 11059u16 | 11060u16 | 11061u16 | 11062u16 => {
                BlockKind::DarkOakSlab
            }
            11063u16 | 11064u16 | 11065u16 | 11066u16 | 11067u16 | 11068u16 => {
                BlockKind::MangroveSlab
            }
            11069u16 | 11070u16 | 11071u16 | 11072u16 | 11073u16 | 11074u16 => {
                BlockKind::BambooSlab
            }
            11075u16 | 11076u16 | 11077u16 | 11078u16 | 11079u16 | 11080u16 => {
                BlockKind::BambooMosaicSlab
            }
            11081u16 | 11082u16 | 11083u16 | 11084u16 | 11085u16 | 11086u16 => BlockKind::StoneSlab,
            11087u16 | 11088u16 | 11089u16 | 11090u16 | 11091u16 | 11092u16 => {
                BlockKind::SmoothStoneSlab
            }
            11093u16 | 11094u16 | 11095u16 | 11096u16 | 11097u16 | 11098u16 => {
                BlockKind::SandstoneSlab
            }
            11099u16 | 11100u16 | 11101u16 | 11102u16 | 11103u16 | 11104u16 => {
                BlockKind::CutSandstoneSlab
            }
            11105u16 | 11106u16 | 11107u16 | 11108u16 | 11109u16 | 11110u16 => {
                BlockKind::PetrifiedOakSlab
            }
            11111u16 | 11112u16 | 11113u16 | 11114u16 | 11115u16 | 11116u16 => {
                BlockKind::CobblestoneSlab
            }
            11117u16 | 11118u16 | 11119u16 | 11120u16 | 11121u16 | 11122u16 => BlockKind::BrickSlab,
            11123u16 | 11124u16 | 11125u16 | 11126u16 | 11127u16 | 11128u16 => {
                BlockKind::StoneBrickSlab
            }
            11129u16 | 11130u16 | 11131u16 | 11132u16 | 11133u16 | 11134u16 => {
                BlockKind::MudBrickSlab
            }
            11135u16 | 11136u16 | 11137u16 | 11138u16 | 11139u16 | 11140u16 => {
                BlockKind::NetherBrickSlab
            }
            11141u16 | 11142u16 | 11143u16 | 11144u16 | 11145u16 | 11146u16 => {
                BlockKind::QuartzSlab
            }
            11147u16 | 11148u16 | 11149u16 | 11150u16 | 11151u16 | 11152u16 => {
                BlockKind::RedSandstoneSlab
            }
            11153u16 | 11154u16 | 11155u16 | 11156u16 | 11157u16 | 11158u16 => {
                BlockKind::CutRedSandstoneSlab
            }
            11159u16 | 11160u16 | 11161u16 | 11162u16 | 11163u16 | 11164u16 => {
                BlockKind::PurpurSlab
            }
            11165u16 => BlockKind::SmoothStone,
            11166u16 => BlockKind::SmoothSandstone,
            11167u16 => BlockKind::SmoothQuartz,
            11168u16 => BlockKind::SmoothRedSandstone,
            11169u16 | 11170u16 | 11171u16 | 11172u16 | 11173u16 | 11174u16 | 11175u16
            | 11176u16 | 11177u16 | 11178u16 | 11179u16 | 11180u16 | 11181u16 | 11182u16
            | 11183u16 | 11184u16 | 11185u16 | 11186u16 | 11187u16 | 11188u16 | 11189u16
            | 11190u16 | 11191u16 | 11192u16 | 11193u16 | 11194u16 | 11195u16 | 11196u16
            | 11197u16 | 11198u16 | 11199u16 | 11200u16 => BlockKind::SpruceFenceGate,
            11201u16 | 11202u16 | 11203u16 | 11204u16 | 11205u16 | 11206u16 | 11207u16
            | 11208u16 | 11209u16 | 11210u16 | 11211u16 | 11212u16 | 11213u16 | 11214u16
            | 11215u16 | 11216u16 | 11217u16 | 11218u16 | 11219u16 | 11220u16 | 11221u16
            | 11222u16 | 11223u16 | 11224u16 | 11225u16 | 11226u16 | 11227u16 | 11228u16
            | 11229u16 | 11230u16 | 11231u16 | 11232u16 => BlockKind::BirchFenceGate,
            11233u16 | 11234u16 | 11235u16 | 11236u16 | 11237u16 | 11238u16 | 11239u16
            | 11240u16 | 11241u16 | 11242u16 | 11243u16 | 11244u16 | 11245u16 | 11246u16
            | 11247u16 | 11248u16 | 11249u16 | 11250u16 | 11251u16 | 11252u16 | 11253u16
            | 11254u16 | 11255u16 | 11256u16 | 11257u16 | 11258u16 | 11259u16 | 11260u16
            | 11261u16 | 11262u16 | 11263u16 | 11264u16 => BlockKind::JungleFenceGate,
            11265u16 | 11266u16 | 11267u16 | 11268u16 | 11269u16 | 11270u16 | 11271u16
            | 11272u16 | 11273u16 | 11274u16 | 11275u16 | 11276u16 | 11277u16 | 11278u16
            | 11279u16 | 11280u16 | 11281u16 | 11282u16 | 11283u16 | 11284u16 | 11285u16
            | 11286u16 | 11287u16 | 11288u16 | 11289u16 | 11290u16 | 11291u16 | 11292u16
            | 11293u16 | 11294u16 | 11295u16 | 11296u16 => BlockKind::AcaciaFenceGate,
            11297u16 | 11298u16 | 11299u16 | 11300u16 | 11301u16 | 11302u16 | 11303u16
            | 11304u16 | 11305u16 | 11306u16 | 11307u16 | 11308u16 | 11309u16 | 11310u16
            | 11311u16 | 11312u16 | 11313u16 | 11314u16 | 11315u16 | 11316u16 | 11317u16
            | 11318u16 | 11319u16 | 11320u16 | 11321u16 | 11322u16 | 11323u16 | 11324u16
            | 11325u16 | 11326u16 | 11327u16 | 11328u16 => BlockKind::CherryFenceGate,
            11329u16 | 11330u16 | 11331u16 | 11332u16 | 11333u16 | 11334u16 | 11335u16
            | 11336u16 | 11337u16 | 11338u16 | 11339u16 | 11340u16 | 11341u16 | 11342u16
            | 11343u16 | 11344u16 | 11345u16 | 11346u16 | 11347u16 | 11348u16 | 11349u16
            | 11350u16 | 11351u16 | 11352u16 | 11353u16 | 11354u16 | 11355u16 | 11356u16
            | 11357u16 | 11358u16 | 11359u16 | 11360u16 => BlockKind::DarkOakFenceGate,
            11361u16 | 11362u16 | 11363u16 | 11364u16 | 11365u16 | 11366u16 | 11367u16
            | 11368u16 | 11369u16 | 11370u16 | 11371u16 | 11372u16 | 11373u16 | 11374u16
            | 11375u16 | 11376u16 | 11377u16 | 11378u16 | 11379u16 | 11380u16 | 11381u16
            | 11382u16 | 11383u16 | 11384u16 | 11385u16 | 11386u16 | 11387u16 | 11388u16
            | 11389u16 | 11390u16 | 11391u16 | 11392u16 => BlockKind::MangroveFenceGate,
            11393u16 | 11394u16 | 11395u16 | 11396u16 | 11397u16 | 11398u16 | 11399u16
            | 11400u16 | 11401u16 | 11402u16 | 11403u16 | 11404u16 | 11405u16 | 11406u16
            | 11407u16 | 11408u16 | 11409u16 | 11410u16 | 11411u16 | 11412u16 | 11413u16
            | 11414u16 | 11415u16 | 11416u16 | 11417u16 | 11418u16 | 11419u16 | 11420u16
            | 11421u16 | 11422u16 | 11423u16 | 11424u16 => BlockKind::BambooFenceGate,
            11425u16 | 11426u16 | 11427u16 | 11428u16 | 11429u16 | 11430u16 | 11431u16
            | 11432u16 | 11433u16 | 11434u16 | 11435u16 | 11436u16 | 11437u16 | 11438u16
            | 11439u16 | 11440u16 | 11441u16 | 11442u16 | 11443u16 | 11444u16 | 11445u16
            | 11446u16 | 11447u16 | 11448u16 | 11449u16 | 11450u16 | 11451u16 | 11452u16
            | 11453u16 | 11454u16 | 11455u16 | 11456u16 => BlockKind::SpruceFence,
            11457u16 | 11458u16 | 11459u16 | 11460u16 | 11461u16 | 11462u16 | 11463u16
            | 11464u16 | 11465u16 | 11466u16 | 11467u16 | 11468u16 | 11469u16 | 11470u16
            | 11471u16 | 11472u16 | 11473u16 | 11474u16 | 11475u16 | 11476u16 | 11477u16
            | 11478u16 | 11479u16 | 11480u16 | 11481u16 | 11482u16 | 11483u16 | 11484u16
            | 11485u16 | 11486u16 | 11487u16 | 11488u16 => BlockKind::BirchFence,
            11489u16 | 11490u16 | 11491u16 | 11492u16 | 11493u16 | 11494u16 | 11495u16
            | 11496u16 | 11497u16 | 11498u16 | 11499u16 | 11500u16 | 11501u16 | 11502u16
            | 11503u16 | 11504u16 | 11505u16 | 11506u16 | 11507u16 | 11508u16 | 11509u16
            | 11510u16 | 11511u16 | 11512u16 | 11513u16 | 11514u16 | 11515u16 | 11516u16
            | 11517u16 | 11518u16 | 11519u16 | 11520u16 => BlockKind::JungleFence,
            11521u16 | 11522u16 | 11523u16 | 11524u16 | 11525u16 | 11526u16 | 11527u16
            | 11528u16 | 11529u16 | 11530u16 | 11531u16 | 11532u16 | 11533u16 | 11534u16
            | 11535u16 | 11536u16 | 11537u16 | 11538u16 | 11539u16 | 11540u16 | 11541u16
            | 11542u16 | 11543u16 | 11544u16 | 11545u16 | 11546u16 | 11547u16 | 11548u16
            | 11549u16 | 11550u16 | 11551u16 | 11552u16 => BlockKind::AcaciaFence,
            11553u16 | 11554u16 | 11555u16 | 11556u16 | 11557u16 | 11558u16 | 11559u16
            | 11560u16 | 11561u16 | 11562u16 | 11563u16 | 11564u16 | 11565u16 | 11566u16
            | 11567u16 | 11568u16 | 11569u16 | 11570u16 | 11571u16 | 11572u16 | 11573u16
            | 11574u16 | 11575u16 | 11576u16 | 11577u16 | 11578u16 | 11579u16 | 11580u16
            | 11581u16 | 11582u16 | 11583u16 | 11584u16 => BlockKind::CherryFence,
            11585u16 | 11586u16 | 11587u16 | 11588u16 | 11589u16 | 11590u16 | 11591u16
            | 11592u16 | 11593u16 | 11594u16 | 11595u16 | 11596u16 | 11597u16 | 11598u16
            | 11599u16 | 11600u16 | 11601u16 | 11602u16 | 11603u16 | 11604u16 | 11605u16
            | 11606u16 | 11607u16 | 11608u16 | 11609u16 | 11610u16 | 11611u16 | 11612u16
            | 11613u16 | 11614u16 | 11615u16 | 11616u16 => BlockKind::DarkOakFence,
            11617u16 | 11618u16 | 11619u16 | 11620u16 | 11621u16 | 11622u16 | 11623u16
            | 11624u16 | 11625u16 | 11626u16 | 11627u16 | 11628u16 | 11629u16 | 11630u16
            | 11631u16 | 11632u16 | 11633u16 | 11634u16 | 11635u16 | 11636u16 | 11637u16
            | 11638u16 | 11639u16 | 11640u16 | 11641u16 | 11642u16 | 11643u16 | 11644u16
            | 11645u16 | 11646u16 | 11647u16 | 11648u16 => BlockKind::MangroveFence,
            11649u16 | 11650u16 | 11651u16 | 11652u16 | 11653u16 | 11654u16 | 11655u16
            | 11656u16 | 11657u16 | 11658u16 | 11659u16 | 11660u16 | 11661u16 | 11662u16
            | 11663u16 | 11664u16 | 11665u16 | 11666u16 | 11667u16 | 11668u16 | 11669u16
            | 11670u16 | 11671u16 | 11672u16 | 11673u16 | 11674u16 | 11675u16 | 11676u16
            | 11677u16 | 11678u16 | 11679u16 | 11680u16 => BlockKind::BambooFence,
            11681u16 | 11682u16 | 11683u16 | 11684u16 | 11685u16 | 11686u16 | 11687u16
            | 11688u16 | 11689u16 | 11690u16 | 11691u16 | 11692u16 | 11693u16 | 11694u16
            | 11695u16 | 11696u16 | 11697u16 | 11698u16 | 11699u16 | 11700u16 | 11701u16
            | 11702u16 | 11703u16 | 11704u16 | 11705u16 | 11706u16 | 11707u16 | 11708u16
            | 11709u16 | 11710u16 | 11711u16 | 11712u16 | 11713u16 | 11714u16 | 11715u16
            | 11716u16 | 11717u16 | 11718u16 | 11719u16 | 11720u16 | 11721u16 | 11722u16
            | 11723u16 | 11724u16 | 11725u16 | 11726u16 | 11727u16 | 11728u16 | 11729u16
            | 11730u16 | 11731u16 | 11732u16 | 11733u16 | 11734u16 | 11735u16 | 11736u16
            | 11737u16 | 11738u16 | 11739u16 | 11740u16 | 11741u16 | 11742u16 | 11743u16
            | 11744u16 => BlockKind::SpruceDoor,
            11745u16 | 11746u16 | 11747u16 | 11748u16 | 11749u16 | 11750u16 | 11751u16
            | 11752u16 | 11753u16 | 11754u16 | 11755u16 | 11756u16 | 11757u16 | 11758u16
            | 11759u16 | 11760u16 | 11761u16 | 11762u16 | 11763u16 | 11764u16 | 11765u16
            | 11766u16 | 11767u16 | 11768u16 | 11769u16 | 11770u16 | 11771u16 | 11772u16
            | 11773u16 | 11774u16 | 11775u16 | 11776u16 | 11777u16 | 11778u16 | 11779u16
            | 11780u16 | 11781u16 | 11782u16 | 11783u16 | 11784u16 | 11785u16 | 11786u16
            | 11787u16 | 11788u16 | 11789u16 | 11790u16 | 11791u16 | 11792u16 | 11793u16
            | 11794u16 | 11795u16 | 11796u16 | 11797u16 | 11798u16 | 11799u16 | 11800u16
            | 11801u16 | 11802u16 | 11803u16 | 11804u16 | 11805u16 | 11806u16 | 11807u16
            | 11808u16 => BlockKind::BirchDoor,
            11809u16 | 11810u16 | 11811u16 | 11812u16 | 11813u16 | 11814u16 | 11815u16
            | 11816u16 | 11817u16 | 11818u16 | 11819u16 | 11820u16 | 11821u16 | 11822u16
            | 11823u16 | 11824u16 | 11825u16 | 11826u16 | 11827u16 | 11828u16 | 11829u16
            | 11830u16 | 11831u16 | 11832u16 | 11833u16 | 11834u16 | 11835u16 | 11836u16
            | 11837u16 | 11838u16 | 11839u16 | 11840u16 | 11841u16 | 11842u16 | 11843u16
            | 11844u16 | 11845u16 | 11846u16 | 11847u16 | 11848u16 | 11849u16 | 11850u16
            | 11851u16 | 11852u16 | 11853u16 | 11854u16 | 11855u16 | 11856u16 | 11857u16
            | 11858u16 | 11859u16 | 11860u16 | 11861u16 | 11862u16 | 11863u16 | 11864u16
            | 11865u16 | 11866u16 | 11867u16 | 11868u16 | 11869u16 | 11870u16 | 11871u16
            | 11872u16 => BlockKind::JungleDoor,
            11873u16 | 11874u16 | 11875u16 | 11876u16 | 11877u16 | 11878u16 | 11879u16
            | 11880u16 | 11881u16 | 11882u16 | 11883u16 | 11884u16 | 11885u16 | 11886u16
            | 11887u16 | 11888u16 | 11889u16 | 11890u16 | 11891u16 | 11892u16 | 11893u16
            | 11894u16 | 11895u16 | 11896u16 | 11897u16 | 11898u16 | 11899u16 | 11900u16
            | 11901u16 | 11902u16 | 11903u16 | 11904u16 | 11905u16 | 11906u16 | 11907u16
            | 11908u16 | 11909u16 | 11910u16 | 11911u16 | 11912u16 | 11913u16 | 11914u16
            | 11915u16 | 11916u16 | 11917u16 | 11918u16 | 11919u16 | 11920u16 | 11921u16
            | 11922u16 | 11923u16 | 11924u16 | 11925u16 | 11926u16 | 11927u16 | 11928u16
            | 11929u16 | 11930u16 | 11931u16 | 11932u16 | 11933u16 | 11934u16 | 11935u16
            | 11936u16 => BlockKind::AcaciaDoor,
            11937u16 | 11938u16 | 11939u16 | 11940u16 | 11941u16 | 11942u16 | 11943u16
            | 11944u16 | 11945u16 | 11946u16 | 11947u16 | 11948u16 | 11949u16 | 11950u16
            | 11951u16 | 11952u16 | 11953u16 | 11954u16 | 11955u16 | 11956u16 | 11957u16
            | 11958u16 | 11959u16 | 11960u16 | 11961u16 | 11962u16 | 11963u16 | 11964u16
            | 11965u16 | 11966u16 | 11967u16 | 11968u16 | 11969u16 | 11970u16 | 11971u16
            | 11972u16 | 11973u16 | 11974u16 | 11975u16 | 11976u16 | 11977u16 | 11978u16
            | 11979u16 | 11980u16 | 11981u16 | 11982u16 | 11983u16 | 11984u16 | 11985u16
            | 11986u16 | 11987u16 | 11988u16 | 11989u16 | 11990u16 | 11991u16 | 11992u16
            | 11993u16 | 11994u16 | 11995u16 | 11996u16 | 11997u16 | 11998u16 | 11999u16
            | 12000u16 => BlockKind::CherryDoor,
            12001u16 | 12002u16 | 12003u16 | 12004u16 | 12005u16 | 12006u16 | 12007u16
            | 12008u16 | 12009u16 | 12010u16 | 12011u16 | 12012u16 | 12013u16 | 12014u16
            | 12015u16 | 12016u16 | 12017u16 | 12018u16 | 12019u16 | 12020u16 | 12021u16
            | 12022u16 | 12023u16 | 12024u16 | 12025u16 | 12026u16 | 12027u16 | 12028u16
            | 12029u16 | 12030u16 | 12031u16 | 12032u16 | 12033u16 | 12034u16 | 12035u16
            | 12036u16 | 12037u16 | 12038u16 | 12039u16 | 12040u16 | 12041u16 | 12042u16
            | 12043u16 | 12044u16 | 12045u16 | 12046u16 | 12047u16 | 12048u16 | 12049u16
            | 12050u16 | 12051u16 | 12052u16 | 12053u16 | 12054u16 | 12055u16 | 12056u16
            | 12057u16 | 12058u16 | 12059u16 | 12060u16 | 12061u16 | 12062u16 | 12063u16
            | 12064u16 => BlockKind::DarkOakDoor,
            12065u16 | 12066u16 | 12067u16 | 12068u16 | 12069u16 | 12070u16 | 12071u16
            | 12072u16 | 12073u16 | 12074u16 | 12075u16 | 12076u16 | 12077u16 | 12078u16
            | 12079u16 | 12080u16 | 12081u16 | 12082u16 | 12083u16 | 12084u16 | 12085u16
            | 12086u16 | 12087u16 | 12088u16 | 12089u16 | 12090u16 | 12091u16 | 12092u16
            | 12093u16 | 12094u16 | 12095u16 | 12096u16 | 12097u16 | 12098u16 | 12099u16
            | 12100u16 | 12101u16 | 12102u16 | 12103u16 | 12104u16 | 12105u16 | 12106u16
            | 12107u16 | 12108u16 | 12109u16 | 12110u16 | 12111u16 | 12112u16 | 12113u16
            | 12114u16 | 12115u16 | 12116u16 | 12117u16 | 12118u16 | 12119u16 | 12120u16
            | 12121u16 | 12122u16 | 12123u16 | 12124u16 | 12125u16 | 12126u16 | 12127u16
            | 12128u16 => BlockKind::MangroveDoor,
            12129u16 | 12130u16 | 12131u16 | 12132u16 | 12133u16 | 12134u16 | 12135u16
            | 12136u16 | 12137u16 | 12138u16 | 12139u16 | 12140u16 | 12141u16 | 12142u16
            | 12143u16 | 12144u16 | 12145u16 | 12146u16 | 12147u16 | 12148u16 | 12149u16
            | 12150u16 | 12151u16 | 12152u16 | 12153u16 | 12154u16 | 12155u16 | 12156u16
            | 12157u16 | 12158u16 | 12159u16 | 12160u16 | 12161u16 | 12162u16 | 12163u16
            | 12164u16 | 12165u16 | 12166u16 | 12167u16 | 12168u16 | 12169u16 | 12170u16
            | 12171u16 | 12172u16 | 12173u16 | 12174u16 | 12175u16 | 12176u16 | 12177u16
            | 12178u16 | 12179u16 | 12180u16 | 12181u16 | 12182u16 | 12183u16 | 12184u16
            | 12185u16 | 12186u16 | 12187u16 | 12188u16 | 12189u16 | 12190u16 | 12191u16
            | 12192u16 => BlockKind::BambooDoor,
            12193u16 | 12194u16 | 12195u16 | 12196u16 | 12197u16 | 12198u16 => BlockKind::EndRod,
            12199u16 | 12200u16 | 12201u16 | 12202u16 | 12203u16 | 12204u16 | 12205u16
            | 12206u16 | 12207u16 | 12208u16 | 12209u16 | 12210u16 | 12211u16 | 12212u16
            | 12213u16 | 12214u16 | 12215u16 | 12216u16 | 12217u16 | 12218u16 | 12219u16
            | 12220u16 | 12221u16 | 12222u16 | 12223u16 | 12224u16 | 12225u16 | 12226u16
            | 12227u16 | 12228u16 | 12229u16 | 12230u16 | 12231u16 | 12232u16 | 12233u16
            | 12234u16 | 12235u16 | 12236u16 | 12237u16 | 12238u16 | 12239u16 | 12240u16
            | 12241u16 | 12242u16 | 12243u16 | 12244u16 | 12245u16 | 12246u16 | 12247u16
            | 12248u16 | 12249u16 | 12250u16 | 12251u16 | 12252u16 | 12253u16 | 12254u16
            | 12255u16 | 12256u16 | 12257u16 | 12258u16 | 12259u16 | 12260u16 | 12261u16
            | 12262u16 => BlockKind::ChorusPlant,
            12263u16 | 12264u16 | 12265u16 | 12266u16 | 12267u16 | 12268u16 => {
                BlockKind::ChorusFlower
            }
            12269u16 => BlockKind::PurpurBlock,
            12270u16 | 12271u16 | 12272u16 => BlockKind::PurpurPillar,
            12273u16 | 12274u16 | 12275u16 | 12276u16 | 12277u16 | 12278u16 | 12279u16
            | 12280u16 | 12281u16 | 12282u16 | 12283u16 | 12284u16 | 12285u16 | 12286u16
            | 12287u16 | 12288u16 | 12289u16 | 12290u16 | 12291u16 | 12292u16 | 12293u16
            | 12294u16 | 12295u16 | 12296u16 | 12297u16 | 12298u16 | 12299u16 | 12300u16
            | 12301u16 | 12302u16 | 12303u16 | 12304u16 | 12305u16 | 12306u16 | 12307u16
            | 12308u16 | 12309u16 | 12310u16 | 12311u16 | 12312u16 | 12313u16 | 12314u16
            | 12315u16 | 12316u16 | 12317u16 | 12318u16 | 12319u16 | 12320u16 | 12321u16
            | 12322u16 | 12323u16 | 12324u16 | 12325u16 | 12326u16 | 12327u16 | 12328u16
            | 12329u16 | 12330u16 | 12331u16 | 12332u16 | 12333u16 | 12334u16 | 12335u16
            | 12336u16 | 12337u16 | 12338u16 | 12339u16 | 12340u16 | 12341u16 | 12342u16
            | 12343u16 | 12344u16 | 12345u16 | 12346u16 | 12347u16 | 12348u16 | 12349u16
            | 12350u16 | 12351u16 | 12352u16 => BlockKind::PurpurStairs,
            12353u16 => BlockKind::EndStoneBricks,
            12354u16 | 12355u16 => BlockKind::TorchflowerCrop,
            12356u16 | 12357u16 | 12358u16 | 12359u16 | 12360u16 | 12361u16 | 12362u16
            | 12363u16 | 12364u16 | 12365u16 => BlockKind::PitcherCrop,
            12366u16 | 12367u16 => BlockKind::PitcherPlant,
            12368u16 | 12369u16 | 12370u16 | 12371u16 => BlockKind::Beetroots,
            12372u16 => BlockKind::DirtPath,
            12373u16 => BlockKind::EndGateway,
            12374u16 | 12375u16 | 12376u16 | 12377u16 | 12378u16 | 12379u16 | 12380u16
            | 12381u16 | 12382u16 | 12383u16 | 12384u16 | 12385u16 => {
                BlockKind::RepeatingCommandBlock
            }
            12386u16 | 12387u16 | 12388u16 | 12389u16 | 12390u16 | 12391u16 | 12392u16
            | 12393u16 | 12394u16 | 12395u16 | 12396u16 | 12397u16 => BlockKind::ChainCommandBlock,
            12398u16 | 12399u16 | 12400u16 | 12401u16 => BlockKind::FrostedIce,
            12402u16 => BlockKind::MagmaBlock,
            12403u16 => BlockKind::NetherWartBlock,
            12404u16 => BlockKind::RedNetherBricks,
            12405u16 | 12406u16 | 12407u16 => BlockKind::BoneBlock,
            12408u16 => BlockKind::StructureVoid,
            12409u16 | 12410u16 | 12411u16 | 12412u16 | 12413u16 | 12414u16 | 12415u16
            | 12416u16 | 12417u16 | 12418u16 | 12419u16 | 12420u16 => BlockKind::Observer,
            12421u16 | 12422u16 | 12423u16 | 12424u16 | 12425u16 | 12426u16 => {
                BlockKind::ShulkerBox
            }
            12427u16 | 12428u16 | 12429u16 | 12430u16 | 12431u16 | 12432u16 => {
                BlockKind::WhiteShulkerBox
            }
            12433u16 | 12434u16 | 12435u16 | 12436u16 | 12437u16 | 12438u16 => {
                BlockKind::OrangeShulkerBox
            }
            12439u16 | 12440u16 | 12441u16 | 12442u16 | 12443u16 | 12444u16 => {
                BlockKind::MagentaShulkerBox
            }
            12445u16 | 12446u16 | 12447u16 | 12448u16 | 12449u16 | 12450u16 => {
                BlockKind::LightBlueShulkerBox
            }
            12451u16 | 12452u16 | 12453u16 | 12454u16 | 12455u16 | 12456u16 => {
                BlockKind::YellowShulkerBox
            }
            12457u16 | 12458u16 | 12459u16 | 12460u16 | 12461u16 | 12462u16 => {
                BlockKind::LimeShulkerBox
            }
            12463u16 | 12464u16 | 12465u16 | 12466u16 | 12467u16 | 12468u16 => {
                BlockKind::PinkShulkerBox
            }
            12469u16 | 12470u16 | 12471u16 | 12472u16 | 12473u16 | 12474u16 => {
                BlockKind::GrayShulkerBox
            }
            12475u16 | 12476u16 | 12477u16 | 12478u16 | 12479u16 | 12480u16 => {
                BlockKind::LightGrayShulkerBox
            }
            12481u16 | 12482u16 | 12483u16 | 12484u16 | 12485u16 | 12486u16 => {
                BlockKind::CyanShulkerBox
            }
            12487u16 | 12488u16 | 12489u16 | 12490u16 | 12491u16 | 12492u16 => {
                BlockKind::PurpleShulkerBox
            }
            12493u16 | 12494u16 | 12495u16 | 12496u16 | 12497u16 | 12498u16 => {
                BlockKind::BlueShulkerBox
            }
            12499u16 | 12500u16 | 12501u16 | 12502u16 | 12503u16 | 12504u16 => {
                BlockKind::BrownShulkerBox
            }
            12505u16 | 12506u16 | 12507u16 | 12508u16 | 12509u16 | 12510u16 => {
                BlockKind::GreenShulkerBox
            }
            12511u16 | 12512u16 | 12513u16 | 12514u16 | 12515u16 | 12516u16 => {
                BlockKind::RedShulkerBox
            }
            12517u16 | 12518u16 | 12519u16 | 12520u16 | 12521u16 | 12522u16 => {
                BlockKind::BlackShulkerBox
            }
            12523u16 | 12524u16 | 12525u16 | 12526u16 => BlockKind::WhiteGlazedTerracotta,
            12527u16 | 12528u16 | 12529u16 | 12530u16 => BlockKind::OrangeGlazedTerracotta,
            12531u16 | 12532u16 | 12533u16 | 12534u16 => BlockKind::MagentaGlazedTerracotta,
            12535u16 | 12536u16 | 12537u16 | 12538u16 => BlockKind::LightBlueGlazedTerracotta,
            12539u16 | 12540u16 | 12541u16 | 12542u16 => BlockKind::YellowGlazedTerracotta,
            12543u16 | 12544u16 | 12545u16 | 12546u16 => BlockKind::LimeGlazedTerracotta,
            12547u16 | 12548u16 | 12549u16 | 12550u16 => BlockKind::PinkGlazedTerracotta,
            12551u16 | 12552u16 | 12553u16 | 12554u16 => BlockKind::GrayGlazedTerracotta,
            12555u16 | 12556u16 | 12557u16 | 12558u16 => BlockKind::LightGrayGlazedTerracotta,
            12559u16 | 12560u16 | 12561u16 | 12562u16 => BlockKind::CyanGlazedTerracotta,
            12563u16 | 12564u16 | 12565u16 | 12566u16 => BlockKind::PurpleGlazedTerracotta,
            12567u16 | 12568u16 | 12569u16 | 12570u16 => BlockKind::BlueGlazedTerracotta,
            12571u16 | 12572u16 | 12573u16 | 12574u16 => BlockKind::BrownGlazedTerracotta,
            12575u16 | 12576u16 | 12577u16 | 12578u16 => BlockKind::GreenGlazedTerracotta,
            12579u16 | 12580u16 | 12581u16 | 12582u16 => BlockKind::RedGlazedTerracotta,
            12583u16 | 12584u16 | 12585u16 | 12586u16 => BlockKind::BlackGlazedTerracotta,
            12587u16 => BlockKind::WhiteConcrete,
            12588u16 => BlockKind::OrangeConcrete,
            12589u16 => BlockKind::MagentaConcrete,
            12590u16 => BlockKind::LightBlueConcrete,
            12591u16 => BlockKind::YellowConcrete,
            12592u16 => BlockKind::LimeConcrete,
            12593u16 => BlockKind::PinkConcrete,
            12594u16 => BlockKind::GrayConcrete,
            12595u16 => BlockKind::LightGrayConcrete,
            12596u16 => BlockKind::CyanConcrete,
            12597u16 => BlockKind::PurpleConcrete,
            12598u16 => BlockKind::BlueConcrete,
            12599u16 => BlockKind::BrownConcrete,
            12600u16 => BlockKind::GreenConcrete,
            12601u16 => BlockKind::RedConcrete,
            12602u16 => BlockKind::BlackConcrete,
            12603u16 => BlockKind::WhiteConcretePowder,
            12604u16 => BlockKind::OrangeConcretePowder,
            12605u16 => BlockKind::MagentaConcretePowder,
            12606u16 => BlockKind::LightBlueConcretePowder,
            12607u16 => BlockKind::YellowConcretePowder,
            12608u16 => BlockKind::LimeConcretePowder,
            12609u16 => BlockKind::PinkConcretePowder,
            12610u16 => BlockKind::GrayConcretePowder,
            12611u16 => BlockKind::LightGrayConcretePowder,
            12612u16 => BlockKind::CyanConcretePowder,
            12613u16 => BlockKind::PurpleConcretePowder,
            12614u16 => BlockKind::BlueConcretePowder,
            12615u16 => BlockKind::BrownConcretePowder,
            12616u16 => BlockKind::GreenConcretePowder,
            12617u16 => BlockKind::RedConcretePowder,
            12618u16 => BlockKind::BlackConcretePowder,
            12619u16 | 12620u16 | 12621u16 | 12622u16 | 12623u16 | 12624u16 | 12625u16
            | 12626u16 | 12627u16 | 12628u16 | 12629u16 | 12630u16 | 12631u16 | 12632u16
            | 12633u16 | 12634u16 | 12635u16 | 12636u16 | 12637u16 | 12638u16 | 12639u16
            | 12640u16 | 12641u16 | 12642u16 | 12643u16 | 12644u16 => BlockKind::Kelp,
            12645u16 => BlockKind::KelpPlant,
            12646u16 => BlockKind::DriedKelpBlock,
            12647u16 | 12648u16 | 12649u16 | 12650u16 | 12651u16 | 12652u16 | 12653u16
            | 12654u16 | 12655u16 | 12656u16 | 12657u16 | 12658u16 => BlockKind::TurtleEgg,
            12659u16 | 12660u16 | 12661u16 => BlockKind::SnifferEgg,
            12662u16 => BlockKind::DeadTubeCoralBlock,
            12663u16 => BlockKind::DeadBrainCoralBlock,
            12664u16 => BlockKind::DeadBubbleCoralBlock,
            12665u16 => BlockKind::DeadFireCoralBlock,
            12666u16 => BlockKind::DeadHornCoralBlock,
            12667u16 => BlockKind::TubeCoralBlock,
            12668u16 => BlockKind::BrainCoralBlock,
            12669u16 => BlockKind::BubbleCoralBlock,
            12670u16 => BlockKind::FireCoralBlock,
            12671u16 => BlockKind::HornCoralBlock,
            12672u16 | 12673u16 => BlockKind::DeadTubeCoral,
            12674u16 | 12675u16 => BlockKind::DeadBrainCoral,
            12676u16 | 12677u16 => BlockKind::DeadBubbleCoral,
            12678u16 | 12679u16 => BlockKind::DeadFireCoral,
            12680u16 | 12681u16 => BlockKind::DeadHornCoral,
            12682u16 | 12683u16 => BlockKind::TubeCoral,
            12684u16 | 12685u16 => BlockKind::BrainCoral,
            12686u16 | 12687u16 => BlockKind::BubbleCoral,
            12688u16 | 12689u16 => BlockKind::FireCoral,
            12690u16 | 12691u16 => BlockKind::HornCoral,
            12692u16 | 12693u16 => BlockKind::DeadTubeCoralFan,
            12694u16 | 12695u16 => BlockKind::DeadBrainCoralFan,
            12696u16 | 12697u16 => BlockKind::DeadBubbleCoralFan,
            12698u16 | 12699u16 => BlockKind::DeadFireCoralFan,
            12700u16 | 12701u16 => BlockKind::DeadHornCoralFan,
            12702u16 | 12703u16 => BlockKind::TubeCoralFan,
            12704u16 | 12705u16 => BlockKind::BrainCoralFan,
            12706u16 | 12707u16 => BlockKind::BubbleCoralFan,
            12708u16 | 12709u16 => BlockKind::FireCoralFan,
            12710u16 | 12711u16 => BlockKind::HornCoralFan,
            12712u16 | 12713u16 | 12714u16 | 12715u16 | 12716u16 | 12717u16 | 12718u16
            | 12719u16 => BlockKind::DeadTubeCoralWallFan,
            12720u16 | 12721u16 | 12722u16 | 12723u16 | 12724u16 | 12725u16 | 12726u16
            | 12727u16 => BlockKind::DeadBrainCoralWallFan,
            12728u16 | 12729u16 | 12730u16 | 12731u16 | 12732u16 | 12733u16 | 12734u16
            | 12735u16 => BlockKind::DeadBubbleCoralWallFan,
            12736u16 | 12737u16 | 12738u16 | 12739u16 | 12740u16 | 12741u16 | 12742u16
            | 12743u16 => BlockKind::DeadFireCoralWallFan,
            12744u16 | 12745u16 | 12746u16 | 12747u16 | 12748u16 | 12749u16 | 12750u16
            | 12751u16 => BlockKind::DeadHornCoralWallFan,
            12752u16 | 12753u16 | 12754u16 | 12755u16 | 12756u16 | 12757u16 | 12758u16
            | 12759u16 => BlockKind::TubeCoralWallFan,
            12760u16 | 12761u16 | 12762u16 | 12763u16 | 12764u16 | 12765u16 | 12766u16
            | 12767u16 => BlockKind::BrainCoralWallFan,
            12768u16 | 12769u16 | 12770u16 | 12771u16 | 12772u16 | 12773u16 | 12774u16
            | 12775u16 => BlockKind::BubbleCoralWallFan,
            12776u16 | 12777u16 | 12778u16 | 12779u16 | 12780u16 | 12781u16 | 12782u16
            | 12783u16 => BlockKind::FireCoralWallFan,
            12784u16 | 12785u16 | 12786u16 | 12787u16 | 12788u16 | 12789u16 | 12790u16
            | 12791u16 => BlockKind::HornCoralWallFan,
            12792u16 | 12793u16 | 12794u16 | 12795u16 | 12796u16 | 12797u16 | 12798u16
            | 12799u16 => BlockKind::SeaPickle,
            12800u16 => BlockKind::BlueIce,
            12801u16 | 12802u16 => BlockKind::Conduit,
            12803u16 => BlockKind::BambooSapling,
            12804u16 | 12805u16 | 12806u16 | 12807u16 | 12808u16 | 12809u16 | 12810u16
            | 12811u16 | 12812u16 | 12813u16 | 12814u16 | 12815u16 => BlockKind::Bamboo,
            12816u16 => BlockKind::PottedBamboo,
            12817u16 => BlockKind::VoidAir,
            12818u16 => BlockKind::CaveAir,
            12819u16 | 12820u16 => BlockKind::BubbleColumn,
            12821u16 | 12822u16 | 12823u16 | 12824u16 | 12825u16 | 12826u16 | 12827u16
            | 12828u16 | 12829u16 | 12830u16 | 12831u16 | 12832u16 | 12833u16 | 12834u16
            | 12835u16 | 12836u16 | 12837u16 | 12838u16 | 12839u16 | 12840u16 | 12841u16
            | 12842u16 | 12843u16 | 12844u16 | 12845u16 | 12846u16 | 12847u16 | 12848u16
            | 12849u16 | 12850u16 | 12851u16 | 12852u16 | 12853u16 | 12854u16 | 12855u16
            | 12856u16 | 12857u16 | 12858u16 | 12859u16 | 12860u16 | 12861u16 | 12862u16
            | 12863u16 | 12864u16 | 12865u16 | 12866u16 | 12867u16 | 12868u16 | 12869u16
            | 12870u16 | 12871u16 | 12872u16 | 12873u16 | 12874u16 | 12875u16 | 12876u16
            | 12877u16 | 12878u16 | 12879u16 | 12880u16 | 12881u16 | 12882u16 | 12883u16
            | 12884u16 | 12885u16 | 12886u16 | 12887u16 | 12888u16 | 12889u16 | 12890u16
            | 12891u16 | 12892u16 | 12893u16 | 12894u16 | 12895u16 | 12896u16 | 12897u16
            | 12898u16 | 12899u16 | 12900u16 => BlockKind::PolishedGraniteStairs,
            12901u16 | 12902u16 | 12903u16 | 12904u16 | 12905u16 | 12906u16 | 12907u16
            | 12908u16 | 12909u16 | 12910u16 | 12911u16 | 12912u16 | 12913u16 | 12914u16
            | 12915u16 | 12916u16 | 12917u16 | 12918u16 | 12919u16 | 12920u16 | 12921u16
            | 12922u16 | 12923u16 | 12924u16 | 12925u16 | 12926u16 | 12927u16 | 12928u16
            | 12929u16 | 12930u16 | 12931u16 | 12932u16 | 12933u16 | 12934u16 | 12935u16
            | 12936u16 | 12937u16 | 12938u16 | 12939u16 | 12940u16 | 12941u16 | 12942u16
            | 12943u16 | 12944u16 | 12945u16 | 12946u16 | 12947u16 | 12948u16 | 12949u16
            | 12950u16 | 12951u16 | 12952u16 | 12953u16 | 12954u16 | 12955u16 | 12956u16
            | 12957u16 | 12958u16 | 12959u16 | 12960u16 | 12961u16 | 12962u16 | 12963u16
            | 12964u16 | 12965u16 | 12966u16 | 12967u16 | 12968u16 | 12969u16 | 12970u16
            | 12971u16 | 12972u16 | 12973u16 | 12974u16 | 12975u16 | 12976u16 | 12977u16
            | 12978u16 | 12979u16 | 12980u16 => BlockKind::SmoothRedSandstoneStairs,
            12981u16 | 12982u16 | 12983u16 | 12984u16 | 12985u16 | 12986u16 | 12987u16
            | 12988u16 | 12989u16 | 12990u16 | 12991u16 | 12992u16 | 12993u16 | 12994u16
            | 12995u16 | 12996u16 | 12997u16 | 12998u16 | 12999u16 | 13000u16 | 13001u16
            | 13002u16 | 13003u16 | 13004u16 | 13005u16 | 13006u16 | 13007u16 | 13008u16
            | 13009u16 | 13010u16 | 13011u16 | 13012u16 | 13013u16 | 13014u16 | 13015u16
            | 13016u16 | 13017u16 | 13018u16 | 13019u16 | 13020u16 | 13021u16 | 13022u16
            | 13023u16 | 13024u16 | 13025u16 | 13026u16 | 13027u16 | 13028u16 | 13029u16
            | 13030u16 | 13031u16 | 13032u16 | 13033u16 | 13034u16 | 13035u16 | 13036u16
            | 13037u16 | 13038u16 | 13039u16 | 13040u16 | 13041u16 | 13042u16 | 13043u16
            | 13044u16 | 13045u16 | 13046u16 | 13047u16 | 13048u16 | 13049u16 | 13050u16
            | 13051u16 | 13052u16 | 13053u16 | 13054u16 | 13055u16 | 13056u16 | 13057u16
            | 13058u16 | 13059u16 | 13060u16 => BlockKind::MossyStoneBrickStairs,
            13061u16 | 13062u16 | 13063u16 | 13064u16 | 13065u16 | 13066u16 | 13067u16
            | 13068u16 | 13069u16 | 13070u16 | 13071u16 | 13072u16 | 13073u16 | 13074u16
            | 13075u16 | 13076u16 | 13077u16 | 13078u16 | 13079u16 | 13080u16 | 13081u16
            | 13082u16 | 13083u16 | 13084u16 | 13085u16 | 13086u16 | 13087u16 | 13088u16
            | 13089u16 | 13090u16 | 13091u16 | 13092u16 | 13093u16 | 13094u16 | 13095u16
            | 13096u16 | 13097u16 | 13098u16 | 13099u16 | 13100u16 | 13101u16 | 13102u16
            | 13103u16 | 13104u16 | 13105u16 | 13106u16 | 13107u16 | 13108u16 | 13109u16
            | 13110u16 | 13111u16 | 13112u16 | 13113u16 | 13114u16 | 13115u16 | 13116u16
            | 13117u16 | 13118u16 | 13119u16 | 13120u16 | 13121u16 | 13122u16 | 13123u16
            | 13124u16 | 13125u16 | 13126u16 | 13127u16 | 13128u16 | 13129u16 | 13130u16
            | 13131u16 | 13132u16 | 13133u16 | 13134u16 | 13135u16 | 13136u16 | 13137u16
            | 13138u16 | 13139u16 | 13140u16 => BlockKind::PolishedDioriteStairs,
            13141u16 | 13142u16 | 13143u16 | 13144u16 | 13145u16 | 13146u16 | 13147u16
            | 13148u16 | 13149u16 | 13150u16 | 13151u16 | 13152u16 | 13153u16 | 13154u16
            | 13155u16 | 13156u16 | 13157u16 | 13158u16 | 13159u16 | 13160u16 | 13161u16
            | 13162u16 | 13163u16 | 13164u16 | 13165u16 | 13166u16 | 13167u16 | 13168u16
            | 13169u16 | 13170u16 | 13171u16 | 13172u16 | 13173u16 | 13174u16 | 13175u16
            | 13176u16 | 13177u16 | 13178u16 | 13179u16 | 13180u16 | 13181u16 | 13182u16
            | 13183u16 | 13184u16 | 13185u16 | 13186u16 | 13187u16 | 13188u16 | 13189u16
            | 13190u16 | 13191u16 | 13192u16 | 13193u16 | 13194u16 | 13195u16 | 13196u16
            | 13197u16 | 13198u16 | 13199u16 | 13200u16 | 13201u16 | 13202u16 | 13203u16
            | 13204u16 | 13205u16 | 13206u16 | 13207u16 | 13208u16 | 13209u16 | 13210u16
            | 13211u16 | 13212u16 | 13213u16 | 13214u16 | 13215u16 | 13216u16 | 13217u16
            | 13218u16 | 13219u16 | 13220u16 => BlockKind::MossyCobblestoneStairs,
            13221u16 | 13222u16 | 13223u16 | 13224u16 | 13225u16 | 13226u16 | 13227u16
            | 13228u16 | 13229u16 | 13230u16 | 13231u16 | 13232u16 | 13233u16 | 13234u16
            | 13235u16 | 13236u16 | 13237u16 | 13238u16 | 13239u16 | 13240u16 | 13241u16
            | 13242u16 | 13243u16 | 13244u16 | 13245u16 | 13246u16 | 13247u16 | 13248u16
            | 13249u16 | 13250u16 | 13251u16 | 13252u16 | 13253u16 | 13254u16 | 13255u16
            | 13256u16 | 13257u16 | 13258u16 | 13259u16 | 13260u16 | 13261u16 | 13262u16
            | 13263u16 | 13264u16 | 13265u16 | 13266u16 | 13267u16 | 13268u16 | 13269u16
            | 13270u16 | 13271u16 | 13272u16 | 13273u16 | 13274u16 | 13275u16 | 13276u16
            | 13277u16 | 13278u16 | 13279u16 | 13280u16 | 13281u16 | 13282u16 | 13283u16
            | 13284u16 | 13285u16 | 13286u16 | 13287u16 | 13288u16 | 13289u16 | 13290u16
            | 13291u16 | 13292u16 | 13293u16 | 13294u16 | 13295u16 | 13296u16 | 13297u16
            | 13298u16 | 13299u16 | 13300u16 => BlockKind::EndStoneBrickStairs,
            13301u16 | 13302u16 | 13303u16 | 13304u16 | 13305u16 | 13306u16 | 13307u16
            | 13308u16 | 13309u16 | 13310u16 | 13311u16 | 13312u16 | 13313u16 | 13314u16
            | 13315u16 | 13316u16 | 13317u16 | 13318u16 | 13319u16 | 13320u16 | 13321u16
            | 13322u16 | 13323u16 | 13324u16 | 13325u16 | 13326u16 | 13327u16 | 13328u16
            | 13329u16 | 13330u16 | 13331u16 | 13332u16 | 13333u16 | 13334u16 | 13335u16
            | 13336u16 | 13337u16 | 13338u16 | 13339u16 | 13340u16 | 13341u16 | 13342u16
            | 13343u16 | 13344u16 | 13345u16 | 13346u16 | 13347u16 | 13348u16 | 13349u16
            | 13350u16 | 13351u16 | 13352u16 | 13353u16 | 13354u16 | 13355u16 | 13356u16
            | 13357u16 | 13358u16 | 13359u16 | 13360u16 | 13361u16 | 13362u16 | 13363u16
            | 13364u16 | 13365u16 | 13366u16 | 13367u16 | 13368u16 | 13369u16 | 13370u16
            | 13371u16 | 13372u16 | 13373u16 | 13374u16 | 13375u16 | 13376u16 | 13377u16
            | 13378u16 | 13379u16 | 13380u16 => BlockKind::StoneStairs,
            13381u16 | 13382u16 | 13383u16 | 13384u16 | 13385u16 | 13386u16 | 13387u16
            | 13388u16 | 13389u16 | 13390u16 | 13391u16 | 13392u16 | 13393u16 | 13394u16
            | 13395u16 | 13396u16 | 13397u16 | 13398u16 | 13399u16 | 13400u16 | 13401u16
            | 13402u16 | 13403u16 | 13404u16 | 13405u16 | 13406u16 | 13407u16 | 13408u16
            | 13409u16 | 13410u16 | 13411u16 | 13412u16 | 13413u16 | 13414u16 | 13415u16
            | 13416u16 | 13417u16 | 13418u16 | 13419u16 | 13420u16 | 13421u16 | 13422u16
            | 13423u16 | 13424u16 | 13425u16 | 13426u16 | 13427u16 | 13428u16 | 13429u16
            | 13430u16 | 13431u16 | 13432u16 | 13433u16 | 13434u16 | 13435u16 | 13436u16
            | 13437u16 | 13438u16 | 13439u16 | 13440u16 | 13441u16 | 13442u16 | 13443u16
            | 13444u16 | 13445u16 | 13446u16 | 13447u16 | 13448u16 | 13449u16 | 13450u16
            | 13451u16 | 13452u16 | 13453u16 | 13454u16 | 13455u16 | 13456u16 | 13457u16
            | 13458u16 | 13459u16 | 13460u16 => BlockKind::SmoothSandstoneStairs,
            13461u16 | 13462u16 | 13463u16 | 13464u16 | 13465u16 | 13466u16 | 13467u16
            | 13468u16 | 13469u16 | 13470u16 | 13471u16 | 13472u16 | 13473u16 | 13474u16
            | 13475u16 | 13476u16 | 13477u16 | 13478u16 | 13479u16 | 13480u16 | 13481u16
            | 13482u16 | 13483u16 | 13484u16 | 13485u16 | 13486u16 | 13487u16 | 13488u16
            | 13489u16 | 13490u16 | 13491u16 | 13492u16 | 13493u16 | 13494u16 | 13495u16
            | 13496u16 | 13497u16 | 13498u16 | 13499u16 | 13500u16 | 13501u16 | 13502u16
            | 13503u16 | 13504u16 | 13505u16 | 13506u16 | 13507u16 | 13508u16 | 13509u16
            | 13510u16 | 13511u16 | 13512u16 | 13513u16 | 13514u16 | 13515u16 | 13516u16
            | 13517u16 | 13518u16 | 13519u16 | 13520u16 | 13521u16 | 13522u16 | 13523u16
            | 13524u16 | 13525u16 | 13526u16 | 13527u16 | 13528u16 | 13529u16 | 13530u16
            | 13531u16 | 13532u16 | 13533u16 | 13534u16 | 13535u16 | 13536u16 | 13537u16
            | 13538u16 | 13539u16 | 13540u16 => BlockKind::SmoothQuartzStairs,
            13541u16 | 13542u16 | 13543u16 | 13544u16 | 13545u16 | 13546u16 | 13547u16
            | 13548u16 | 13549u16 | 13550u16 | 13551u16 | 13552u16 | 13553u16 | 13554u16
            | 13555u16 | 13556u16 | 13557u16 | 13558u16 | 13559u16 | 13560u16 | 13561u16
            | 13562u16 | 13563u16 | 13564u16 | 13565u16 | 13566u16 | 13567u16 | 13568u16
            | 13569u16 | 13570u16 | 13571u16 | 13572u16 | 13573u16 | 13574u16 | 13575u16
            | 13576u16 | 13577u16 | 13578u16 | 13579u16 | 13580u16 | 13581u16 | 13582u16
            | 13583u16 | 13584u16 | 13585u16 | 13586u16 | 13587u16 | 13588u16 | 13589u16
            | 13590u16 | 13591u16 | 13592u16 | 13593u16 | 13594u16 | 13595u16 | 13596u16
            | 13597u16 | 13598u16 | 13599u16 | 13600u16 | 13601u16 | 13602u16 | 13603u16
            | 13604u16 | 13605u16 | 13606u16 | 13607u16 | 13608u16 | 13609u16 | 13610u16
            | 13611u16 | 13612u16 | 13613u16 | 13614u16 | 13615u16 | 13616u16 | 13617u16
            | 13618u16 | 13619u16 | 13620u16 => BlockKind::GraniteStairs,
            13621u16 | 13622u16 | 13623u16 | 13624u16 | 13625u16 | 13626u16 | 13627u16
            | 13628u16 | 13629u16 | 13630u16 | 13631u16 | 13632u16 | 13633u16 | 13634u16
            | 13635u16 | 13636u16 | 13637u16 | 13638u16 | 13639u16 | 13640u16 | 13641u16
            | 13642u16 | 13643u16 | 13644u16 | 13645u16 | 13646u16 | 13647u16 | 13648u16
            | 13649u16 | 13650u16 | 13651u16 | 13652u16 | 13653u16 | 13654u16 | 13655u16
            | 13656u16 | 13657u16 | 13658u16 | 13659u16 | 13660u16 | 13661u16 | 13662u16
            | 13663u16 | 13664u16 | 13665u16 | 13666u16 | 13667u16 | 13668u16 | 13669u16
            | 13670u16 | 13671u16 | 13672u16 | 13673u16 | 13674u16 | 13675u16 | 13676u16
            | 13677u16 | 13678u16 | 13679u16 | 13680u16 | 13681u16 | 13682u16 | 13683u16
            | 13684u16 | 13685u16 | 13686u16 | 13687u16 | 13688u16 | 13689u16 | 13690u16
            | 13691u16 | 13692u16 | 13693u16 | 13694u16 | 13695u16 | 13696u16 | 13697u16
            | 13698u16 | 13699u16 | 13700u16 => BlockKind::AndesiteStairs,
            13701u16 | 13702u16 | 13703u16 | 13704u16 | 13705u16 | 13706u16 | 13707u16
            | 13708u16 | 13709u16 | 13710u16 | 13711u16 | 13712u16 | 13713u16 | 13714u16
            | 13715u16 | 13716u16 | 13717u16 | 13718u16 | 13719u16 | 13720u16 | 13721u16
            | 13722u16 | 13723u16 | 13724u16 | 13725u16 | 13726u16 | 13727u16 | 13728u16
            | 13729u16 | 13730u16 | 13731u16 | 13732u16 | 13733u16 | 13734u16 | 13735u16
            | 13736u16 | 13737u16 | 13738u16 | 13739u16 | 13740u16 | 13741u16 | 13742u16
            | 13743u16 | 13744u16 | 13745u16 | 13746u16 | 13747u16 | 13748u16 | 13749u16
            | 13750u16 | 13751u16 | 13752u16 | 13753u16 | 13754u16 | 13755u16 | 13756u16
            | 13757u16 | 13758u16 | 13759u16 | 13760u16 | 13761u16 | 13762u16 | 13763u16
            | 13764u16 | 13765u16 | 13766u16 | 13767u16 | 13768u16 | 13769u16 | 13770u16
            | 13771u16 | 13772u16 | 13773u16 | 13774u16 | 13775u16 | 13776u16 | 13777u16
            | 13778u16 | 13779u16 | 13780u16 => BlockKind::RedNetherBrickStairs,
            13781u16 | 13782u16 | 13783u16 | 13784u16 | 13785u16 | 13786u16 | 13787u16
            | 13788u16 | 13789u16 | 13790u16 | 13791u16 | 13792u16 | 13793u16 | 13794u16
            | 13795u16 | 13796u16 | 13797u16 | 13798u16 | 13799u16 | 13800u16 | 13801u16
            | 13802u16 | 13803u16 | 13804u16 | 13805u16 | 13806u16 | 13807u16 | 13808u16
            | 13809u16 | 13810u16 | 13811u16 | 13812u16 | 13813u16 | 13814u16 | 13815u16
            | 13816u16 | 13817u16 | 13818u16 | 13819u16 | 13820u16 | 13821u16 | 13822u16
            | 13823u16 | 13824u16 | 13825u16 | 13826u16 | 13827u16 | 13828u16 | 13829u16
            | 13830u16 | 13831u16 | 13832u16 | 13833u16 | 13834u16 | 13835u16 | 13836u16
            | 13837u16 | 13838u16 | 13839u16 | 13840u16 | 13841u16 | 13842u16 | 13843u16
            | 13844u16 | 13845u16 | 13846u16 | 13847u16 | 13848u16 | 13849u16 | 13850u16
            | 13851u16 | 13852u16 | 13853u16 | 13854u16 | 13855u16 | 13856u16 | 13857u16
            | 13858u16 | 13859u16 | 13860u16 => BlockKind::PolishedAndesiteStairs,
            13861u16 | 13862u16 | 13863u16 | 13864u16 | 13865u16 | 13866u16 | 13867u16
            | 13868u16 | 13869u16 | 13870u16 | 13871u16 | 13872u16 | 13873u16 | 13874u16
            | 13875u16 | 13876u16 | 13877u16 | 13878u16 | 13879u16 | 13880u16 | 13881u16
            | 13882u16 | 13883u16 | 13884u16 | 13885u16 | 13886u16 | 13887u16 | 13888u16
            | 13889u16 | 13890u16 | 13891u16 | 13892u16 | 13893u16 | 13894u16 | 13895u16
            | 13896u16 | 13897u16 | 13898u16 | 13899u16 | 13900u16 | 13901u16 | 13902u16
            | 13903u16 | 13904u16 | 13905u16 | 13906u16 | 13907u16 | 13908u16 | 13909u16
            | 13910u16 | 13911u16 | 13912u16 | 13913u16 | 13914u16 | 13915u16 | 13916u16
            | 13917u16 | 13918u16 | 13919u16 | 13920u16 | 13921u16 | 13922u16 | 13923u16
            | 13924u16 | 13925u16 | 13926u16 | 13927u16 | 13928u16 | 13929u16 | 13930u16
            | 13931u16 | 13932u16 | 13933u16 | 13934u16 | 13935u16 | 13936u16 | 13937u16
            | 13938u16 | 13939u16 | 13940u16 => BlockKind::DioriteStairs,
            13941u16 | 13942u16 | 13943u16 | 13944u16 | 13945u16 | 13946u16 => {
                BlockKind::PolishedGraniteSlab
            }
            13947u16 | 13948u16 | 13949u16 | 13950u16 | 13951u16 | 13952u16 => {
                BlockKind::SmoothRedSandstoneSlab
            }
            13953u16 | 13954u16 | 13955u16 | 13956u16 | 13957u16 | 13958u16 => {
                BlockKind::MossyStoneBrickSlab
            }
            13959u16 | 13960u16 | 13961u16 | 13962u16 | 13963u16 | 13964u16 => {
                BlockKind::PolishedDioriteSlab
            }
            13965u16 | 13966u16 | 13967u16 | 13968u16 | 13969u16 | 13970u16 => {
                BlockKind::MossyCobblestoneSlab
            }
            13971u16 | 13972u16 | 13973u16 | 13974u16 | 13975u16 | 13976u16 => {
                BlockKind::EndStoneBrickSlab
            }
            13977u16 | 13978u16 | 13979u16 | 13980u16 | 13981u16 | 13982u16 => {
                BlockKind::SmoothSandstoneSlab
            }
            13983u16 | 13984u16 | 13985u16 | 13986u16 | 13987u16 | 13988u16 => {
                BlockKind::SmoothQuartzSlab
            }
            13989u16 | 13990u16 | 13991u16 | 13992u16 | 13993u16 | 13994u16 => {
                BlockKind::GraniteSlab
            }
            13995u16 | 13996u16 | 13997u16 | 13998u16 | 13999u16 | 14000u16 => {
                BlockKind::AndesiteSlab
            }
            14001u16 | 14002u16 | 14003u16 | 14004u16 | 14005u16 | 14006u16 => {
                BlockKind::RedNetherBrickSlab
            }
            14007u16 | 14008u16 | 14009u16 | 14010u16 | 14011u16 | 14012u16 => {
                BlockKind::PolishedAndesiteSlab
            }
            14013u16 | 14014u16 | 14015u16 | 14016u16 | 14017u16 | 14018u16 => {
                BlockKind::DioriteSlab
            }
            14019u16 | 14020u16 | 14021u16 | 14022u16 | 14023u16 | 14024u16 | 14025u16
            | 14026u16 | 14027u16 | 14028u16 | 14029u16 | 14030u16 | 14031u16 | 14032u16
            | 14033u16 | 14034u16 | 14035u16 | 14036u16 | 14037u16 | 14038u16 | 14039u16
            | 14040u16 | 14041u16 | 14042u16 | 14043u16 | 14044u16 | 14045u16 | 14046u16
            | 14047u16 | 14048u16 | 14049u16 | 14050u16 | 14051u16 | 14052u16 | 14053u16
            | 14054u16 | 14055u16 | 14056u16 | 14057u16 | 14058u16 | 14059u16 | 14060u16
            | 14061u16 | 14062u16 | 14063u16 | 14064u16 | 14065u16 | 14066u16 | 14067u16
            | 14068u16 | 14069u16 | 14070u16 | 14071u16 | 14072u16 | 14073u16 | 14074u16
            | 14075u16 | 14076u16 | 14077u16 | 14078u16 | 14079u16 | 14080u16 | 14081u16
            | 14082u16 | 14083u16 | 14084u16 | 14085u16 | 14086u16 | 14087u16 | 14088u16
            | 14089u16 | 14090u16 | 14091u16 | 14092u16 | 14093u16 | 14094u16 | 14095u16
            | 14096u16 | 14097u16 | 14098u16 | 14099u16 | 14100u16 | 14101u16 | 14102u16
            | 14103u16 | 14104u16 | 14105u16 | 14106u16 | 14107u16 | 14108u16 | 14109u16
            | 14110u16 | 14111u16 | 14112u16 | 14113u16 | 14114u16 | 14115u16 | 14116u16
            | 14117u16 | 14118u16 | 14119u16 | 14120u16 | 14121u16 | 14122u16 | 14123u16
            | 14124u16 | 14125u16 | 14126u16 | 14127u16 | 14128u16 | 14129u16 | 14130u16
            | 14131u16 | 14132u16 | 14133u16 | 14134u16 | 14135u16 | 14136u16 | 14137u16
            | 14138u16 | 14139u16 | 14140u16 | 14141u16 | 14142u16 | 14143u16 | 14144u16
            | 14145u16 | 14146u16 | 14147u16 | 14148u16 | 14149u16 | 14150u16 | 14151u16
            | 14152u16 | 14153u16 | 14154u16 | 14155u16 | 14156u16 | 14157u16 | 14158u16
            | 14159u16 | 14160u16 | 14161u16 | 14162u16 | 14163u16 | 14164u16 | 14165u16
            | 14166u16 | 14167u16 | 14168u16 | 14169u16 | 14170u16 | 14171u16 | 14172u16
            | 14173u16 | 14174u16 | 14175u16 | 14176u16 | 14177u16 | 14178u16 | 14179u16
            | 14180u16 | 14181u16 | 14182u16 | 14183u16 | 14184u16 | 14185u16 | 14186u16
            | 14187u16 | 14188u16 | 14189u16 | 14190u16 | 14191u16 | 14192u16 | 14193u16
            | 14194u16 | 14195u16 | 14196u16 | 14197u16 | 14198u16 | 14199u16 | 14200u16
            | 14201u16 | 14202u16 | 14203u16 | 14204u16 | 14205u16 | 14206u16 | 14207u16
            | 14208u16 | 14209u16 | 14210u16 | 14211u16 | 14212u16 | 14213u16 | 14214u16
            | 14215u16 | 14216u16 | 14217u16 | 14218u16 | 14219u16 | 14220u16 | 14221u16
            | 14222u16 | 14223u16 | 14224u16 | 14225u16 | 14226u16 | 14227u16 | 14228u16
            | 14229u16 | 14230u16 | 14231u16 | 14232u16 | 14233u16 | 14234u16 | 14235u16
            | 14236u16 | 14237u16 | 14238u16 | 14239u16 | 14240u16 | 14241u16 | 14242u16
            | 14243u16 | 14244u16 | 14245u16 | 14246u16 | 14247u16 | 14248u16 | 14249u16
            | 14250u16 | 14251u16 | 14252u16 | 14253u16 | 14254u16 | 14255u16 | 14256u16
            | 14257u16 | 14258u16 | 14259u16 | 14260u16 | 14261u16 | 14262u16 | 14263u16
            | 14264u16 | 14265u16 | 14266u16 | 14267u16 | 14268u16 | 14269u16 | 14270u16
            | 14271u16 | 14272u16 | 14273u16 | 14274u16 | 14275u16 | 14276u16 | 14277u16
            | 14278u16 | 14279u16 | 14280u16 | 14281u16 | 14282u16 | 14283u16 | 14284u16
            | 14285u16 | 14286u16 | 14287u16 | 14288u16 | 14289u16 | 14290u16 | 14291u16
            | 14292u16 | 14293u16 | 14294u16 | 14295u16 | 14296u16 | 14297u16 | 14298u16
            | 14299u16 | 14300u16 | 14301u16 | 14302u16 | 14303u16 | 14304u16 | 14305u16
            | 14306u16 | 14307u16 | 14308u16 | 14309u16 | 14310u16 | 14311u16 | 14312u16
            | 14313u16 | 14314u16 | 14315u16 | 14316u16 | 14317u16 | 14318u16 | 14319u16
            | 14320u16 | 14321u16 | 14322u16 | 14323u16 | 14324u16 | 14325u16 | 14326u16
            | 14327u16 | 14328u16 | 14329u16 | 14330u16 | 14331u16 | 14332u16 | 14333u16
            | 14334u16 | 14335u16 | 14336u16 | 14337u16 | 14338u16 | 14339u16 | 14340u16
            | 14341u16 | 14342u16 => BlockKind::BrickWall,
            14343u16 | 14344u16 | 14345u16 | 14346u16 | 14347u16 | 14348u16 | 14349u16
            | 14350u16 | 14351u16 | 14352u16 | 14353u16 | 14354u16 | 14355u16 | 14356u16
            | 14357u16 | 14358u16 | 14359u16 | 14360u16 | 14361u16 | 14362u16 | 14363u16
            | 14364u16 | 14365u16 | 14366u16 | 14367u16 | 14368u16 | 14369u16 | 14370u16
            | 14371u16 | 14372u16 | 14373u16 | 14374u16 | 14375u16 | 14376u16 | 14377u16
            | 14378u16 | 14379u16 | 14380u16 | 14381u16 | 14382u16 | 14383u16 | 14384u16
            | 14385u16 | 14386u16 | 14387u16 | 14388u16 | 14389u16 | 14390u16 | 14391u16
            | 14392u16 | 14393u16 | 14394u16 | 14395u16 | 14396u16 | 14397u16 | 14398u16
            | 14399u16 | 14400u16 | 14401u16 | 14402u16 | 14403u16 | 14404u16 | 14405u16
            | 14406u16 | 14407u16 | 14408u16 | 14409u16 | 14410u16 | 14411u16 | 14412u16
            | 14413u16 | 14414u16 | 14415u16 | 14416u16 | 14417u16 | 14418u16 | 14419u16
            | 14420u16 | 14421u16 | 14422u16 | 14423u16 | 14424u16 | 14425u16 | 14426u16
            | 14427u16 | 14428u16 | 14429u16 | 14430u16 | 14431u16 | 14432u16 | 14433u16
            | 14434u16 | 14435u16 | 14436u16 | 14437u16 | 14438u16 | 14439u16 | 14440u16
            | 14441u16 | 14442u16 | 14443u16 | 14444u16 | 14445u16 | 14446u16 | 14447u16
            | 14448u16 | 14449u16 | 14450u16 | 14451u16 | 14452u16 | 14453u16 | 14454u16
            | 14455u16 | 14456u16 | 14457u16 | 14458u16 | 14459u16 | 14460u16 | 14461u16
            | 14462u16 | 14463u16 | 14464u16 | 14465u16 | 14466u16 | 14467u16 | 14468u16
            | 14469u16 | 14470u16 | 14471u16 | 14472u16 | 14473u16 | 14474u16 | 14475u16
            | 14476u16 | 14477u16 | 14478u16 | 14479u16 | 14480u16 | 14481u16 | 14482u16
            | 14483u16 | 14484u16 | 14485u16 | 14486u16 | 14487u16 | 14488u16 | 14489u16
            | 14490u16 | 14491u16 | 14492u16 | 14493u16 | 14494u16 | 14495u16 | 14496u16
            | 14497u16 | 14498u16 | 14499u16 | 14500u16 | 14501u16 | 14502u16 | 14503u16
            | 14504u16 | 14505u16 | 14506u16 | 14507u16 | 14508u16 | 14509u16 | 14510u16
            | 14511u16 | 14512u16 | 14513u16 | 14514u16 | 14515u16 | 14516u16 | 14517u16
            | 14518u16 | 14519u16 | 14520u16 | 14521u16 | 14522u16 | 14523u16 | 14524u16
            | 14525u16 | 14526u16 | 14527u16 | 14528u16 | 14529u16 | 14530u16 | 14531u16
            | 14532u16 | 14533u16 | 14534u16 | 14535u16 | 14536u16 | 14537u16 | 14538u16
            | 14539u16 | 14540u16 | 14541u16 | 14542u16 | 14543u16 | 14544u16 | 14545u16
            | 14546u16 | 14547u16 | 14548u16 | 14549u16 | 14550u16 | 14551u16 | 14552u16
            | 14553u16 | 14554u16 | 14555u16 | 14556u16 | 14557u16 | 14558u16 | 14559u16
            | 14560u16 | 14561u16 | 14562u16 | 14563u16 | 14564u16 | 14565u16 | 14566u16
            | 14567u16 | 14568u16 | 14569u16 | 14570u16 | 14571u16 | 14572u16 | 14573u16
            | 14574u16 | 14575u16 | 14576u16 | 14577u16 | 14578u16 | 14579u16 | 14580u16
            | 14581u16 | 14582u16 | 14583u16 | 14584u16 | 14585u16 | 14586u16 | 14587u16
            | 14588u16 | 14589u16 | 14590u16 | 14591u16 | 14592u16 | 14593u16 | 14594u16
            | 14595u16 | 14596u16 | 14597u16 | 14598u16 | 14599u16 | 14600u16 | 14601u16
            | 14602u16 | 14603u16 | 14604u16 | 14605u16 | 14606u16 | 14607u16 | 14608u16
            | 14609u16 | 14610u16 | 14611u16 | 14612u16 | 14613u16 | 14614u16 | 14615u16
            | 14616u16 | 14617u16 | 14618u16 | 14619u16 | 14620u16 | 14621u16 | 14622u16
            | 14623u16 | 14624u16 | 14625u16 | 14626u16 | 14627u16 | 14628u16 | 14629u16
            | 14630u16 | 14631u16 | 14632u16 | 14633u16 | 14634u16 | 14635u16 | 14636u16
            | 14637u16 | 14638u16 | 14639u16 | 14640u16 | 14641u16 | 14642u16 | 14643u16
            | 14644u16 | 14645u16 | 14646u16 | 14647u16 | 14648u16 | 14649u16 | 14650u16
            | 14651u16 | 14652u16 | 14653u16 | 14654u16 | 14655u16 | 14656u16 | 14657u16
            | 14658u16 | 14659u16 | 14660u16 | 14661u16 | 14662u16 | 14663u16 | 14664u16
            | 14665u16 | 14666u16 => BlockKind::PrismarineWall,
            14667u16 | 14668u16 | 14669u16 | 14670u16 | 14671u16 | 14672u16 | 14673u16
            | 14674u16 | 14675u16 | 14676u16 | 14677u16 | 14678u16 | 14679u16 | 14680u16
            | 14681u16 | 14682u16 | 14683u16 | 14684u16 | 14685u16 | 14686u16 | 14687u16
            | 14688u16 | 14689u16 | 14690u16 | 14691u16 | 14692u16 | 14693u16 | 14694u16
            | 14695u16 | 14696u16 | 14697u16 | 14698u16 | 14699u16 | 14700u16 | 14701u16
            | 14702u16 | 14703u16 | 14704u16 | 14705u16 | 14706u16 | 14707u16 | 14708u16
            | 14709u16 | 14710u16 | 14711u16 | 14712u16 | 14713u16 | 14714u16 | 14715u16
            | 14716u16 | 14717u16 | 14718u16 | 14719u16 | 14720u16 | 14721u16 | 14722u16
            | 14723u16 | 14724u16 | 14725u16 | 14726u16 | 14727u16 | 14728u16 | 14729u16
            | 14730u16 | 14731u16 | 14732u16 | 14733u16 | 14734u16 | 14735u16 | 14736u16
            | 14737u16 | 14738u16 | 14739u16 | 14740u16 | 14741u16 | 14742u16 | 14743u16
            | 14744u16 | 14745u16 | 14746u16 | 14747u16 | 14748u16 | 14749u16 | 14750u16
            | 14751u16 | 14752u16 | 14753u16 | 14754u16 | 14755u16 | 14756u16 | 14757u16
            | 14758u16 | 14759u16 | 14760u16 | 14761u16 | 14762u16 | 14763u16 | 14764u16
            | 14765u16 | 14766u16 | 14767u16 | 14768u16 | 14769u16 | 14770u16 | 14771u16
            | 14772u16 | 14773u16 | 14774u16 | 14775u16 | 14776u16 | 14777u16 | 14778u16
            | 14779u16 | 14780u16 | 14781u16 | 14782u16 | 14783u16 | 14784u16 | 14785u16
            | 14786u16 | 14787u16 | 14788u16 | 14789u16 | 14790u16 | 14791u16 | 14792u16
            | 14793u16 | 14794u16 | 14795u16 | 14796u16 | 14797u16 | 14798u16 | 14799u16
            | 14800u16 | 14801u16 | 14802u16 | 14803u16 | 14804u16 | 14805u16 | 14806u16
            | 14807u16 | 14808u16 | 14809u16 | 14810u16 | 14811u16 | 14812u16 | 14813u16
            | 14814u16 | 14815u16 | 14816u16 | 14817u16 | 14818u16 | 14819u16 | 14820u16
            | 14821u16 | 14822u16 | 14823u16 | 14824u16 | 14825u16 | 14826u16 | 14827u16
            | 14828u16 | 14829u16 | 14830u16 | 14831u16 | 14832u16 | 14833u16 | 14834u16
            | 14835u16 | 14836u16 | 14837u16 | 14838u16 | 14839u16 | 14840u16 | 14841u16
            | 14842u16 | 14843u16 | 14844u16 | 14845u16 | 14846u16 | 14847u16 | 14848u16
            | 14849u16 | 14850u16 | 14851u16 | 14852u16 | 14853u16 | 14854u16 | 14855u16
            | 14856u16 | 14857u16 | 14858u16 | 14859u16 | 14860u16 | 14861u16 | 14862u16
            | 14863u16 | 14864u16 | 14865u16 | 14866u16 | 14867u16 | 14868u16 | 14869u16
            | 14870u16 | 14871u16 | 14872u16 | 14873u16 | 14874u16 | 14875u16 | 14876u16
            | 14877u16 | 14878u16 | 14879u16 | 14880u16 | 14881u16 | 14882u16 | 14883u16
            | 14884u16 | 14885u16 | 14886u16 | 14887u16 | 14888u16 | 14889u16 | 14890u16
            | 14891u16 | 14892u16 | 14893u16 | 14894u16 | 14895u16 | 14896u16 | 14897u16
            | 14898u16 | 14899u16 | 14900u16 | 14901u16 | 14902u16 | 14903u16 | 14904u16
            | 14905u16 | 14906u16 | 14907u16 | 14908u16 | 14909u16 | 14910u16 | 14911u16
            | 14912u16 | 14913u16 | 14914u16 | 14915u16 | 14916u16 | 14917u16 | 14918u16
            | 14919u16 | 14920u16 | 14921u16 | 14922u16 | 14923u16 | 14924u16 | 14925u16
            | 14926u16 | 14927u16 | 14928u16 | 14929u16 | 14930u16 | 14931u16 | 14932u16
            | 14933u16 | 14934u16 | 14935u16 | 14936u16 | 14937u16 | 14938u16 | 14939u16
            | 14940u16 | 14941u16 | 14942u16 | 14943u16 | 14944u16 | 14945u16 | 14946u16
            | 14947u16 | 14948u16 | 14949u16 | 14950u16 | 14951u16 | 14952u16 | 14953u16
            | 14954u16 | 14955u16 | 14956u16 | 14957u16 | 14958u16 | 14959u16 | 14960u16
            | 14961u16 | 14962u16 | 14963u16 | 14964u16 | 14965u16 | 14966u16 | 14967u16
            | 14968u16 | 14969u16 | 14970u16 | 14971u16 | 14972u16 | 14973u16 | 14974u16
            | 14975u16 | 14976u16 | 14977u16 | 14978u16 | 14979u16 | 14980u16 | 14981u16
            | 14982u16 | 14983u16 | 14984u16 | 14985u16 | 14986u16 | 14987u16 | 14988u16
            | 14989u16 | 14990u16 => BlockKind::RedSandstoneWall,
            14991u16 | 14992u16 | 14993u16 | 14994u16 | 14995u16 | 14996u16 | 14997u16
            | 14998u16 | 14999u16 | 15000u16 | 15001u16 | 15002u16 | 15003u16 | 15004u16
            | 15005u16 | 15006u16 | 15007u16 | 15008u16 | 15009u16 | 15010u16 | 15011u16
            | 15012u16 | 15013u16 | 15014u16 | 15015u16 | 15016u16 | 15017u16 | 15018u16
            | 15019u16 | 15020u16 | 15021u16 | 15022u16 | 15023u16 | 15024u16 | 15025u16
            | 15026u16 | 15027u16 | 15028u16 | 15029u16 | 15030u16 | 15031u16 | 15032u16
            | 15033u16 | 15034u16 | 15035u16 | 15036u16 | 15037u16 | 15038u16 | 15039u16
            | 15040u16 | 15041u16 | 15042u16 | 15043u16 | 15044u16 | 15045u16 | 15046u16
            | 15047u16 | 15048u16 | 15049u16 | 15050u16 | 15051u16 | 15052u16 | 15053u16
            | 15054u16 | 15055u16 | 15056u16 | 15057u16 | 15058u16 | 15059u16 | 15060u16
            | 15061u16 | 15062u16 | 15063u16 | 15064u16 | 15065u16 | 15066u16 | 15067u16
            | 15068u16 | 15069u16 | 15070u16 | 15071u16 | 15072u16 | 15073u16 | 15074u16
            | 15075u16 | 15076u16 | 15077u16 | 15078u16 | 15079u16 | 15080u16 | 15081u16
            | 15082u16 | 15083u16 | 15084u16 | 15085u16 | 15086u16 | 15087u16 | 15088u16
            | 15089u16 | 15090u16 | 15091u16 | 15092u16 | 15093u16 | 15094u16 | 15095u16
            | 15096u16 | 15097u16 | 15098u16 | 15099u16 | 15100u16 | 15101u16 | 15102u16
            | 15103u16 | 15104u16 | 15105u16 | 15106u16 | 15107u16 | 15108u16 | 15109u16
            | 15110u16 | 15111u16 | 15112u16 | 15113u16 | 15114u16 | 15115u16 | 15116u16
            | 15117u16 | 15118u16 | 15119u16 | 15120u16 | 15121u16 | 15122u16 | 15123u16
            | 15124u16 | 15125u16 | 15126u16 | 15127u16 | 15128u16 | 15129u16 | 15130u16
            | 15131u16 | 15132u16 | 15133u16 | 15134u16 | 15135u16 | 15136u16 | 15137u16
            | 15138u16 | 15139u16 | 15140u16 | 15141u16 | 15142u16 | 15143u16 | 15144u16
            | 15145u16 | 15146u16 | 15147u16 | 15148u16 | 15149u16 | 15150u16 | 15151u16
            | 15152u16 | 15153u16 | 15154u16 | 15155u16 | 15156u16 | 15157u16 | 15158u16
            | 15159u16 | 15160u16 | 15161u16 | 15162u16 | 15163u16 | 15164u16 | 15165u16
            | 15166u16 | 15167u16 | 15168u16 | 15169u16 | 15170u16 | 15171u16 | 15172u16
            | 15173u16 | 15174u16 | 15175u16 | 15176u16 | 15177u16 | 15178u16 | 15179u16
            | 15180u16 | 15181u16 | 15182u16 | 15183u16 | 15184u16 | 15185u16 | 15186u16
            | 15187u16 | 15188u16 | 15189u16 | 15190u16 | 15191u16 | 15192u16 | 15193u16
            | 15194u16 | 15195u16 | 15196u16 | 15197u16 | 15198u16 | 15199u16 | 15200u16
            | 15201u16 | 15202u16 | 15203u16 | 15204u16 | 15205u16 | 15206u16 | 15207u16
            | 15208u16 | 15209u16 | 15210u16 | 15211u16 | 15212u16 | 15213u16 | 15214u16
            | 15215u16 | 15216u16 | 15217u16 | 15218u16 | 15219u16 | 15220u16 | 15221u16
            | 15222u16 | 15223u16 | 15224u16 | 15225u16 | 15226u16 | 15227u16 | 15228u16
            | 15229u16 | 15230u16 | 15231u16 | 15232u16 | 15233u16 | 15234u16 | 15235u16
            | 15236u16 | 15237u16 | 15238u16 | 15239u16 | 15240u16 | 15241u16 | 15242u16
            | 15243u16 | 15244u16 | 15245u16 | 15246u16 | 15247u16 | 15248u16 | 15249u16
            | 15250u16 | 15251u16 | 15252u16 | 15253u16 | 15254u16 | 15255u16 | 15256u16
            | 15257u16 | 15258u16 | 15259u16 | 15260u16 | 15261u16 | 15262u16 | 15263u16
            | 15264u16 | 15265u16 | 15266u16 | 15267u16 | 15268u16 | 15269u16 | 15270u16
            | 15271u16 | 15272u16 | 15273u16 | 15274u16 | 15275u16 | 15276u16 | 15277u16
            | 15278u16 | 15279u16 | 15280u16 | 15281u16 | 15282u16 | 15283u16 | 15284u16
            | 15285u16 | 15286u16 | 15287u16 | 15288u16 | 15289u16 | 15290u16 | 15291u16
            | 15292u16 | 15293u16 | 15294u16 | 15295u16 | 15296u16 | 15297u16 | 15298u16
            | 15299u16 | 15300u16 | 15301u16 | 15302u16 | 15303u16 | 15304u16 | 15305u16
            | 15306u16 | 15307u16 | 15308u16 | 15309u16 | 15310u16 | 15311u16 | 15312u16
            | 15313u16 | 15314u16 => BlockKind::MossyStoneBrickWall,
            15315u16 | 15316u16 | 15317u16 | 15318u16 | 15319u16 | 15320u16 | 15321u16
            | 15322u16 | 15323u16 | 15324u16 | 15325u16 | 15326u16 | 15327u16 | 15328u16
            | 15329u16 | 15330u16 | 15331u16 | 15332u16 | 15333u16 | 15334u16 | 15335u16
            | 15336u16 | 15337u16 | 15338u16 | 15339u16 | 15340u16 | 15341u16 | 15342u16
            | 15343u16 | 15344u16 | 15345u16 | 15346u16 | 15347u16 | 15348u16 | 15349u16
            | 15350u16 | 15351u16 | 15352u16 | 15353u16 | 15354u16 | 15355u16 | 15356u16
            | 15357u16 | 15358u16 | 15359u16 | 15360u16 | 15361u16 | 15362u16 | 15363u16
            | 15364u16 | 15365u16 | 15366u16 | 15367u16 | 15368u16 | 15369u16 | 15370u16
            | 15371u16 | 15372u16 | 15373u16 | 15374u16 | 15375u16 | 15376u16 | 15377u16
            | 15378u16 | 15379u16 | 15380u16 | 15381u16 | 15382u16 | 15383u16 | 15384u16
            | 15385u16 | 15386u16 | 15387u16 | 15388u16 | 15389u16 | 15390u16 | 15391u16
            | 15392u16 | 15393u16 | 15394u16 | 15395u16 | 15396u16 | 15397u16 | 15398u16
            | 15399u16 | 15400u16 | 15401u16 | 15402u16 | 15403u16 | 15404u16 | 15405u16
            | 15406u16 | 15407u16 | 15408u16 | 15409u16 | 15410u16 | 15411u16 | 15412u16
            | 15413u16 | 15414u16 | 15415u16 | 15416u16 | 15417u16 | 15418u16 | 15419u16
            | 15420u16 | 15421u16 | 15422u16 | 15423u16 | 15424u16 | 15425u16 | 15426u16
            | 15427u16 | 15428u16 | 15429u16 | 15430u16 | 15431u16 | 15432u16 | 15433u16
            | 15434u16 | 15435u16 | 15436u16 | 15437u16 | 15438u16 | 15439u16 | 15440u16
            | 15441u16 | 15442u16 | 15443u16 | 15444u16 | 15445u16 | 15446u16 | 15447u16
            | 15448u16 | 15449u16 | 15450u16 | 15451u16 | 15452u16 | 15453u16 | 15454u16
            | 15455u16 | 15456u16 | 15457u16 | 15458u16 | 15459u16 | 15460u16 | 15461u16
            | 15462u16 | 15463u16 | 15464u16 | 15465u16 | 15466u16 | 15467u16 | 15468u16
            | 15469u16 | 15470u16 | 15471u16 | 15472u16 | 15473u16 | 15474u16 | 15475u16
            | 15476u16 | 15477u16 | 15478u16 | 15479u16 | 15480u16 | 15481u16 | 15482u16
            | 15483u16 | 15484u16 | 15485u16 | 15486u16 | 15487u16 | 15488u16 | 15489u16
            | 15490u16 | 15491u16 | 15492u16 | 15493u16 | 15494u16 | 15495u16 | 15496u16
            | 15497u16 | 15498u16 | 15499u16 | 15500u16 | 15501u16 | 15502u16 | 15503u16
            | 15504u16 | 15505u16 | 15506u16 | 15507u16 | 15508u16 | 15509u16 | 15510u16
            | 15511u16 | 15512u16 | 15513u16 | 15514u16 | 15515u16 | 15516u16 | 15517u16
            | 15518u16 | 15519u16 | 15520u16 | 15521u16 | 15522u16 | 15523u16 | 15524u16
            | 15525u16 | 15526u16 | 15527u16 | 15528u16 | 15529u16 | 15530u16 | 15531u16
            | 15532u16 | 15533u16 | 15534u16 | 15535u16 | 15536u16 | 15537u16 | 15538u16
            | 15539u16 | 15540u16 | 15541u16 | 15542u16 | 15543u16 | 15544u16 | 15545u16
            | 15546u16 | 15547u16 | 15548u16 | 15549u16 | 15550u16 | 15551u16 | 15552u16
            | 15553u16 | 15554u16 | 15555u16 | 15556u16 | 15557u16 | 15558u16 | 15559u16
            | 15560u16 | 15561u16 | 15562u16 | 15563u16 | 15564u16 | 15565u16 | 15566u16
            | 15567u16 | 15568u16 | 15569u16 | 15570u16 | 15571u16 | 15572u16 | 15573u16
            | 15574u16 | 15575u16 | 15576u16 | 15577u16 | 15578u16 | 15579u16 | 15580u16
            | 15581u16 | 15582u16 | 15583u16 | 15584u16 | 15585u16 | 15586u16 | 15587u16
            | 15588u16 | 15589u16 | 15590u16 | 15591u16 | 15592u16 | 15593u16 | 15594u16
            | 15595u16 | 15596u16 | 15597u16 | 15598u16 | 15599u16 | 15600u16 | 15601u16
            | 15602u16 | 15603u16 | 15604u16 | 15605u16 | 15606u16 | 15607u16 | 15608u16
            | 15609u16 | 15610u16 | 15611u16 | 15612u16 | 15613u16 | 15614u16 | 15615u16
            | 15616u16 | 15617u16 | 15618u16 | 15619u16 | 15620u16 | 15621u16 | 15622u16
            | 15623u16 | 15624u16 | 15625u16 | 15626u16 | 15627u16 | 15628u16 | 15629u16
            | 15630u16 | 15631u16 | 15632u16 | 15633u16 | 15634u16 | 15635u16 | 15636u16
            | 15637u16 | 15638u16 => BlockKind::GraniteWall,
            15639u16 | 15640u16 | 15641u16 | 15642u16 | 15643u16 | 15644u16 | 15645u16
            | 15646u16 | 15647u16 | 15648u16 | 15649u16 | 15650u16 | 15651u16 | 15652u16
            | 15653u16 | 15654u16 | 15655u16 | 15656u16 | 15657u16 | 15658u16 | 15659u16
            | 15660u16 | 15661u16 | 15662u16 | 15663u16 | 15664u16 | 15665u16 | 15666u16
            | 15667u16 | 15668u16 | 15669u16 | 15670u16 | 15671u16 | 15672u16 | 15673u16
            | 15674u16 | 15675u16 | 15676u16 | 15677u16 | 15678u16 | 15679u16 | 15680u16
            | 15681u16 | 15682u16 | 15683u16 | 15684u16 | 15685u16 | 15686u16 | 15687u16
            | 15688u16 | 15689u16 | 15690u16 | 15691u16 | 15692u16 | 15693u16 | 15694u16
            | 15695u16 | 15696u16 | 15697u16 | 15698u16 | 15699u16 | 15700u16 | 15701u16
            | 15702u16 | 15703u16 | 15704u16 | 15705u16 | 15706u16 | 15707u16 | 15708u16
            | 15709u16 | 15710u16 | 15711u16 | 15712u16 | 15713u16 | 15714u16 | 15715u16
            | 15716u16 | 15717u16 | 15718u16 | 15719u16 | 15720u16 | 15721u16 | 15722u16
            | 15723u16 | 15724u16 | 15725u16 | 15726u16 | 15727u16 | 15728u16 | 15729u16
            | 15730u16 | 15731u16 | 15732u16 | 15733u16 | 15734u16 | 15735u16 | 15736u16
            | 15737u16 | 15738u16 | 15739u16 | 15740u16 | 15741u16 | 15742u16 | 15743u16
            | 15744u16 | 15745u16 | 15746u16 | 15747u16 | 15748u16 | 15749u16 | 15750u16
            | 15751u16 | 15752u16 | 15753u16 | 15754u16 | 15755u16 | 15756u16 | 15757u16
            | 15758u16 | 15759u16 | 15760u16 | 15761u16 | 15762u16 | 15763u16 | 15764u16
            | 15765u16 | 15766u16 | 15767u16 | 15768u16 | 15769u16 | 15770u16 | 15771u16
            | 15772u16 | 15773u16 | 15774u16 | 15775u16 | 15776u16 | 15777u16 | 15778u16
            | 15779u16 | 15780u16 | 15781u16 | 15782u16 | 15783u16 | 15784u16 | 15785u16
            | 15786u16 | 15787u16 | 15788u16 | 15789u16 | 15790u16 | 15791u16 | 15792u16
            | 15793u16 | 15794u16 | 15795u16 | 15796u16 | 15797u16 | 15798u16 | 15799u16
            | 15800u16 | 15801u16 | 15802u16 | 15803u16 | 15804u16 | 15805u16 | 15806u16
            | 15807u16 | 15808u16 | 15809u16 | 15810u16 | 15811u16 | 15812u16 | 15813u16
            | 15814u16 | 15815u16 | 15816u16 | 15817u16 | 15818u16 | 15819u16 | 15820u16
            | 15821u16 | 15822u16 | 15823u16 | 15824u16 | 15825u16 | 15826u16 | 15827u16
            | 15828u16 | 15829u16 | 15830u16 | 15831u16 | 15832u16 | 15833u16 | 15834u16
            | 15835u16 | 15836u16 | 15837u16 | 15838u16 | 15839u16 | 15840u16 | 15841u16
            | 15842u16 | 15843u16 | 15844u16 | 15845u16 | 15846u16 | 15847u16 | 15848u16
            | 15849u16 | 15850u16 | 15851u16 | 15852u16 | 15853u16 | 15854u16 | 15855u16
            | 15856u16 | 15857u16 | 15858u16 | 15859u16 | 15860u16 | 15861u16 | 15862u16
            | 15863u16 | 15864u16 | 15865u16 | 15866u16 | 15867u16 | 15868u16 | 15869u16
            | 15870u16 | 15871u16 | 15872u16 | 15873u16 | 15874u16 | 15875u16 | 15876u16
            | 15877u16 | 15878u16 | 15879u16 | 15880u16 | 15881u16 | 15882u16 | 15883u16
            | 15884u16 | 15885u16 | 15886u16 | 15887u16 | 15888u16 | 15889u16 | 15890u16
            | 15891u16 | 15892u16 | 15893u16 | 15894u16 | 15895u16 | 15896u16 | 15897u16
            | 15898u16 | 15899u16 | 15900u16 | 15901u16 | 15902u16 | 15903u16 | 15904u16
            | 15905u16 | 15906u16 | 15907u16 | 15908u16 | 15909u16 | 15910u16 | 15911u16
            | 15912u16 | 15913u16 | 15914u16 | 15915u16 | 15916u16 | 15917u16 | 15918u16
            | 15919u16 | 15920u16 | 15921u16 | 15922u16 | 15923u16 | 15924u16 | 15925u16
            | 15926u16 | 15927u16 | 15928u16 | 15929u16 | 15930u16 | 15931u16 | 15932u16
            | 15933u16 | 15934u16 | 15935u16 | 15936u16 | 15937u16 | 15938u16 | 15939u16
            | 15940u16 | 15941u16 | 15942u16 | 15943u16 | 15944u16 | 15945u16 | 15946u16
            | 15947u16 | 15948u16 | 15949u16 | 15950u16 | 15951u16 | 15952u16 | 15953u16
            | 15954u16 | 15955u16 | 15956u16 | 15957u16 | 15958u16 | 15959u16 | 15960u16
            | 15961u16 | 15962u16 => BlockKind::StoneBrickWall,
            15963u16 | 15964u16 | 15965u16 | 15966u16 | 15967u16 | 15968u16 | 15969u16
            | 15970u16 | 15971u16 | 15972u16 | 15973u16 | 15974u16 | 15975u16 | 15976u16
            | 15977u16 | 15978u16 | 15979u16 | 15980u16 | 15981u16 | 15982u16 | 15983u16
            | 15984u16 | 15985u16 | 15986u16 | 15987u16 | 15988u16 | 15989u16 | 15990u16
            | 15991u16 | 15992u16 | 15993u16 | 15994u16 | 15995u16 | 15996u16 | 15997u16
            | 15998u16 | 15999u16 | 16000u16 | 16001u16 | 16002u16 | 16003u16 | 16004u16
            | 16005u16 | 16006u16 | 16007u16 | 16008u16 | 16009u16 | 16010u16 | 16011u16
            | 16012u16 | 16013u16 | 16014u16 | 16015u16 | 16016u16 | 16017u16 | 16018u16
            | 16019u16 | 16020u16 | 16021u16 | 16022u16 | 16023u16 | 16024u16 | 16025u16
            | 16026u16 | 16027u16 | 16028u16 | 16029u16 | 16030u16 | 16031u16 | 16032u16
            | 16033u16 | 16034u16 | 16035u16 | 16036u16 | 16037u16 | 16038u16 | 16039u16
            | 16040u16 | 16041u16 | 16042u16 | 16043u16 | 16044u16 | 16045u16 | 16046u16
            | 16047u16 | 16048u16 | 16049u16 | 16050u16 | 16051u16 | 16052u16 | 16053u16
            | 16054u16 | 16055u16 | 16056u16 | 16057u16 | 16058u16 | 16059u16 | 16060u16
            | 16061u16 | 16062u16 | 16063u16 | 16064u16 | 16065u16 | 16066u16 | 16067u16
            | 16068u16 | 16069u16 | 16070u16 | 16071u16 | 16072u16 | 16073u16 | 16074u16
            | 16075u16 | 16076u16 | 16077u16 | 16078u16 | 16079u16 | 16080u16 | 16081u16
            | 16082u16 | 16083u16 | 16084u16 | 16085u16 | 16086u16 | 16087u16 | 16088u16
            | 16089u16 | 16090u16 | 16091u16 | 16092u16 | 16093u16 | 16094u16 | 16095u16
            | 16096u16 | 16097u16 | 16098u16 | 16099u16 | 16100u16 | 16101u16 | 16102u16
            | 16103u16 | 16104u16 | 16105u16 | 16106u16 | 16107u16 | 16108u16 | 16109u16
            | 16110u16 | 16111u16 | 16112u16 | 16113u16 | 16114u16 | 16115u16 | 16116u16
            | 16117u16 | 16118u16 | 16119u16 | 16120u16 | 16121u16 | 16122u16 | 16123u16
            | 16124u16 | 16125u16 | 16126u16 | 16127u16 | 16128u16 | 16129u16 | 16130u16
            | 16131u16 | 16132u16 | 16133u16 | 16134u16 | 16135u16 | 16136u16 | 16137u16
            | 16138u16 | 16139u16 | 16140u16 | 16141u16 | 16142u16 | 16143u16 | 16144u16
            | 16145u16 | 16146u16 | 16147u16 | 16148u16 | 16149u16 | 16150u16 | 16151u16
            | 16152u16 | 16153u16 | 16154u16 | 16155u16 | 16156u16 | 16157u16 | 16158u16
            | 16159u16 | 16160u16 | 16161u16 | 16162u16 | 16163u16 | 16164u16 | 16165u16
            | 16166u16 | 16167u16 | 16168u16 | 16169u16 | 16170u16 | 16171u16 | 16172u16
            | 16173u16 | 16174u16 | 16175u16 | 16176u16 | 16177u16 | 16178u16 | 16179u16
            | 16180u16 | 16181u16 | 16182u16 | 16183u16 | 16184u16 | 16185u16 | 16186u16
            | 16187u16 | 16188u16 | 16189u16 | 16190u16 | 16191u16 | 16192u16 | 16193u16
            | 16194u16 | 16195u16 | 16196u16 | 16197u16 | 16198u16 | 16199u16 | 16200u16
            | 16201u16 | 16202u16 | 16203u16 | 16204u16 | 16205u16 | 16206u16 | 16207u16
            | 16208u16 | 16209u16 | 16210u16 | 16211u16 | 16212u16 | 16213u16 | 16214u16
            | 16215u16 | 16216u16 | 16217u16 | 16218u16 | 16219u16 | 16220u16 | 16221u16
            | 16222u16 | 16223u16 | 16224u16 | 16225u16 | 16226u16 | 16227u16 | 16228u16
            | 16229u16 | 16230u16 | 16231u16 | 16232u16 | 16233u16 | 16234u16 | 16235u16
            | 16236u16 | 16237u16 | 16238u16 | 16239u16 | 16240u16 | 16241u16 | 16242u16
            | 16243u16 | 16244u16 | 16245u16 | 16246u16 | 16247u16 | 16248u16 | 16249u16
            | 16250u16 | 16251u16 | 16252u16 | 16253u16 | 16254u16 | 16255u16 | 16256u16
            | 16257u16 | 16258u16 | 16259u16 | 16260u16 | 16261u16 | 16262u16 | 16263u16
            | 16264u16 | 16265u16 | 16266u16 | 16267u16 | 16268u16 | 16269u16 | 16270u16
            | 16271u16 | 16272u16 | 16273u16 | 16274u16 | 16275u16 | 16276u16 | 16277u16
            | 16278u16 | 16279u16 | 16280u16 | 16281u16 | 16282u16 | 16283u16 | 16284u16
            | 16285u16 | 16286u16 => BlockKind::MudBrickWall,
            16287u16 | 16288u16 | 16289u16 | 16290u16 | 16291u16 | 16292u16 | 16293u16
            | 16294u16 | 16295u16 | 16296u16 | 16297u16 | 16298u16 | 16299u16 | 16300u16
            | 16301u16 | 16302u16 | 16303u16 | 16304u16 | 16305u16 | 16306u16 | 16307u16
            | 16308u16 | 16309u16 | 16310u16 | 16311u16 | 16312u16 | 16313u16 | 16314u16
            | 16315u16 | 16316u16 | 16317u16 | 16318u16 | 16319u16 | 16320u16 | 16321u16
            | 16322u16 | 16323u16 | 16324u16 | 16325u16 | 16326u16 | 16327u16 | 16328u16
            | 16329u16 | 16330u16 | 16331u16 | 16332u16 | 16333u16 | 16334u16 | 16335u16
            | 16336u16 | 16337u16 | 16338u16 | 16339u16 | 16340u16 | 16341u16 | 16342u16
            | 16343u16 | 16344u16 | 16345u16 | 16346u16 | 16347u16 | 16348u16 | 16349u16
            | 16350u16 | 16351u16 | 16352u16 | 16353u16 | 16354u16 | 16355u16 | 16356u16
            | 16357u16 | 16358u16 | 16359u16 | 16360u16 | 16361u16 | 16362u16 | 16363u16
            | 16364u16 | 16365u16 | 16366u16 | 16367u16 | 16368u16 | 16369u16 | 16370u16
            | 16371u16 | 16372u16 | 16373u16 | 16374u16 | 16375u16 | 16376u16 | 16377u16
            | 16378u16 | 16379u16 | 16380u16 | 16381u16 | 16382u16 | 16383u16 | 16384u16
            | 16385u16 | 16386u16 | 16387u16 | 16388u16 | 16389u16 | 16390u16 | 16391u16
            | 16392u16 | 16393u16 | 16394u16 | 16395u16 | 16396u16 | 16397u16 | 16398u16
            | 16399u16 | 16400u16 | 16401u16 | 16402u16 | 16403u16 | 16404u16 | 16405u16
            | 16406u16 | 16407u16 | 16408u16 | 16409u16 | 16410u16 | 16411u16 | 16412u16
            | 16413u16 | 16414u16 | 16415u16 | 16416u16 | 16417u16 | 16418u16 | 16419u16
            | 16420u16 | 16421u16 | 16422u16 | 16423u16 | 16424u16 | 16425u16 | 16426u16
            | 16427u16 | 16428u16 | 16429u16 | 16430u16 | 16431u16 | 16432u16 | 16433u16
            | 16434u16 | 16435u16 | 16436u16 | 16437u16 | 16438u16 | 16439u16 | 16440u16
            | 16441u16 | 16442u16 | 16443u16 | 16444u16 | 16445u16 | 16446u16 | 16447u16
            | 16448u16 | 16449u16 | 16450u16 | 16451u16 | 16452u16 | 16453u16 | 16454u16
            | 16455u16 | 16456u16 | 16457u16 | 16458u16 | 16459u16 | 16460u16 | 16461u16
            | 16462u16 | 16463u16 | 16464u16 | 16465u16 | 16466u16 | 16467u16 | 16468u16
            | 16469u16 | 16470u16 | 16471u16 | 16472u16 | 16473u16 | 16474u16 | 16475u16
            | 16476u16 | 16477u16 | 16478u16 | 16479u16 | 16480u16 | 16481u16 | 16482u16
            | 16483u16 | 16484u16 | 16485u16 | 16486u16 | 16487u16 | 16488u16 | 16489u16
            | 16490u16 | 16491u16 | 16492u16 | 16493u16 | 16494u16 | 16495u16 | 16496u16
            | 16497u16 | 16498u16 | 16499u16 | 16500u16 | 16501u16 | 16502u16 | 16503u16
            | 16504u16 | 16505u16 | 16506u16 | 16507u16 | 16508u16 | 16509u16 | 16510u16
            | 16511u16 | 16512u16 | 16513u16 | 16514u16 | 16515u16 | 16516u16 | 16517u16
            | 16518u16 | 16519u16 | 16520u16 | 16521u16 | 16522u16 | 16523u16 | 16524u16
            | 16525u16 | 16526u16 | 16527u16 | 16528u16 | 16529u16 | 16530u16 | 16531u16
            | 16532u16 | 16533u16 | 16534u16 | 16535u16 | 16536u16 | 16537u16 | 16538u16
            | 16539u16 | 16540u16 | 16541u16 | 16542u16 | 16543u16 | 16544u16 | 16545u16
            | 16546u16 | 16547u16 | 16548u16 | 16549u16 | 16550u16 | 16551u16 | 16552u16
            | 16553u16 | 16554u16 | 16555u16 | 16556u16 | 16557u16 | 16558u16 | 16559u16
            | 16560u16 | 16561u16 | 16562u16 | 16563u16 | 16564u16 | 16565u16 | 16566u16
            | 16567u16 | 16568u16 | 16569u16 | 16570u16 | 16571u16 | 16572u16 | 16573u16
            | 16574u16 | 16575u16 | 16576u16 | 16577u16 | 16578u16 | 16579u16 | 16580u16
            | 16581u16 | 16582u16 | 16583u16 | 16584u16 | 16585u16 | 16586u16 | 16587u16
            | 16588u16 | 16589u16 | 16590u16 | 16591u16 | 16592u16 | 16593u16 | 16594u16
            | 16595u16 | 16596u16 | 16597u16 | 16598u16 | 16599u16 | 16600u16 | 16601u16
            | 16602u16 | 16603u16 | 16604u16 | 16605u16 | 16606u16 | 16607u16 | 16608u16
            | 16609u16 | 16610u16 => BlockKind::NetherBrickWall,
            16611u16 | 16612u16 | 16613u16 | 16614u16 | 16615u16 | 16616u16 | 16617u16
            | 16618u16 | 16619u16 | 16620u16 | 16621u16 | 16622u16 | 16623u16 | 16624u16
            | 16625u16 | 16626u16 | 16627u16 | 16628u16 | 16629u16 | 16630u16 | 16631u16
            | 16632u16 | 16633u16 | 16634u16 | 16635u16 | 16636u16 | 16637u16 | 16638u16
            | 16639u16 | 16640u16 | 16641u16 | 16642u16 | 16643u16 | 16644u16 | 16645u16
            | 16646u16 | 16647u16 | 16648u16 | 16649u16 | 16650u16 | 16651u16 | 16652u16
            | 16653u16 | 16654u16 | 16655u16 | 16656u16 | 16657u16 | 16658u16 | 16659u16
            | 16660u16 | 16661u16 | 16662u16 | 16663u16 | 16664u16 | 16665u16 | 16666u16
            | 16667u16 | 16668u16 | 16669u16 | 16670u16 | 16671u16 | 16672u16 | 16673u16
            | 16674u16 | 16675u16 | 16676u16 | 16677u16 | 16678u16 | 16679u16 | 16680u16
            | 16681u16 | 16682u16 | 16683u16 | 16684u16 | 16685u16 | 16686u16 | 16687u16
            | 16688u16 | 16689u16 | 16690u16 | 16691u16 | 16692u16 | 16693u16 | 16694u16
            | 16695u16 | 16696u16 | 16697u16 | 16698u16 | 16699u16 | 16700u16 | 16701u16
            | 16702u16 | 16703u16 | 16704u16 | 16705u16 | 16706u16 | 16707u16 | 16708u16
            | 16709u16 | 16710u16 | 16711u16 | 16712u16 | 16713u16 | 16714u16 | 16715u16
            | 16716u16 | 16717u16 | 16718u16 | 16719u16 | 16720u16 | 16721u16 | 16722u16
            | 16723u16 | 16724u16 | 16725u16 | 16726u16 | 16727u16 | 16728u16 | 16729u16
            | 16730u16 | 16731u16 | 16732u16 | 16733u16 | 16734u16 | 16735u16 | 16736u16
            | 16737u16 | 16738u16 | 16739u16 | 16740u16 | 16741u16 | 16742u16 | 16743u16
            | 16744u16 | 16745u16 | 16746u16 | 16747u16 | 16748u16 | 16749u16 | 16750u16
            | 16751u16 | 16752u16 | 16753u16 | 16754u16 | 16755u16 | 16756u16 | 16757u16
            | 16758u16 | 16759u16 | 16760u16 | 16761u16 | 16762u16 | 16763u16 | 16764u16
            | 16765u16 | 16766u16 | 16767u16 | 16768u16 | 16769u16 | 16770u16 | 16771u16
            | 16772u16 | 16773u16 | 16774u16 | 16775u16 | 16776u16 | 16777u16 | 16778u16
            | 16779u16 | 16780u16 | 16781u16 | 16782u16 | 16783u16 | 16784u16 | 16785u16
            | 16786u16 | 16787u16 | 16788u16 | 16789u16 | 16790u16 | 16791u16 | 16792u16
            | 16793u16 | 16794u16 | 16795u16 | 16796u16 | 16797u16 | 16798u16 | 16799u16
            | 16800u16 | 16801u16 | 16802u16 | 16803u16 | 16804u16 | 16805u16 | 16806u16
            | 16807u16 | 16808u16 | 16809u16 | 16810u16 | 16811u16 | 16812u16 | 16813u16
            | 16814u16 | 16815u16 | 16816u16 | 16817u16 | 16818u16 | 16819u16 | 16820u16
            | 16821u16 | 16822u16 | 16823u16 | 16824u16 | 16825u16 | 16826u16 | 16827u16
            | 16828u16 | 16829u16 | 16830u16 | 16831u16 | 16832u16 | 16833u16 | 16834u16
            | 16835u16 | 16836u16 | 16837u16 | 16838u16 | 16839u16 | 16840u16 | 16841u16
            | 16842u16 | 16843u16 | 16844u16 | 16845u16 | 16846u16 | 16847u16 | 16848u16
            | 16849u16 | 16850u16 | 16851u16 | 16852u16 | 16853u16 | 16854u16 | 16855u16
            | 16856u16 | 16857u16 | 16858u16 | 16859u16 | 16860u16 | 16861u16 | 16862u16
            | 16863u16 | 16864u16 | 16865u16 | 16866u16 | 16867u16 | 16868u16 | 16869u16
            | 16870u16 | 16871u16 | 16872u16 | 16873u16 | 16874u16 | 16875u16 | 16876u16
            | 16877u16 | 16878u16 | 16879u16 | 16880u16 | 16881u16 | 16882u16 | 16883u16
            | 16884u16 | 16885u16 | 16886u16 | 16887u16 | 16888u16 | 16889u16 | 16890u16
            | 16891u16 | 16892u16 | 16893u16 | 16894u16 | 16895u16 | 16896u16 | 16897u16
            | 16898u16 | 16899u16 | 16900u16 | 16901u16 | 16902u16 | 16903u16 | 16904u16
            | 16905u16 | 16906u16 | 16907u16 | 16908u16 | 16909u16 | 16910u16 | 16911u16
            | 16912u16 | 16913u16 | 16914u16 | 16915u16 | 16916u16 | 16917u16 | 16918u16
            | 16919u16 | 16920u16 | 16921u16 | 16922u16 | 16923u16 | 16924u16 | 16925u16
            | 16926u16 | 16927u16 | 16928u16 | 16929u16 | 16930u16 | 16931u16 | 16932u16
            | 16933u16 | 16934u16 => BlockKind::AndesiteWall,
            16935u16 | 16936u16 | 16937u16 | 16938u16 | 16939u16 | 16940u16 | 16941u16
            | 16942u16 | 16943u16 | 16944u16 | 16945u16 | 16946u16 | 16947u16 | 16948u16
            | 16949u16 | 16950u16 | 16951u16 | 16952u16 | 16953u16 | 16954u16 | 16955u16
            | 16956u16 | 16957u16 | 16958u16 | 16959u16 | 16960u16 | 16961u16 | 16962u16
            | 16963u16 | 16964u16 | 16965u16 | 16966u16 | 16967u16 | 16968u16 | 16969u16
            | 16970u16 | 16971u16 | 16972u16 | 16973u16 | 16974u16 | 16975u16 | 16976u16
            | 16977u16 | 16978u16 | 16979u16 | 16980u16 | 16981u16 | 16982u16 | 16983u16
            | 16984u16 | 16985u16 | 16986u16 | 16987u16 | 16988u16 | 16989u16 | 16990u16
            | 16991u16 | 16992u16 | 16993u16 | 16994u16 | 16995u16 | 16996u16 | 16997u16
            | 16998u16 | 16999u16 | 17000u16 | 17001u16 | 17002u16 | 17003u16 | 17004u16
            | 17005u16 | 17006u16 | 17007u16 | 17008u16 | 17009u16 | 17010u16 | 17011u16
            | 17012u16 | 17013u16 | 17014u16 | 17015u16 | 17016u16 | 17017u16 | 17018u16
            | 17019u16 | 17020u16 | 17021u16 | 17022u16 | 17023u16 | 17024u16 | 17025u16
            | 17026u16 | 17027u16 | 17028u16 | 17029u16 | 17030u16 | 17031u16 | 17032u16
            | 17033u16 | 17034u16 | 17035u16 | 17036u16 | 17037u16 | 17038u16 | 17039u16
            | 17040u16 | 17041u16 | 17042u16 | 17043u16 | 17044u16 | 17045u16 | 17046u16
            | 17047u16 | 17048u16 | 17049u16 | 17050u16 | 17051u16 | 17052u16 | 17053u16
            | 17054u16 | 17055u16 | 17056u16 | 17057u16 | 17058u16 | 17059u16 | 17060u16
            | 17061u16 | 17062u16 | 17063u16 | 17064u16 | 17065u16 | 17066u16 | 17067u16
            | 17068u16 | 17069u16 | 17070u16 | 17071u16 | 17072u16 | 17073u16 | 17074u16
            | 17075u16 | 17076u16 | 17077u16 | 17078u16 | 17079u16 | 17080u16 | 17081u16
            | 17082u16 | 17083u16 | 17084u16 | 17085u16 | 17086u16 | 17087u16 | 17088u16
            | 17089u16 | 17090u16 | 17091u16 | 17092u16 | 17093u16 | 17094u16 | 17095u16
            | 17096u16 | 17097u16 | 17098u16 | 17099u16 | 17100u16 | 17101u16 | 17102u16
            | 17103u16 | 17104u16 | 17105u16 | 17106u16 | 17107u16 | 17108u16 | 17109u16
            | 17110u16 | 17111u16 | 17112u16 | 17113u16 | 17114u16 | 17115u16 | 17116u16
            | 17117u16 | 17118u16 | 17119u16 | 17120u16 | 17121u16 | 17122u16 | 17123u16
            | 17124u16 | 17125u16 | 17126u16 | 17127u16 | 17128u16 | 17129u16 | 17130u16
            | 17131u16 | 17132u16 | 17133u16 | 17134u16 | 17135u16 | 17136u16 | 17137u16
            | 17138u16 | 17139u16 | 17140u16 | 17141u16 | 17142u16 | 17143u16 | 17144u16
            | 17145u16 | 17146u16 | 17147u16 | 17148u16 | 17149u16 | 17150u16 | 17151u16
            | 17152u16 | 17153u16 | 17154u16 | 17155u16 | 17156u16 | 17157u16 | 17158u16
            | 17159u16 | 17160u16 | 17161u16 | 17162u16 | 17163u16 | 17164u16 | 17165u16
            | 17166u16 | 17167u16 | 17168u16 | 17169u16 | 17170u16 | 17171u16 | 17172u16
            | 17173u16 | 17174u16 | 17175u16 | 17176u16 | 17177u16 | 17178u16 | 17179u16
            | 17180u16 | 17181u16 | 17182u16 | 17183u16 | 17184u16 | 17185u16 | 17186u16
            | 17187u16 | 17188u16 | 17189u16 | 17190u16 | 17191u16 | 17192u16 | 17193u16
            | 17194u16 | 17195u16 | 17196u16 | 17197u16 | 17198u16 | 17199u16 | 17200u16
            | 17201u16 | 17202u16 | 17203u16 | 17204u16 | 17205u16 | 17206u16 | 17207u16
            | 17208u16 | 17209u16 | 17210u16 | 17211u16 | 17212u16 | 17213u16 | 17214u16
            | 17215u16 | 17216u16 | 17217u16 | 17218u16 | 17219u16 | 17220u16 | 17221u16
            | 17222u16 | 17223u16 | 17224u16 | 17225u16 | 17226u16 | 17227u16 | 17228u16
            | 17229u16 | 17230u16 | 17231u16 | 17232u16 | 17233u16 | 17234u16 | 17235u16
            | 17236u16 | 17237u16 | 17238u16 | 17239u16 | 17240u16 | 17241u16 | 17242u16
            | 17243u16 | 17244u16 | 17245u16 | 17246u16 | 17247u16 | 17248u16 | 17249u16
            | 17250u16 | 17251u16 | 17252u16 | 17253u16 | 17254u16 | 17255u16 | 17256u16
            | 17257u16 | 17258u16 => BlockKind::RedNetherBrickWall,
            17259u16 | 17260u16 | 17261u16 | 17262u16 | 17263u16 | 17264u16 | 17265u16
            | 17266u16 | 17267u16 | 17268u16 | 17269u16 | 17270u16 | 17271u16 | 17272u16
            | 17273u16 | 17274u16 | 17275u16 | 17276u16 | 17277u16 | 17278u16 | 17279u16
            | 17280u16 | 17281u16 | 17282u16 | 17283u16 | 17284u16 | 17285u16 | 17286u16
            | 17287u16 | 17288u16 | 17289u16 | 17290u16 | 17291u16 | 17292u16 | 17293u16
            | 17294u16 | 17295u16 | 17296u16 | 17297u16 | 17298u16 | 17299u16 | 17300u16
            | 17301u16 | 17302u16 | 17303u16 | 17304u16 | 17305u16 | 17306u16 | 17307u16
            | 17308u16 | 17309u16 | 17310u16 | 17311u16 | 17312u16 | 17313u16 | 17314u16
            | 17315u16 | 17316u16 | 17317u16 | 17318u16 | 17319u16 | 17320u16 | 17321u16
            | 17322u16 | 17323u16 | 17324u16 | 17325u16 | 17326u16 | 17327u16 | 17328u16
            | 17329u16 | 17330u16 | 17331u16 | 17332u16 | 17333u16 | 17334u16 | 17335u16
            | 17336u16 | 17337u16 | 17338u16 | 17339u16 | 17340u16 | 17341u16 | 17342u16
            | 17343u16 | 17344u16 | 17345u16 | 17346u16 | 17347u16 | 17348u16 | 17349u16
            | 17350u16 | 17351u16 | 17352u16 | 17353u16 | 17354u16 | 17355u16 | 17356u16
            | 17357u16 | 17358u16 | 17359u16 | 17360u16 | 17361u16 | 17362u16 | 17363u16
            | 17364u16 | 17365u16 | 17366u16 | 17367u16 | 17368u16 | 17369u16 | 17370u16
            | 17371u16 | 17372u16 | 17373u16 | 17374u16 | 17375u16 | 17376u16 | 17377u16
            | 17378u16 | 17379u16 | 17380u16 | 17381u16 | 17382u16 | 17383u16 | 17384u16
            | 17385u16 | 17386u16 | 17387u16 | 17388u16 | 17389u16 | 17390u16 | 17391u16
            | 17392u16 | 17393u16 | 17394u16 | 17395u16 | 17396u16 | 17397u16 | 17398u16
            | 17399u16 | 17400u16 | 17401u16 | 17402u16 | 17403u16 | 17404u16 | 17405u16
            | 17406u16 | 17407u16 | 17408u16 | 17409u16 | 17410u16 | 17411u16 | 17412u16
            | 17413u16 | 17414u16 | 17415u16 | 17416u16 | 17417u16 | 17418u16 | 17419u16
            | 17420u16 | 17421u16 | 17422u16 | 17423u16 | 17424u16 | 17425u16 | 17426u16
            | 17427u16 | 17428u16 | 17429u16 | 17430u16 | 17431u16 | 17432u16 | 17433u16
            | 17434u16 | 17435u16 | 17436u16 | 17437u16 | 17438u16 | 17439u16 | 17440u16
            | 17441u16 | 17442u16 | 17443u16 | 17444u16 | 17445u16 | 17446u16 | 17447u16
            | 17448u16 | 17449u16 | 17450u16 | 17451u16 | 17452u16 | 17453u16 | 17454u16
            | 17455u16 | 17456u16 | 17457u16 | 17458u16 | 17459u16 | 17460u16 | 17461u16
            | 17462u16 | 17463u16 | 17464u16 | 17465u16 | 17466u16 | 17467u16 | 17468u16
            | 17469u16 | 17470u16 | 17471u16 | 17472u16 | 17473u16 | 17474u16 | 17475u16
            | 17476u16 | 17477u16 | 17478u16 | 17479u16 | 17480u16 | 17481u16 | 17482u16
            | 17483u16 | 17484u16 | 17485u16 | 17486u16 | 17487u16 | 17488u16 | 17489u16
            | 17490u16 | 17491u16 | 17492u16 | 17493u16 | 17494u16 | 17495u16 | 17496u16
            | 17497u16 | 17498u16 | 17499u16 | 17500u16 | 17501u16 | 17502u16 | 17503u16
            | 17504u16 | 17505u16 | 17506u16 | 17507u16 | 17508u16 | 17509u16 | 17510u16
            | 17511u16 | 17512u16 | 17513u16 | 17514u16 | 17515u16 | 17516u16 | 17517u16
            | 17518u16 | 17519u16 | 17520u16 | 17521u16 | 17522u16 | 17523u16 | 17524u16
            | 17525u16 | 17526u16 | 17527u16 | 17528u16 | 17529u16 | 17530u16 | 17531u16
            | 17532u16 | 17533u16 | 17534u16 | 17535u16 | 17536u16 | 17537u16 | 17538u16
            | 17539u16 | 17540u16 | 17541u16 | 17542u16 | 17543u16 | 17544u16 | 17545u16
            | 17546u16 | 17547u16 | 17548u16 | 17549u16 | 17550u16 | 17551u16 | 17552u16
            | 17553u16 | 17554u16 | 17555u16 | 17556u16 | 17557u16 | 17558u16 | 17559u16
            | 17560u16 | 17561u16 | 17562u16 | 17563u16 | 17564u16 | 17565u16 | 17566u16
            | 17567u16 | 17568u16 | 17569u16 | 17570u16 | 17571u16 | 17572u16 | 17573u16
            | 17574u16 | 17575u16 | 17576u16 | 17577u16 | 17578u16 | 17579u16 | 17580u16
            | 17581u16 | 17582u16 => BlockKind::SandstoneWall,
            17583u16 | 17584u16 | 17585u16 | 17586u16 | 17587u16 | 17588u16 | 17589u16
            | 17590u16 | 17591u16 | 17592u16 | 17593u16 | 17594u16 | 17595u16 | 17596u16
            | 17597u16 | 17598u16 | 17599u16 | 17600u16 | 17601u16 | 17602u16 | 17603u16
            | 17604u16 | 17605u16 | 17606u16 | 17607u16 | 17608u16 | 17609u16 | 17610u16
            | 17611u16 | 17612u16 | 17613u16 | 17614u16 | 17615u16 | 17616u16 | 17617u16
            | 17618u16 | 17619u16 | 17620u16 | 17621u16 | 17622u16 | 17623u16 | 17624u16
            | 17625u16 | 17626u16 | 17627u16 | 17628u16 | 17629u16 | 17630u16 | 17631u16
            | 17632u16 | 17633u16 | 17634u16 | 17635u16 | 17636u16 | 17637u16 | 17638u16
            | 17639u16 | 17640u16 | 17641u16 | 17642u16 | 17643u16 | 17644u16 | 17645u16
            | 17646u16 | 17647u16 | 17648u16 | 17649u16 | 17650u16 | 17651u16 | 17652u16
            | 17653u16 | 17654u16 | 17655u16 | 17656u16 | 17657u16 | 17658u16 | 17659u16
            | 17660u16 | 17661u16 | 17662u16 | 17663u16 | 17664u16 | 17665u16 | 17666u16
            | 17667u16 | 17668u16 | 17669u16 | 17670u16 | 17671u16 | 17672u16 | 17673u16
            | 17674u16 | 17675u16 | 17676u16 | 17677u16 | 17678u16 | 17679u16 | 17680u16
            | 17681u16 | 17682u16 | 17683u16 | 17684u16 | 17685u16 | 17686u16 | 17687u16
            | 17688u16 | 17689u16 | 17690u16 | 17691u16 | 17692u16 | 17693u16 | 17694u16
            | 17695u16 | 17696u16 | 17697u16 | 17698u16 | 17699u16 | 17700u16 | 17701u16
            | 17702u16 | 17703u16 | 17704u16 | 17705u16 | 17706u16 | 17707u16 | 17708u16
            | 17709u16 | 17710u16 | 17711u16 | 17712u16 | 17713u16 | 17714u16 | 17715u16
            | 17716u16 | 17717u16 | 17718u16 | 17719u16 | 17720u16 | 17721u16 | 17722u16
            | 17723u16 | 17724u16 | 17725u16 | 17726u16 | 17727u16 | 17728u16 | 17729u16
            | 17730u16 | 17731u16 | 17732u16 | 17733u16 | 17734u16 | 17735u16 | 17736u16
            | 17737u16 | 17738u16 | 17739u16 | 17740u16 | 17741u16 | 17742u16 | 17743u16
            | 17744u16 | 17745u16 | 17746u16 | 17747u16 | 17748u16 | 17749u16 | 17750u16
            | 17751u16 | 17752u16 | 17753u16 | 17754u16 | 17755u16 | 17756u16 | 17757u16
            | 17758u16 | 17759u16 | 17760u16 | 17761u16 | 17762u16 | 17763u16 | 17764u16
            | 17765u16 | 17766u16 | 17767u16 | 17768u16 | 17769u16 | 17770u16 | 17771u16
            | 17772u16 | 17773u16 | 17774u16 | 17775u16 | 17776u16 | 17777u16 | 17778u16
            | 17779u16 | 17780u16 | 17781u16 | 17782u16 | 17783u16 | 17784u16 | 17785u16
            | 17786u16 | 17787u16 | 17788u16 | 17789u16 | 17790u16 | 17791u16 | 17792u16
            | 17793u16 | 17794u16 | 17795u16 | 17796u16 | 17797u16 | 17798u16 | 17799u16
            | 17800u16 | 17801u16 | 17802u16 | 17803u16 | 17804u16 | 17805u16 | 17806u16
            | 17807u16 | 17808u16 | 17809u16 | 17810u16 | 17811u16 | 17812u16 | 17813u16
            | 17814u16 | 17815u16 | 17816u16 | 17817u16 | 17818u16 | 17819u16 | 17820u16
            | 17821u16 | 17822u16 | 17823u16 | 17824u16 | 17825u16 | 17826u16 | 17827u16
            | 17828u16 | 17829u16 | 17830u16 | 17831u16 | 17832u16 | 17833u16 | 17834u16
            | 17835u16 | 17836u16 | 17837u16 | 17838u16 | 17839u16 | 17840u16 | 17841u16
            | 17842u16 | 17843u16 | 17844u16 | 17845u16 | 17846u16 | 17847u16 | 17848u16
            | 17849u16 | 17850u16 | 17851u16 | 17852u16 | 17853u16 | 17854u16 | 17855u16
            | 17856u16 | 17857u16 | 17858u16 | 17859u16 | 17860u16 | 17861u16 | 17862u16
            | 17863u16 | 17864u16 | 17865u16 | 17866u16 | 17867u16 | 17868u16 | 17869u16
            | 17870u16 | 17871u16 | 17872u16 | 17873u16 | 17874u16 | 17875u16 | 17876u16
            | 17877u16 | 17878u16 | 17879u16 | 17880u16 | 17881u16 | 17882u16 | 17883u16
            | 17884u16 | 17885u16 | 17886u16 | 17887u16 | 17888u16 | 17889u16 | 17890u16
            | 17891u16 | 17892u16 | 17893u16 | 17894u16 | 17895u16 | 17896u16 | 17897u16
            | 17898u16 | 17899u16 | 17900u16 | 17901u16 | 17902u16 | 17903u16 | 17904u16
            | 17905u16 | 17906u16 => BlockKind::EndStoneBrickWall,
            17907u16 | 17908u16 | 17909u16 | 17910u16 | 17911u16 | 17912u16 | 17913u16
            | 17914u16 | 17915u16 | 17916u16 | 17917u16 | 17918u16 | 17919u16 | 17920u16
            | 17921u16 | 17922u16 | 17923u16 | 17924u16 | 17925u16 | 17926u16 | 17927u16
            | 17928u16 | 17929u16 | 17930u16 | 17931u16 | 17932u16 | 17933u16 | 17934u16
            | 17935u16 | 17936u16 | 17937u16 | 17938u16 | 17939u16 | 17940u16 | 17941u16
            | 17942u16 | 17943u16 | 17944u16 | 17945u16 | 17946u16 | 17947u16 | 17948u16
            | 17949u16 | 17950u16 | 17951u16 | 17952u16 | 17953u16 | 17954u16 | 17955u16
            | 17956u16 | 17957u16 | 17958u16 | 17959u16 | 17960u16 | 17961u16 | 17962u16
            | 17963u16 | 17964u16 | 17965u16 | 17966u16 | 17967u16 | 17968u16 | 17969u16
            | 17970u16 | 17971u16 | 17972u16 | 17973u16 | 17974u16 | 17975u16 | 17976u16
            | 17977u16 | 17978u16 | 17979u16 | 17980u16 | 17981u16 | 17982u16 | 17983u16
            | 17984u16 | 17985u16 | 17986u16 | 17987u16 | 17988u16 | 17989u16 | 17990u16
            | 17991u16 | 17992u16 | 17993u16 | 17994u16 | 17995u16 | 17996u16 | 17997u16
            | 17998u16 | 17999u16 | 18000u16 | 18001u16 | 18002u16 | 18003u16 | 18004u16
            | 18005u16 | 18006u16 | 18007u16 | 18008u16 | 18009u16 | 18010u16 | 18011u16
            | 18012u16 | 18013u16 | 18014u16 | 18015u16 | 18016u16 | 18017u16 | 18018u16
            | 18019u16 | 18020u16 | 18021u16 | 18022u16 | 18023u16 | 18024u16 | 18025u16
            | 18026u16 | 18027u16 | 18028u16 | 18029u16 | 18030u16 | 18031u16 | 18032u16
            | 18033u16 | 18034u16 | 18035u16 | 18036u16 | 18037u16 | 18038u16 | 18039u16
            | 18040u16 | 18041u16 | 18042u16 | 18043u16 | 18044u16 | 18045u16 | 18046u16
            | 18047u16 | 18048u16 | 18049u16 | 18050u16 | 18051u16 | 18052u16 | 18053u16
            | 18054u16 | 18055u16 | 18056u16 | 18057u16 | 18058u16 | 18059u16 | 18060u16
            | 18061u16 | 18062u16 | 18063u16 | 18064u16 | 18065u16 | 18066u16 | 18067u16
            | 18068u16 | 18069u16 | 18070u16 | 18071u16 | 18072u16 | 18073u16 | 18074u16
            | 18075u16 | 18076u16 | 18077u16 | 18078u16 | 18079u16 | 18080u16 | 18081u16
            | 18082u16 | 18083u16 | 18084u16 | 18085u16 | 18086u16 | 18087u16 | 18088u16
            | 18089u16 | 18090u16 | 18091u16 | 18092u16 | 18093u16 | 18094u16 | 18095u16
            | 18096u16 | 18097u16 | 18098u16 | 18099u16 | 18100u16 | 18101u16 | 18102u16
            | 18103u16 | 18104u16 | 18105u16 | 18106u16 | 18107u16 | 18108u16 | 18109u16
            | 18110u16 | 18111u16 | 18112u16 | 18113u16 | 18114u16 | 18115u16 | 18116u16
            | 18117u16 | 18118u16 | 18119u16 | 18120u16 | 18121u16 | 18122u16 | 18123u16
            | 18124u16 | 18125u16 | 18126u16 | 18127u16 | 18128u16 | 18129u16 | 18130u16
            | 18131u16 | 18132u16 | 18133u16 | 18134u16 | 18135u16 | 18136u16 | 18137u16
            | 18138u16 | 18139u16 | 18140u16 | 18141u16 | 18142u16 | 18143u16 | 18144u16
            | 18145u16 | 18146u16 | 18147u16 | 18148u16 | 18149u16 | 18150u16 | 18151u16
            | 18152u16 | 18153u16 | 18154u16 | 18155u16 | 18156u16 | 18157u16 | 18158u16
            | 18159u16 | 18160u16 | 18161u16 | 18162u16 | 18163u16 | 18164u16 | 18165u16
            | 18166u16 | 18167u16 | 18168u16 | 18169u16 | 18170u16 | 18171u16 | 18172u16
            | 18173u16 | 18174u16 | 18175u16 | 18176u16 | 18177u16 | 18178u16 | 18179u16
            | 18180u16 | 18181u16 | 18182u16 | 18183u16 | 18184u16 | 18185u16 | 18186u16
            | 18187u16 | 18188u16 | 18189u16 | 18190u16 | 18191u16 | 18192u16 | 18193u16
            | 18194u16 | 18195u16 | 18196u16 | 18197u16 | 18198u16 | 18199u16 | 18200u16
            | 18201u16 | 18202u16 | 18203u16 | 18204u16 | 18205u16 | 18206u16 | 18207u16
            | 18208u16 | 18209u16 | 18210u16 | 18211u16 | 18212u16 | 18213u16 | 18214u16
            | 18215u16 | 18216u16 | 18217u16 | 18218u16 | 18219u16 | 18220u16 | 18221u16
            | 18222u16 | 18223u16 | 18224u16 | 18225u16 | 18226u16 | 18227u16 | 18228u16
            | 18229u16 | 18230u16 => BlockKind::DioriteWall,
            18231u16 | 18232u16 | 18233u16 | 18234u16 | 18235u16 | 18236u16 | 18237u16
            | 18238u16 | 18239u16 | 18240u16 | 18241u16 | 18242u16 | 18243u16 | 18244u16
            | 18245u16 | 18246u16 | 18247u16 | 18248u16 | 18249u16 | 18250u16 | 18251u16
            | 18252u16 | 18253u16 | 18254u16 | 18255u16 | 18256u16 | 18257u16 | 18258u16
            | 18259u16 | 18260u16 | 18261u16 | 18262u16 => BlockKind::Scaffolding,
            18263u16 | 18264u16 | 18265u16 | 18266u16 => BlockKind::Loom,
            18267u16 | 18268u16 | 18269u16 | 18270u16 | 18271u16 | 18272u16 | 18273u16
            | 18274u16 | 18275u16 | 18276u16 | 18277u16 | 18278u16 => BlockKind::Barrel,
            18279u16 | 18280u16 | 18281u16 | 18282u16 | 18283u16 | 18284u16 | 18285u16
            | 18286u16 => BlockKind::Smoker,
            18287u16 | 18288u16 | 18289u16 | 18290u16 | 18291u16 | 18292u16 | 18293u16
            | 18294u16 => BlockKind::BlastFurnace,
            18295u16 => BlockKind::CartographyTable,
            18296u16 => BlockKind::FletchingTable,
            18297u16 | 18298u16 | 18299u16 | 18300u16 | 18301u16 | 18302u16 | 18303u16
            | 18304u16 | 18305u16 | 18306u16 | 18307u16 | 18308u16 => BlockKind::Grindstone,
            18309u16 | 18310u16 | 18311u16 | 18312u16 | 18313u16 | 18314u16 | 18315u16
            | 18316u16 | 18317u16 | 18318u16 | 18319u16 | 18320u16 | 18321u16 | 18322u16
            | 18323u16 | 18324u16 => BlockKind::Lectern,
            18325u16 => BlockKind::SmithingTable,
            18326u16 | 18327u16 | 18328u16 | 18329u16 => BlockKind::Stonecutter,
            18330u16 | 18331u16 | 18332u16 | 18333u16 | 18334u16 | 18335u16 | 18336u16
            | 18337u16 | 18338u16 | 18339u16 | 18340u16 | 18341u16 | 18342u16 | 18343u16
            | 18344u16 | 18345u16 | 18346u16 | 18347u16 | 18348u16 | 18349u16 | 18350u16
            | 18351u16 | 18352u16 | 18353u16 | 18354u16 | 18355u16 | 18356u16 | 18357u16
            | 18358u16 | 18359u16 | 18360u16 | 18361u16 => BlockKind::Bell,
            18362u16 | 18363u16 | 18364u16 | 18365u16 => BlockKind::Lantern,
            18366u16 | 18367u16 | 18368u16 | 18369u16 => BlockKind::SoulLantern,
            18370u16 | 18371u16 | 18372u16 | 18373u16 | 18374u16 | 18375u16 | 18376u16
            | 18377u16 | 18378u16 | 18379u16 | 18380u16 | 18381u16 | 18382u16 | 18383u16
            | 18384u16 | 18385u16 | 18386u16 | 18387u16 | 18388u16 | 18389u16 | 18390u16
            | 18391u16 | 18392u16 | 18393u16 | 18394u16 | 18395u16 | 18396u16 | 18397u16
            | 18398u16 | 18399u16 | 18400u16 | 18401u16 => BlockKind::Campfire,
            18402u16 | 18403u16 | 18404u16 | 18405u16 | 18406u16 | 18407u16 | 18408u16
            | 18409u16 | 18410u16 | 18411u16 | 18412u16 | 18413u16 | 18414u16 | 18415u16
            | 18416u16 | 18417u16 | 18418u16 | 18419u16 | 18420u16 | 18421u16 | 18422u16
            | 18423u16 | 18424u16 | 18425u16 | 18426u16 | 18427u16 | 18428u16 | 18429u16
            | 18430u16 | 18431u16 | 18432u16 | 18433u16 => BlockKind::SoulCampfire,
            18434u16 | 18435u16 | 18436u16 | 18437u16 => BlockKind::SweetBerryBush,
            18438u16 | 18439u16 | 18440u16 => BlockKind::WarpedStem,
            18441u16 | 18442u16 | 18443u16 => BlockKind::StrippedWarpedStem,
            18444u16 | 18445u16 | 18446u16 => BlockKind::WarpedHyphae,
            18447u16 | 18448u16 | 18449u16 => BlockKind::StrippedWarpedHyphae,
            18450u16 => BlockKind::WarpedNylium,
            18451u16 => BlockKind::WarpedFungus,
            18452u16 => BlockKind::WarpedWartBlock,
            18453u16 => BlockKind::WarpedRoots,
            18454u16 => BlockKind::NetherSprouts,
            18455u16 | 18456u16 | 18457u16 => BlockKind::CrimsonStem,
            18458u16 | 18459u16 | 18460u16 => BlockKind::StrippedCrimsonStem,
            18461u16 | 18462u16 | 18463u16 => BlockKind::CrimsonHyphae,
            18464u16 | 18465u16 | 18466u16 => BlockKind::StrippedCrimsonHyphae,
            18467u16 => BlockKind::CrimsonNylium,
            18468u16 => BlockKind::CrimsonFungus,
            18469u16 => BlockKind::Shroomlight,
            18470u16 | 18471u16 | 18472u16 | 18473u16 | 18474u16 | 18475u16 | 18476u16
            | 18477u16 | 18478u16 | 18479u16 | 18480u16 | 18481u16 | 18482u16 | 18483u16
            | 18484u16 | 18485u16 | 18486u16 | 18487u16 | 18488u16 | 18489u16 | 18490u16
            | 18491u16 | 18492u16 | 18493u16 | 18494u16 | 18495u16 => BlockKind::WeepingVines,
            18496u16 => BlockKind::WeepingVinesPlant,
            18497u16 | 18498u16 | 18499u16 | 18500u16 | 18501u16 | 18502u16 | 18503u16
            | 18504u16 | 18505u16 | 18506u16 | 18507u16 | 18508u16 | 18509u16 | 18510u16
            | 18511u16 | 18512u16 | 18513u16 | 18514u16 | 18515u16 | 18516u16 | 18517u16
            | 18518u16 | 18519u16 | 18520u16 | 18521u16 | 18522u16 => BlockKind::TwistingVines,
            18523u16 => BlockKind::TwistingVinesPlant,
            18524u16 => BlockKind::CrimsonRoots,
            18525u16 => BlockKind::CrimsonPlanks,
            18526u16 => BlockKind::WarpedPlanks,
            18527u16 | 18528u16 | 18529u16 | 18530u16 | 18531u16 | 18532u16 => {
                BlockKind::CrimsonSlab
            }
            18533u16 | 18534u16 | 18535u16 | 18536u16 | 18537u16 | 18538u16 => {
                BlockKind::WarpedSlab
            }
            18539u16 | 18540u16 => BlockKind::CrimsonPressurePlate,
            18541u16 | 18542u16 => BlockKind::WarpedPressurePlate,
            18543u16 | 18544u16 | 18545u16 | 18546u16 | 18547u16 | 18548u16 | 18549u16
            | 18550u16 | 18551u16 | 18552u16 | 18553u16 | 18554u16 | 18555u16 | 18556u16
            | 18557u16 | 18558u16 | 18559u16 | 18560u16 | 18561u16 | 18562u16 | 18563u16
            | 18564u16 | 18565u16 | 18566u16 | 18567u16 | 18568u16 | 18569u16 | 18570u16
            | 18571u16 | 18572u16 | 18573u16 | 18574u16 => BlockKind::CrimsonFence,
            18575u16 | 18576u16 | 18577u16 | 18578u16 | 18579u16 | 18580u16 | 18581u16
            | 18582u16 | 18583u16 | 18584u16 | 18585u16 | 18586u16 | 18587u16 | 18588u16
            | 18589u16 | 18590u16 | 18591u16 | 18592u16 | 18593u16 | 18594u16 | 18595u16
            | 18596u16 | 18597u16 | 18598u16 | 18599u16 | 18600u16 | 18601u16 | 18602u16
            | 18603u16 | 18604u16 | 18605u16 | 18606u16 => BlockKind::WarpedFence,
            18607u16 | 18608u16 | 18609u16 | 18610u16 | 18611u16 | 18612u16 | 18613u16
            | 18614u16 | 18615u16 | 18616u16 | 18617u16 | 18618u16 | 18619u16 | 18620u16
            | 18621u16 | 18622u16 | 18623u16 | 18624u16 | 18625u16 | 18626u16 | 18627u16
            | 18628u16 | 18629u16 | 18630u16 | 18631u16 | 18632u16 | 18633u16 | 18634u16
            | 18635u16 | 18636u16 | 18637u16 | 18638u16 | 18639u16 | 18640u16 | 18641u16
            | 18642u16 | 18643u16 | 18644u16 | 18645u16 | 18646u16 | 18647u16 | 18648u16
            | 18649u16 | 18650u16 | 18651u16 | 18652u16 | 18653u16 | 18654u16 | 18655u16
            | 18656u16 | 18657u16 | 18658u16 | 18659u16 | 18660u16 | 18661u16 | 18662u16
            | 18663u16 | 18664u16 | 18665u16 | 18666u16 | 18667u16 | 18668u16 | 18669u16
            | 18670u16 => BlockKind::CrimsonTrapdoor,
            18671u16 | 18672u16 | 18673u16 | 18674u16 | 18675u16 | 18676u16 | 18677u16
            | 18678u16 | 18679u16 | 18680u16 | 18681u16 | 18682u16 | 18683u16 | 18684u16
            | 18685u16 | 18686u16 | 18687u16 | 18688u16 | 18689u16 | 18690u16 | 18691u16
            | 18692u16 | 18693u16 | 18694u16 | 18695u16 | 18696u16 | 18697u16 | 18698u16
            | 18699u16 | 18700u16 | 18701u16 | 18702u16 | 18703u16 | 18704u16 | 18705u16
            | 18706u16 | 18707u16 | 18708u16 | 18709u16 | 18710u16 | 18711u16 | 18712u16
            | 18713u16 | 18714u16 | 18715u16 | 18716u16 | 18717u16 | 18718u16 | 18719u16
            | 18720u16 | 18721u16 | 18722u16 | 18723u16 | 18724u16 | 18725u16 | 18726u16
            | 18727u16 | 18728u16 | 18729u16 | 18730u16 | 18731u16 | 18732u16 | 18733u16
            | 18734u16 => BlockKind::WarpedTrapdoor,
            18735u16 | 18736u16 | 18737u16 | 18738u16 | 18739u16 | 18740u16 | 18741u16
            | 18742u16 | 18743u16 | 18744u16 | 18745u16 | 18746u16 | 18747u16 | 18748u16
            | 18749u16 | 18750u16 | 18751u16 | 18752u16 | 18753u16 | 18754u16 | 18755u16
            | 18756u16 | 18757u16 | 18758u16 | 18759u16 | 18760u16 | 18761u16 | 18762u16
            | 18763u16 | 18764u16 | 18765u16 | 18766u16 => BlockKind::CrimsonFenceGate,
            18767u16 | 18768u16 | 18769u16 | 18770u16 | 18771u16 | 18772u16 | 18773u16
            | 18774u16 | 18775u16 | 18776u16 | 18777u16 | 18778u16 | 18779u16 | 18780u16
            | 18781u16 | 18782u16 | 18783u16 | 18784u16 | 18785u16 | 18786u16 | 18787u16
            | 18788u16 | 18789u16 | 18790u16 | 18791u16 | 18792u16 | 18793u16 | 18794u16
            | 18795u16 | 18796u16 | 18797u16 | 18798u16 => BlockKind::WarpedFenceGate,
            18799u16 | 18800u16 | 18801u16 | 18802u16 | 18803u16 | 18804u16 | 18805u16
            | 18806u16 | 18807u16 | 18808u16 | 18809u16 | 18810u16 | 18811u16 | 18812u16
            | 18813u16 | 18814u16 | 18815u16 | 18816u16 | 18817u16 | 18818u16 | 18819u16
            | 18820u16 | 18821u16 | 18822u16 | 18823u16 | 18824u16 | 18825u16 | 18826u16
            | 18827u16 | 18828u16 | 18829u16 | 18830u16 | 18831u16 | 18832u16 | 18833u16
            | 18834u16 | 18835u16 | 18836u16 | 18837u16 | 18838u16 | 18839u16 | 18840u16
            | 18841u16 | 18842u16 | 18843u16 | 18844u16 | 18845u16 | 18846u16 | 18847u16
            | 18848u16 | 18849u16 | 18850u16 | 18851u16 | 18852u16 | 18853u16 | 18854u16
            | 18855u16 | 18856u16 | 18857u16 | 18858u16 | 18859u16 | 18860u16 | 18861u16
            | 18862u16 | 18863u16 | 18864u16 | 18865u16 | 18866u16 | 18867u16 | 18868u16
            | 18869u16 | 18870u16 | 18871u16 | 18872u16 | 18873u16 | 18874u16 | 18875u16
            | 18876u16 | 18877u16 | 18878u16 => BlockKind::CrimsonStairs,
            18879u16 | 18880u16 | 18881u16 | 18882u16 | 18883u16 | 18884u16 | 18885u16
            | 18886u16 | 18887u16 | 18888u16 | 18889u16 | 18890u16 | 18891u16 | 18892u16
            | 18893u16 | 18894u16 | 18895u16 | 18896u16 | 18897u16 | 18898u16 | 18899u16
            | 18900u16 | 18901u16 | 18902u16 | 18903u16 | 18904u16 | 18905u16 | 18906u16
            | 18907u16 | 18908u16 | 18909u16 | 18910u16 | 18911u16 | 18912u16 | 18913u16
            | 18914u16 | 18915u16 | 18916u16 | 18917u16 | 18918u16 | 18919u16 | 18920u16
            | 18921u16 | 18922u16 | 18923u16 | 18924u16 | 18925u16 | 18926u16 | 18927u16
            | 18928u16 | 18929u16 | 18930u16 | 18931u16 | 18932u16 | 18933u16 | 18934u16
            | 18935u16 | 18936u16 | 18937u16 | 18938u16 | 18939u16 | 18940u16 | 18941u16
            | 18942u16 | 18943u16 | 18944u16 | 18945u16 | 18946u16 | 18947u16 | 18948u16
            | 18949u16 | 18950u16 | 18951u16 | 18952u16 | 18953u16 | 18954u16 | 18955u16
            | 18956u16 | 18957u16 | 18958u16 => BlockKind::WarpedStairs,
            18959u16 | 18960u16 | 18961u16 | 18962u16 | 18963u16 | 18964u16 | 18965u16
            | 18966u16 | 18967u16 | 18968u16 | 18969u16 | 18970u16 | 18971u16 | 18972u16
            | 18973u16 | 18974u16 | 18975u16 | 18976u16 | 18977u16 | 18978u16 | 18979u16
            | 18980u16 | 18981u16 | 18982u16 => BlockKind::CrimsonButton,
            18983u16 | 18984u16 | 18985u16 | 18986u16 | 18987u16 | 18988u16 | 18989u16
            | 18990u16 | 18991u16 | 18992u16 | 18993u16 | 18994u16 | 18995u16 | 18996u16
            | 18997u16 | 18998u16 | 18999u16 | 19000u16 | 19001u16 | 19002u16 | 19003u16
            | 19004u16 | 19005u16 | 19006u16 => BlockKind::WarpedButton,
            19007u16 | 19008u16 | 19009u16 | 19010u16 | 19011u16 | 19012u16 | 19013u16
            | 19014u16 | 19015u16 | 19016u16 | 19017u16 | 19018u16 | 19019u16 | 19020u16
            | 19021u16 | 19022u16 | 19023u16 | 19024u16 | 19025u16 | 19026u16 | 19027u16
            | 19028u16 | 19029u16 | 19030u16 | 19031u16 | 19032u16 | 19033u16 | 19034u16
            | 19035u16 | 19036u16 | 19037u16 | 19038u16 | 19039u16 | 19040u16 | 19041u16
            | 19042u16 | 19043u16 | 19044u16 | 19045u16 | 19046u16 | 19047u16 | 19048u16
            | 19049u16 | 19050u16 | 19051u16 | 19052u16 | 19053u16 | 19054u16 | 19055u16
            | 19056u16 | 19057u16 | 19058u16 | 19059u16 | 19060u16 | 19061u16 | 19062u16
            | 19063u16 | 19064u16 | 19065u16 | 19066u16 | 19067u16 | 19068u16 | 19069u16
            | 19070u16 => BlockKind::CrimsonDoor,
            19071u16 | 19072u16 | 19073u16 | 19074u16 | 19075u16 | 19076u16 | 19077u16
            | 19078u16 | 19079u16 | 19080u16 | 19081u16 | 19082u16 | 19083u16 | 19084u16
            | 19085u16 | 19086u16 | 19087u16 | 19088u16 | 19089u16 | 19090u16 | 19091u16
            | 19092u16 | 19093u16 | 19094u16 | 19095u16 | 19096u16 | 19097u16 | 19098u16
            | 19099u16 | 19100u16 | 19101u16 | 19102u16 | 19103u16 | 19104u16 | 19105u16
            | 19106u16 | 19107u16 | 19108u16 | 19109u16 | 19110u16 | 19111u16 | 19112u16
            | 19113u16 | 19114u16 | 19115u16 | 19116u16 | 19117u16 | 19118u16 | 19119u16
            | 19120u16 | 19121u16 | 19122u16 | 19123u16 | 19124u16 | 19125u16 | 19126u16
            | 19127u16 | 19128u16 | 19129u16 | 19130u16 | 19131u16 | 19132u16 | 19133u16
            | 19134u16 => BlockKind::WarpedDoor,
            19135u16 | 19136u16 | 19137u16 | 19138u16 | 19139u16 | 19140u16 | 19141u16
            | 19142u16 | 19143u16 | 19144u16 | 19145u16 | 19146u16 | 19147u16 | 19148u16
            | 19149u16 | 19150u16 | 19151u16 | 19152u16 | 19153u16 | 19154u16 | 19155u16
            | 19156u16 | 19157u16 | 19158u16 | 19159u16 | 19160u16 | 19161u16 | 19162u16
            | 19163u16 | 19164u16 | 19165u16 | 19166u16 => BlockKind::CrimsonSign,
            19167u16 | 19168u16 | 19169u16 | 19170u16 | 19171u16 | 19172u16 | 19173u16
            | 19174u16 | 19175u16 | 19176u16 | 19177u16 | 19178u16 | 19179u16 | 19180u16
            | 19181u16 | 19182u16 | 19183u16 | 19184u16 | 19185u16 | 19186u16 | 19187u16
            | 19188u16 | 19189u16 | 19190u16 | 19191u16 | 19192u16 | 19193u16 | 19194u16
            | 19195u16 | 19196u16 | 19197u16 | 19198u16 => BlockKind::WarpedSign,
            19199u16 | 19200u16 | 19201u16 | 19202u16 | 19203u16 | 19204u16 | 19205u16
            | 19206u16 => BlockKind::CrimsonWallSign,
            19207u16 | 19208u16 | 19209u16 | 19210u16 | 19211u16 | 19212u16 | 19213u16
            | 19214u16 => BlockKind::WarpedWallSign,
            19215u16 | 19216u16 | 19217u16 | 19218u16 => BlockKind::StructureBlock,
            19219u16 | 19220u16 | 19221u16 | 19222u16 | 19223u16 | 19224u16 | 19225u16
            | 19226u16 | 19227u16 | 19228u16 | 19229u16 | 19230u16 => BlockKind::Jigsaw,
            19231u16 | 19232u16 | 19233u16 | 19234u16 | 19235u16 | 19236u16 | 19237u16
            | 19238u16 | 19239u16 => BlockKind::Composter,
            19240u16 | 19241u16 | 19242u16 | 19243u16 | 19244u16 | 19245u16 | 19246u16
            | 19247u16 | 19248u16 | 19249u16 | 19250u16 | 19251u16 | 19252u16 | 19253u16
            | 19254u16 | 19255u16 => BlockKind::Target,
            19256u16 | 19257u16 | 19258u16 | 19259u16 | 19260u16 | 19261u16 | 19262u16
            | 19263u16 | 19264u16 | 19265u16 | 19266u16 | 19267u16 | 19268u16 | 19269u16
            | 19270u16 | 19271u16 | 19272u16 | 19273u16 | 19274u16 | 19275u16 | 19276u16
            | 19277u16 | 19278u16 | 19279u16 => BlockKind::BeeNest,
            19280u16 | 19281u16 | 19282u16 | 19283u16 | 19284u16 | 19285u16 | 19286u16
            | 19287u16 | 19288u16 | 19289u16 | 19290u16 | 19291u16 | 19292u16 | 19293u16
            | 19294u16 | 19295u16 | 19296u16 | 19297u16 | 19298u16 | 19299u16 | 19300u16
            | 19301u16 | 19302u16 | 19303u16 => BlockKind::Beehive,
            19304u16 => BlockKind::HoneyBlock,
            19305u16 => BlockKind::HoneycombBlock,
            19306u16 => BlockKind::NetheriteBlock,
            19307u16 => BlockKind::AncientDebris,
            19308u16 => BlockKind::CryingObsidian,
            19309u16 | 19310u16 | 19311u16 | 19312u16 | 19313u16 => BlockKind::RespawnAnchor,
            19314u16 => BlockKind::PottedCrimsonFungus,
            19315u16 => BlockKind::PottedWarpedFungus,
            19316u16 => BlockKind::PottedCrimsonRoots,
            19317u16 => BlockKind::PottedWarpedRoots,
            19318u16 => BlockKind::Lodestone,
            19319u16 => BlockKind::Blackstone,
            19320u16 | 19321u16 | 19322u16 | 19323u16 | 19324u16 | 19325u16 | 19326u16
            | 19327u16 | 19328u16 | 19329u16 | 19330u16 | 19331u16 | 19332u16 | 19333u16
            | 19334u16 | 19335u16 | 19336u16 | 19337u16 | 19338u16 | 19339u16 | 19340u16
            | 19341u16 | 19342u16 | 19343u16 | 19344u16 | 19345u16 | 19346u16 | 19347u16
            | 19348u16 | 19349u16 | 19350u16 | 19351u16 | 19352u16 | 19353u16 | 19354u16
            | 19355u16 | 19356u16 | 19357u16 | 19358u16 | 19359u16 | 19360u16 | 19361u16
            | 19362u16 | 19363u16 | 19364u16 | 19365u16 | 19366u16 | 19367u16 | 19368u16
            | 19369u16 | 19370u16 | 19371u16 | 19372u16 | 19373u16 | 19374u16 | 19375u16
            | 19376u16 | 19377u16 | 19378u16 | 19379u16 | 19380u16 | 19381u16 | 19382u16
            | 19383u16 | 19384u16 | 19385u16 | 19386u16 | 19387u16 | 19388u16 | 19389u16
            | 19390u16 | 19391u16 | 19392u16 | 19393u16 | 19394u16 | 19395u16 | 19396u16
            | 19397u16 | 19398u16 | 19399u16 => BlockKind::BlackstoneStairs,
            19400u16 | 19401u16 | 19402u16 | 19403u16 | 19404u16 | 19405u16 | 19406u16
            | 19407u16 | 19408u16 | 19409u16 | 19410u16 | 19411u16 | 19412u16 | 19413u16
            | 19414u16 | 19415u16 | 19416u16 | 19417u16 | 19418u16 | 19419u16 | 19420u16
            | 19421u16 | 19422u16 | 19423u16 | 19424u16 | 19425u16 | 19426u16 | 19427u16
            | 19428u16 | 19429u16 | 19430u16 | 19431u16 | 19432u16 | 19433u16 | 19434u16
            | 19435u16 | 19436u16 | 19437u16 | 19438u16 | 19439u16 | 19440u16 | 19441u16
            | 19442u16 | 19443u16 | 19444u16 | 19445u16 | 19446u16 | 19447u16 | 19448u16
            | 19449u16 | 19450u16 | 19451u16 | 19452u16 | 19453u16 | 19454u16 | 19455u16
            | 19456u16 | 19457u16 | 19458u16 | 19459u16 | 19460u16 | 19461u16 | 19462u16
            | 19463u16 | 19464u16 | 19465u16 | 19466u16 | 19467u16 | 19468u16 | 19469u16
            | 19470u16 | 19471u16 | 19472u16 | 19473u16 | 19474u16 | 19475u16 | 19476u16
            | 19477u16 | 19478u16 | 19479u16 | 19480u16 | 19481u16 | 19482u16 | 19483u16
            | 19484u16 | 19485u16 | 19486u16 | 19487u16 | 19488u16 | 19489u16 | 19490u16
            | 19491u16 | 19492u16 | 19493u16 | 19494u16 | 19495u16 | 19496u16 | 19497u16
            | 19498u16 | 19499u16 | 19500u16 | 19501u16 | 19502u16 | 19503u16 | 19504u16
            | 19505u16 | 19506u16 | 19507u16 | 19508u16 | 19509u16 | 19510u16 | 19511u16
            | 19512u16 | 19513u16 | 19514u16 | 19515u16 | 19516u16 | 19517u16 | 19518u16
            | 19519u16 | 19520u16 | 19521u16 | 19522u16 | 19523u16 | 19524u16 | 19525u16
            | 19526u16 | 19527u16 | 19528u16 | 19529u16 | 19530u16 | 19531u16 | 19532u16
            | 19533u16 | 19534u16 | 19535u16 | 19536u16 | 19537u16 | 19538u16 | 19539u16
            | 19540u16 | 19541u16 | 19542u16 | 19543u16 | 19544u16 | 19545u16 | 19546u16
            | 19547u16 | 19548u16 | 19549u16 | 19550u16 | 19551u16 | 19552u16 | 19553u16
            | 19554u16 | 19555u16 | 19556u16 | 19557u16 | 19558u16 | 19559u16 | 19560u16
            | 19561u16 | 19562u16 | 19563u16 | 19564u16 | 19565u16 | 19566u16 | 19567u16
            | 19568u16 | 19569u16 | 19570u16 | 19571u16 | 19572u16 | 19573u16 | 19574u16
            | 19575u16 | 19576u16 | 19577u16 | 19578u16 | 19579u16 | 19580u16 | 19581u16
            | 19582u16 | 19583u16 | 19584u16 | 19585u16 | 19586u16 | 19587u16 | 19588u16
            | 19589u16 | 19590u16 | 19591u16 | 19592u16 | 19593u16 | 19594u16 | 19595u16
            | 19596u16 | 19597u16 | 19598u16 | 19599u16 | 19600u16 | 19601u16 | 19602u16
            | 19603u16 | 19604u16 | 19605u16 | 19606u16 | 19607u16 | 19608u16 | 19609u16
            | 19610u16 | 19611u16 | 19612u16 | 19613u16 | 19614u16 | 19615u16 | 19616u16
            | 19617u16 | 19618u16 | 19619u16 | 19620u16 | 19621u16 | 19622u16 | 19623u16
            | 19624u16 | 19625u16 | 19626u16 | 19627u16 | 19628u16 | 19629u16 | 19630u16
            | 19631u16 | 19632u16 | 19633u16 | 19634u16 | 19635u16 | 19636u16 | 19637u16
            | 19638u16 | 19639u16 | 19640u16 | 19641u16 | 19642u16 | 19643u16 | 19644u16
            | 19645u16 | 19646u16 | 19647u16 | 19648u16 | 19649u16 | 19650u16 | 19651u16
            | 19652u16 | 19653u16 | 19654u16 | 19655u16 | 19656u16 | 19657u16 | 19658u16
            | 19659u16 | 19660u16 | 19661u16 | 19662u16 | 19663u16 | 19664u16 | 19665u16
            | 19666u16 | 19667u16 | 19668u16 | 19669u16 | 19670u16 | 19671u16 | 19672u16
            | 19673u16 | 19674u16 | 19675u16 | 19676u16 | 19677u16 | 19678u16 | 19679u16
            | 19680u16 | 19681u16 | 19682u16 | 19683u16 | 19684u16 | 19685u16 | 19686u16
            | 19687u16 | 19688u16 | 19689u16 | 19690u16 | 19691u16 | 19692u16 | 19693u16
            | 19694u16 | 19695u16 | 19696u16 | 19697u16 | 19698u16 | 19699u16 | 19700u16
            | 19701u16 | 19702u16 | 19703u16 | 19704u16 | 19705u16 | 19706u16 | 19707u16
            | 19708u16 | 19709u16 | 19710u16 | 19711u16 | 19712u16 | 19713u16 | 19714u16
            | 19715u16 | 19716u16 | 19717u16 | 19718u16 | 19719u16 | 19720u16 | 19721u16
            | 19722u16 | 19723u16 => BlockKind::BlackstoneWall,
            19724u16 | 19725u16 | 19726u16 | 19727u16 | 19728u16 | 19729u16 => {
                BlockKind::BlackstoneSlab
            }
            19730u16 => BlockKind::PolishedBlackstone,
            19731u16 => BlockKind::PolishedBlackstoneBricks,
            19732u16 => BlockKind::CrackedPolishedBlackstoneBricks,
            19733u16 => BlockKind::ChiseledPolishedBlackstone,
            19734u16 | 19735u16 | 19736u16 | 19737u16 | 19738u16 | 19739u16 => {
                BlockKind::PolishedBlackstoneBrickSlab
            }
            19740u16 | 19741u16 | 19742u16 | 19743u16 | 19744u16 | 19745u16 | 19746u16
            | 19747u16 | 19748u16 | 19749u16 | 19750u16 | 19751u16 | 19752u16 | 19753u16
            | 19754u16 | 19755u16 | 19756u16 | 19757u16 | 19758u16 | 19759u16 | 19760u16
            | 19761u16 | 19762u16 | 19763u16 | 19764u16 | 19765u16 | 19766u16 | 19767u16
            | 19768u16 | 19769u16 | 19770u16 | 19771u16 | 19772u16 | 19773u16 | 19774u16
            | 19775u16 | 19776u16 | 19777u16 | 19778u16 | 19779u16 | 19780u16 | 19781u16
            | 19782u16 | 19783u16 | 19784u16 | 19785u16 | 19786u16 | 19787u16 | 19788u16
            | 19789u16 | 19790u16 | 19791u16 | 19792u16 | 19793u16 | 19794u16 | 19795u16
            | 19796u16 | 19797u16 | 19798u16 | 19799u16 | 19800u16 | 19801u16 | 19802u16
            | 19803u16 | 19804u16 | 19805u16 | 19806u16 | 19807u16 | 19808u16 | 19809u16
            | 19810u16 | 19811u16 | 19812u16 | 19813u16 | 19814u16 | 19815u16 | 19816u16
            | 19817u16 | 19818u16 | 19819u16 => BlockKind::PolishedBlackstoneBrickStairs,
            19820u16 | 19821u16 | 19822u16 | 19823u16 | 19824u16 | 19825u16 | 19826u16
            | 19827u16 | 19828u16 | 19829u16 | 19830u16 | 19831u16 | 19832u16 | 19833u16
            | 19834u16 | 19835u16 | 19836u16 | 19837u16 | 19838u16 | 19839u16 | 19840u16
            | 19841u16 | 19842u16 | 19843u16 | 19844u16 | 19845u16 | 19846u16 | 19847u16
            | 19848u16 | 19849u16 | 19850u16 | 19851u16 | 19852u16 | 19853u16 | 19854u16
            | 19855u16 | 19856u16 | 19857u16 | 19858u16 | 19859u16 | 19860u16 | 19861u16
            | 19862u16 | 19863u16 | 19864u16 | 19865u16 | 19866u16 | 19867u16 | 19868u16
            | 19869u16 | 19870u16 | 19871u16 | 19872u16 | 19873u16 | 19874u16 | 19875u16
            | 19876u16 | 19877u16 | 19878u16 | 19879u16 | 19880u16 | 19881u16 | 19882u16
            | 19883u16 | 19884u16 | 19885u16 | 19886u16 | 19887u16 | 19888u16 | 19889u16
            | 19890u16 | 19891u16 | 19892u16 | 19893u16 | 19894u16 | 19895u16 | 19896u16
            | 19897u16 | 19898u16 | 19899u16 | 19900u16 | 19901u16 | 19902u16 | 19903u16
            | 19904u16 | 19905u16 | 19906u16 | 19907u16 | 19908u16 | 19909u16 | 19910u16
            | 19911u16 | 19912u16 | 19913u16 | 19914u16 | 19915u16 | 19916u16 | 19917u16
            | 19918u16 | 19919u16 | 19920u16 | 19921u16 | 19922u16 | 19923u16 | 19924u16
            | 19925u16 | 19926u16 | 19927u16 | 19928u16 | 19929u16 | 19930u16 | 19931u16
            | 19932u16 | 19933u16 | 19934u16 | 19935u16 | 19936u16 | 19937u16 | 19938u16
            | 19939u16 | 19940u16 | 19941u16 | 19942u16 | 19943u16 | 19944u16 | 19945u16
            | 19946u16 | 19947u16 | 19948u16 | 19949u16 | 19950u16 | 19951u16 | 19952u16
            | 19953u16 | 19954u16 | 19955u16 | 19956u16 | 19957u16 | 19958u16 | 19959u16
            | 19960u16 | 19961u16 | 19962u16 | 19963u16 | 19964u16 | 19965u16 | 19966u16
            | 19967u16 | 19968u16 | 19969u16 | 19970u16 | 19971u16 | 19972u16 | 19973u16
            | 19974u16 | 19975u16 | 19976u16 | 19977u16 | 19978u16 | 19979u16 | 19980u16
            | 19981u16 | 19982u16 | 19983u16 | 19984u16 | 19985u16 | 19986u16 | 19987u16
            | 19988u16 | 19989u16 | 19990u16 | 19991u16 | 19992u16 | 19993u16 | 19994u16
            | 19995u16 | 19996u16 | 19997u16 | 19998u16 | 19999u16 | 20000u16 | 20001u16
            | 20002u16 | 20003u16 | 20004u16 | 20005u16 | 20006u16 | 20007u16 | 20008u16
            | 20009u16 | 20010u16 | 20011u16 | 20012u16 | 20013u16 | 20014u16 | 20015u16
            | 20016u16 | 20017u16 | 20018u16 | 20019u16 | 20020u16 | 20021u16 | 20022u16
            | 20023u16 | 20024u16 | 20025u16 | 20026u16 | 20027u16 | 20028u16 | 20029u16
            | 20030u16 | 20031u16 | 20032u16 | 20033u16 | 20034u16 | 20035u16 | 20036u16
            | 20037u16 | 20038u16 | 20039u16 | 20040u16 | 20041u16 | 20042u16 | 20043u16
            | 20044u16 | 20045u16 | 20046u16 | 20047u16 | 20048u16 | 20049u16 | 20050u16
            | 20051u16 | 20052u16 | 20053u16 | 20054u16 | 20055u16 | 20056u16 | 20057u16
            | 20058u16 | 20059u16 | 20060u16 | 20061u16 | 20062u16 | 20063u16 | 20064u16
            | 20065u16 | 20066u16 | 20067u16 | 20068u16 | 20069u16 | 20070u16 | 20071u16
            | 20072u16 | 20073u16 | 20074u16 | 20075u16 | 20076u16 | 20077u16 | 20078u16
            | 20079u16 | 20080u16 | 20081u16 | 20082u16 | 20083u16 | 20084u16 | 20085u16
            | 20086u16 | 20087u16 | 20088u16 | 20089u16 | 20090u16 | 20091u16 | 20092u16
            | 20093u16 | 20094u16 | 20095u16 | 20096u16 | 20097u16 | 20098u16 | 20099u16
            | 20100u16 | 20101u16 | 20102u16 | 20103u16 | 20104u16 | 20105u16 | 20106u16
            | 20107u16 | 20108u16 | 20109u16 | 20110u16 | 20111u16 | 20112u16 | 20113u16
            | 20114u16 | 20115u16 | 20116u16 | 20117u16 | 20118u16 | 20119u16 | 20120u16
            | 20121u16 | 20122u16 | 20123u16 | 20124u16 | 20125u16 | 20126u16 | 20127u16
            | 20128u16 | 20129u16 | 20130u16 | 20131u16 | 20132u16 | 20133u16 | 20134u16
            | 20135u16 | 20136u16 | 20137u16 | 20138u16 | 20139u16 | 20140u16 | 20141u16
            | 20142u16 | 20143u16 => BlockKind::PolishedBlackstoneBrickWall,
            20144u16 => BlockKind::GildedBlackstone,
            20145u16 | 20146u16 | 20147u16 | 20148u16 | 20149u16 | 20150u16 | 20151u16
            | 20152u16 | 20153u16 | 20154u16 | 20155u16 | 20156u16 | 20157u16 | 20158u16
            | 20159u16 | 20160u16 | 20161u16 | 20162u16 | 20163u16 | 20164u16 | 20165u16
            | 20166u16 | 20167u16 | 20168u16 | 20169u16 | 20170u16 | 20171u16 | 20172u16
            | 20173u16 | 20174u16 | 20175u16 | 20176u16 | 20177u16 | 20178u16 | 20179u16
            | 20180u16 | 20181u16 | 20182u16 | 20183u16 | 20184u16 | 20185u16 | 20186u16
            | 20187u16 | 20188u16 | 20189u16 | 20190u16 | 20191u16 | 20192u16 | 20193u16
            | 20194u16 | 20195u16 | 20196u16 | 20197u16 | 20198u16 | 20199u16 | 20200u16
            | 20201u16 | 20202u16 | 20203u16 | 20204u16 | 20205u16 | 20206u16 | 20207u16
            | 20208u16 | 20209u16 | 20210u16 | 20211u16 | 20212u16 | 20213u16 | 20214u16
            | 20215u16 | 20216u16 | 20217u16 | 20218u16 | 20219u16 | 20220u16 | 20221u16
            | 20222u16 | 20223u16 | 20224u16 => BlockKind::PolishedBlackstoneStairs,
            20225u16 | 20226u16 | 20227u16 | 20228u16 | 20229u16 | 20230u16 => {
                BlockKind::PolishedBlackstoneSlab
            }
            20231u16 | 20232u16 => BlockKind::PolishedBlackstonePressurePlate,
            20233u16 | 20234u16 | 20235u16 | 20236u16 | 20237u16 | 20238u16 | 20239u16
            | 20240u16 | 20241u16 | 20242u16 | 20243u16 | 20244u16 | 20245u16 | 20246u16
            | 20247u16 | 20248u16 | 20249u16 | 20250u16 | 20251u16 | 20252u16 | 20253u16
            | 20254u16 | 20255u16 | 20256u16 => BlockKind::PolishedBlackstoneButton,
            20257u16 | 20258u16 | 20259u16 | 20260u16 | 20261u16 | 20262u16 | 20263u16
            | 20264u16 | 20265u16 | 20266u16 | 20267u16 | 20268u16 | 20269u16 | 20270u16
            | 20271u16 | 20272u16 | 20273u16 | 20274u16 | 20275u16 | 20276u16 | 20277u16
            | 20278u16 | 20279u16 | 20280u16 | 20281u16 | 20282u16 | 20283u16 | 20284u16
            | 20285u16 | 20286u16 | 20287u16 | 20288u16 | 20289u16 | 20290u16 | 20291u16
            | 20292u16 | 20293u16 | 20294u16 | 20295u16 | 20296u16 | 20297u16 | 20298u16
            | 20299u16 | 20300u16 | 20301u16 | 20302u16 | 20303u16 | 20304u16 | 20305u16
            | 20306u16 | 20307u16 | 20308u16 | 20309u16 | 20310u16 | 20311u16 | 20312u16
            | 20313u16 | 20314u16 | 20315u16 | 20316u16 | 20317u16 | 20318u16 | 20319u16
            | 20320u16 | 20321u16 | 20322u16 | 20323u16 | 20324u16 | 20325u16 | 20326u16
            | 20327u16 | 20328u16 | 20329u16 | 20330u16 | 20331u16 | 20332u16 | 20333u16
            | 20334u16 | 20335u16 | 20336u16 | 20337u16 | 20338u16 | 20339u16 | 20340u16
            | 20341u16 | 20342u16 | 20343u16 | 20344u16 | 20345u16 | 20346u16 | 20347u16
            | 20348u16 | 20349u16 | 20350u16 | 20351u16 | 20352u16 | 20353u16 | 20354u16
            | 20355u16 | 20356u16 | 20357u16 | 20358u16 | 20359u16 | 20360u16 | 20361u16
            | 20362u16 | 20363u16 | 20364u16 | 20365u16 | 20366u16 | 20367u16 | 20368u16
            | 20369u16 | 20370u16 | 20371u16 | 20372u16 | 20373u16 | 20374u16 | 20375u16
            | 20376u16 | 20377u16 | 20378u16 | 20379u16 | 20380u16 | 20381u16 | 20382u16
            | 20383u16 | 20384u16 | 20385u16 | 20386u16 | 20387u16 | 20388u16 | 20389u16
            | 20390u16 | 20391u16 | 20392u16 | 20393u16 | 20394u16 | 20395u16 | 20396u16
            | 20397u16 | 20398u16 | 20399u16 | 20400u16 | 20401u16 | 20402u16 | 20403u16
            | 20404u16 | 20405u16 | 20406u16 | 20407u16 | 20408u16 | 20409u16 | 20410u16
            | 20411u16 | 20412u16 | 20413u16 | 20414u16 | 20415u16 | 20416u16 | 20417u16
            | 20418u16 | 20419u16 | 20420u16 | 20421u16 | 20422u16 | 20423u16 | 20424u16
            | 20425u16 | 20426u16 | 20427u16 | 20428u16 | 20429u16 | 20430u16 | 20431u16
            | 20432u16 | 20433u16 | 20434u16 | 20435u16 | 20436u16 | 20437u16 | 20438u16
            | 20439u16 | 20440u16 | 20441u16 | 20442u16 | 20443u16 | 20444u16 | 20445u16
            | 20446u16 | 20447u16 | 20448u16 | 20449u16 | 20450u16 | 20451u16 | 20452u16
            | 20453u16 | 20454u16 | 20455u16 | 20456u16 | 20457u16 | 20458u16 | 20459u16
            | 20460u16 | 20461u16 | 20462u16 | 20463u16 | 20464u16 | 20465u16 | 20466u16
            | 20467u16 | 20468u16 | 20469u16 | 20470u16 | 20471u16 | 20472u16 | 20473u16
            | 20474u16 | 20475u16 | 20476u16 | 20477u16 | 20478u16 | 20479u16 | 20480u16
            | 20481u16 | 20482u16 | 20483u16 | 20484u16 | 20485u16 | 20486u16 | 20487u16
            | 20488u16 | 20489u16 | 20490u16 | 20491u16 | 20492u16 | 20493u16 | 20494u16
            | 20495u16 | 20496u16 | 20497u16 | 20498u16 | 20499u16 | 20500u16 | 20501u16
            | 20502u16 | 20503u16 | 20504u16 | 20505u16 | 20506u16 | 20507u16 | 20508u16
            | 20509u16 | 20510u16 | 20511u16 | 20512u16 | 20513u16 | 20514u16 | 20515u16
            | 20516u16 | 20517u16 | 20518u16 | 20519u16 | 20520u16 | 20521u16 | 20522u16
            | 20523u16 | 20524u16 | 20525u16 | 20526u16 | 20527u16 | 20528u16 | 20529u16
            | 20530u16 | 20531u16 | 20532u16 | 20533u16 | 20534u16 | 20535u16 | 20536u16
            | 20537u16 | 20538u16 | 20539u16 | 20540u16 | 20541u16 | 20542u16 | 20543u16
            | 20544u16 | 20545u16 | 20546u16 | 20547u16 | 20548u16 | 20549u16 | 20550u16
            | 20551u16 | 20552u16 | 20553u16 | 20554u16 | 20555u16 | 20556u16 | 20557u16
            | 20558u16 | 20559u16 | 20560u16 | 20561u16 | 20562u16 | 20563u16 | 20564u16
            | 20565u16 | 20566u16 | 20567u16 | 20568u16 | 20569u16 | 20570u16 | 20571u16
            | 20572u16 | 20573u16 | 20574u16 | 20575u16 | 20576u16 | 20577u16 | 20578u16
            | 20579u16 | 20580u16 => BlockKind::PolishedBlackstoneWall,
            20581u16 => BlockKind::ChiseledNetherBricks,
            20582u16 => BlockKind::CrackedNetherBricks,
            20583u16 => BlockKind::QuartzBricks,
            20584u16 | 20585u16 | 20586u16 | 20587u16 | 20588u16 | 20589u16 | 20590u16
            | 20591u16 | 20592u16 | 20593u16 | 20594u16 | 20595u16 | 20596u16 | 20597u16
            | 20598u16 | 20599u16 => BlockKind::Candle,
            20600u16 | 20601u16 | 20602u16 | 20603u16 | 20604u16 | 20605u16 | 20606u16
            | 20607u16 | 20608u16 | 20609u16 | 20610u16 | 20611u16 | 20612u16 | 20613u16
            | 20614u16 | 20615u16 => BlockKind::WhiteCandle,
            20616u16 | 20617u16 | 20618u16 | 20619u16 | 20620u16 | 20621u16 | 20622u16
            | 20623u16 | 20624u16 | 20625u16 | 20626u16 | 20627u16 | 20628u16 | 20629u16
            | 20630u16 | 20631u16 => BlockKind::OrangeCandle,
            20632u16 | 20633u16 | 20634u16 | 20635u16 | 20636u16 | 20637u16 | 20638u16
            | 20639u16 | 20640u16 | 20641u16 | 20642u16 | 20643u16 | 20644u16 | 20645u16
            | 20646u16 | 20647u16 => BlockKind::MagentaCandle,
            20648u16 | 20649u16 | 20650u16 | 20651u16 | 20652u16 | 20653u16 | 20654u16
            | 20655u16 | 20656u16 | 20657u16 | 20658u16 | 20659u16 | 20660u16 | 20661u16
            | 20662u16 | 20663u16 => BlockKind::LightBlueCandle,
            20664u16 | 20665u16 | 20666u16 | 20667u16 | 20668u16 | 20669u16 | 20670u16
            | 20671u16 | 20672u16 | 20673u16 | 20674u16 | 20675u16 | 20676u16 | 20677u16
            | 20678u16 | 20679u16 => BlockKind::YellowCandle,
            20680u16 | 20681u16 | 20682u16 | 20683u16 | 20684u16 | 20685u16 | 20686u16
            | 20687u16 | 20688u16 | 20689u16 | 20690u16 | 20691u16 | 20692u16 | 20693u16
            | 20694u16 | 20695u16 => BlockKind::LimeCandle,
            20696u16 | 20697u16 | 20698u16 | 20699u16 | 20700u16 | 20701u16 | 20702u16
            | 20703u16 | 20704u16 | 20705u16 | 20706u16 | 20707u16 | 20708u16 | 20709u16
            | 20710u16 | 20711u16 => BlockKind::PinkCandle,
            20712u16 | 20713u16 | 20714u16 | 20715u16 | 20716u16 | 20717u16 | 20718u16
            | 20719u16 | 20720u16 | 20721u16 | 20722u16 | 20723u16 | 20724u16 | 20725u16
            | 20726u16 | 20727u16 => BlockKind::GrayCandle,
            20728u16 | 20729u16 | 20730u16 | 20731u16 | 20732u16 | 20733u16 | 20734u16
            | 20735u16 | 20736u16 | 20737u16 | 20738u16 | 20739u16 | 20740u16 | 20741u16
            | 20742u16 | 20743u16 => BlockKind::LightGrayCandle,
            20744u16 | 20745u16 | 20746u16 | 20747u16 | 20748u16 | 20749u16 | 20750u16
            | 20751u16 | 20752u16 | 20753u16 | 20754u16 | 20755u16 | 20756u16 | 20757u16
            | 20758u16 | 20759u16 => BlockKind::CyanCandle,
            20760u16 | 20761u16 | 20762u16 | 20763u16 | 20764u16 | 20765u16 | 20766u16
            | 20767u16 | 20768u16 | 20769u16 | 20770u16 | 20771u16 | 20772u16 | 20773u16
            | 20774u16 | 20775u16 => BlockKind::PurpleCandle,
            20776u16 | 20777u16 | 20778u16 | 20779u16 | 20780u16 | 20781u16 | 20782u16
            | 20783u16 | 20784u16 | 20785u16 | 20786u16 | 20787u16 | 20788u16 | 20789u16
            | 20790u16 | 20791u16 => BlockKind::BlueCandle,
            20792u16 | 20793u16 | 20794u16 | 20795u16 | 20796u16 | 20797u16 | 20798u16
            | 20799u16 | 20800u16 | 20801u16 | 20802u16 | 20803u16 | 20804u16 | 20805u16
            | 20806u16 | 20807u16 => BlockKind::BrownCandle,
            20808u16 | 20809u16 | 20810u16 | 20811u16 | 20812u16 | 20813u16 | 20814u16
            | 20815u16 | 20816u16 | 20817u16 | 20818u16 | 20819u16 | 20820u16 | 20821u16
            | 20822u16 | 20823u16 => BlockKind::GreenCandle,
            20824u16 | 20825u16 | 20826u16 | 20827u16 | 20828u16 | 20829u16 | 20830u16
            | 20831u16 | 20832u16 | 20833u16 | 20834u16 | 20835u16 | 20836u16 | 20837u16
            | 20838u16 | 20839u16 => BlockKind::RedCandle,
            20840u16 | 20841u16 | 20842u16 | 20843u16 | 20844u16 | 20845u16 | 20846u16
            | 20847u16 | 20848u16 | 20849u16 | 20850u16 | 20851u16 | 20852u16 | 20853u16
            | 20854u16 | 20855u16 => BlockKind::BlackCandle,
            20856u16 | 20857u16 => BlockKind::CandleCake,
            20858u16 | 20859u16 => BlockKind::WhiteCandleCake,
            20860u16 | 20861u16 => BlockKind::OrangeCandleCake,
            20862u16 | 20863u16 => BlockKind::MagentaCandleCake,
            20864u16 | 20865u16 => BlockKind::LightBlueCandleCake,
            20866u16 | 20867u16 => BlockKind::YellowCandleCake,
            20868u16 | 20869u16 => BlockKind::LimeCandleCake,
            20870u16 | 20871u16 => BlockKind::PinkCandleCake,
            20872u16 | 20873u16 => BlockKind::GrayCandleCake,
            20874u16 | 20875u16 => BlockKind::LightGrayCandleCake,
            20876u16 | 20877u16 => BlockKind::CyanCandleCake,
            20878u16 | 20879u16 => BlockKind::PurpleCandleCake,
            20880u16 | 20881u16 => BlockKind::BlueCandleCake,
            20882u16 | 20883u16 => BlockKind::BrownCandleCake,
            20884u16 | 20885u16 => BlockKind::GreenCandleCake,
            20886u16 | 20887u16 => BlockKind::RedCandleCake,
            20888u16 | 20889u16 => BlockKind::BlackCandleCake,
            20890u16 => BlockKind::AmethystBlock,
            20891u16 => BlockKind::BuddingAmethyst,
            20892u16 | 20893u16 | 20894u16 | 20895u16 | 20896u16 | 20897u16 | 20898u16
            | 20899u16 | 20900u16 | 20901u16 | 20902u16 | 20903u16 => BlockKind::AmethystCluster,
            20904u16 | 20905u16 | 20906u16 | 20907u16 | 20908u16 | 20909u16 | 20910u16
            | 20911u16 | 20912u16 | 20913u16 | 20914u16 | 20915u16 => BlockKind::LargeAmethystBud,
            20916u16 | 20917u16 | 20918u16 | 20919u16 | 20920u16 | 20921u16 | 20922u16
            | 20923u16 | 20924u16 | 20925u16 | 20926u16 | 20927u16 => BlockKind::MediumAmethystBud,
            20928u16 | 20929u16 | 20930u16 | 20931u16 | 20932u16 | 20933u16 | 20934u16
            | 20935u16 | 20936u16 | 20937u16 | 20938u16 | 20939u16 => BlockKind::SmallAmethystBud,
            20940u16 => BlockKind::Tuff,
            20941u16 => BlockKind::Calcite,
            20942u16 => BlockKind::TintedGlass,
            20943u16 => BlockKind::PowderSnow,
            20944u16 | 20945u16 | 20946u16 | 20947u16 | 20948u16 | 20949u16 | 20950u16
            | 20951u16 | 20952u16 | 20953u16 | 20954u16 | 20955u16 | 20956u16 | 20957u16
            | 20958u16 | 20959u16 | 20960u16 | 20961u16 | 20962u16 | 20963u16 | 20964u16
            | 20965u16 | 20966u16 | 20967u16 | 20968u16 | 20969u16 | 20970u16 | 20971u16
            | 20972u16 | 20973u16 | 20974u16 | 20975u16 | 20976u16 | 20977u16 | 20978u16
            | 20979u16 | 20980u16 | 20981u16 | 20982u16 | 20983u16 | 20984u16 | 20985u16
            | 20986u16 | 20987u16 | 20988u16 | 20989u16 | 20990u16 | 20991u16 | 20992u16
            | 20993u16 | 20994u16 | 20995u16 | 20996u16 | 20997u16 | 20998u16 | 20999u16
            | 21000u16 | 21001u16 | 21002u16 | 21003u16 | 21004u16 | 21005u16 | 21006u16
            | 21007u16 | 21008u16 | 21009u16 | 21010u16 | 21011u16 | 21012u16 | 21013u16
            | 21014u16 | 21015u16 | 21016u16 | 21017u16 | 21018u16 | 21019u16 | 21020u16
            | 21021u16 | 21022u16 | 21023u16 | 21024u16 | 21025u16 | 21026u16 | 21027u16
            | 21028u16 | 21029u16 | 21030u16 | 21031u16 | 21032u16 | 21033u16 | 21034u16
            | 21035u16 | 21036u16 | 21037u16 | 21038u16 | 21039u16 => BlockKind::SculkSensor,
            21040u16 | 21041u16 | 21042u16 | 21043u16 | 21044u16 | 21045u16 | 21046u16
            | 21047u16 | 21048u16 | 21049u16 | 21050u16 | 21051u16 | 21052u16 | 21053u16
            | 21054u16 | 21055u16 | 21056u16 | 21057u16 | 21058u16 | 21059u16 | 21060u16
            | 21061u16 | 21062u16 | 21063u16 | 21064u16 | 21065u16 | 21066u16 | 21067u16
            | 21068u16 | 21069u16 | 21070u16 | 21071u16 | 21072u16 | 21073u16 | 21074u16
            | 21075u16 | 21076u16 | 21077u16 | 21078u16 | 21079u16 | 21080u16 | 21081u16
            | 21082u16 | 21083u16 | 21084u16 | 21085u16 | 21086u16 | 21087u16 | 21088u16
            | 21089u16 | 21090u16 | 21091u16 | 21092u16 | 21093u16 | 21094u16 | 21095u16
            | 21096u16 | 21097u16 | 21098u16 | 21099u16 | 21100u16 | 21101u16 | 21102u16
            | 21103u16 | 21104u16 | 21105u16 | 21106u16 | 21107u16 | 21108u16 | 21109u16
            | 21110u16 | 21111u16 | 21112u16 | 21113u16 | 21114u16 | 21115u16 | 21116u16
            | 21117u16 | 21118u16 | 21119u16 | 21120u16 | 21121u16 | 21122u16 | 21123u16
            | 21124u16 | 21125u16 | 21126u16 | 21127u16 | 21128u16 | 21129u16 | 21130u16
            | 21131u16 | 21132u16 | 21133u16 | 21134u16 | 21135u16 | 21136u16 | 21137u16
            | 21138u16 | 21139u16 | 21140u16 | 21141u16 | 21142u16 | 21143u16 | 21144u16
            | 21145u16 | 21146u16 | 21147u16 | 21148u16 | 21149u16 | 21150u16 | 21151u16
            | 21152u16 | 21153u16 | 21154u16 | 21155u16 | 21156u16 | 21157u16 | 21158u16
            | 21159u16 | 21160u16 | 21161u16 | 21162u16 | 21163u16 | 21164u16 | 21165u16
            | 21166u16 | 21167u16 | 21168u16 | 21169u16 | 21170u16 | 21171u16 | 21172u16
            | 21173u16 | 21174u16 | 21175u16 | 21176u16 | 21177u16 | 21178u16 | 21179u16
            | 21180u16 | 21181u16 | 21182u16 | 21183u16 | 21184u16 | 21185u16 | 21186u16
            | 21187u16 | 21188u16 | 21189u16 | 21190u16 | 21191u16 | 21192u16 | 21193u16
            | 21194u16 | 21195u16 | 21196u16 | 21197u16 | 21198u16 | 21199u16 | 21200u16
            | 21201u16 | 21202u16 | 21203u16 | 21204u16 | 21205u16 | 21206u16 | 21207u16
            | 21208u16 | 21209u16 | 21210u16 | 21211u16 | 21212u16 | 21213u16 | 21214u16
            | 21215u16 | 21216u16 | 21217u16 | 21218u16 | 21219u16 | 21220u16 | 21221u16
            | 21222u16 | 21223u16 | 21224u16 | 21225u16 | 21226u16 | 21227u16 | 21228u16
            | 21229u16 | 21230u16 | 21231u16 | 21232u16 | 21233u16 | 21234u16 | 21235u16
            | 21236u16 | 21237u16 | 21238u16 | 21239u16 | 21240u16 | 21241u16 | 21242u16
            | 21243u16 | 21244u16 | 21245u16 | 21246u16 | 21247u16 | 21248u16 | 21249u16
            | 21250u16 | 21251u16 | 21252u16 | 21253u16 | 21254u16 | 21255u16 | 21256u16
            | 21257u16 | 21258u16 | 21259u16 | 21260u16 | 21261u16 | 21262u16 | 21263u16
            | 21264u16 | 21265u16 | 21266u16 | 21267u16 | 21268u16 | 21269u16 | 21270u16
            | 21271u16 | 21272u16 | 21273u16 | 21274u16 | 21275u16 | 21276u16 | 21277u16
            | 21278u16 | 21279u16 | 21280u16 | 21281u16 | 21282u16 | 21283u16 | 21284u16
            | 21285u16 | 21286u16 | 21287u16 | 21288u16 | 21289u16 | 21290u16 | 21291u16
            | 21292u16 | 21293u16 | 21294u16 | 21295u16 | 21296u16 | 21297u16 | 21298u16
            | 21299u16 | 21300u16 | 21301u16 | 21302u16 | 21303u16 | 21304u16 | 21305u16
            | 21306u16 | 21307u16 | 21308u16 | 21309u16 | 21310u16 | 21311u16 | 21312u16
            | 21313u16 | 21314u16 | 21315u16 | 21316u16 | 21317u16 | 21318u16 | 21319u16
            | 21320u16 | 21321u16 | 21322u16 | 21323u16 | 21324u16 | 21325u16 | 21326u16
            | 21327u16 | 21328u16 | 21329u16 | 21330u16 | 21331u16 | 21332u16 | 21333u16
            | 21334u16 | 21335u16 | 21336u16 | 21337u16 | 21338u16 | 21339u16 | 21340u16
            | 21341u16 | 21342u16 | 21343u16 | 21344u16 | 21345u16 | 21346u16 | 21347u16
            | 21348u16 | 21349u16 | 21350u16 | 21351u16 | 21352u16 | 21353u16 | 21354u16
            | 21355u16 | 21356u16 | 21357u16 | 21358u16 | 21359u16 | 21360u16 | 21361u16
            | 21362u16 | 21363u16 | 21364u16 | 21365u16 | 21366u16 | 21367u16 | 21368u16
            | 21369u16 | 21370u16 | 21371u16 | 21372u16 | 21373u16 | 21374u16 | 21375u16
            | 21376u16 | 21377u16 | 21378u16 | 21379u16 | 21380u16 | 21381u16 | 21382u16
            | 21383u16 | 21384u16 | 21385u16 | 21386u16 | 21387u16 | 21388u16 | 21389u16
            | 21390u16 | 21391u16 | 21392u16 | 21393u16 | 21394u16 | 21395u16 | 21396u16
            | 21397u16 | 21398u16 | 21399u16 | 21400u16 | 21401u16 | 21402u16 | 21403u16
            | 21404u16 | 21405u16 | 21406u16 | 21407u16 | 21408u16 | 21409u16 | 21410u16
            | 21411u16 | 21412u16 | 21413u16 | 21414u16 | 21415u16 | 21416u16 | 21417u16
            | 21418u16 | 21419u16 | 21420u16 | 21421u16 | 21422u16 | 21423u16 => {
                BlockKind::CalibratedSculkSensor
            }
            21424u16 => BlockKind::Sculk,
            21425u16 | 21426u16 | 21427u16 | 21428u16 | 21429u16 | 21430u16 | 21431u16
            | 21432u16 | 21433u16 | 21434u16 | 21435u16 | 21436u16 | 21437u16 | 21438u16
            | 21439u16 | 21440u16 | 21441u16 | 21442u16 | 21443u16 | 21444u16 | 21445u16
            | 21446u16 | 21447u16 | 21448u16 | 21449u16 | 21450u16 | 21451u16 | 21452u16
            | 21453u16 | 21454u16 | 21455u16 | 21456u16 | 21457u16 | 21458u16 | 21459u16
            | 21460u16 | 21461u16 | 21462u16 | 21463u16 | 21464u16 | 21465u16 | 21466u16
            | 21467u16 | 21468u16 | 21469u16 | 21470u16 | 21471u16 | 21472u16 | 21473u16
            | 21474u16 | 21475u16 | 21476u16 | 21477u16 | 21478u16 | 21479u16 | 21480u16
            | 21481u16 | 21482u16 | 21483u16 | 21484u16 | 21485u16 | 21486u16 | 21487u16
            | 21488u16 | 21489u16 | 21490u16 | 21491u16 | 21492u16 | 21493u16 | 21494u16
            | 21495u16 | 21496u16 | 21497u16 | 21498u16 | 21499u16 | 21500u16 | 21501u16
            | 21502u16 | 21503u16 | 21504u16 | 21505u16 | 21506u16 | 21507u16 | 21508u16
            | 21509u16 | 21510u16 | 21511u16 | 21512u16 | 21513u16 | 21514u16 | 21515u16
            | 21516u16 | 21517u16 | 21518u16 | 21519u16 | 21520u16 | 21521u16 | 21522u16
            | 21523u16 | 21524u16 | 21525u16 | 21526u16 | 21527u16 | 21528u16 | 21529u16
            | 21530u16 | 21531u16 | 21532u16 | 21533u16 | 21534u16 | 21535u16 | 21536u16
            | 21537u16 | 21538u16 | 21539u16 | 21540u16 | 21541u16 | 21542u16 | 21543u16
            | 21544u16 | 21545u16 | 21546u16 | 21547u16 | 21548u16 | 21549u16 | 21550u16
            | 21551u16 | 21552u16 => BlockKind::SculkVein,
            21553u16 | 21554u16 => BlockKind::SculkCatalyst,
            21555u16 | 21556u16 | 21557u16 | 21558u16 | 21559u16 | 21560u16 | 21561u16
            | 21562u16 => BlockKind::SculkShrieker,
            21563u16 => BlockKind::OxidizedCopper,
            21564u16 => BlockKind::WeatheredCopper,
            21565u16 => BlockKind::ExposedCopper,
            21566u16 => BlockKind::CopperBlock,
            21567u16 => BlockKind::CopperOre,
            21568u16 => BlockKind::DeepslateCopperOre,
            21569u16 => BlockKind::OxidizedCutCopper,
            21570u16 => BlockKind::WeatheredCutCopper,
            21571u16 => BlockKind::ExposedCutCopper,
            21572u16 => BlockKind::CutCopper,
            21573u16 | 21574u16 | 21575u16 | 21576u16 | 21577u16 | 21578u16 | 21579u16
            | 21580u16 | 21581u16 | 21582u16 | 21583u16 | 21584u16 | 21585u16 | 21586u16
            | 21587u16 | 21588u16 | 21589u16 | 21590u16 | 21591u16 | 21592u16 | 21593u16
            | 21594u16 | 21595u16 | 21596u16 | 21597u16 | 21598u16 | 21599u16 | 21600u16
            | 21601u16 | 21602u16 | 21603u16 | 21604u16 | 21605u16 | 21606u16 | 21607u16
            | 21608u16 | 21609u16 | 21610u16 | 21611u16 | 21612u16 | 21613u16 | 21614u16
            | 21615u16 | 21616u16 | 21617u16 | 21618u16 | 21619u16 | 21620u16 | 21621u16
            | 21622u16 | 21623u16 | 21624u16 | 21625u16 | 21626u16 | 21627u16 | 21628u16
            | 21629u16 | 21630u16 | 21631u16 | 21632u16 | 21633u16 | 21634u16 | 21635u16
            | 21636u16 | 21637u16 | 21638u16 | 21639u16 | 21640u16 | 21641u16 | 21642u16
            | 21643u16 | 21644u16 | 21645u16 | 21646u16 | 21647u16 | 21648u16 | 21649u16
            | 21650u16 | 21651u16 | 21652u16 => BlockKind::OxidizedCutCopperStairs,
            21653u16 | 21654u16 | 21655u16 | 21656u16 | 21657u16 | 21658u16 | 21659u16
            | 21660u16 | 21661u16 | 21662u16 | 21663u16 | 21664u16 | 21665u16 | 21666u16
            | 21667u16 | 21668u16 | 21669u16 | 21670u16 | 21671u16 | 21672u16 | 21673u16
            | 21674u16 | 21675u16 | 21676u16 | 21677u16 | 21678u16 | 21679u16 | 21680u16
            | 21681u16 | 21682u16 | 21683u16 | 21684u16 | 21685u16 | 21686u16 | 21687u16
            | 21688u16 | 21689u16 | 21690u16 | 21691u16 | 21692u16 | 21693u16 | 21694u16
            | 21695u16 | 21696u16 | 21697u16 | 21698u16 | 21699u16 | 21700u16 | 21701u16
            | 21702u16 | 21703u16 | 21704u16 | 21705u16 | 21706u16 | 21707u16 | 21708u16
            | 21709u16 | 21710u16 | 21711u16 | 21712u16 | 21713u16 | 21714u16 | 21715u16
            | 21716u16 | 21717u16 | 21718u16 | 21719u16 | 21720u16 | 21721u16 | 21722u16
            | 21723u16 | 21724u16 | 21725u16 | 21726u16 | 21727u16 | 21728u16 | 21729u16
            | 21730u16 | 21731u16 | 21732u16 => BlockKind::WeatheredCutCopperStairs,
            21733u16 | 21734u16 | 21735u16 | 21736u16 | 21737u16 | 21738u16 | 21739u16
            | 21740u16 | 21741u16 | 21742u16 | 21743u16 | 21744u16 | 21745u16 | 21746u16
            | 21747u16 | 21748u16 | 21749u16 | 21750u16 | 21751u16 | 21752u16 | 21753u16
            | 21754u16 | 21755u16 | 21756u16 | 21757u16 | 21758u16 | 21759u16 | 21760u16
            | 21761u16 | 21762u16 | 21763u16 | 21764u16 | 21765u16 | 21766u16 | 21767u16
            | 21768u16 | 21769u16 | 21770u16 | 21771u16 | 21772u16 | 21773u16 | 21774u16
            | 21775u16 | 21776u16 | 21777u16 | 21778u16 | 21779u16 | 21780u16 | 21781u16
            | 21782u16 | 21783u16 | 21784u16 | 21785u16 | 21786u16 | 21787u16 | 21788u16
            | 21789u16 | 21790u16 | 21791u16 | 21792u16 | 21793u16 | 21794u16 | 21795u16
            | 21796u16 | 21797u16 | 21798u16 | 21799u16 | 21800u16 | 21801u16 | 21802u16
            | 21803u16 | 21804u16 | 21805u16 | 21806u16 | 21807u16 | 21808u16 | 21809u16
            | 21810u16 | 21811u16 | 21812u16 => BlockKind::ExposedCutCopperStairs,
            21813u16 | 21814u16 | 21815u16 | 21816u16 | 21817u16 | 21818u16 | 21819u16
            | 21820u16 | 21821u16 | 21822u16 | 21823u16 | 21824u16 | 21825u16 | 21826u16
            | 21827u16 | 21828u16 | 21829u16 | 21830u16 | 21831u16 | 21832u16 | 21833u16
            | 21834u16 | 21835u16 | 21836u16 | 21837u16 | 21838u16 | 21839u16 | 21840u16
            | 21841u16 | 21842u16 | 21843u16 | 21844u16 | 21845u16 | 21846u16 | 21847u16
            | 21848u16 | 21849u16 | 21850u16 | 21851u16 | 21852u16 | 21853u16 | 21854u16
            | 21855u16 | 21856u16 | 21857u16 | 21858u16 | 21859u16 | 21860u16 | 21861u16
            | 21862u16 | 21863u16 | 21864u16 | 21865u16 | 21866u16 | 21867u16 | 21868u16
            | 21869u16 | 21870u16 | 21871u16 | 21872u16 | 21873u16 | 21874u16 | 21875u16
            | 21876u16 | 21877u16 | 21878u16 | 21879u16 | 21880u16 | 21881u16 | 21882u16
            | 21883u16 | 21884u16 | 21885u16 | 21886u16 | 21887u16 | 21888u16 | 21889u16
            | 21890u16 | 21891u16 | 21892u16 => BlockKind::CutCopperStairs,
            21893u16 | 21894u16 | 21895u16 | 21896u16 | 21897u16 | 21898u16 => {
                BlockKind::OxidizedCutCopperSlab
            }
            21899u16 | 21900u16 | 21901u16 | 21902u16 | 21903u16 | 21904u16 => {
                BlockKind::WeatheredCutCopperSlab
            }
            21905u16 | 21906u16 | 21907u16 | 21908u16 | 21909u16 | 21910u16 => {
                BlockKind::ExposedCutCopperSlab
            }
            21911u16 | 21912u16 | 21913u16 | 21914u16 | 21915u16 | 21916u16 => {
                BlockKind::CutCopperSlab
            }
            21917u16 => BlockKind::WaxedCopperBlock,
            21918u16 => BlockKind::WaxedWeatheredCopper,
            21919u16 => BlockKind::WaxedExposedCopper,
            21920u16 => BlockKind::WaxedOxidizedCopper,
            21921u16 => BlockKind::WaxedOxidizedCutCopper,
            21922u16 => BlockKind::WaxedWeatheredCutCopper,
            21923u16 => BlockKind::WaxedExposedCutCopper,
            21924u16 => BlockKind::WaxedCutCopper,
            21925u16 | 21926u16 | 21927u16 | 21928u16 | 21929u16 | 21930u16 | 21931u16
            | 21932u16 | 21933u16 | 21934u16 | 21935u16 | 21936u16 | 21937u16 | 21938u16
            | 21939u16 | 21940u16 | 21941u16 | 21942u16 | 21943u16 | 21944u16 | 21945u16
            | 21946u16 | 21947u16 | 21948u16 | 21949u16 | 21950u16 | 21951u16 | 21952u16
            | 21953u16 | 21954u16 | 21955u16 | 21956u16 | 21957u16 | 21958u16 | 21959u16
            | 21960u16 | 21961u16 | 21962u16 | 21963u16 | 21964u16 | 21965u16 | 21966u16
            | 21967u16 | 21968u16 | 21969u16 | 21970u16 | 21971u16 | 21972u16 | 21973u16
            | 21974u16 | 21975u16 | 21976u16 | 21977u16 | 21978u16 | 21979u16 | 21980u16
            | 21981u16 | 21982u16 | 21983u16 | 21984u16 | 21985u16 | 21986u16 | 21987u16
            | 21988u16 | 21989u16 | 21990u16 | 21991u16 | 21992u16 | 21993u16 | 21994u16
            | 21995u16 | 21996u16 | 21997u16 | 21998u16 | 21999u16 | 22000u16 | 22001u16
            | 22002u16 | 22003u16 | 22004u16 => BlockKind::WaxedOxidizedCutCopperStairs,
            22005u16 | 22006u16 | 22007u16 | 22008u16 | 22009u16 | 22010u16 | 22011u16
            | 22012u16 | 22013u16 | 22014u16 | 22015u16 | 22016u16 | 22017u16 | 22018u16
            | 22019u16 | 22020u16 | 22021u16 | 22022u16 | 22023u16 | 22024u16 | 22025u16
            | 22026u16 | 22027u16 | 22028u16 | 22029u16 | 22030u16 | 22031u16 | 22032u16
            | 22033u16 | 22034u16 | 22035u16 | 22036u16 | 22037u16 | 22038u16 | 22039u16
            | 22040u16 | 22041u16 | 22042u16 | 22043u16 | 22044u16 | 22045u16 | 22046u16
            | 22047u16 | 22048u16 | 22049u16 | 22050u16 | 22051u16 | 22052u16 | 22053u16
            | 22054u16 | 22055u16 | 22056u16 | 22057u16 | 22058u16 | 22059u16 | 22060u16
            | 22061u16 | 22062u16 | 22063u16 | 22064u16 | 22065u16 | 22066u16 | 22067u16
            | 22068u16 | 22069u16 | 22070u16 | 22071u16 | 22072u16 | 22073u16 | 22074u16
            | 22075u16 | 22076u16 | 22077u16 | 22078u16 | 22079u16 | 22080u16 | 22081u16
            | 22082u16 | 22083u16 | 22084u16 => BlockKind::WaxedWeatheredCutCopperStairs,
            22085u16 | 22086u16 | 22087u16 | 22088u16 | 22089u16 | 22090u16 | 22091u16
            | 22092u16 | 22093u16 | 22094u16 | 22095u16 | 22096u16 | 22097u16 | 22098u16
            | 22099u16 | 22100u16 | 22101u16 | 22102u16 | 22103u16 | 22104u16 | 22105u16
            | 22106u16 | 22107u16 | 22108u16 | 22109u16 | 22110u16 | 22111u16 | 22112u16
            | 22113u16 | 22114u16 | 22115u16 | 22116u16 | 22117u16 | 22118u16 | 22119u16
            | 22120u16 | 22121u16 | 22122u16 | 22123u16 | 22124u16 | 22125u16 | 22126u16
            | 22127u16 | 22128u16 | 22129u16 | 22130u16 | 22131u16 | 22132u16 | 22133u16
            | 22134u16 | 22135u16 | 22136u16 | 22137u16 | 22138u16 | 22139u16 | 22140u16
            | 22141u16 | 22142u16 | 22143u16 | 22144u16 | 22145u16 | 22146u16 | 22147u16
            | 22148u16 | 22149u16 | 22150u16 | 22151u16 | 22152u16 | 22153u16 | 22154u16
            | 22155u16 | 22156u16 | 22157u16 | 22158u16 | 22159u16 | 22160u16 | 22161u16
            | 22162u16 | 22163u16 | 22164u16 => BlockKind::WaxedExposedCutCopperStairs,
            22165u16 | 22166u16 | 22167u16 | 22168u16 | 22169u16 | 22170u16 | 22171u16
            | 22172u16 | 22173u16 | 22174u16 | 22175u16 | 22176u16 | 22177u16 | 22178u16
            | 22179u16 | 22180u16 | 22181u16 | 22182u16 | 22183u16 | 22184u16 | 22185u16
            | 22186u16 | 22187u16 | 22188u16 | 22189u16 | 22190u16 | 22191u16 | 22192u16
            | 22193u16 | 22194u16 | 22195u16 | 22196u16 | 22197u16 | 22198u16 | 22199u16
            | 22200u16 | 22201u16 | 22202u16 | 22203u16 | 22204u16 | 22205u16 | 22206u16
            | 22207u16 | 22208u16 | 22209u16 | 22210u16 | 22211u16 | 22212u16 | 22213u16
            | 22214u16 | 22215u16 | 22216u16 | 22217u16 | 22218u16 | 22219u16 | 22220u16
            | 22221u16 | 22222u16 | 22223u16 | 22224u16 | 22225u16 | 22226u16 | 22227u16
            | 22228u16 | 22229u16 | 22230u16 | 22231u16 | 22232u16 | 22233u16 | 22234u16
            | 22235u16 | 22236u16 | 22237u16 | 22238u16 | 22239u16 | 22240u16 | 22241u16
            | 22242u16 | 22243u16 | 22244u16 => BlockKind::WaxedCutCopperStairs,
            22245u16 | 22246u16 | 22247u16 | 22248u16 | 22249u16 | 22250u16 => {
                BlockKind::WaxedOxidizedCutCopperSlab
            }
            22251u16 | 22252u16 | 22253u16 | 22254u16 | 22255u16 | 22256u16 => {
                BlockKind::WaxedWeatheredCutCopperSlab
            }
            22257u16 | 22258u16 | 22259u16 | 22260u16 | 22261u16 | 22262u16 => {
                BlockKind::WaxedExposedCutCopperSlab
            }
            22263u16 | 22264u16 | 22265u16 | 22266u16 | 22267u16 | 22268u16 => {
                BlockKind::WaxedCutCopperSlab
            }
            22269u16 | 22270u16 | 22271u16 | 22272u16 | 22273u16 | 22274u16 | 22275u16
            | 22276u16 | 22277u16 | 22278u16 | 22279u16 | 22280u16 | 22281u16 | 22282u16
            | 22283u16 | 22284u16 | 22285u16 | 22286u16 | 22287u16 | 22288u16 | 22289u16
            | 22290u16 | 22291u16 | 22292u16 => BlockKind::LightningRod,
            22293u16 | 22294u16 | 22295u16 | 22296u16 | 22297u16 | 22298u16 | 22299u16
            | 22300u16 | 22301u16 | 22302u16 | 22303u16 | 22304u16 | 22305u16 | 22306u16
            | 22307u16 | 22308u16 | 22309u16 | 22310u16 | 22311u16 | 22312u16 => {
                BlockKind::PointedDripstone
            }
            22313u16 => BlockKind::DripstoneBlock,
            22314u16 | 22315u16 | 22316u16 | 22317u16 | 22318u16 | 22319u16 | 22320u16
            | 22321u16 | 22322u16 | 22323u16 | 22324u16 | 22325u16 | 22326u16 | 22327u16
            | 22328u16 | 22329u16 | 22330u16 | 22331u16 | 22332u16 | 22333u16 | 22334u16
            | 22335u16 | 22336u16 | 22337u16 | 22338u16 | 22339u16 | 22340u16 | 22341u16
            | 22342u16 | 22343u16 | 22344u16 | 22345u16 | 22346u16 | 22347u16 | 22348u16
            | 22349u16 | 22350u16 | 22351u16 | 22352u16 | 22353u16 | 22354u16 | 22355u16
            | 22356u16 | 22357u16 | 22358u16 | 22359u16 | 22360u16 | 22361u16 | 22362u16
            | 22363u16 | 22364u16 | 22365u16 => BlockKind::CaveVines,
            22366u16 | 22367u16 => BlockKind::CaveVinesPlant,
            22368u16 => BlockKind::SporeBlossom,
            22369u16 => BlockKind::Azalea,
            22370u16 => BlockKind::FloweringAzalea,
            22371u16 => BlockKind::MossCarpet,
            22372u16 | 22373u16 | 22374u16 | 22375u16 | 22376u16 | 22377u16 | 22378u16
            | 22379u16 | 22380u16 | 22381u16 | 22382u16 | 22383u16 | 22384u16 | 22385u16
            | 22386u16 | 22387u16 => BlockKind::PinkPetals,
            22388u16 => BlockKind::MossBlock,
            22389u16 | 22390u16 | 22391u16 | 22392u16 | 22393u16 | 22394u16 | 22395u16
            | 22396u16 | 22397u16 | 22398u16 | 22399u16 | 22400u16 | 22401u16 | 22402u16
            | 22403u16 | 22404u16 | 22405u16 | 22406u16 | 22407u16 | 22408u16 | 22409u16
            | 22410u16 | 22411u16 | 22412u16 | 22413u16 | 22414u16 | 22415u16 | 22416u16
            | 22417u16 | 22418u16 | 22419u16 | 22420u16 => BlockKind::BigDripleaf,
            22421u16 | 22422u16 | 22423u16 | 22424u16 | 22425u16 | 22426u16 | 22427u16
            | 22428u16 => BlockKind::BigDripleafStem,
            22429u16 | 22430u16 | 22431u16 | 22432u16 | 22433u16 | 22434u16 | 22435u16
            | 22436u16 | 22437u16 | 22438u16 | 22439u16 | 22440u16 | 22441u16 | 22442u16
            | 22443u16 | 22444u16 => BlockKind::SmallDripleaf,
            22445u16 | 22446u16 => BlockKind::HangingRoots,
            22447u16 => BlockKind::RootedDirt,
            22448u16 => BlockKind::Mud,
            22449u16 | 22450u16 | 22451u16 => BlockKind::Deepslate,
            22452u16 => BlockKind::CobbledDeepslate,
            22453u16 | 22454u16 | 22455u16 | 22456u16 | 22457u16 | 22458u16 | 22459u16
            | 22460u16 | 22461u16 | 22462u16 | 22463u16 | 22464u16 | 22465u16 | 22466u16
            | 22467u16 | 22468u16 | 22469u16 | 22470u16 | 22471u16 | 22472u16 | 22473u16
            | 22474u16 | 22475u16 | 22476u16 | 22477u16 | 22478u16 | 22479u16 | 22480u16
            | 22481u16 | 22482u16 | 22483u16 | 22484u16 | 22485u16 | 22486u16 | 22487u16
            | 22488u16 | 22489u16 | 22490u16 | 22491u16 | 22492u16 | 22493u16 | 22494u16
            | 22495u16 | 22496u16 | 22497u16 | 22498u16 | 22499u16 | 22500u16 | 22501u16
            | 22502u16 | 22503u16 | 22504u16 | 22505u16 | 22506u16 | 22507u16 | 22508u16
            | 22509u16 | 22510u16 | 22511u16 | 22512u16 | 22513u16 | 22514u16 | 22515u16
            | 22516u16 | 22517u16 | 22518u16 | 22519u16 | 22520u16 | 22521u16 | 22522u16
            | 22523u16 | 22524u16 | 22525u16 | 22526u16 | 22527u16 | 22528u16 | 22529u16
            | 22530u16 | 22531u16 | 22532u16 => BlockKind::CobbledDeepslateStairs,
            22533u16 | 22534u16 | 22535u16 | 22536u16 | 22537u16 | 22538u16 => {
                BlockKind::CobbledDeepslateSlab
            }
            22539u16 | 22540u16 | 22541u16 | 22542u16 | 22543u16 | 22544u16 | 22545u16
            | 22546u16 | 22547u16 | 22548u16 | 22549u16 | 22550u16 | 22551u16 | 22552u16
            | 22553u16 | 22554u16 | 22555u16 | 22556u16 | 22557u16 | 22558u16 | 22559u16
            | 22560u16 | 22561u16 | 22562u16 | 22563u16 | 22564u16 | 22565u16 | 22566u16
            | 22567u16 | 22568u16 | 22569u16 | 22570u16 | 22571u16 | 22572u16 | 22573u16
            | 22574u16 | 22575u16 | 22576u16 | 22577u16 | 22578u16 | 22579u16 | 22580u16
            | 22581u16 | 22582u16 | 22583u16 | 22584u16 | 22585u16 | 22586u16 | 22587u16
            | 22588u16 | 22589u16 | 22590u16 | 22591u16 | 22592u16 | 22593u16 | 22594u16
            | 22595u16 | 22596u16 | 22597u16 | 22598u16 | 22599u16 | 22600u16 | 22601u16
            | 22602u16 | 22603u16 | 22604u16 | 22605u16 | 22606u16 | 22607u16 | 22608u16
            | 22609u16 | 22610u16 | 22611u16 | 22612u16 | 22613u16 | 22614u16 | 22615u16
            | 22616u16 | 22617u16 | 22618u16 | 22619u16 | 22620u16 | 22621u16 | 22622u16
            | 22623u16 | 22624u16 | 22625u16 | 22626u16 | 22627u16 | 22628u16 | 22629u16
            | 22630u16 | 22631u16 | 22632u16 | 22633u16 | 22634u16 | 22635u16 | 22636u16
            | 22637u16 | 22638u16 | 22639u16 | 22640u16 | 22641u16 | 22642u16 | 22643u16
            | 22644u16 | 22645u16 | 22646u16 | 22647u16 | 22648u16 | 22649u16 | 22650u16
            | 22651u16 | 22652u16 | 22653u16 | 22654u16 | 22655u16 | 22656u16 | 22657u16
            | 22658u16 | 22659u16 | 22660u16 | 22661u16 | 22662u16 | 22663u16 | 22664u16
            | 22665u16 | 22666u16 | 22667u16 | 22668u16 | 22669u16 | 22670u16 | 22671u16
            | 22672u16 | 22673u16 | 22674u16 | 22675u16 | 22676u16 | 22677u16 | 22678u16
            | 22679u16 | 22680u16 | 22681u16 | 22682u16 | 22683u16 | 22684u16 | 22685u16
            | 22686u16 | 22687u16 | 22688u16 | 22689u16 | 22690u16 | 22691u16 | 22692u16
            | 22693u16 | 22694u16 | 22695u16 | 22696u16 | 22697u16 | 22698u16 | 22699u16
            | 22700u16 | 22701u16 | 22702u16 | 22703u16 | 22704u16 | 22705u16 | 22706u16
            | 22707u16 | 22708u16 | 22709u16 | 22710u16 | 22711u16 | 22712u16 | 22713u16
            | 22714u16 | 22715u16 | 22716u16 | 22717u16 | 22718u16 | 22719u16 | 22720u16
            | 22721u16 | 22722u16 | 22723u16 | 22724u16 | 22725u16 | 22726u16 | 22727u16
            | 22728u16 | 22729u16 | 22730u16 | 22731u16 | 22732u16 | 22733u16 | 22734u16
            | 22735u16 | 22736u16 | 22737u16 | 22738u16 | 22739u16 | 22740u16 | 22741u16
            | 22742u16 | 22743u16 | 22744u16 | 22745u16 | 22746u16 | 22747u16 | 22748u16
            | 22749u16 | 22750u16 | 22751u16 | 22752u16 | 22753u16 | 22754u16 | 22755u16
            | 22756u16 | 22757u16 | 22758u16 | 22759u16 | 22760u16 | 22761u16 | 22762u16
            | 22763u16 | 22764u16 | 22765u16 | 22766u16 | 22767u16 | 22768u16 | 22769u16
            | 22770u16 | 22771u16 | 22772u16 | 22773u16 | 22774u16 | 22775u16 | 22776u16
            | 22777u16 | 22778u16 | 22779u16 | 22780u16 | 22781u16 | 22782u16 | 22783u16
            | 22784u16 | 22785u16 | 22786u16 | 22787u16 | 22788u16 | 22789u16 | 22790u16
            | 22791u16 | 22792u16 | 22793u16 | 22794u16 | 22795u16 | 22796u16 | 22797u16
            | 22798u16 | 22799u16 | 22800u16 | 22801u16 | 22802u16 | 22803u16 | 22804u16
            | 22805u16 | 22806u16 | 22807u16 | 22808u16 | 22809u16 | 22810u16 | 22811u16
            | 22812u16 | 22813u16 | 22814u16 | 22815u16 | 22816u16 | 22817u16 | 22818u16
            | 22819u16 | 22820u16 | 22821u16 | 22822u16 | 22823u16 | 22824u16 | 22825u16
            | 22826u16 | 22827u16 | 22828u16 | 22829u16 | 22830u16 | 22831u16 | 22832u16
            | 22833u16 | 22834u16 | 22835u16 | 22836u16 | 22837u16 | 22838u16 | 22839u16
            | 22840u16 | 22841u16 | 22842u16 | 22843u16 | 22844u16 | 22845u16 | 22846u16
            | 22847u16 | 22848u16 | 22849u16 | 22850u16 | 22851u16 | 22852u16 | 22853u16
            | 22854u16 | 22855u16 | 22856u16 | 22857u16 | 22858u16 | 22859u16 | 22860u16
            | 22861u16 | 22862u16 => BlockKind::CobbledDeepslateWall,
            22863u16 => BlockKind::PolishedDeepslate,
            22864u16 | 22865u16 | 22866u16 | 22867u16 | 22868u16 | 22869u16 | 22870u16
            | 22871u16 | 22872u16 | 22873u16 | 22874u16 | 22875u16 | 22876u16 | 22877u16
            | 22878u16 | 22879u16 | 22880u16 | 22881u16 | 22882u16 | 22883u16 | 22884u16
            | 22885u16 | 22886u16 | 22887u16 | 22888u16 | 22889u16 | 22890u16 | 22891u16
            | 22892u16 | 22893u16 | 22894u16 | 22895u16 | 22896u16 | 22897u16 | 22898u16
            | 22899u16 | 22900u16 | 22901u16 | 22902u16 | 22903u16 | 22904u16 | 22905u16
            | 22906u16 | 22907u16 | 22908u16 | 22909u16 | 22910u16 | 22911u16 | 22912u16
            | 22913u16 | 22914u16 | 22915u16 | 22916u16 | 22917u16 | 22918u16 | 22919u16
            | 22920u16 | 22921u16 | 22922u16 | 22923u16 | 22924u16 | 22925u16 | 22926u16
            | 22927u16 | 22928u16 | 22929u16 | 22930u16 | 22931u16 | 22932u16 | 22933u16
            | 22934u16 | 22935u16 | 22936u16 | 22937u16 | 22938u16 | 22939u16 | 22940u16
            | 22941u16 | 22942u16 | 22943u16 => BlockKind::PolishedDeepslateStairs,
            22944u16 | 22945u16 | 22946u16 | 22947u16 | 22948u16 | 22949u16 => {
                BlockKind::PolishedDeepslateSlab
            }
            22950u16 | 22951u16 | 22952u16 | 22953u16 | 22954u16 | 22955u16 | 22956u16
            | 22957u16 | 22958u16 | 22959u16 | 22960u16 | 22961u16 | 22962u16 | 22963u16
            | 22964u16 | 22965u16 | 22966u16 | 22967u16 | 22968u16 | 22969u16 | 22970u16
            | 22971u16 | 22972u16 | 22973u16 | 22974u16 | 22975u16 | 22976u16 | 22977u16
            | 22978u16 | 22979u16 | 22980u16 | 22981u16 | 22982u16 | 22983u16 | 22984u16
            | 22985u16 | 22986u16 | 22987u16 | 22988u16 | 22989u16 | 22990u16 | 22991u16
            | 22992u16 | 22993u16 | 22994u16 | 22995u16 | 22996u16 | 22997u16 | 22998u16
            | 22999u16 | 23000u16 | 23001u16 | 23002u16 | 23003u16 | 23004u16 | 23005u16
            | 23006u16 | 23007u16 | 23008u16 | 23009u16 | 23010u16 | 23011u16 | 23012u16
            | 23013u16 | 23014u16 | 23015u16 | 23016u16 | 23017u16 | 23018u16 | 23019u16
            | 23020u16 | 23021u16 | 23022u16 | 23023u16 | 23024u16 | 23025u16 | 23026u16
            | 23027u16 | 23028u16 | 23029u16 | 23030u16 | 23031u16 | 23032u16 | 23033u16
            | 23034u16 | 23035u16 | 23036u16 | 23037u16 | 23038u16 | 23039u16 | 23040u16
            | 23041u16 | 23042u16 | 23043u16 | 23044u16 | 23045u16 | 23046u16 | 23047u16
            | 23048u16 | 23049u16 | 23050u16 | 23051u16 | 23052u16 | 23053u16 | 23054u16
            | 23055u16 | 23056u16 | 23057u16 | 23058u16 | 23059u16 | 23060u16 | 23061u16
            | 23062u16 | 23063u16 | 23064u16 | 23065u16 | 23066u16 | 23067u16 | 23068u16
            | 23069u16 | 23070u16 | 23071u16 | 23072u16 | 23073u16 | 23074u16 | 23075u16
            | 23076u16 | 23077u16 | 23078u16 | 23079u16 | 23080u16 | 23081u16 | 23082u16
            | 23083u16 | 23084u16 | 23085u16 | 23086u16 | 23087u16 | 23088u16 | 23089u16
            | 23090u16 | 23091u16 | 23092u16 | 23093u16 | 23094u16 | 23095u16 | 23096u16
            | 23097u16 | 23098u16 | 23099u16 | 23100u16 | 23101u16 | 23102u16 | 23103u16
            | 23104u16 | 23105u16 | 23106u16 | 23107u16 | 23108u16 | 23109u16 | 23110u16
            | 23111u16 | 23112u16 | 23113u16 | 23114u16 | 23115u16 | 23116u16 | 23117u16
            | 23118u16 | 23119u16 | 23120u16 | 23121u16 | 23122u16 | 23123u16 | 23124u16
            | 23125u16 | 23126u16 | 23127u16 | 23128u16 | 23129u16 | 23130u16 | 23131u16
            | 23132u16 | 23133u16 | 23134u16 | 23135u16 | 23136u16 | 23137u16 | 23138u16
            | 23139u16 | 23140u16 | 23141u16 | 23142u16 | 23143u16 | 23144u16 | 23145u16
            | 23146u16 | 23147u16 | 23148u16 | 23149u16 | 23150u16 | 23151u16 | 23152u16
            | 23153u16 | 23154u16 | 23155u16 | 23156u16 | 23157u16 | 23158u16 | 23159u16
            | 23160u16 | 23161u16 | 23162u16 | 23163u16 | 23164u16 | 23165u16 | 23166u16
            | 23167u16 | 23168u16 | 23169u16 | 23170u16 | 23171u16 | 23172u16 | 23173u16
            | 23174u16 | 23175u16 | 23176u16 | 23177u16 | 23178u16 | 23179u16 | 23180u16
            | 23181u16 | 23182u16 | 23183u16 | 23184u16 | 23185u16 | 23186u16 | 23187u16
            | 23188u16 | 23189u16 | 23190u16 | 23191u16 | 23192u16 | 23193u16 | 23194u16
            | 23195u16 | 23196u16 | 23197u16 | 23198u16 | 23199u16 | 23200u16 | 23201u16
            | 23202u16 | 23203u16 | 23204u16 | 23205u16 | 23206u16 | 23207u16 | 23208u16
            | 23209u16 | 23210u16 | 23211u16 | 23212u16 | 23213u16 | 23214u16 | 23215u16
            | 23216u16 | 23217u16 | 23218u16 | 23219u16 | 23220u16 | 23221u16 | 23222u16
            | 23223u16 | 23224u16 | 23225u16 | 23226u16 | 23227u16 | 23228u16 | 23229u16
            | 23230u16 | 23231u16 | 23232u16 | 23233u16 | 23234u16 | 23235u16 | 23236u16
            | 23237u16 | 23238u16 | 23239u16 | 23240u16 | 23241u16 | 23242u16 | 23243u16
            | 23244u16 | 23245u16 | 23246u16 | 23247u16 | 23248u16 | 23249u16 | 23250u16
            | 23251u16 | 23252u16 | 23253u16 | 23254u16 | 23255u16 | 23256u16 | 23257u16
            | 23258u16 | 23259u16 | 23260u16 | 23261u16 | 23262u16 | 23263u16 | 23264u16
            | 23265u16 | 23266u16 | 23267u16 | 23268u16 | 23269u16 | 23270u16 | 23271u16
            | 23272u16 | 23273u16 => BlockKind::PolishedDeepslateWall,
            23274u16 => BlockKind::DeepslateTiles,
            23275u16 | 23276u16 | 23277u16 | 23278u16 | 23279u16 | 23280u16 | 23281u16
            | 23282u16 | 23283u16 | 23284u16 | 23285u16 | 23286u16 | 23287u16 | 23288u16
            | 23289u16 | 23290u16 | 23291u16 | 23292u16 | 23293u16 | 23294u16 | 23295u16
            | 23296u16 | 23297u16 | 23298u16 | 23299u16 | 23300u16 | 23301u16 | 23302u16
            | 23303u16 | 23304u16 | 23305u16 | 23306u16 | 23307u16 | 23308u16 | 23309u16
            | 23310u16 | 23311u16 | 23312u16 | 23313u16 | 23314u16 | 23315u16 | 23316u16
            | 23317u16 | 23318u16 | 23319u16 | 23320u16 | 23321u16 | 23322u16 | 23323u16
            | 23324u16 | 23325u16 | 23326u16 | 23327u16 | 23328u16 | 23329u16 | 23330u16
            | 23331u16 | 23332u16 | 23333u16 | 23334u16 | 23335u16 | 23336u16 | 23337u16
            | 23338u16 | 23339u16 | 23340u16 | 23341u16 | 23342u16 | 23343u16 | 23344u16
            | 23345u16 | 23346u16 | 23347u16 | 23348u16 | 23349u16 | 23350u16 | 23351u16
            | 23352u16 | 23353u16 | 23354u16 => BlockKind::DeepslateTileStairs,
            23355u16 | 23356u16 | 23357u16 | 23358u16 | 23359u16 | 23360u16 => {
                BlockKind::DeepslateTileSlab
            }
            23361u16 | 23362u16 | 23363u16 | 23364u16 | 23365u16 | 23366u16 | 23367u16
            | 23368u16 | 23369u16 | 23370u16 | 23371u16 | 23372u16 | 23373u16 | 23374u16
            | 23375u16 | 23376u16 | 23377u16 | 23378u16 | 23379u16 | 23380u16 | 23381u16
            | 23382u16 | 23383u16 | 23384u16 | 23385u16 | 23386u16 | 23387u16 | 23388u16
            | 23389u16 | 23390u16 | 23391u16 | 23392u16 | 23393u16 | 23394u16 | 23395u16
            | 23396u16 | 23397u16 | 23398u16 | 23399u16 | 23400u16 | 23401u16 | 23402u16
            | 23403u16 | 23404u16 | 23405u16 | 23406u16 | 23407u16 | 23408u16 | 23409u16
            | 23410u16 | 23411u16 | 23412u16 | 23413u16 | 23414u16 | 23415u16 | 23416u16
            | 23417u16 | 23418u16 | 23419u16 | 23420u16 | 23421u16 | 23422u16 | 23423u16
            | 23424u16 | 23425u16 | 23426u16 | 23427u16 | 23428u16 | 23429u16 | 23430u16
            | 23431u16 | 23432u16 | 23433u16 | 23434u16 | 23435u16 | 23436u16 | 23437u16
            | 23438u16 | 23439u16 | 23440u16 | 23441u16 | 23442u16 | 23443u16 | 23444u16
            | 23445u16 | 23446u16 | 23447u16 | 23448u16 | 23449u16 | 23450u16 | 23451u16
            | 23452u16 | 23453u16 | 23454u16 | 23455u16 | 23456u16 | 23457u16 | 23458u16
            | 23459u16 | 23460u16 | 23461u16 | 23462u16 | 23463u16 | 23464u16 | 23465u16
            | 23466u16 | 23467u16 | 23468u16 | 23469u16 | 23470u16 | 23471u16 | 23472u16
            | 23473u16 | 23474u16 | 23475u16 | 23476u16 | 23477u16 | 23478u16 | 23479u16
            | 23480u16 | 23481u16 | 23482u16 | 23483u16 | 23484u16 | 23485u16 | 23486u16
            | 23487u16 | 23488u16 | 23489u16 | 23490u16 | 23491u16 | 23492u16 | 23493u16
            | 23494u16 | 23495u16 | 23496u16 | 23497u16 | 23498u16 | 23499u16 | 23500u16
            | 23501u16 | 23502u16 | 23503u16 | 23504u16 | 23505u16 | 23506u16 | 23507u16
            | 23508u16 | 23509u16 | 23510u16 | 23511u16 | 23512u16 | 23513u16 | 23514u16
            | 23515u16 | 23516u16 | 23517u16 | 23518u16 | 23519u16 | 23520u16 | 23521u16
            | 23522u16 | 23523u16 | 23524u16 | 23525u16 | 23526u16 | 23527u16 | 23528u16
            | 23529u16 | 23530u16 | 23531u16 | 23532u16 | 23533u16 | 23534u16 | 23535u16
            | 23536u16 | 23537u16 | 23538u16 | 23539u16 | 23540u16 | 23541u16 | 23542u16
            | 23543u16 | 23544u16 | 23545u16 | 23546u16 | 23547u16 | 23548u16 | 23549u16
            | 23550u16 | 23551u16 | 23552u16 | 23553u16 | 23554u16 | 23555u16 | 23556u16
            | 23557u16 | 23558u16 | 23559u16 | 23560u16 | 23561u16 | 23562u16 | 23563u16
            | 23564u16 | 23565u16 | 23566u16 | 23567u16 | 23568u16 | 23569u16 | 23570u16
            | 23571u16 | 23572u16 | 23573u16 | 23574u16 | 23575u16 | 23576u16 | 23577u16
            | 23578u16 | 23579u16 | 23580u16 | 23581u16 | 23582u16 | 23583u16 | 23584u16
            | 23585u16 | 23586u16 | 23587u16 | 23588u16 | 23589u16 | 23590u16 | 23591u16
            | 23592u16 | 23593u16 | 23594u16 | 23595u16 | 23596u16 | 23597u16 | 23598u16
            | 23599u16 | 23600u16 | 23601u16 | 23602u16 | 23603u16 | 23604u16 | 23605u16
            | 23606u16 | 23607u16 | 23608u16 | 23609u16 | 23610u16 | 23611u16 | 23612u16
            | 23613u16 | 23614u16 | 23615u16 | 23616u16 | 23617u16 | 23618u16 | 23619u16
            | 23620u16 | 23621u16 | 23622u16 | 23623u16 | 23624u16 | 23625u16 | 23626u16
            | 23627u16 | 23628u16 | 23629u16 | 23630u16 | 23631u16 | 23632u16 | 23633u16
            | 23634u16 | 23635u16 | 23636u16 | 23637u16 | 23638u16 | 23639u16 | 23640u16
            | 23641u16 | 23642u16 | 23643u16 | 23644u16 | 23645u16 | 23646u16 | 23647u16
            | 23648u16 | 23649u16 | 23650u16 | 23651u16 | 23652u16 | 23653u16 | 23654u16
            | 23655u16 | 23656u16 | 23657u16 | 23658u16 | 23659u16 | 23660u16 | 23661u16
            | 23662u16 | 23663u16 | 23664u16 | 23665u16 | 23666u16 | 23667u16 | 23668u16
            | 23669u16 | 23670u16 | 23671u16 | 23672u16 | 23673u16 | 23674u16 | 23675u16
            | 23676u16 | 23677u16 | 23678u16 | 23679u16 | 23680u16 | 23681u16 | 23682u16
            | 23683u16 | 23684u16 => BlockKind::DeepslateTileWall,
            23685u16 => BlockKind::DeepslateBricks,
            23686u16 | 23687u16 | 23688u16 | 23689u16 | 23690u16 | 23691u16 | 23692u16
            | 23693u16 | 23694u16 | 23695u16 | 23696u16 | 23697u16 | 23698u16 | 23699u16
            | 23700u16 | 23701u16 | 23702u16 | 23703u16 | 23704u16 | 23705u16 | 23706u16
            | 23707u16 | 23708u16 | 23709u16 | 23710u16 | 23711u16 | 23712u16 | 23713u16
            | 23714u16 | 23715u16 | 23716u16 | 23717u16 | 23718u16 | 23719u16 | 23720u16
            | 23721u16 | 23722u16 | 23723u16 | 23724u16 | 23725u16 | 23726u16 | 23727u16
            | 23728u16 | 23729u16 | 23730u16 | 23731u16 | 23732u16 | 23733u16 | 23734u16
            | 23735u16 | 23736u16 | 23737u16 | 23738u16 | 23739u16 | 23740u16 | 23741u16
            | 23742u16 | 23743u16 | 23744u16 | 23745u16 | 23746u16 | 23747u16 | 23748u16
            | 23749u16 | 23750u16 | 23751u16 | 23752u16 | 23753u16 | 23754u16 | 23755u16
            | 23756u16 | 23757u16 | 23758u16 | 23759u16 | 23760u16 | 23761u16 | 23762u16
            | 23763u16 | 23764u16 | 23765u16 => BlockKind::DeepslateBrickStairs,
            23766u16 | 23767u16 | 23768u16 | 23769u16 | 23770u16 | 23771u16 => {
                BlockKind::DeepslateBrickSlab
            }
            23772u16 | 23773u16 | 23774u16 | 23775u16 | 23776u16 | 23777u16 | 23778u16
            | 23779u16 | 23780u16 | 23781u16 | 23782u16 | 23783u16 | 23784u16 | 23785u16
            | 23786u16 | 23787u16 | 23788u16 | 23789u16 | 23790u16 | 23791u16 | 23792u16
            | 23793u16 | 23794u16 | 23795u16 | 23796u16 | 23797u16 | 23798u16 | 23799u16
            | 23800u16 | 23801u16 | 23802u16 | 23803u16 | 23804u16 | 23805u16 | 23806u16
            | 23807u16 | 23808u16 | 23809u16 | 23810u16 | 23811u16 | 23812u16 | 23813u16
            | 23814u16 | 23815u16 | 23816u16 | 23817u16 | 23818u16 | 23819u16 | 23820u16
            | 23821u16 | 23822u16 | 23823u16 | 23824u16 | 23825u16 | 23826u16 | 23827u16
            | 23828u16 | 23829u16 | 23830u16 | 23831u16 | 23832u16 | 23833u16 | 23834u16
            | 23835u16 | 23836u16 | 23837u16 | 23838u16 | 23839u16 | 23840u16 | 23841u16
            | 23842u16 | 23843u16 | 23844u16 | 23845u16 | 23846u16 | 23847u16 | 23848u16
            | 23849u16 | 23850u16 | 23851u16 | 23852u16 | 23853u16 | 23854u16 | 23855u16
            | 23856u16 | 23857u16 | 23858u16 | 23859u16 | 23860u16 | 23861u16 | 23862u16
            | 23863u16 | 23864u16 | 23865u16 | 23866u16 | 23867u16 | 23868u16 | 23869u16
            | 23870u16 | 23871u16 | 23872u16 | 23873u16 | 23874u16 | 23875u16 | 23876u16
            | 23877u16 | 23878u16 | 23879u16 | 23880u16 | 23881u16 | 23882u16 | 23883u16
            | 23884u16 | 23885u16 | 23886u16 | 23887u16 | 23888u16 | 23889u16 | 23890u16
            | 23891u16 | 23892u16 | 23893u16 | 23894u16 | 23895u16 | 23896u16 | 23897u16
            | 23898u16 | 23899u16 | 23900u16 | 23901u16 | 23902u16 | 23903u16 | 23904u16
            | 23905u16 | 23906u16 | 23907u16 | 23908u16 | 23909u16 | 23910u16 | 23911u16
            | 23912u16 | 23913u16 | 23914u16 | 23915u16 | 23916u16 | 23917u16 | 23918u16
            | 23919u16 | 23920u16 | 23921u16 | 23922u16 | 23923u16 | 23924u16 | 23925u16
            | 23926u16 | 23927u16 | 23928u16 | 23929u16 | 23930u16 | 23931u16 | 23932u16
            | 23933u16 | 23934u16 | 23935u16 | 23936u16 | 23937u16 | 23938u16 | 23939u16
            | 23940u16 | 23941u16 | 23942u16 | 23943u16 | 23944u16 | 23945u16 | 23946u16
            | 23947u16 | 23948u16 | 23949u16 | 23950u16 | 23951u16 | 23952u16 | 23953u16
            | 23954u16 | 23955u16 | 23956u16 | 23957u16 | 23958u16 | 23959u16 | 23960u16
            | 23961u16 | 23962u16 | 23963u16 | 23964u16 | 23965u16 | 23966u16 | 23967u16
            | 23968u16 | 23969u16 | 23970u16 | 23971u16 | 23972u16 | 23973u16 | 23974u16
            | 23975u16 | 23976u16 | 23977u16 | 23978u16 | 23979u16 | 23980u16 | 23981u16
            | 23982u16 | 23983u16 | 23984u16 | 23985u16 | 23986u16 | 23987u16 | 23988u16
            | 23989u16 | 23990u16 | 23991u16 | 23992u16 | 23993u16 | 23994u16 | 23995u16
            | 23996u16 | 23997u16 | 23998u16 | 23999u16 | 24000u16 | 24001u16 | 24002u16
            | 24003u16 | 24004u16 | 24005u16 | 24006u16 | 24007u16 | 24008u16 | 24009u16
            | 24010u16 | 24011u16 | 24012u16 | 24013u16 | 24014u16 | 24015u16 | 24016u16
            | 24017u16 | 24018u16 | 24019u16 | 24020u16 | 24021u16 | 24022u16 | 24023u16
            | 24024u16 | 24025u16 | 24026u16 | 24027u16 | 24028u16 | 24029u16 | 24030u16
            | 24031u16 | 24032u16 | 24033u16 | 24034u16 | 24035u16 | 24036u16 | 24037u16
            | 24038u16 | 24039u16 | 24040u16 | 24041u16 | 24042u16 | 24043u16 | 24044u16
            | 24045u16 | 24046u16 | 24047u16 | 24048u16 | 24049u16 | 24050u16 | 24051u16
            | 24052u16 | 24053u16 | 24054u16 | 24055u16 | 24056u16 | 24057u16 | 24058u16
            | 24059u16 | 24060u16 | 24061u16 | 24062u16 | 24063u16 | 24064u16 | 24065u16
            | 24066u16 | 24067u16 | 24068u16 | 24069u16 | 24070u16 | 24071u16 | 24072u16
            | 24073u16 | 24074u16 | 24075u16 | 24076u16 | 24077u16 | 24078u16 | 24079u16
            | 24080u16 | 24081u16 | 24082u16 | 24083u16 | 24084u16 | 24085u16 | 24086u16
            | 24087u16 | 24088u16 | 24089u16 | 24090u16 | 24091u16 | 24092u16 | 24093u16
            | 24094u16 | 24095u16 => BlockKind::DeepslateBrickWall,
            24096u16 => BlockKind::ChiseledDeepslate,
            24097u16 => BlockKind::CrackedDeepslateBricks,
            24098u16 => BlockKind::CrackedDeepslateTiles,
            24099u16 | 24100u16 | 24101u16 => BlockKind::InfestedDeepslate,
            24102u16 => BlockKind::SmoothBasalt,
            24103u16 => BlockKind::RawIronBlock,
            24104u16 => BlockKind::RawCopperBlock,
            24105u16 => BlockKind::RawGoldBlock,
            24106u16 => BlockKind::PottedAzaleaBush,
            24107u16 => BlockKind::PottedFloweringAzaleaBush,
            24108u16 | 24109u16 | 24110u16 => BlockKind::OchreFroglight,
            24111u16 | 24112u16 | 24113u16 => BlockKind::VerdantFroglight,
            24114u16 | 24115u16 | 24116u16 => BlockKind::PearlescentFroglight,
            24117u16 => BlockKind::Frogspawn,
            24118u16 => BlockKind::ReinforcedDeepslate,
            24119u16 | 24120u16 | 24121u16 | 24122u16 | 24123u16 | 24124u16 | 24125u16
            | 24126u16 | 24127u16 | 24128u16 | 24129u16 | 24130u16 | 24131u16 | 24132u16
            | 24133u16 | 24134u16 => BlockKind::DecoratedPot,
            _ => unreachable!(),
        }
    }
    #[doc = r" Converts this block state to its underlying raw block state ID."]
    #[doc = r""]
    #[doc = r" The original block state can be recovered with [`BlockState::from_raw`]."]
    pub const fn to_raw(self) -> u16 {
        self.0
    }
    #[doc = r" Returns the maximum block state ID."]
    pub const fn max_raw() -> u16 {
        24134u16
    }
    #[doc = r" Returns the wall variant of the block state."]
    #[doc = r""]
    #[doc = r" If the given block state doesn't have a wall variant, `None` is returned."]
    pub const fn wall_block_id(self) -> Option<Self> {
        match self {
            BlockState::TORCH => Some(BlockState::WALL_TORCH),
            BlockState::OAK_SIGN => Some(BlockState::OAK_WALL_SIGN),
            BlockState::SPRUCE_SIGN => Some(BlockState::SPRUCE_WALL_SIGN),
            BlockState::BIRCH_SIGN => Some(BlockState::BIRCH_WALL_SIGN),
            BlockState::ACACIA_SIGN => Some(BlockState::ACACIA_WALL_SIGN),
            BlockState::CHERRY_SIGN => Some(BlockState::CHERRY_WALL_SIGN),
            BlockState::JUNGLE_SIGN => Some(BlockState::JUNGLE_WALL_SIGN),
            BlockState::DARK_OAK_SIGN => Some(BlockState::DARK_OAK_WALL_SIGN),
            BlockState::MANGROVE_SIGN => Some(BlockState::MANGROVE_WALL_SIGN),
            BlockState::BAMBOO_SIGN => Some(BlockState::BAMBOO_WALL_SIGN),
            BlockState::OAK_HANGING_SIGN => Some(BlockState::OAK_WALL_HANGING_SIGN),
            BlockState::SPRUCE_HANGING_SIGN => Some(BlockState::SPRUCE_WALL_HANGING_SIGN),
            BlockState::BIRCH_HANGING_SIGN => Some(BlockState::BIRCH_WALL_HANGING_SIGN),
            BlockState::ACACIA_HANGING_SIGN => Some(BlockState::ACACIA_WALL_HANGING_SIGN),
            BlockState::CHERRY_HANGING_SIGN => Some(BlockState::CHERRY_WALL_HANGING_SIGN),
            BlockState::JUNGLE_HANGING_SIGN => Some(BlockState::JUNGLE_WALL_HANGING_SIGN),
            BlockState::DARK_OAK_HANGING_SIGN => Some(BlockState::DARK_OAK_WALL_HANGING_SIGN),
            BlockState::CRIMSON_HANGING_SIGN => Some(BlockState::CRIMSON_WALL_HANGING_SIGN),
            BlockState::WARPED_HANGING_SIGN => Some(BlockState::WARPED_WALL_HANGING_SIGN),
            BlockState::MANGROVE_HANGING_SIGN => Some(BlockState::MANGROVE_WALL_HANGING_SIGN),
            BlockState::BAMBOO_HANGING_SIGN => Some(BlockState::BAMBOO_WALL_HANGING_SIGN),
            BlockState::REDSTONE_TORCH => Some(BlockState::REDSTONE_WALL_TORCH),
            BlockState::SOUL_TORCH => Some(BlockState::SOUL_WALL_TORCH),
            BlockState::SKELETON_SKULL => Some(BlockState::SKELETON_WALL_SKULL),
            BlockState::WITHER_SKELETON_SKULL => Some(BlockState::WITHER_SKELETON_WALL_SKULL),
            BlockState::ZOMBIE_HEAD => Some(BlockState::ZOMBIE_WALL_HEAD),
            BlockState::PLAYER_HEAD => Some(BlockState::PLAYER_WALL_HEAD),
            BlockState::CREEPER_HEAD => Some(BlockState::CREEPER_WALL_HEAD),
            BlockState::DRAGON_HEAD => Some(BlockState::DRAGON_WALL_HEAD),
            BlockState::PIGLIN_HEAD => Some(BlockState::PIGLIN_WALL_HEAD),
            BlockState::WHITE_BANNER => Some(BlockState::WHITE_WALL_BANNER),
            BlockState::ORANGE_BANNER => Some(BlockState::ORANGE_WALL_BANNER),
            BlockState::MAGENTA_BANNER => Some(BlockState::MAGENTA_WALL_BANNER),
            BlockState::LIGHT_BLUE_BANNER => Some(BlockState::LIGHT_BLUE_WALL_BANNER),
            BlockState::YELLOW_BANNER => Some(BlockState::YELLOW_WALL_BANNER),
            BlockState::LIME_BANNER => Some(BlockState::LIME_WALL_BANNER),
            BlockState::PINK_BANNER => Some(BlockState::PINK_WALL_BANNER),
            BlockState::GRAY_BANNER => Some(BlockState::GRAY_WALL_BANNER),
            BlockState::LIGHT_GRAY_BANNER => Some(BlockState::LIGHT_GRAY_WALL_BANNER),
            BlockState::CYAN_BANNER => Some(BlockState::CYAN_WALL_BANNER),
            BlockState::PURPLE_BANNER => Some(BlockState::PURPLE_WALL_BANNER),
            BlockState::BLUE_BANNER => Some(BlockState::BLUE_WALL_BANNER),
            BlockState::BROWN_BANNER => Some(BlockState::BROWN_WALL_BANNER),
            BlockState::GREEN_BANNER => Some(BlockState::GREEN_WALL_BANNER),
            BlockState::RED_BANNER => Some(BlockState::RED_WALL_BANNER),
            BlockState::BLACK_BANNER => Some(BlockState::BLACK_WALL_BANNER),
            BlockState::DEAD_TUBE_CORAL_FAN => Some(BlockState::DEAD_TUBE_CORAL_WALL_FAN),
            BlockState::DEAD_BRAIN_CORAL_FAN => Some(BlockState::DEAD_BRAIN_CORAL_WALL_FAN),
            BlockState::DEAD_BUBBLE_CORAL_FAN => Some(BlockState::DEAD_BUBBLE_CORAL_WALL_FAN),
            BlockState::DEAD_FIRE_CORAL_FAN => Some(BlockState::DEAD_FIRE_CORAL_WALL_FAN),
            BlockState::DEAD_HORN_CORAL_FAN => Some(BlockState::DEAD_HORN_CORAL_WALL_FAN),
            BlockState::TUBE_CORAL_FAN => Some(BlockState::TUBE_CORAL_WALL_FAN),
            BlockState::BRAIN_CORAL_FAN => Some(BlockState::BRAIN_CORAL_WALL_FAN),
            BlockState::BUBBLE_CORAL_FAN => Some(BlockState::BUBBLE_CORAL_WALL_FAN),
            BlockState::FIRE_CORAL_FAN => Some(BlockState::FIRE_CORAL_WALL_FAN),
            BlockState::HORN_CORAL_FAN => Some(BlockState::HORN_CORAL_WALL_FAN),
            BlockState::CRIMSON_SIGN => Some(BlockState::CRIMSON_WALL_SIGN),
            BlockState::WARPED_SIGN => Some(BlockState::WARPED_WALL_SIGN),
            _ => None,
        }
    }
    #[doc = r" Gets the value of the property with the given name from this block."]
    #[doc = r""]
    #[doc = r" If this block does not have the property, then `None` is returned."]
    pub const fn get(self, name: PropName) -> Option<PropValue> {
        match self.to_kind() {
            BlockKind::GrassBlock => match name {
                PropName::Snowy => match (self.0 - 8u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Podzol => match name {
                PropName::Snowy => match (self.0 - 12u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::OakSapling => match name {
                PropName::Stage => match (self.0 - 25u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SpruceSapling => match name {
                PropName::Stage => match (self.0 - 27u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BirchSapling => match name {
                PropName::Stage => match (self.0 - 29u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::JungleSapling => match name {
                PropName::Stage => match (self.0 - 31u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::AcaciaSapling => match name {
                PropName::Stage => match (self.0 - 33u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CherrySapling => match name {
                PropName::Stage => match (self.0 - 35u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DarkOakSapling => match name {
                PropName::Stage => match (self.0 - 37u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MangrovePropagule => match name {
                PropName::Age => match (self.0 - 39u16) / 8u16 % 5u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    _ => unreachable!(),
                },
                PropName::Hanging => match (self.0 - 39u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Stage => match (self.0 - 39u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 39u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Water => match name {
                PropName::Level => match (self.0 - 80u16) / 1u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Lava => match name {
                PropName::Level => match (self.0 - 96u16) / 1u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SuspiciousSand => match name {
                PropName::Dusted => match (self.0 - 113u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SuspiciousGravel => match name {
                PropName::Dusted => match (self.0 - 119u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::OakLog => match name {
                PropName::Axis => match (self.0 - 130u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SpruceLog => match name {
                PropName::Axis => match (self.0 - 133u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BirchLog => match name {
                PropName::Axis => match (self.0 - 136u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::JungleLog => match name {
                PropName::Axis => match (self.0 - 139u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::AcaciaLog => match name {
                PropName::Axis => match (self.0 - 142u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CherryLog => match name {
                PropName::Axis => match (self.0 - 145u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DarkOakLog => match name {
                PropName::Axis => match (self.0 - 148u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MangroveLog => match name {
                PropName::Axis => match (self.0 - 151u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MangroveRoots => match name {
                PropName::Waterlogged => match (self.0 - 154u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MuddyMangroveRoots => match name {
                PropName::Axis => match (self.0 - 156u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BambooBlock => match name {
                PropName::Axis => match (self.0 - 159u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::StrippedSpruceLog => match name {
                PropName::Axis => match (self.0 - 162u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::StrippedBirchLog => match name {
                PropName::Axis => match (self.0 - 165u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::StrippedJungleLog => match name {
                PropName::Axis => match (self.0 - 168u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::StrippedAcaciaLog => match name {
                PropName::Axis => match (self.0 - 171u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::StrippedCherryLog => match name {
                PropName::Axis => match (self.0 - 174u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::StrippedDarkOakLog => match name {
                PropName::Axis => match (self.0 - 177u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::StrippedOakLog => match name {
                PropName::Axis => match (self.0 - 180u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::StrippedMangroveLog => match name {
                PropName::Axis => match (self.0 - 183u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::StrippedBambooBlock => match name {
                PropName::Axis => match (self.0 - 186u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::OakWood => match name {
                PropName::Axis => match (self.0 - 189u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SpruceWood => match name {
                PropName::Axis => match (self.0 - 192u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BirchWood => match name {
                PropName::Axis => match (self.0 - 195u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::JungleWood => match name {
                PropName::Axis => match (self.0 - 198u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::AcaciaWood => match name {
                PropName::Axis => match (self.0 - 201u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CherryWood => match name {
                PropName::Axis => match (self.0 - 204u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DarkOakWood => match name {
                PropName::Axis => match (self.0 - 207u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MangroveWood => match name {
                PropName::Axis => match (self.0 - 210u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::StrippedOakWood => match name {
                PropName::Axis => match (self.0 - 213u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::StrippedSpruceWood => match name {
                PropName::Axis => match (self.0 - 216u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::StrippedBirchWood => match name {
                PropName::Axis => match (self.0 - 219u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::StrippedJungleWood => match name {
                PropName::Axis => match (self.0 - 222u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::StrippedAcaciaWood => match name {
                PropName::Axis => match (self.0 - 225u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::StrippedCherryWood => match name {
                PropName::Axis => match (self.0 - 228u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::StrippedDarkOakWood => match name {
                PropName::Axis => match (self.0 - 231u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::StrippedMangroveWood => match name {
                PropName::Axis => match (self.0 - 234u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::OakLeaves => match name {
                PropName::Distance => match (self.0 - 237u16) / 4u16 % 7u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    3u16 => Some(PropValue::_4),
                    4u16 => Some(PropValue::_5),
                    5u16 => Some(PropValue::_6),
                    6u16 => Some(PropValue::_7),
                    _ => unreachable!(),
                },
                PropName::Persistent => match (self.0 - 237u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 237u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SpruceLeaves => match name {
                PropName::Distance => match (self.0 - 265u16) / 4u16 % 7u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    3u16 => Some(PropValue::_4),
                    4u16 => Some(PropValue::_5),
                    5u16 => Some(PropValue::_6),
                    6u16 => Some(PropValue::_7),
                    _ => unreachable!(),
                },
                PropName::Persistent => match (self.0 - 265u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 265u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BirchLeaves => match name {
                PropName::Distance => match (self.0 - 293u16) / 4u16 % 7u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    3u16 => Some(PropValue::_4),
                    4u16 => Some(PropValue::_5),
                    5u16 => Some(PropValue::_6),
                    6u16 => Some(PropValue::_7),
                    _ => unreachable!(),
                },
                PropName::Persistent => match (self.0 - 293u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 293u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::JungleLeaves => match name {
                PropName::Distance => match (self.0 - 321u16) / 4u16 % 7u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    3u16 => Some(PropValue::_4),
                    4u16 => Some(PropValue::_5),
                    5u16 => Some(PropValue::_6),
                    6u16 => Some(PropValue::_7),
                    _ => unreachable!(),
                },
                PropName::Persistent => match (self.0 - 321u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 321u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::AcaciaLeaves => match name {
                PropName::Distance => match (self.0 - 349u16) / 4u16 % 7u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    3u16 => Some(PropValue::_4),
                    4u16 => Some(PropValue::_5),
                    5u16 => Some(PropValue::_6),
                    6u16 => Some(PropValue::_7),
                    _ => unreachable!(),
                },
                PropName::Persistent => match (self.0 - 349u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 349u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CherryLeaves => match name {
                PropName::Distance => match (self.0 - 377u16) / 4u16 % 7u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    3u16 => Some(PropValue::_4),
                    4u16 => Some(PropValue::_5),
                    5u16 => Some(PropValue::_6),
                    6u16 => Some(PropValue::_7),
                    _ => unreachable!(),
                },
                PropName::Persistent => match (self.0 - 377u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 377u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DarkOakLeaves => match name {
                PropName::Distance => match (self.0 - 405u16) / 4u16 % 7u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    3u16 => Some(PropValue::_4),
                    4u16 => Some(PropValue::_5),
                    5u16 => Some(PropValue::_6),
                    6u16 => Some(PropValue::_7),
                    _ => unreachable!(),
                },
                PropName::Persistent => match (self.0 - 405u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 405u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MangroveLeaves => match name {
                PropName::Distance => match (self.0 - 433u16) / 4u16 % 7u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    3u16 => Some(PropValue::_4),
                    4u16 => Some(PropValue::_5),
                    5u16 => Some(PropValue::_6),
                    6u16 => Some(PropValue::_7),
                    _ => unreachable!(),
                },
                PropName::Persistent => match (self.0 - 433u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 433u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::AzaleaLeaves => match name {
                PropName::Distance => match (self.0 - 461u16) / 4u16 % 7u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    3u16 => Some(PropValue::_4),
                    4u16 => Some(PropValue::_5),
                    5u16 => Some(PropValue::_6),
                    6u16 => Some(PropValue::_7),
                    _ => unreachable!(),
                },
                PropName::Persistent => match (self.0 - 461u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 461u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::FloweringAzaleaLeaves => match name {
                PropName::Distance => match (self.0 - 489u16) / 4u16 % 7u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    3u16 => Some(PropValue::_4),
                    4u16 => Some(PropValue::_5),
                    5u16 => Some(PropValue::_6),
                    6u16 => Some(PropValue::_7),
                    _ => unreachable!(),
                },
                PropName::Persistent => match (self.0 - 489u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 489u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Dispenser => match name {
                PropName::Facing => match (self.0 - 523u16) / 2u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                PropName::Triggered => match (self.0 - 523u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::NoteBlock => match name {
                PropName::Instrument => match (self.0 - 538u16) / 50u16 % 23u16 {
                    0u16 => Some(PropValue::Harp),
                    1u16 => Some(PropValue::Basedrum),
                    2u16 => Some(PropValue::Snare),
                    3u16 => Some(PropValue::Hat),
                    4u16 => Some(PropValue::Bass),
                    5u16 => Some(PropValue::Flute),
                    6u16 => Some(PropValue::Bell),
                    7u16 => Some(PropValue::Guitar),
                    8u16 => Some(PropValue::Chime),
                    9u16 => Some(PropValue::Xylophone),
                    10u16 => Some(PropValue::IronXylophone),
                    11u16 => Some(PropValue::CowBell),
                    12u16 => Some(PropValue::Didgeridoo),
                    13u16 => Some(PropValue::Bit),
                    14u16 => Some(PropValue::Banjo),
                    15u16 => Some(PropValue::Pling),
                    16u16 => Some(PropValue::Zombie),
                    17u16 => Some(PropValue::Skeleton),
                    18u16 => Some(PropValue::Creeper),
                    19u16 => Some(PropValue::Dragon),
                    20u16 => Some(PropValue::WitherSkeleton),
                    21u16 => Some(PropValue::Piglin),
                    22u16 => Some(PropValue::CustomHead),
                    _ => unreachable!(),
                },
                PropName::Note => match (self.0 - 538u16) / 2u16 % 25u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    16u16 => Some(PropValue::_16),
                    17u16 => Some(PropValue::_17),
                    18u16 => Some(PropValue::_18),
                    19u16 => Some(PropValue::_19),
                    20u16 => Some(PropValue::_20),
                    21u16 => Some(PropValue::_21),
                    22u16 => Some(PropValue::_22),
                    23u16 => Some(PropValue::_23),
                    24u16 => Some(PropValue::_24),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 538u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WhiteBed => match name {
                PropName::Facing => match (self.0 - 1688u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Occupied => match (self.0 - 1688u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Part => match (self.0 - 1688u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::Head),
                    1u16 => Some(PropValue::Foot),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::OrangeBed => match name {
                PropName::Facing => match (self.0 - 1704u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Occupied => match (self.0 - 1704u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Part => match (self.0 - 1704u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::Head),
                    1u16 => Some(PropValue::Foot),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MagentaBed => match name {
                PropName::Facing => match (self.0 - 1720u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Occupied => match (self.0 - 1720u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Part => match (self.0 - 1720u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::Head),
                    1u16 => Some(PropValue::Foot),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::LightBlueBed => match name {
                PropName::Facing => match (self.0 - 1736u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Occupied => match (self.0 - 1736u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Part => match (self.0 - 1736u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::Head),
                    1u16 => Some(PropValue::Foot),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::YellowBed => match name {
                PropName::Facing => match (self.0 - 1752u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Occupied => match (self.0 - 1752u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Part => match (self.0 - 1752u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::Head),
                    1u16 => Some(PropValue::Foot),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::LimeBed => match name {
                PropName::Facing => match (self.0 - 1768u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Occupied => match (self.0 - 1768u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Part => match (self.0 - 1768u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::Head),
                    1u16 => Some(PropValue::Foot),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PinkBed => match name {
                PropName::Facing => match (self.0 - 1784u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Occupied => match (self.0 - 1784u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Part => match (self.0 - 1784u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::Head),
                    1u16 => Some(PropValue::Foot),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::GrayBed => match name {
                PropName::Facing => match (self.0 - 1800u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Occupied => match (self.0 - 1800u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Part => match (self.0 - 1800u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::Head),
                    1u16 => Some(PropValue::Foot),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::LightGrayBed => match name {
                PropName::Facing => match (self.0 - 1816u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Occupied => match (self.0 - 1816u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Part => match (self.0 - 1816u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::Head),
                    1u16 => Some(PropValue::Foot),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CyanBed => match name {
                PropName::Facing => match (self.0 - 1832u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Occupied => match (self.0 - 1832u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Part => match (self.0 - 1832u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::Head),
                    1u16 => Some(PropValue::Foot),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PurpleBed => match name {
                PropName::Facing => match (self.0 - 1848u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Occupied => match (self.0 - 1848u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Part => match (self.0 - 1848u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::Head),
                    1u16 => Some(PropValue::Foot),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BlueBed => match name {
                PropName::Facing => match (self.0 - 1864u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Occupied => match (self.0 - 1864u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Part => match (self.0 - 1864u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::Head),
                    1u16 => Some(PropValue::Foot),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BrownBed => match name {
                PropName::Facing => match (self.0 - 1880u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Occupied => match (self.0 - 1880u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Part => match (self.0 - 1880u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::Head),
                    1u16 => Some(PropValue::Foot),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::GreenBed => match name {
                PropName::Facing => match (self.0 - 1896u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Occupied => match (self.0 - 1896u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Part => match (self.0 - 1896u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::Head),
                    1u16 => Some(PropValue::Foot),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::RedBed => match name {
                PropName::Facing => match (self.0 - 1912u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Occupied => match (self.0 - 1912u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Part => match (self.0 - 1912u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::Head),
                    1u16 => Some(PropValue::Foot),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BlackBed => match name {
                PropName::Facing => match (self.0 - 1928u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Occupied => match (self.0 - 1928u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Part => match (self.0 - 1928u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::Head),
                    1u16 => Some(PropValue::Foot),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PoweredRail => match name {
                PropName::Powered => match (self.0 - 1944u16) / 12u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 1944u16) / 2u16 % 6u16 {
                    0u16 => Some(PropValue::NorthSouth),
                    1u16 => Some(PropValue::EastWest),
                    2u16 => Some(PropValue::AscendingEast),
                    3u16 => Some(PropValue::AscendingWest),
                    4u16 => Some(PropValue::AscendingNorth),
                    5u16 => Some(PropValue::AscendingSouth),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 1944u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DetectorRail => match name {
                PropName::Powered => match (self.0 - 1968u16) / 12u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 1968u16) / 2u16 % 6u16 {
                    0u16 => Some(PropValue::NorthSouth),
                    1u16 => Some(PropValue::EastWest),
                    2u16 => Some(PropValue::AscendingEast),
                    3u16 => Some(PropValue::AscendingWest),
                    4u16 => Some(PropValue::AscendingNorth),
                    5u16 => Some(PropValue::AscendingSouth),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 1968u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::StickyPiston => match name {
                PropName::Extended => match (self.0 - 1992u16) / 6u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Facing => match (self.0 - 1992u16) / 1u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::TallSeagrass => match name {
                PropName::Half => match (self.0 - 2009u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::Upper),
                    1u16 => Some(PropValue::Lower),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Piston => match name {
                PropName::Extended => match (self.0 - 2011u16) / 6u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Facing => match (self.0 - 2011u16) / 1u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PistonHead => match name {
                PropName::Facing => match (self.0 - 2023u16) / 4u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                PropName::Short => match (self.0 - 2023u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Type => match (self.0 - 2023u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::Normal),
                    1u16 => Some(PropValue::Sticky),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MovingPiston => match name {
                PropName::Facing => match (self.0 - 2063u16) / 2u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                PropName::Type => match (self.0 - 2063u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::Normal),
                    1u16 => Some(PropValue::Sticky),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Tnt => match name {
                PropName::Unstable => match (self.0 - 2094u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::ChiseledBookshelf => match name {
                PropName::Facing => match (self.0 - 2097u16) / 64u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Slot0Occupied => match (self.0 - 2097u16) / 32u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Slot1Occupied => match (self.0 - 2097u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Slot2Occupied => match (self.0 - 2097u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Slot3Occupied => match (self.0 - 2097u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Slot4Occupied => match (self.0 - 2097u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Slot5Occupied => match (self.0 - 2097u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WallTorch => match name {
                PropName::Facing => match (self.0 - 2356u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Fire => match name {
                PropName::Age => match (self.0 - 2360u16) / 32u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                PropName::East => match (self.0 - 2360u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 2360u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 2360u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Up => match (self.0 - 2360u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 2360u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::OakStairs => match name {
                PropName::Facing => match (self.0 - 2874u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 2874u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 2874u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 2874u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Chest => match name {
                PropName::Facing => match (self.0 - 2954u16) / 6u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Type => match (self.0 - 2954u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Single),
                    1u16 => Some(PropValue::Left),
                    2u16 => Some(PropValue::Right),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 2954u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::RedstoneWire => match name {
                PropName::East => match (self.0 - 2978u16) / 432u16 % 3u16 {
                    0u16 => Some(PropValue::Up),
                    1u16 => Some(PropValue::Side),
                    2u16 => Some(PropValue::None),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 2978u16) / 144u16 % 3u16 {
                    0u16 => Some(PropValue::Up),
                    1u16 => Some(PropValue::Side),
                    2u16 => Some(PropValue::None),
                    _ => unreachable!(),
                },
                PropName::Power => match (self.0 - 2978u16) / 9u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 2978u16) / 3u16 % 3u16 {
                    0u16 => Some(PropValue::Up),
                    1u16 => Some(PropValue::Side),
                    2u16 => Some(PropValue::None),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 2978u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::Up),
                    1u16 => Some(PropValue::Side),
                    2u16 => Some(PropValue::None),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Wheat => match name {
                PropName::Age => match (self.0 - 4278u16) / 1u16 % 8u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Farmland => match name {
                PropName::Moisture => match (self.0 - 4286u16) / 1u16 % 8u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Furnace => match name {
                PropName::Facing => match (self.0 - 4294u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Lit => match (self.0 - 4294u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::OakSign => match name {
                PropName::Rotation => match (self.0 - 4302u16) / 2u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 4302u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SpruceSign => match name {
                PropName::Rotation => match (self.0 - 4334u16) / 2u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 4334u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BirchSign => match name {
                PropName::Rotation => match (self.0 - 4366u16) / 2u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 4366u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::AcaciaSign => match name {
                PropName::Rotation => match (self.0 - 4398u16) / 2u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 4398u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CherrySign => match name {
                PropName::Rotation => match (self.0 - 4430u16) / 2u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 4430u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::JungleSign => match name {
                PropName::Rotation => match (self.0 - 4462u16) / 2u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 4462u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DarkOakSign => match name {
                PropName::Rotation => match (self.0 - 4494u16) / 2u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 4494u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MangroveSign => match name {
                PropName::Rotation => match (self.0 - 4526u16) / 2u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 4526u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BambooSign => match name {
                PropName::Rotation => match (self.0 - 4558u16) / 2u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 4558u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::OakDoor => match name {
                PropName::Facing => match (self.0 - 4590u16) / 16u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 4590u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::Upper),
                    1u16 => Some(PropValue::Lower),
                    _ => unreachable!(),
                },
                PropName::Hinge => match (self.0 - 4590u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::Left),
                    1u16 => Some(PropValue::Right),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 4590u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 4590u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Ladder => match name {
                PropName::Facing => match (self.0 - 4654u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 4654u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Rail => match name {
                PropName::Shape => match (self.0 - 4662u16) / 2u16 % 10u16 {
                    0u16 => Some(PropValue::NorthSouth),
                    1u16 => Some(PropValue::EastWest),
                    2u16 => Some(PropValue::AscendingEast),
                    3u16 => Some(PropValue::AscendingWest),
                    4u16 => Some(PropValue::AscendingNorth),
                    5u16 => Some(PropValue::AscendingSouth),
                    6u16 => Some(PropValue::SouthEast),
                    7u16 => Some(PropValue::SouthWest),
                    8u16 => Some(PropValue::NorthWest),
                    9u16 => Some(PropValue::NorthEast),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 4662u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CobblestoneStairs => match name {
                PropName::Facing => match (self.0 - 4682u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 4682u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 4682u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 4682u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::OakWallSign => match name {
                PropName::Facing => match (self.0 - 4762u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 4762u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SpruceWallSign => match name {
                PropName::Facing => match (self.0 - 4770u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 4770u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BirchWallSign => match name {
                PropName::Facing => match (self.0 - 4778u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 4778u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::AcaciaWallSign => match name {
                PropName::Facing => match (self.0 - 4786u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 4786u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CherryWallSign => match name {
                PropName::Facing => match (self.0 - 4794u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 4794u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::JungleWallSign => match name {
                PropName::Facing => match (self.0 - 4802u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 4802u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DarkOakWallSign => match name {
                PropName::Facing => match (self.0 - 4810u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 4810u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MangroveWallSign => match name {
                PropName::Facing => match (self.0 - 4818u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 4818u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BambooWallSign => match name {
                PropName::Facing => match (self.0 - 4826u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 4826u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::OakHangingSign => match name {
                PropName::Attached => match (self.0 - 4834u16) / 32u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Rotation => match (self.0 - 4834u16) / 2u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 4834u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SpruceHangingSign => match name {
                PropName::Attached => match (self.0 - 4898u16) / 32u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Rotation => match (self.0 - 4898u16) / 2u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 4898u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BirchHangingSign => match name {
                PropName::Attached => match (self.0 - 4962u16) / 32u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Rotation => match (self.0 - 4962u16) / 2u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 4962u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::AcaciaHangingSign => match name {
                PropName::Attached => match (self.0 - 5026u16) / 32u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Rotation => match (self.0 - 5026u16) / 2u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 5026u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CherryHangingSign => match name {
                PropName::Attached => match (self.0 - 5090u16) / 32u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Rotation => match (self.0 - 5090u16) / 2u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 5090u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::JungleHangingSign => match name {
                PropName::Attached => match (self.0 - 5154u16) / 32u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Rotation => match (self.0 - 5154u16) / 2u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 5154u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DarkOakHangingSign => match name {
                PropName::Attached => match (self.0 - 5218u16) / 32u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Rotation => match (self.0 - 5218u16) / 2u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 5218u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CrimsonHangingSign => match name {
                PropName::Attached => match (self.0 - 5282u16) / 32u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Rotation => match (self.0 - 5282u16) / 2u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 5282u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WarpedHangingSign => match name {
                PropName::Attached => match (self.0 - 5346u16) / 32u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Rotation => match (self.0 - 5346u16) / 2u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 5346u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MangroveHangingSign => match name {
                PropName::Attached => match (self.0 - 5410u16) / 32u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Rotation => match (self.0 - 5410u16) / 2u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 5410u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BambooHangingSign => match name {
                PropName::Attached => match (self.0 - 5474u16) / 32u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Rotation => match (self.0 - 5474u16) / 2u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 5474u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::OakWallHangingSign => match name {
                PropName::Facing => match (self.0 - 5538u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 5538u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SpruceWallHangingSign => match name {
                PropName::Facing => match (self.0 - 5546u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 5546u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BirchWallHangingSign => match name {
                PropName::Facing => match (self.0 - 5554u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 5554u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::AcaciaWallHangingSign => match name {
                PropName::Facing => match (self.0 - 5562u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 5562u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CherryWallHangingSign => match name {
                PropName::Facing => match (self.0 - 5570u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 5570u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::JungleWallHangingSign => match name {
                PropName::Facing => match (self.0 - 5578u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 5578u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DarkOakWallHangingSign => match name {
                PropName::Facing => match (self.0 - 5586u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 5586u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MangroveWallHangingSign => match name {
                PropName::Facing => match (self.0 - 5594u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 5594u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CrimsonWallHangingSign => match name {
                PropName::Facing => match (self.0 - 5602u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 5602u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WarpedWallHangingSign => match name {
                PropName::Facing => match (self.0 - 5610u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 5610u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BambooWallHangingSign => match name {
                PropName::Facing => match (self.0 - 5618u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 5618u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Lever => match name {
                PropName::Face => match (self.0 - 5626u16) / 8u16 % 3u16 {
                    0u16 => Some(PropValue::Floor),
                    1u16 => Some(PropValue::Wall),
                    2u16 => Some(PropValue::Ceiling),
                    _ => unreachable!(),
                },
                PropName::Facing => match (self.0 - 5626u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 5626u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::StonePressurePlate => match name {
                PropName::Powered => match (self.0 - 5650u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::IronDoor => match name {
                PropName::Facing => match (self.0 - 5652u16) / 16u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 5652u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::Upper),
                    1u16 => Some(PropValue::Lower),
                    _ => unreachable!(),
                },
                PropName::Hinge => match (self.0 - 5652u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::Left),
                    1u16 => Some(PropValue::Right),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 5652u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 5652u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::OakPressurePlate => match name {
                PropName::Powered => match (self.0 - 5716u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SprucePressurePlate => match name {
                PropName::Powered => match (self.0 - 5718u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BirchPressurePlate => match name {
                PropName::Powered => match (self.0 - 5720u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::JunglePressurePlate => match name {
                PropName::Powered => match (self.0 - 5722u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::AcaciaPressurePlate => match name {
                PropName::Powered => match (self.0 - 5724u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CherryPressurePlate => match name {
                PropName::Powered => match (self.0 - 5726u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DarkOakPressurePlate => match name {
                PropName::Powered => match (self.0 - 5728u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MangrovePressurePlate => match name {
                PropName::Powered => match (self.0 - 5730u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BambooPressurePlate => match name {
                PropName::Powered => match (self.0 - 5732u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::RedstoneOre => match name {
                PropName::Lit => match (self.0 - 5734u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DeepslateRedstoneOre => match name {
                PropName::Lit => match (self.0 - 5736u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::RedstoneTorch => match name {
                PropName::Lit => match (self.0 - 5738u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::RedstoneWallTorch => match name {
                PropName::Facing => match (self.0 - 5740u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Lit => match (self.0 - 5740u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::StoneButton => match name {
                PropName::Face => match (self.0 - 5748u16) / 8u16 % 3u16 {
                    0u16 => Some(PropValue::Floor),
                    1u16 => Some(PropValue::Wall),
                    2u16 => Some(PropValue::Ceiling),
                    _ => unreachable!(),
                },
                PropName::Facing => match (self.0 - 5748u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 5748u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Snow => match name {
                PropName::Layers => match (self.0 - 5772u16) / 1u16 % 8u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    3u16 => Some(PropValue::_4),
                    4u16 => Some(PropValue::_5),
                    5u16 => Some(PropValue::_6),
                    6u16 => Some(PropValue::_7),
                    7u16 => Some(PropValue::_8),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Cactus => match name {
                PropName::Age => match (self.0 - 5782u16) / 1u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SugarCane => match name {
                PropName::Age => match (self.0 - 5799u16) / 1u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Jukebox => match name {
                PropName::HasRecord => match (self.0 - 5815u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::OakFence => match name {
                PropName::East => match (self.0 - 5817u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 5817u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 5817u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 5817u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 5817u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Basalt => match name {
                PropName::Axis => match (self.0 - 5853u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PolishedBasalt => match name {
                PropName::Axis => match (self.0 - 5856u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SoulWallTorch => match name {
                PropName::Facing => match (self.0 - 5860u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::NetherPortal => match name {
                PropName::Axis => match (self.0 - 5865u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CarvedPumpkin => match name {
                PropName::Facing => match (self.0 - 5867u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::JackOLantern => match name {
                PropName::Facing => match (self.0 - 5871u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Cake => match name {
                PropName::Bites => match (self.0 - 5875u16) / 1u16 % 7u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Repeater => match name {
                PropName::Delay => match (self.0 - 5882u16) / 16u16 % 4u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    3u16 => Some(PropValue::_4),
                    _ => unreachable!(),
                },
                PropName::Facing => match (self.0 - 5882u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Locked => match (self.0 - 5882u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 5882u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::OakTrapdoor => match name {
                PropName::Facing => match (self.0 - 5962u16) / 16u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 5962u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 5962u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 5962u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 5962u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SpruceTrapdoor => match name {
                PropName::Facing => match (self.0 - 6026u16) / 16u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 6026u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 6026u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 6026u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 6026u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BirchTrapdoor => match name {
                PropName::Facing => match (self.0 - 6090u16) / 16u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 6090u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 6090u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 6090u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 6090u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::JungleTrapdoor => match name {
                PropName::Facing => match (self.0 - 6154u16) / 16u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 6154u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 6154u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 6154u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 6154u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::AcaciaTrapdoor => match name {
                PropName::Facing => match (self.0 - 6218u16) / 16u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 6218u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 6218u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 6218u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 6218u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CherryTrapdoor => match name {
                PropName::Facing => match (self.0 - 6282u16) / 16u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 6282u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 6282u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 6282u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 6282u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DarkOakTrapdoor => match name {
                PropName::Facing => match (self.0 - 6346u16) / 16u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 6346u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 6346u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 6346u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 6346u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MangroveTrapdoor => match name {
                PropName::Facing => match (self.0 - 6410u16) / 16u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 6410u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 6410u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 6410u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 6410u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BambooTrapdoor => match name {
                PropName::Facing => match (self.0 - 6474u16) / 16u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 6474u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 6474u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 6474u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 6474u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BrownMushroomBlock => match name {
                PropName::Down => match (self.0 - 6550u16) / 32u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::East => match (self.0 - 6550u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 6550u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 6550u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Up => match (self.0 - 6550u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 6550u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::RedMushroomBlock => match name {
                PropName::Down => match (self.0 - 6614u16) / 32u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::East => match (self.0 - 6614u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 6614u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 6614u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Up => match (self.0 - 6614u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 6614u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MushroomStem => match name {
                PropName::Down => match (self.0 - 6678u16) / 32u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::East => match (self.0 - 6678u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 6678u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 6678u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Up => match (self.0 - 6678u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 6678u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::IronBars => match name {
                PropName::East => match (self.0 - 6742u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 6742u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 6742u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 6742u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 6742u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Chain => match name {
                PropName::Axis => match (self.0 - 6774u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 6774u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::GlassPane => match name {
                PropName::East => match (self.0 - 6780u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 6780u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 6780u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 6780u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 6780u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::AttachedPumpkinStem => match name {
                PropName::Facing => match (self.0 - 6813u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::AttachedMelonStem => match name {
                PropName::Facing => match (self.0 - 6817u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PumpkinStem => match name {
                PropName::Age => match (self.0 - 6821u16) / 1u16 % 8u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MelonStem => match name {
                PropName::Age => match (self.0 - 6829u16) / 1u16 % 8u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Vine => match name {
                PropName::East => match (self.0 - 6837u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 6837u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 6837u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Up => match (self.0 - 6837u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 6837u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::GlowLichen => match name {
                PropName::Down => match (self.0 - 6869u16) / 64u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::East => match (self.0 - 6869u16) / 32u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 6869u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 6869u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Up => match (self.0 - 6869u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 6869u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 6869u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::OakFenceGate => match name {
                PropName::Facing => match (self.0 - 6997u16) / 8u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::InWall => match (self.0 - 6997u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 6997u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 6997u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BrickStairs => match name {
                PropName::Facing => match (self.0 - 7029u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 7029u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 7029u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 7029u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::StoneBrickStairs => match name {
                PropName::Facing => match (self.0 - 7109u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 7109u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 7109u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 7109u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MudBrickStairs => match name {
                PropName::Facing => match (self.0 - 7189u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 7189u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 7189u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 7189u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Mycelium => match name {
                PropName::Snowy => match (self.0 - 7269u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::NetherBrickFence => match name {
                PropName::East => match (self.0 - 7273u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 7273u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 7273u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 7273u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 7273u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::NetherBrickStairs => match name {
                PropName::Facing => match (self.0 - 7305u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 7305u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 7305u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 7305u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::NetherWart => match name {
                PropName::Age => match (self.0 - 7385u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BrewingStand => match name {
                PropName::HasBottle0 => match (self.0 - 7390u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::HasBottle1 => match (self.0 - 7390u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::HasBottle2 => match (self.0 - 7390u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WaterCauldron => match name {
                PropName::Level => match (self.0 - 7399u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PowderSnowCauldron => match name {
                PropName::Level => match (self.0 - 7403u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::EndPortalFrame => match name {
                PropName::Eye => match (self.0 - 7407u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Facing => match (self.0 - 7407u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::RedstoneLamp => match name {
                PropName::Lit => match (self.0 - 7417u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Cocoa => match name {
                PropName::Age => match (self.0 - 7419u16) / 4u16 % 3u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    _ => unreachable!(),
                },
                PropName::Facing => match (self.0 - 7419u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SandstoneStairs => match name {
                PropName::Facing => match (self.0 - 7431u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 7431u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 7431u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 7431u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::EnderChest => match name {
                PropName::Facing => match (self.0 - 7513u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 7513u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::TripwireHook => match name {
                PropName::Attached => match (self.0 - 7521u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Facing => match (self.0 - 7521u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 7521u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Tripwire => match name {
                PropName::Attached => match (self.0 - 7537u16) / 64u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Disarmed => match (self.0 - 7537u16) / 32u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::East => match (self.0 - 7537u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 7537u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 7537u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 7537u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 7537u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SpruceStairs => match name {
                PropName::Facing => match (self.0 - 7666u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 7666u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 7666u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 7666u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BirchStairs => match name {
                PropName::Facing => match (self.0 - 7746u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 7746u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 7746u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 7746u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::JungleStairs => match name {
                PropName::Facing => match (self.0 - 7826u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 7826u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 7826u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 7826u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CommandBlock => match name {
                PropName::Conditional => match (self.0 - 7906u16) / 6u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Facing => match (self.0 - 7906u16) / 1u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CobblestoneWall => match name {
                PropName::East => match (self.0 - 7919u16) / 108u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 7919u16) / 36u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 7919u16) / 12u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::Up => match (self.0 - 7919u16) / 6u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 7919u16) / 3u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 7919u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MossyCobblestoneWall => match name {
                PropName::East => match (self.0 - 8243u16) / 108u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 8243u16) / 36u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 8243u16) / 12u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::Up => match (self.0 - 8243u16) / 6u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 8243u16) / 3u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 8243u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Carrots => match name {
                PropName::Age => match (self.0 - 8595u16) / 1u16 % 8u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Potatoes => match name {
                PropName::Age => match (self.0 - 8603u16) / 1u16 % 8u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::OakButton => match name {
                PropName::Face => match (self.0 - 8611u16) / 8u16 % 3u16 {
                    0u16 => Some(PropValue::Floor),
                    1u16 => Some(PropValue::Wall),
                    2u16 => Some(PropValue::Ceiling),
                    _ => unreachable!(),
                },
                PropName::Facing => match (self.0 - 8611u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 8611u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SpruceButton => match name {
                PropName::Face => match (self.0 - 8635u16) / 8u16 % 3u16 {
                    0u16 => Some(PropValue::Floor),
                    1u16 => Some(PropValue::Wall),
                    2u16 => Some(PropValue::Ceiling),
                    _ => unreachable!(),
                },
                PropName::Facing => match (self.0 - 8635u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 8635u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BirchButton => match name {
                PropName::Face => match (self.0 - 8659u16) / 8u16 % 3u16 {
                    0u16 => Some(PropValue::Floor),
                    1u16 => Some(PropValue::Wall),
                    2u16 => Some(PropValue::Ceiling),
                    _ => unreachable!(),
                },
                PropName::Facing => match (self.0 - 8659u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 8659u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::JungleButton => match name {
                PropName::Face => match (self.0 - 8683u16) / 8u16 % 3u16 {
                    0u16 => Some(PropValue::Floor),
                    1u16 => Some(PropValue::Wall),
                    2u16 => Some(PropValue::Ceiling),
                    _ => unreachable!(),
                },
                PropName::Facing => match (self.0 - 8683u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 8683u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::AcaciaButton => match name {
                PropName::Face => match (self.0 - 8707u16) / 8u16 % 3u16 {
                    0u16 => Some(PropValue::Floor),
                    1u16 => Some(PropValue::Wall),
                    2u16 => Some(PropValue::Ceiling),
                    _ => unreachable!(),
                },
                PropName::Facing => match (self.0 - 8707u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 8707u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CherryButton => match name {
                PropName::Face => match (self.0 - 8731u16) / 8u16 % 3u16 {
                    0u16 => Some(PropValue::Floor),
                    1u16 => Some(PropValue::Wall),
                    2u16 => Some(PropValue::Ceiling),
                    _ => unreachable!(),
                },
                PropName::Facing => match (self.0 - 8731u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 8731u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DarkOakButton => match name {
                PropName::Face => match (self.0 - 8755u16) / 8u16 % 3u16 {
                    0u16 => Some(PropValue::Floor),
                    1u16 => Some(PropValue::Wall),
                    2u16 => Some(PropValue::Ceiling),
                    _ => unreachable!(),
                },
                PropName::Facing => match (self.0 - 8755u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 8755u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MangroveButton => match name {
                PropName::Face => match (self.0 - 8779u16) / 8u16 % 3u16 {
                    0u16 => Some(PropValue::Floor),
                    1u16 => Some(PropValue::Wall),
                    2u16 => Some(PropValue::Ceiling),
                    _ => unreachable!(),
                },
                PropName::Facing => match (self.0 - 8779u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 8779u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BambooButton => match name {
                PropName::Face => match (self.0 - 8803u16) / 8u16 % 3u16 {
                    0u16 => Some(PropValue::Floor),
                    1u16 => Some(PropValue::Wall),
                    2u16 => Some(PropValue::Ceiling),
                    _ => unreachable!(),
                },
                PropName::Facing => match (self.0 - 8803u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 8803u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SkeletonSkull => match name {
                PropName::Rotation => match (self.0 - 8827u16) / 1u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SkeletonWallSkull => match name {
                PropName::Facing => match (self.0 - 8843u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WitherSkeletonSkull => match name {
                PropName::Rotation => match (self.0 - 8847u16) / 1u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WitherSkeletonWallSkull => match name {
                PropName::Facing => match (self.0 - 8863u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::ZombieHead => match name {
                PropName::Rotation => match (self.0 - 8867u16) / 1u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::ZombieWallHead => match name {
                PropName::Facing => match (self.0 - 8883u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PlayerHead => match name {
                PropName::Rotation => match (self.0 - 8887u16) / 1u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PlayerWallHead => match name {
                PropName::Facing => match (self.0 - 8903u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CreeperHead => match name {
                PropName::Rotation => match (self.0 - 8907u16) / 1u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CreeperWallHead => match name {
                PropName::Facing => match (self.0 - 8923u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DragonHead => match name {
                PropName::Rotation => match (self.0 - 8927u16) / 1u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DragonWallHead => match name {
                PropName::Facing => match (self.0 - 8943u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PiglinHead => match name {
                PropName::Rotation => match (self.0 - 8947u16) / 1u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PiglinWallHead => match name {
                PropName::Facing => match (self.0 - 8963u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Anvil => match name {
                PropName::Facing => match (self.0 - 8967u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::ChippedAnvil => match name {
                PropName::Facing => match (self.0 - 8971u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DamagedAnvil => match name {
                PropName::Facing => match (self.0 - 8975u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::TrappedChest => match name {
                PropName::Facing => match (self.0 - 8979u16) / 6u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Type => match (self.0 - 8979u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Single),
                    1u16 => Some(PropValue::Left),
                    2u16 => Some(PropValue::Right),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 8979u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::LightWeightedPressurePlate => match name {
                PropName::Power => match (self.0 - 9003u16) / 1u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::HeavyWeightedPressurePlate => match name {
                PropName::Power => match (self.0 - 9019u16) / 1u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Comparator => match name {
                PropName::Facing => match (self.0 - 9035u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Mode => match (self.0 - 9035u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::Compare),
                    1u16 => Some(PropValue::Subtract),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 9035u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DaylightDetector => match name {
                PropName::Inverted => match (self.0 - 9051u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Power => match (self.0 - 9051u16) / 1u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Hopper => match name {
                PropName::Enabled => match (self.0 - 9085u16) / 5u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Facing => match (self.0 - 9085u16) / 1u16 % 5u16 {
                    0u16 => Some(PropValue::Down),
                    1u16 => Some(PropValue::North),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::QuartzPillar => match name {
                PropName::Axis => match (self.0 - 9097u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::QuartzStairs => match name {
                PropName::Facing => match (self.0 - 9100u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 9100u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 9100u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 9100u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::ActivatorRail => match name {
                PropName::Powered => match (self.0 - 9180u16) / 12u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 9180u16) / 2u16 % 6u16 {
                    0u16 => Some(PropValue::NorthSouth),
                    1u16 => Some(PropValue::EastWest),
                    2u16 => Some(PropValue::AscendingEast),
                    3u16 => Some(PropValue::AscendingWest),
                    4u16 => Some(PropValue::AscendingNorth),
                    5u16 => Some(PropValue::AscendingSouth),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 9180u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Dropper => match name {
                PropName::Facing => match (self.0 - 9204u16) / 2u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                PropName::Triggered => match (self.0 - 9204u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WhiteStainedGlassPane => match name {
                PropName::East => match (self.0 - 9232u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 9232u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 9232u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 9232u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 9232u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::OrangeStainedGlassPane => match name {
                PropName::East => match (self.0 - 9264u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 9264u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 9264u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 9264u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 9264u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MagentaStainedGlassPane => match name {
                PropName::East => match (self.0 - 9296u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 9296u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 9296u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 9296u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 9296u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::LightBlueStainedGlassPane => match name {
                PropName::East => match (self.0 - 9328u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 9328u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 9328u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 9328u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 9328u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::YellowStainedGlassPane => match name {
                PropName::East => match (self.0 - 9360u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 9360u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 9360u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 9360u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 9360u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::LimeStainedGlassPane => match name {
                PropName::East => match (self.0 - 9392u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 9392u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 9392u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 9392u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 9392u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PinkStainedGlassPane => match name {
                PropName::East => match (self.0 - 9424u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 9424u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 9424u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 9424u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 9424u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::GrayStainedGlassPane => match name {
                PropName::East => match (self.0 - 9456u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 9456u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 9456u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 9456u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 9456u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::LightGrayStainedGlassPane => match name {
                PropName::East => match (self.0 - 9488u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 9488u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 9488u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 9488u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 9488u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CyanStainedGlassPane => match name {
                PropName::East => match (self.0 - 9520u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 9520u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 9520u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 9520u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 9520u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PurpleStainedGlassPane => match name {
                PropName::East => match (self.0 - 9552u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 9552u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 9552u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 9552u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 9552u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BlueStainedGlassPane => match name {
                PropName::East => match (self.0 - 9584u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 9584u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 9584u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 9584u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 9584u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BrownStainedGlassPane => match name {
                PropName::East => match (self.0 - 9616u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 9616u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 9616u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 9616u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 9616u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::GreenStainedGlassPane => match name {
                PropName::East => match (self.0 - 9648u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 9648u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 9648u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 9648u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 9648u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::RedStainedGlassPane => match name {
                PropName::East => match (self.0 - 9680u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 9680u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 9680u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 9680u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 9680u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BlackStainedGlassPane => match name {
                PropName::East => match (self.0 - 9712u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 9712u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 9712u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 9712u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 9712u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::AcaciaStairs => match name {
                PropName::Facing => match (self.0 - 9744u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 9744u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 9744u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 9744u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CherryStairs => match name {
                PropName::Facing => match (self.0 - 9824u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 9824u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 9824u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 9824u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DarkOakStairs => match name {
                PropName::Facing => match (self.0 - 9904u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 9904u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 9904u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 9904u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MangroveStairs => match name {
                PropName::Facing => match (self.0 - 9984u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 9984u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 9984u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 9984u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BambooStairs => match name {
                PropName::Facing => match (self.0 - 10064u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 10064u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 10064u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 10064u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BambooMosaicStairs => match name {
                PropName::Facing => match (self.0 - 10144u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 10144u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 10144u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 10144u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Light => match name {
                PropName::Level => match (self.0 - 10226u16) / 2u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 10226u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::IronTrapdoor => match name {
                PropName::Facing => match (self.0 - 10258u16) / 16u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 10258u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 10258u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 10258u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 10258u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PrismarineStairs => match name {
                PropName::Facing => match (self.0 - 10325u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 10325u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 10325u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 10325u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PrismarineBrickStairs => match name {
                PropName::Facing => match (self.0 - 10405u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 10405u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 10405u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 10405u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DarkPrismarineStairs => match name {
                PropName::Facing => match (self.0 - 10485u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 10485u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 10485u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 10485u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PrismarineSlab => match name {
                PropName::Type => match (self.0 - 10565u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 10565u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PrismarineBrickSlab => match name {
                PropName::Type => match (self.0 - 10571u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 10571u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DarkPrismarineSlab => match name {
                PropName::Type => match (self.0 - 10577u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 10577u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::HayBlock => match name {
                PropName::Axis => match (self.0 - 10584u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Sunflower => match name {
                PropName::Half => match (self.0 - 10606u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::Upper),
                    1u16 => Some(PropValue::Lower),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Lilac => match name {
                PropName::Half => match (self.0 - 10608u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::Upper),
                    1u16 => Some(PropValue::Lower),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::RoseBush => match name {
                PropName::Half => match (self.0 - 10610u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::Upper),
                    1u16 => Some(PropValue::Lower),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Peony => match name {
                PropName::Half => match (self.0 - 10612u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::Upper),
                    1u16 => Some(PropValue::Lower),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::TallGrass => match name {
                PropName::Half => match (self.0 - 10614u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::Upper),
                    1u16 => Some(PropValue::Lower),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::LargeFern => match name {
                PropName::Half => match (self.0 - 10616u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::Upper),
                    1u16 => Some(PropValue::Lower),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WhiteBanner => match name {
                PropName::Rotation => match (self.0 - 10618u16) / 1u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::OrangeBanner => match name {
                PropName::Rotation => match (self.0 - 10634u16) / 1u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MagentaBanner => match name {
                PropName::Rotation => match (self.0 - 10650u16) / 1u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::LightBlueBanner => match name {
                PropName::Rotation => match (self.0 - 10666u16) / 1u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::YellowBanner => match name {
                PropName::Rotation => match (self.0 - 10682u16) / 1u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::LimeBanner => match name {
                PropName::Rotation => match (self.0 - 10698u16) / 1u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PinkBanner => match name {
                PropName::Rotation => match (self.0 - 10714u16) / 1u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::GrayBanner => match name {
                PropName::Rotation => match (self.0 - 10730u16) / 1u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::LightGrayBanner => match name {
                PropName::Rotation => match (self.0 - 10746u16) / 1u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CyanBanner => match name {
                PropName::Rotation => match (self.0 - 10762u16) / 1u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PurpleBanner => match name {
                PropName::Rotation => match (self.0 - 10778u16) / 1u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BlueBanner => match name {
                PropName::Rotation => match (self.0 - 10794u16) / 1u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BrownBanner => match name {
                PropName::Rotation => match (self.0 - 10810u16) / 1u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::GreenBanner => match name {
                PropName::Rotation => match (self.0 - 10826u16) / 1u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::RedBanner => match name {
                PropName::Rotation => match (self.0 - 10842u16) / 1u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BlackBanner => match name {
                PropName::Rotation => match (self.0 - 10858u16) / 1u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WhiteWallBanner => match name {
                PropName::Facing => match (self.0 - 10874u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::OrangeWallBanner => match name {
                PropName::Facing => match (self.0 - 10878u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MagentaWallBanner => match name {
                PropName::Facing => match (self.0 - 10882u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::LightBlueWallBanner => match name {
                PropName::Facing => match (self.0 - 10886u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::YellowWallBanner => match name {
                PropName::Facing => match (self.0 - 10890u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::LimeWallBanner => match name {
                PropName::Facing => match (self.0 - 10894u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PinkWallBanner => match name {
                PropName::Facing => match (self.0 - 10898u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::GrayWallBanner => match name {
                PropName::Facing => match (self.0 - 10902u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::LightGrayWallBanner => match name {
                PropName::Facing => match (self.0 - 10906u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CyanWallBanner => match name {
                PropName::Facing => match (self.0 - 10910u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PurpleWallBanner => match name {
                PropName::Facing => match (self.0 - 10914u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BlueWallBanner => match name {
                PropName::Facing => match (self.0 - 10918u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BrownWallBanner => match name {
                PropName::Facing => match (self.0 - 10922u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::GreenWallBanner => match name {
                PropName::Facing => match (self.0 - 10926u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::RedWallBanner => match name {
                PropName::Facing => match (self.0 - 10930u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BlackWallBanner => match name {
                PropName::Facing => match (self.0 - 10934u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::RedSandstoneStairs => match name {
                PropName::Facing => match (self.0 - 10941u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 10941u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 10941u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 10941u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::OakSlab => match name {
                PropName::Type => match (self.0 - 11021u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 11021u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SpruceSlab => match name {
                PropName::Type => match (self.0 - 11027u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 11027u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BirchSlab => match name {
                PropName::Type => match (self.0 - 11033u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 11033u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::JungleSlab => match name {
                PropName::Type => match (self.0 - 11039u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 11039u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::AcaciaSlab => match name {
                PropName::Type => match (self.0 - 11045u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 11045u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CherrySlab => match name {
                PropName::Type => match (self.0 - 11051u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 11051u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DarkOakSlab => match name {
                PropName::Type => match (self.0 - 11057u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 11057u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MangroveSlab => match name {
                PropName::Type => match (self.0 - 11063u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 11063u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BambooSlab => match name {
                PropName::Type => match (self.0 - 11069u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 11069u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BambooMosaicSlab => match name {
                PropName::Type => match (self.0 - 11075u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 11075u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::StoneSlab => match name {
                PropName::Type => match (self.0 - 11081u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 11081u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SmoothStoneSlab => match name {
                PropName::Type => match (self.0 - 11087u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 11087u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SandstoneSlab => match name {
                PropName::Type => match (self.0 - 11093u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 11093u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CutSandstoneSlab => match name {
                PropName::Type => match (self.0 - 11099u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 11099u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PetrifiedOakSlab => match name {
                PropName::Type => match (self.0 - 11105u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 11105u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CobblestoneSlab => match name {
                PropName::Type => match (self.0 - 11111u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 11111u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BrickSlab => match name {
                PropName::Type => match (self.0 - 11117u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 11117u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::StoneBrickSlab => match name {
                PropName::Type => match (self.0 - 11123u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 11123u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MudBrickSlab => match name {
                PropName::Type => match (self.0 - 11129u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 11129u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::NetherBrickSlab => match name {
                PropName::Type => match (self.0 - 11135u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 11135u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::QuartzSlab => match name {
                PropName::Type => match (self.0 - 11141u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 11141u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::RedSandstoneSlab => match name {
                PropName::Type => match (self.0 - 11147u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 11147u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CutRedSandstoneSlab => match name {
                PropName::Type => match (self.0 - 11153u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 11153u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PurpurSlab => match name {
                PropName::Type => match (self.0 - 11159u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 11159u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SpruceFenceGate => match name {
                PropName::Facing => match (self.0 - 11169u16) / 8u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::InWall => match (self.0 - 11169u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 11169u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 11169u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BirchFenceGate => match name {
                PropName::Facing => match (self.0 - 11201u16) / 8u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::InWall => match (self.0 - 11201u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 11201u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 11201u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::JungleFenceGate => match name {
                PropName::Facing => match (self.0 - 11233u16) / 8u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::InWall => match (self.0 - 11233u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 11233u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 11233u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::AcaciaFenceGate => match name {
                PropName::Facing => match (self.0 - 11265u16) / 8u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::InWall => match (self.0 - 11265u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 11265u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 11265u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CherryFenceGate => match name {
                PropName::Facing => match (self.0 - 11297u16) / 8u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::InWall => match (self.0 - 11297u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 11297u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 11297u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DarkOakFenceGate => match name {
                PropName::Facing => match (self.0 - 11329u16) / 8u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::InWall => match (self.0 - 11329u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 11329u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 11329u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MangroveFenceGate => match name {
                PropName::Facing => match (self.0 - 11361u16) / 8u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::InWall => match (self.0 - 11361u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 11361u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 11361u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BambooFenceGate => match name {
                PropName::Facing => match (self.0 - 11393u16) / 8u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::InWall => match (self.0 - 11393u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 11393u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 11393u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SpruceFence => match name {
                PropName::East => match (self.0 - 11425u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 11425u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 11425u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 11425u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 11425u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BirchFence => match name {
                PropName::East => match (self.0 - 11457u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 11457u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 11457u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 11457u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 11457u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::JungleFence => match name {
                PropName::East => match (self.0 - 11489u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 11489u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 11489u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 11489u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 11489u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::AcaciaFence => match name {
                PropName::East => match (self.0 - 11521u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 11521u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 11521u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 11521u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 11521u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CherryFence => match name {
                PropName::East => match (self.0 - 11553u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 11553u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 11553u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 11553u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 11553u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DarkOakFence => match name {
                PropName::East => match (self.0 - 11585u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 11585u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 11585u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 11585u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 11585u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MangroveFence => match name {
                PropName::East => match (self.0 - 11617u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 11617u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 11617u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 11617u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 11617u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BambooFence => match name {
                PropName::East => match (self.0 - 11649u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 11649u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 11649u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 11649u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 11649u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SpruceDoor => match name {
                PropName::Facing => match (self.0 - 11681u16) / 16u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 11681u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::Upper),
                    1u16 => Some(PropValue::Lower),
                    _ => unreachable!(),
                },
                PropName::Hinge => match (self.0 - 11681u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::Left),
                    1u16 => Some(PropValue::Right),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 11681u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 11681u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BirchDoor => match name {
                PropName::Facing => match (self.0 - 11745u16) / 16u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 11745u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::Upper),
                    1u16 => Some(PropValue::Lower),
                    _ => unreachable!(),
                },
                PropName::Hinge => match (self.0 - 11745u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::Left),
                    1u16 => Some(PropValue::Right),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 11745u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 11745u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::JungleDoor => match name {
                PropName::Facing => match (self.0 - 11809u16) / 16u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 11809u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::Upper),
                    1u16 => Some(PropValue::Lower),
                    _ => unreachable!(),
                },
                PropName::Hinge => match (self.0 - 11809u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::Left),
                    1u16 => Some(PropValue::Right),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 11809u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 11809u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::AcaciaDoor => match name {
                PropName::Facing => match (self.0 - 11873u16) / 16u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 11873u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::Upper),
                    1u16 => Some(PropValue::Lower),
                    _ => unreachable!(),
                },
                PropName::Hinge => match (self.0 - 11873u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::Left),
                    1u16 => Some(PropValue::Right),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 11873u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 11873u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CherryDoor => match name {
                PropName::Facing => match (self.0 - 11937u16) / 16u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 11937u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::Upper),
                    1u16 => Some(PropValue::Lower),
                    _ => unreachable!(),
                },
                PropName::Hinge => match (self.0 - 11937u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::Left),
                    1u16 => Some(PropValue::Right),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 11937u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 11937u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DarkOakDoor => match name {
                PropName::Facing => match (self.0 - 12001u16) / 16u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 12001u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::Upper),
                    1u16 => Some(PropValue::Lower),
                    _ => unreachable!(),
                },
                PropName::Hinge => match (self.0 - 12001u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::Left),
                    1u16 => Some(PropValue::Right),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 12001u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 12001u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MangroveDoor => match name {
                PropName::Facing => match (self.0 - 12065u16) / 16u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 12065u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::Upper),
                    1u16 => Some(PropValue::Lower),
                    _ => unreachable!(),
                },
                PropName::Hinge => match (self.0 - 12065u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::Left),
                    1u16 => Some(PropValue::Right),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 12065u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 12065u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BambooDoor => match name {
                PropName::Facing => match (self.0 - 12129u16) / 16u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 12129u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::Upper),
                    1u16 => Some(PropValue::Lower),
                    _ => unreachable!(),
                },
                PropName::Hinge => match (self.0 - 12129u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::Left),
                    1u16 => Some(PropValue::Right),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 12129u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 12129u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::EndRod => match name {
                PropName::Facing => match (self.0 - 12193u16) / 1u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::ChorusPlant => match name {
                PropName::Down => match (self.0 - 12199u16) / 32u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::East => match (self.0 - 12199u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 12199u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 12199u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Up => match (self.0 - 12199u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 12199u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::ChorusFlower => match name {
                PropName::Age => match (self.0 - 12263u16) / 1u16 % 6u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PurpurPillar => match name {
                PropName::Axis => match (self.0 - 12270u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PurpurStairs => match name {
                PropName::Facing => match (self.0 - 12273u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 12273u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 12273u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 12273u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::TorchflowerCrop => match name {
                PropName::Age => match (self.0 - 12354u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PitcherCrop => match name {
                PropName::Age => match (self.0 - 12356u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 12356u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::Upper),
                    1u16 => Some(PropValue::Lower),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PitcherPlant => match name {
                PropName::Half => match (self.0 - 12366u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::Upper),
                    1u16 => Some(PropValue::Lower),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Beetroots => match name {
                PropName::Age => match (self.0 - 12368u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::RepeatingCommandBlock => match name {
                PropName::Conditional => match (self.0 - 12374u16) / 6u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Facing => match (self.0 - 12374u16) / 1u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::ChainCommandBlock => match name {
                PropName::Conditional => match (self.0 - 12386u16) / 6u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Facing => match (self.0 - 12386u16) / 1u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::FrostedIce => match name {
                PropName::Age => match (self.0 - 12398u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BoneBlock => match name {
                PropName::Axis => match (self.0 - 12405u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Observer => match name {
                PropName::Facing => match (self.0 - 12409u16) / 2u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 12409u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::ShulkerBox => match name {
                PropName::Facing => match (self.0 - 12421u16) / 1u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WhiteShulkerBox => match name {
                PropName::Facing => match (self.0 - 12427u16) / 1u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::OrangeShulkerBox => match name {
                PropName::Facing => match (self.0 - 12433u16) / 1u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MagentaShulkerBox => match name {
                PropName::Facing => match (self.0 - 12439u16) / 1u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::LightBlueShulkerBox => match name {
                PropName::Facing => match (self.0 - 12445u16) / 1u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::YellowShulkerBox => match name {
                PropName::Facing => match (self.0 - 12451u16) / 1u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::LimeShulkerBox => match name {
                PropName::Facing => match (self.0 - 12457u16) / 1u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PinkShulkerBox => match name {
                PropName::Facing => match (self.0 - 12463u16) / 1u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::GrayShulkerBox => match name {
                PropName::Facing => match (self.0 - 12469u16) / 1u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::LightGrayShulkerBox => match name {
                PropName::Facing => match (self.0 - 12475u16) / 1u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CyanShulkerBox => match name {
                PropName::Facing => match (self.0 - 12481u16) / 1u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PurpleShulkerBox => match name {
                PropName::Facing => match (self.0 - 12487u16) / 1u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BlueShulkerBox => match name {
                PropName::Facing => match (self.0 - 12493u16) / 1u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BrownShulkerBox => match name {
                PropName::Facing => match (self.0 - 12499u16) / 1u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::GreenShulkerBox => match name {
                PropName::Facing => match (self.0 - 12505u16) / 1u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::RedShulkerBox => match name {
                PropName::Facing => match (self.0 - 12511u16) / 1u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BlackShulkerBox => match name {
                PropName::Facing => match (self.0 - 12517u16) / 1u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WhiteGlazedTerracotta => match name {
                PropName::Facing => match (self.0 - 12523u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::OrangeGlazedTerracotta => match name {
                PropName::Facing => match (self.0 - 12527u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MagentaGlazedTerracotta => match name {
                PropName::Facing => match (self.0 - 12531u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::LightBlueGlazedTerracotta => match name {
                PropName::Facing => match (self.0 - 12535u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::YellowGlazedTerracotta => match name {
                PropName::Facing => match (self.0 - 12539u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::LimeGlazedTerracotta => match name {
                PropName::Facing => match (self.0 - 12543u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PinkGlazedTerracotta => match name {
                PropName::Facing => match (self.0 - 12547u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::GrayGlazedTerracotta => match name {
                PropName::Facing => match (self.0 - 12551u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::LightGrayGlazedTerracotta => match name {
                PropName::Facing => match (self.0 - 12555u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CyanGlazedTerracotta => match name {
                PropName::Facing => match (self.0 - 12559u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PurpleGlazedTerracotta => match name {
                PropName::Facing => match (self.0 - 12563u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BlueGlazedTerracotta => match name {
                PropName::Facing => match (self.0 - 12567u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BrownGlazedTerracotta => match name {
                PropName::Facing => match (self.0 - 12571u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::GreenGlazedTerracotta => match name {
                PropName::Facing => match (self.0 - 12575u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::RedGlazedTerracotta => match name {
                PropName::Facing => match (self.0 - 12579u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BlackGlazedTerracotta => match name {
                PropName::Facing => match (self.0 - 12583u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Kelp => match name {
                PropName::Age => match (self.0 - 12619u16) / 1u16 % 26u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    16u16 => Some(PropValue::_16),
                    17u16 => Some(PropValue::_17),
                    18u16 => Some(PropValue::_18),
                    19u16 => Some(PropValue::_19),
                    20u16 => Some(PropValue::_20),
                    21u16 => Some(PropValue::_21),
                    22u16 => Some(PropValue::_22),
                    23u16 => Some(PropValue::_23),
                    24u16 => Some(PropValue::_24),
                    25u16 => Some(PropValue::_25),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::TurtleEgg => match name {
                PropName::Eggs => match (self.0 - 12647u16) / 3u16 % 4u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    3u16 => Some(PropValue::_4),
                    _ => unreachable!(),
                },
                PropName::Hatch => match (self.0 - 12647u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SnifferEgg => match name {
                PropName::Hatch => match (self.0 - 12659u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DeadTubeCoral => match name {
                PropName::Waterlogged => match (self.0 - 12672u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DeadBrainCoral => match name {
                PropName::Waterlogged => match (self.0 - 12674u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DeadBubbleCoral => match name {
                PropName::Waterlogged => match (self.0 - 12676u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DeadFireCoral => match name {
                PropName::Waterlogged => match (self.0 - 12678u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DeadHornCoral => match name {
                PropName::Waterlogged => match (self.0 - 12680u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::TubeCoral => match name {
                PropName::Waterlogged => match (self.0 - 12682u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BrainCoral => match name {
                PropName::Waterlogged => match (self.0 - 12684u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BubbleCoral => match name {
                PropName::Waterlogged => match (self.0 - 12686u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::FireCoral => match name {
                PropName::Waterlogged => match (self.0 - 12688u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::HornCoral => match name {
                PropName::Waterlogged => match (self.0 - 12690u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DeadTubeCoralFan => match name {
                PropName::Waterlogged => match (self.0 - 12692u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DeadBrainCoralFan => match name {
                PropName::Waterlogged => match (self.0 - 12694u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DeadBubbleCoralFan => match name {
                PropName::Waterlogged => match (self.0 - 12696u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DeadFireCoralFan => match name {
                PropName::Waterlogged => match (self.0 - 12698u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DeadHornCoralFan => match name {
                PropName::Waterlogged => match (self.0 - 12700u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::TubeCoralFan => match name {
                PropName::Waterlogged => match (self.0 - 12702u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BrainCoralFan => match name {
                PropName::Waterlogged => match (self.0 - 12704u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BubbleCoralFan => match name {
                PropName::Waterlogged => match (self.0 - 12706u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::FireCoralFan => match name {
                PropName::Waterlogged => match (self.0 - 12708u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::HornCoralFan => match name {
                PropName::Waterlogged => match (self.0 - 12710u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DeadTubeCoralWallFan => match name {
                PropName::Facing => match (self.0 - 12712u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 12712u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DeadBrainCoralWallFan => match name {
                PropName::Facing => match (self.0 - 12720u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 12720u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DeadBubbleCoralWallFan => match name {
                PropName::Facing => match (self.0 - 12728u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 12728u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DeadFireCoralWallFan => match name {
                PropName::Facing => match (self.0 - 12736u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 12736u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DeadHornCoralWallFan => match name {
                PropName::Facing => match (self.0 - 12744u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 12744u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::TubeCoralWallFan => match name {
                PropName::Facing => match (self.0 - 12752u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 12752u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BrainCoralWallFan => match name {
                PropName::Facing => match (self.0 - 12760u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 12760u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BubbleCoralWallFan => match name {
                PropName::Facing => match (self.0 - 12768u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 12768u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::FireCoralWallFan => match name {
                PropName::Facing => match (self.0 - 12776u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 12776u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::HornCoralWallFan => match name {
                PropName::Facing => match (self.0 - 12784u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 12784u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SeaPickle => match name {
                PropName::Pickles => match (self.0 - 12792u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    3u16 => Some(PropValue::_4),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 12792u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Conduit => match name {
                PropName::Waterlogged => match (self.0 - 12801u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Bamboo => match name {
                PropName::Age => match (self.0 - 12804u16) / 6u16 % 2u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    _ => unreachable!(),
                },
                PropName::Leaves => match (self.0 - 12804u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Small),
                    2u16 => Some(PropValue::Large),
                    _ => unreachable!(),
                },
                PropName::Stage => match (self.0 - 12804u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BubbleColumn => match name {
                PropName::Drag => match (self.0 - 12819u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PolishedGraniteStairs => match name {
                PropName::Facing => match (self.0 - 12821u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 12821u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 12821u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 12821u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SmoothRedSandstoneStairs => match name {
                PropName::Facing => match (self.0 - 12901u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 12901u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 12901u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 12901u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MossyStoneBrickStairs => match name {
                PropName::Facing => match (self.0 - 12981u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 12981u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 12981u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 12981u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PolishedDioriteStairs => match name {
                PropName::Facing => match (self.0 - 13061u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 13061u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 13061u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 13061u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MossyCobblestoneStairs => match name {
                PropName::Facing => match (self.0 - 13141u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 13141u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 13141u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 13141u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::EndStoneBrickStairs => match name {
                PropName::Facing => match (self.0 - 13221u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 13221u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 13221u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 13221u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::StoneStairs => match name {
                PropName::Facing => match (self.0 - 13301u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 13301u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 13301u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 13301u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SmoothSandstoneStairs => match name {
                PropName::Facing => match (self.0 - 13381u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 13381u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 13381u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 13381u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SmoothQuartzStairs => match name {
                PropName::Facing => match (self.0 - 13461u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 13461u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 13461u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 13461u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::GraniteStairs => match name {
                PropName::Facing => match (self.0 - 13541u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 13541u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 13541u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 13541u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::AndesiteStairs => match name {
                PropName::Facing => match (self.0 - 13621u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 13621u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 13621u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 13621u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::RedNetherBrickStairs => match name {
                PropName::Facing => match (self.0 - 13701u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 13701u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 13701u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 13701u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PolishedAndesiteStairs => match name {
                PropName::Facing => match (self.0 - 13781u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 13781u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 13781u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 13781u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DioriteStairs => match name {
                PropName::Facing => match (self.0 - 13861u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 13861u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 13861u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 13861u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PolishedGraniteSlab => match name {
                PropName::Type => match (self.0 - 13941u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 13941u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SmoothRedSandstoneSlab => match name {
                PropName::Type => match (self.0 - 13947u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 13947u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MossyStoneBrickSlab => match name {
                PropName::Type => match (self.0 - 13953u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 13953u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PolishedDioriteSlab => match name {
                PropName::Type => match (self.0 - 13959u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 13959u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MossyCobblestoneSlab => match name {
                PropName::Type => match (self.0 - 13965u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 13965u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::EndStoneBrickSlab => match name {
                PropName::Type => match (self.0 - 13971u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 13971u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SmoothSandstoneSlab => match name {
                PropName::Type => match (self.0 - 13977u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 13977u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SmoothQuartzSlab => match name {
                PropName::Type => match (self.0 - 13983u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 13983u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::GraniteSlab => match name {
                PropName::Type => match (self.0 - 13989u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 13989u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::AndesiteSlab => match name {
                PropName::Type => match (self.0 - 13995u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 13995u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::RedNetherBrickSlab => match name {
                PropName::Type => match (self.0 - 14001u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 14001u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PolishedAndesiteSlab => match name {
                PropName::Type => match (self.0 - 14007u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 14007u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DioriteSlab => match name {
                PropName::Type => match (self.0 - 14013u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 14013u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BrickWall => match name {
                PropName::East => match (self.0 - 14019u16) / 108u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 14019u16) / 36u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 14019u16) / 12u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::Up => match (self.0 - 14019u16) / 6u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 14019u16) / 3u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 14019u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PrismarineWall => match name {
                PropName::East => match (self.0 - 14343u16) / 108u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 14343u16) / 36u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 14343u16) / 12u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::Up => match (self.0 - 14343u16) / 6u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 14343u16) / 3u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 14343u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::RedSandstoneWall => match name {
                PropName::East => match (self.0 - 14667u16) / 108u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 14667u16) / 36u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 14667u16) / 12u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::Up => match (self.0 - 14667u16) / 6u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 14667u16) / 3u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 14667u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MossyStoneBrickWall => match name {
                PropName::East => match (self.0 - 14991u16) / 108u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 14991u16) / 36u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 14991u16) / 12u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::Up => match (self.0 - 14991u16) / 6u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 14991u16) / 3u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 14991u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::GraniteWall => match name {
                PropName::East => match (self.0 - 15315u16) / 108u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 15315u16) / 36u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 15315u16) / 12u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::Up => match (self.0 - 15315u16) / 6u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 15315u16) / 3u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 15315u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::StoneBrickWall => match name {
                PropName::East => match (self.0 - 15639u16) / 108u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 15639u16) / 36u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 15639u16) / 12u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::Up => match (self.0 - 15639u16) / 6u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 15639u16) / 3u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 15639u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MudBrickWall => match name {
                PropName::East => match (self.0 - 15963u16) / 108u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 15963u16) / 36u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 15963u16) / 12u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::Up => match (self.0 - 15963u16) / 6u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 15963u16) / 3u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 15963u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::NetherBrickWall => match name {
                PropName::East => match (self.0 - 16287u16) / 108u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 16287u16) / 36u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 16287u16) / 12u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::Up => match (self.0 - 16287u16) / 6u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 16287u16) / 3u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 16287u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::AndesiteWall => match name {
                PropName::East => match (self.0 - 16611u16) / 108u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 16611u16) / 36u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 16611u16) / 12u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::Up => match (self.0 - 16611u16) / 6u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 16611u16) / 3u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 16611u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::RedNetherBrickWall => match name {
                PropName::East => match (self.0 - 16935u16) / 108u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 16935u16) / 36u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 16935u16) / 12u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::Up => match (self.0 - 16935u16) / 6u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 16935u16) / 3u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 16935u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SandstoneWall => match name {
                PropName::East => match (self.0 - 17259u16) / 108u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 17259u16) / 36u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 17259u16) / 12u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::Up => match (self.0 - 17259u16) / 6u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 17259u16) / 3u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 17259u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::EndStoneBrickWall => match name {
                PropName::East => match (self.0 - 17583u16) / 108u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 17583u16) / 36u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 17583u16) / 12u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::Up => match (self.0 - 17583u16) / 6u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 17583u16) / 3u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 17583u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DioriteWall => match name {
                PropName::East => match (self.0 - 17907u16) / 108u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 17907u16) / 36u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 17907u16) / 12u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::Up => match (self.0 - 17907u16) / 6u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 17907u16) / 3u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 17907u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Scaffolding => match name {
                PropName::Bottom => match (self.0 - 18231u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Distance => match (self.0 - 18231u16) / 2u16 % 8u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 18231u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Loom => match name {
                PropName::Facing => match (self.0 - 18263u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Barrel => match name {
                PropName::Facing => match (self.0 - 18267u16) / 2u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 18267u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Smoker => match name {
                PropName::Facing => match (self.0 - 18279u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Lit => match (self.0 - 18279u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BlastFurnace => match name {
                PropName::Facing => match (self.0 - 18287u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Lit => match (self.0 - 18287u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Grindstone => match name {
                PropName::Face => match (self.0 - 18297u16) / 4u16 % 3u16 {
                    0u16 => Some(PropValue::Floor),
                    1u16 => Some(PropValue::Wall),
                    2u16 => Some(PropValue::Ceiling),
                    _ => unreachable!(),
                },
                PropName::Facing => match (self.0 - 18297u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Lectern => match name {
                PropName::Facing => match (self.0 - 18309u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::HasBook => match (self.0 - 18309u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 18309u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Stonecutter => match name {
                PropName::Facing => match (self.0 - 18326u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Bell => match name {
                PropName::Attachment => match (self.0 - 18330u16) / 8u16 % 4u16 {
                    0u16 => Some(PropValue::Floor),
                    1u16 => Some(PropValue::Ceiling),
                    2u16 => Some(PropValue::SingleWall),
                    3u16 => Some(PropValue::DoubleWall),
                    _ => unreachable!(),
                },
                PropName::Facing => match (self.0 - 18330u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 18330u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Lantern => match name {
                PropName::Hanging => match (self.0 - 18362u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 18362u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SoulLantern => match name {
                PropName::Hanging => match (self.0 - 18366u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 18366u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Campfire => match name {
                PropName::Facing => match (self.0 - 18370u16) / 8u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Lit => match (self.0 - 18370u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::SignalFire => match (self.0 - 18370u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 18370u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SoulCampfire => match name {
                PropName::Facing => match (self.0 - 18402u16) / 8u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Lit => match (self.0 - 18402u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::SignalFire => match (self.0 - 18402u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 18402u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SweetBerryBush => match name {
                PropName::Age => match (self.0 - 18434u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WarpedStem => match name {
                PropName::Axis => match (self.0 - 18438u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::StrippedWarpedStem => match name {
                PropName::Axis => match (self.0 - 18441u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WarpedHyphae => match name {
                PropName::Axis => match (self.0 - 18444u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::StrippedWarpedHyphae => match name {
                PropName::Axis => match (self.0 - 18447u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CrimsonStem => match name {
                PropName::Axis => match (self.0 - 18455u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::StrippedCrimsonStem => match name {
                PropName::Axis => match (self.0 - 18458u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CrimsonHyphae => match name {
                PropName::Axis => match (self.0 - 18461u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::StrippedCrimsonHyphae => match name {
                PropName::Axis => match (self.0 - 18464u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WeepingVines => match name {
                PropName::Age => match (self.0 - 18470u16) / 1u16 % 26u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    16u16 => Some(PropValue::_16),
                    17u16 => Some(PropValue::_17),
                    18u16 => Some(PropValue::_18),
                    19u16 => Some(PropValue::_19),
                    20u16 => Some(PropValue::_20),
                    21u16 => Some(PropValue::_21),
                    22u16 => Some(PropValue::_22),
                    23u16 => Some(PropValue::_23),
                    24u16 => Some(PropValue::_24),
                    25u16 => Some(PropValue::_25),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::TwistingVines => match name {
                PropName::Age => match (self.0 - 18497u16) / 1u16 % 26u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    16u16 => Some(PropValue::_16),
                    17u16 => Some(PropValue::_17),
                    18u16 => Some(PropValue::_18),
                    19u16 => Some(PropValue::_19),
                    20u16 => Some(PropValue::_20),
                    21u16 => Some(PropValue::_21),
                    22u16 => Some(PropValue::_22),
                    23u16 => Some(PropValue::_23),
                    24u16 => Some(PropValue::_24),
                    25u16 => Some(PropValue::_25),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CrimsonSlab => match name {
                PropName::Type => match (self.0 - 18527u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 18527u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WarpedSlab => match name {
                PropName::Type => match (self.0 - 18533u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 18533u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CrimsonPressurePlate => match name {
                PropName::Powered => match (self.0 - 18539u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WarpedPressurePlate => match name {
                PropName::Powered => match (self.0 - 18541u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CrimsonFence => match name {
                PropName::East => match (self.0 - 18543u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 18543u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 18543u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 18543u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 18543u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WarpedFence => match name {
                PropName::East => match (self.0 - 18575u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 18575u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 18575u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 18575u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 18575u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CrimsonTrapdoor => match name {
                PropName::Facing => match (self.0 - 18607u16) / 16u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 18607u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 18607u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 18607u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 18607u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WarpedTrapdoor => match name {
                PropName::Facing => match (self.0 - 18671u16) / 16u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 18671u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 18671u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 18671u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 18671u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CrimsonFenceGate => match name {
                PropName::Facing => match (self.0 - 18735u16) / 8u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::InWall => match (self.0 - 18735u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 18735u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 18735u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WarpedFenceGate => match name {
                PropName::Facing => match (self.0 - 18767u16) / 8u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::InWall => match (self.0 - 18767u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 18767u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 18767u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CrimsonStairs => match name {
                PropName::Facing => match (self.0 - 18799u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 18799u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 18799u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 18799u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WarpedStairs => match name {
                PropName::Facing => match (self.0 - 18879u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 18879u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 18879u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 18879u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CrimsonButton => match name {
                PropName::Face => match (self.0 - 18959u16) / 8u16 % 3u16 {
                    0u16 => Some(PropValue::Floor),
                    1u16 => Some(PropValue::Wall),
                    2u16 => Some(PropValue::Ceiling),
                    _ => unreachable!(),
                },
                PropName::Facing => match (self.0 - 18959u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 18959u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WarpedButton => match name {
                PropName::Face => match (self.0 - 18983u16) / 8u16 % 3u16 {
                    0u16 => Some(PropValue::Floor),
                    1u16 => Some(PropValue::Wall),
                    2u16 => Some(PropValue::Ceiling),
                    _ => unreachable!(),
                },
                PropName::Facing => match (self.0 - 18983u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 18983u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CrimsonDoor => match name {
                PropName::Facing => match (self.0 - 19007u16) / 16u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 19007u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::Upper),
                    1u16 => Some(PropValue::Lower),
                    _ => unreachable!(),
                },
                PropName::Hinge => match (self.0 - 19007u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::Left),
                    1u16 => Some(PropValue::Right),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 19007u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 19007u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WarpedDoor => match name {
                PropName::Facing => match (self.0 - 19071u16) / 16u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 19071u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::Upper),
                    1u16 => Some(PropValue::Lower),
                    _ => unreachable!(),
                },
                PropName::Hinge => match (self.0 - 19071u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::Left),
                    1u16 => Some(PropValue::Right),
                    _ => unreachable!(),
                },
                PropName::Open => match (self.0 - 19071u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 19071u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CrimsonSign => match name {
                PropName::Rotation => match (self.0 - 19135u16) / 2u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 19135u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WarpedSign => match name {
                PropName::Rotation => match (self.0 - 19167u16) / 2u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 19167u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CrimsonWallSign => match name {
                PropName::Facing => match (self.0 - 19199u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 19199u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WarpedWallSign => match name {
                PropName::Facing => match (self.0 - 19207u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 19207u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::StructureBlock => match name {
                PropName::Mode => match (self.0 - 19215u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::Save),
                    1u16 => Some(PropValue::Load),
                    2u16 => Some(PropValue::Corner),
                    3u16 => Some(PropValue::Data),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Jigsaw => match name {
                PropName::Orientation => match (self.0 - 19219u16) / 1u16 % 12u16 {
                    0u16 => Some(PropValue::DownEast),
                    1u16 => Some(PropValue::DownNorth),
                    2u16 => Some(PropValue::DownSouth),
                    3u16 => Some(PropValue::DownWest),
                    4u16 => Some(PropValue::UpEast),
                    5u16 => Some(PropValue::UpNorth),
                    6u16 => Some(PropValue::UpSouth),
                    7u16 => Some(PropValue::UpWest),
                    8u16 => Some(PropValue::WestUp),
                    9u16 => Some(PropValue::EastUp),
                    10u16 => Some(PropValue::NorthUp),
                    11u16 => Some(PropValue::SouthUp),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Composter => match name {
                PropName::Level => match (self.0 - 19231u16) / 1u16 % 9u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Target => match name {
                PropName::Power => match (self.0 - 19240u16) / 1u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BeeNest => match name {
                PropName::Facing => match (self.0 - 19256u16) / 6u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::HoneyLevel => match (self.0 - 19256u16) / 1u16 % 6u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Beehive => match name {
                PropName::Facing => match (self.0 - 19280u16) / 6u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::HoneyLevel => match (self.0 - 19280u16) / 1u16 % 6u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::RespawnAnchor => match name {
                PropName::Charges => match (self.0 - 19309u16) / 1u16 % 5u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BlackstoneStairs => match name {
                PropName::Facing => match (self.0 - 19320u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 19320u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 19320u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 19320u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BlackstoneWall => match name {
                PropName::East => match (self.0 - 19400u16) / 108u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 19400u16) / 36u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 19400u16) / 12u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::Up => match (self.0 - 19400u16) / 6u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 19400u16) / 3u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 19400u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BlackstoneSlab => match name {
                PropName::Type => match (self.0 - 19724u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 19724u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PolishedBlackstoneBrickSlab => match name {
                PropName::Type => match (self.0 - 19734u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 19734u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PolishedBlackstoneBrickStairs => match name {
                PropName::Facing => match (self.0 - 19740u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 19740u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 19740u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 19740u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PolishedBlackstoneBrickWall => match name {
                PropName::East => match (self.0 - 19820u16) / 108u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 19820u16) / 36u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 19820u16) / 12u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::Up => match (self.0 - 19820u16) / 6u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 19820u16) / 3u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 19820u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PolishedBlackstoneStairs => match name {
                PropName::Facing => match (self.0 - 20145u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 20145u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 20145u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 20145u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PolishedBlackstoneSlab => match name {
                PropName::Type => match (self.0 - 20225u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 20225u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PolishedBlackstonePressurePlate => match name {
                PropName::Powered => match (self.0 - 20231u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PolishedBlackstoneButton => match name {
                PropName::Face => match (self.0 - 20233u16) / 8u16 % 3u16 {
                    0u16 => Some(PropValue::Floor),
                    1u16 => Some(PropValue::Wall),
                    2u16 => Some(PropValue::Ceiling),
                    _ => unreachable!(),
                },
                PropName::Facing => match (self.0 - 20233u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 20233u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PolishedBlackstoneWall => match name {
                PropName::East => match (self.0 - 20257u16) / 108u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 20257u16) / 36u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 20257u16) / 12u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::Up => match (self.0 - 20257u16) / 6u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 20257u16) / 3u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 20257u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Candle => match name {
                PropName::Candles => match (self.0 - 20584u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    3u16 => Some(PropValue::_4),
                    _ => unreachable!(),
                },
                PropName::Lit => match (self.0 - 20584u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 20584u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WhiteCandle => match name {
                PropName::Candles => match (self.0 - 20600u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    3u16 => Some(PropValue::_4),
                    _ => unreachable!(),
                },
                PropName::Lit => match (self.0 - 20600u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 20600u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::OrangeCandle => match name {
                PropName::Candles => match (self.0 - 20616u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    3u16 => Some(PropValue::_4),
                    _ => unreachable!(),
                },
                PropName::Lit => match (self.0 - 20616u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 20616u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MagentaCandle => match name {
                PropName::Candles => match (self.0 - 20632u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    3u16 => Some(PropValue::_4),
                    _ => unreachable!(),
                },
                PropName::Lit => match (self.0 - 20632u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 20632u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::LightBlueCandle => match name {
                PropName::Candles => match (self.0 - 20648u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    3u16 => Some(PropValue::_4),
                    _ => unreachable!(),
                },
                PropName::Lit => match (self.0 - 20648u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 20648u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::YellowCandle => match name {
                PropName::Candles => match (self.0 - 20664u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    3u16 => Some(PropValue::_4),
                    _ => unreachable!(),
                },
                PropName::Lit => match (self.0 - 20664u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 20664u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::LimeCandle => match name {
                PropName::Candles => match (self.0 - 20680u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    3u16 => Some(PropValue::_4),
                    _ => unreachable!(),
                },
                PropName::Lit => match (self.0 - 20680u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 20680u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PinkCandle => match name {
                PropName::Candles => match (self.0 - 20696u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    3u16 => Some(PropValue::_4),
                    _ => unreachable!(),
                },
                PropName::Lit => match (self.0 - 20696u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 20696u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::GrayCandle => match name {
                PropName::Candles => match (self.0 - 20712u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    3u16 => Some(PropValue::_4),
                    _ => unreachable!(),
                },
                PropName::Lit => match (self.0 - 20712u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 20712u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::LightGrayCandle => match name {
                PropName::Candles => match (self.0 - 20728u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    3u16 => Some(PropValue::_4),
                    _ => unreachable!(),
                },
                PropName::Lit => match (self.0 - 20728u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 20728u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CyanCandle => match name {
                PropName::Candles => match (self.0 - 20744u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    3u16 => Some(PropValue::_4),
                    _ => unreachable!(),
                },
                PropName::Lit => match (self.0 - 20744u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 20744u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PurpleCandle => match name {
                PropName::Candles => match (self.0 - 20760u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    3u16 => Some(PropValue::_4),
                    _ => unreachable!(),
                },
                PropName::Lit => match (self.0 - 20760u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 20760u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BlueCandle => match name {
                PropName::Candles => match (self.0 - 20776u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    3u16 => Some(PropValue::_4),
                    _ => unreachable!(),
                },
                PropName::Lit => match (self.0 - 20776u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 20776u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BrownCandle => match name {
                PropName::Candles => match (self.0 - 20792u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    3u16 => Some(PropValue::_4),
                    _ => unreachable!(),
                },
                PropName::Lit => match (self.0 - 20792u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 20792u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::GreenCandle => match name {
                PropName::Candles => match (self.0 - 20808u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    3u16 => Some(PropValue::_4),
                    _ => unreachable!(),
                },
                PropName::Lit => match (self.0 - 20808u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 20808u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::RedCandle => match name {
                PropName::Candles => match (self.0 - 20824u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    3u16 => Some(PropValue::_4),
                    _ => unreachable!(),
                },
                PropName::Lit => match (self.0 - 20824u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 20824u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BlackCandle => match name {
                PropName::Candles => match (self.0 - 20840u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    3u16 => Some(PropValue::_4),
                    _ => unreachable!(),
                },
                PropName::Lit => match (self.0 - 20840u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 20840u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CandleCake => match name {
                PropName::Lit => match (self.0 - 20856u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WhiteCandleCake => match name {
                PropName::Lit => match (self.0 - 20858u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::OrangeCandleCake => match name {
                PropName::Lit => match (self.0 - 20860u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MagentaCandleCake => match name {
                PropName::Lit => match (self.0 - 20862u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::LightBlueCandleCake => match name {
                PropName::Lit => match (self.0 - 20864u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::YellowCandleCake => match name {
                PropName::Lit => match (self.0 - 20866u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::LimeCandleCake => match name {
                PropName::Lit => match (self.0 - 20868u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PinkCandleCake => match name {
                PropName::Lit => match (self.0 - 20870u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::GrayCandleCake => match name {
                PropName::Lit => match (self.0 - 20872u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::LightGrayCandleCake => match name {
                PropName::Lit => match (self.0 - 20874u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CyanCandleCake => match name {
                PropName::Lit => match (self.0 - 20876u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PurpleCandleCake => match name {
                PropName::Lit => match (self.0 - 20878u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BlueCandleCake => match name {
                PropName::Lit => match (self.0 - 20880u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BrownCandleCake => match name {
                PropName::Lit => match (self.0 - 20882u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::GreenCandleCake => match name {
                PropName::Lit => match (self.0 - 20884u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::RedCandleCake => match name {
                PropName::Lit => match (self.0 - 20886u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BlackCandleCake => match name {
                PropName::Lit => match (self.0 - 20888u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::AmethystCluster => match name {
                PropName::Facing => match (self.0 - 20892u16) / 2u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 20892u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::LargeAmethystBud => match name {
                PropName::Facing => match (self.0 - 20904u16) / 2u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 20904u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::MediumAmethystBud => match name {
                PropName::Facing => match (self.0 - 20916u16) / 2u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 20916u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SmallAmethystBud => match name {
                PropName::Facing => match (self.0 - 20928u16) / 2u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 20928u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SculkSensor => match name {
                PropName::Power => match (self.0 - 20944u16) / 6u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                PropName::SculkSensorPhase => match (self.0 - 20944u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Inactive),
                    1u16 => Some(PropValue::Active),
                    2u16 => Some(PropValue::Cooldown),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 20944u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CalibratedSculkSensor => match name {
                PropName::Facing => match (self.0 - 21040u16) / 96u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Power => match (self.0 - 21040u16) / 6u16 % 16u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    _ => unreachable!(),
                },
                PropName::SculkSensorPhase => match (self.0 - 21040u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Inactive),
                    1u16 => Some(PropValue::Active),
                    2u16 => Some(PropValue::Cooldown),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 21040u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SculkVein => match name {
                PropName::Down => match (self.0 - 21425u16) / 64u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::East => match (self.0 - 21425u16) / 32u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 21425u16) / 16u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 21425u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Up => match (self.0 - 21425u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 21425u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 21425u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SculkCatalyst => match name {
                PropName::Bloom => match (self.0 - 21553u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SculkShrieker => match name {
                PropName::CanSummon => match (self.0 - 21555u16) / 4u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Shrieking => match (self.0 - 21555u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 21555u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::OxidizedCutCopperStairs => match name {
                PropName::Facing => match (self.0 - 21573u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 21573u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 21573u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 21573u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WeatheredCutCopperStairs => match name {
                PropName::Facing => match (self.0 - 21653u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 21653u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 21653u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 21653u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::ExposedCutCopperStairs => match name {
                PropName::Facing => match (self.0 - 21733u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 21733u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 21733u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 21733u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CutCopperStairs => match name {
                PropName::Facing => match (self.0 - 21813u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 21813u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 21813u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 21813u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::OxidizedCutCopperSlab => match name {
                PropName::Type => match (self.0 - 21893u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 21893u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WeatheredCutCopperSlab => match name {
                PropName::Type => match (self.0 - 21899u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 21899u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::ExposedCutCopperSlab => match name {
                PropName::Type => match (self.0 - 21905u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 21905u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CutCopperSlab => match name {
                PropName::Type => match (self.0 - 21911u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 21911u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WaxedOxidizedCutCopperStairs => match name {
                PropName::Facing => match (self.0 - 21925u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 21925u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 21925u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 21925u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WaxedWeatheredCutCopperStairs => match name {
                PropName::Facing => match (self.0 - 22005u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 22005u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 22005u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 22005u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WaxedExposedCutCopperStairs => match name {
                PropName::Facing => match (self.0 - 22085u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 22085u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 22085u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 22085u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WaxedCutCopperStairs => match name {
                PropName::Facing => match (self.0 - 22165u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 22165u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 22165u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 22165u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WaxedOxidizedCutCopperSlab => match name {
                PropName::Type => match (self.0 - 22245u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 22245u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WaxedWeatheredCutCopperSlab => match name {
                PropName::Type => match (self.0 - 22251u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 22251u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WaxedExposedCutCopperSlab => match name {
                PropName::Type => match (self.0 - 22257u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 22257u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::WaxedCutCopperSlab => match name {
                PropName::Type => match (self.0 - 22263u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 22263u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::LightningRod => match name {
                PropName::Facing => match (self.0 - 22269u16) / 4u16 % 6u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::East),
                    2u16 => Some(PropValue::South),
                    3u16 => Some(PropValue::West),
                    4u16 => Some(PropValue::Up),
                    5u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                PropName::Powered => match (self.0 - 22269u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 22269u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PointedDripstone => match name {
                PropName::Thickness => match (self.0 - 22293u16) / 4u16 % 5u16 {
                    0u16 => Some(PropValue::TipMerge),
                    1u16 => Some(PropValue::Tip),
                    2u16 => Some(PropValue::Frustum),
                    3u16 => Some(PropValue::Middle),
                    4u16 => Some(PropValue::Base),
                    _ => unreachable!(),
                },
                PropName::VerticalDirection => match (self.0 - 22293u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::Up),
                    1u16 => Some(PropValue::Down),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 22293u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CaveVines => match name {
                PropName::Age => match (self.0 - 22314u16) / 2u16 % 26u16 {
                    0u16 => Some(PropValue::_0),
                    1u16 => Some(PropValue::_1),
                    2u16 => Some(PropValue::_2),
                    3u16 => Some(PropValue::_3),
                    4u16 => Some(PropValue::_4),
                    5u16 => Some(PropValue::_5),
                    6u16 => Some(PropValue::_6),
                    7u16 => Some(PropValue::_7),
                    8u16 => Some(PropValue::_8),
                    9u16 => Some(PropValue::_9),
                    10u16 => Some(PropValue::_10),
                    11u16 => Some(PropValue::_11),
                    12u16 => Some(PropValue::_12),
                    13u16 => Some(PropValue::_13),
                    14u16 => Some(PropValue::_14),
                    15u16 => Some(PropValue::_15),
                    16u16 => Some(PropValue::_16),
                    17u16 => Some(PropValue::_17),
                    18u16 => Some(PropValue::_18),
                    19u16 => Some(PropValue::_19),
                    20u16 => Some(PropValue::_20),
                    21u16 => Some(PropValue::_21),
                    22u16 => Some(PropValue::_22),
                    23u16 => Some(PropValue::_23),
                    24u16 => Some(PropValue::_24),
                    25u16 => Some(PropValue::_25),
                    _ => unreachable!(),
                },
                PropName::Berries => match (self.0 - 22314u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CaveVinesPlant => match name {
                PropName::Berries => match (self.0 - 22366u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PinkPetals => match name {
                PropName::Facing => match (self.0 - 22372u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::FlowerAmount => match (self.0 - 22372u16) / 1u16 % 4u16 {
                    0u16 => Some(PropValue::_1),
                    1u16 => Some(PropValue::_2),
                    2u16 => Some(PropValue::_3),
                    3u16 => Some(PropValue::_4),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BigDripleaf => match name {
                PropName::Facing => match (self.0 - 22389u16) / 8u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Tilt => match (self.0 - 22389u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Unstable),
                    2u16 => Some(PropValue::Partial),
                    3u16 => Some(PropValue::Full),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 22389u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::BigDripleafStem => match name {
                PropName::Facing => match (self.0 - 22421u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 22421u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::SmallDripleaf => match name {
                PropName::Facing => match (self.0 - 22429u16) / 4u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 22429u16) / 2u16 % 2u16 {
                    0u16 => Some(PropValue::Upper),
                    1u16 => Some(PropValue::Lower),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 22429u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::HangingRoots => match name {
                PropName::Waterlogged => match (self.0 - 22445u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::Deepslate => match name {
                PropName::Axis => match (self.0 - 22449u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CobbledDeepslateStairs => match name {
                PropName::Facing => match (self.0 - 22453u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 22453u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 22453u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 22453u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CobbledDeepslateSlab => match name {
                PropName::Type => match (self.0 - 22533u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 22533u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::CobbledDeepslateWall => match name {
                PropName::East => match (self.0 - 22539u16) / 108u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 22539u16) / 36u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 22539u16) / 12u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::Up => match (self.0 - 22539u16) / 6u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 22539u16) / 3u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 22539u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PolishedDeepslateStairs => match name {
                PropName::Facing => match (self.0 - 22864u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 22864u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 22864u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 22864u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PolishedDeepslateSlab => match name {
                PropName::Type => match (self.0 - 22944u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 22944u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PolishedDeepslateWall => match name {
                PropName::East => match (self.0 - 22950u16) / 108u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 22950u16) / 36u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 22950u16) / 12u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::Up => match (self.0 - 22950u16) / 6u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 22950u16) / 3u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 22950u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DeepslateTileStairs => match name {
                PropName::Facing => match (self.0 - 23275u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 23275u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 23275u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 23275u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DeepslateTileSlab => match name {
                PropName::Type => match (self.0 - 23355u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 23355u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DeepslateTileWall => match name {
                PropName::East => match (self.0 - 23361u16) / 108u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 23361u16) / 36u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 23361u16) / 12u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::Up => match (self.0 - 23361u16) / 6u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 23361u16) / 3u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 23361u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DeepslateBrickStairs => match name {
                PropName::Facing => match (self.0 - 23686u16) / 20u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Half => match (self.0 - 23686u16) / 10u16 % 2u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    _ => unreachable!(),
                },
                PropName::Shape => match (self.0 - 23686u16) / 2u16 % 5u16 {
                    0u16 => Some(PropValue::Straight),
                    1u16 => Some(PropValue::InnerLeft),
                    2u16 => Some(PropValue::InnerRight),
                    3u16 => Some(PropValue::OuterLeft),
                    4u16 => Some(PropValue::OuterRight),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 23686u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DeepslateBrickSlab => match name {
                PropName::Type => match (self.0 - 23766u16) / 2u16 % 3u16 {
                    0u16 => Some(PropValue::Top),
                    1u16 => Some(PropValue::Bottom),
                    2u16 => Some(PropValue::Double),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 23766u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DeepslateBrickWall => match name {
                PropName::East => match (self.0 - 23772u16) / 108u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::North => match (self.0 - 23772u16) / 36u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::South => match (self.0 - 23772u16) / 12u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                PropName::Up => match (self.0 - 23772u16) / 6u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 23772u16) / 3u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::West => match (self.0 - 23772u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::None),
                    1u16 => Some(PropValue::Low),
                    2u16 => Some(PropValue::Tall),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::InfestedDeepslate => match name {
                PropName::Axis => match (self.0 - 24099u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::OchreFroglight => match name {
                PropName::Axis => match (self.0 - 24108u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::VerdantFroglight => match name {
                PropName::Axis => match (self.0 - 24111u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::PearlescentFroglight => match name {
                PropName::Axis => match (self.0 - 24114u16) / 1u16 % 3u16 {
                    0u16 => Some(PropValue::X),
                    1u16 => Some(PropValue::Y),
                    2u16 => Some(PropValue::Z),
                    _ => unreachable!(),
                },
                _ => None,
            },
            BlockKind::DecoratedPot => match name {
                PropName::Cracked => match (self.0 - 24119u16) / 8u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                PropName::Facing => match (self.0 - 24119u16) / 2u16 % 4u16 {
                    0u16 => Some(PropValue::North),
                    1u16 => Some(PropValue::South),
                    2u16 => Some(PropValue::West),
                    3u16 => Some(PropValue::East),
                    _ => unreachable!(),
                },
                PropName::Waterlogged => match (self.0 - 24119u16) / 1u16 % 2u16 {
                    0u16 => Some(PropValue::True),
                    1u16 => Some(PropValue::False),
                    _ => unreachable!(),
                },
                _ => None,
            },
            _ => None,
        }
    }
    #[doc = r" Sets the value of a property on this block, returning the modified block."]
    #[doc = r""]
    #[doc = r" If this block does not have the given property or the property value is invalid,"]
    #[doc = r" then the original block is returned unchanged."]
    #[must_use]
    pub const fn set(self, name: PropName, val: PropValue) -> Self {
        match self.to_kind() {
            BlockKind::GrassBlock => match name {
                PropName::Snowy => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 8u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 8u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Podzol => match name {
                PropName::Snowy => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::OakSapling => match name {
                PropName::Stage => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 25u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 25u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SpruceSapling => match name {
                PropName::Stage => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 27u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 27u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BirchSapling => match name {
                PropName::Stage => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 29u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 29u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::JungleSapling => match name {
                PropName::Stage => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 31u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 31u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::AcaciaSapling => match name {
                PropName::Stage => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 33u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 33u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CherrySapling => match name {
                PropName::Stage => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 35u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 35u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DarkOakSapling => match name {
                PropName::Stage => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 37u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 37u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MangrovePropagule => match name {
                PropName::Age => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 39u16) / 8u16 % 5u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 39u16) / 8u16 % 5u16 * 8u16 + 1u16 * 8u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 39u16) / 8u16 % 5u16 * 8u16 + 2u16 * 8u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 39u16) / 8u16 % 5u16 * 8u16 + 3u16 * 8u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 39u16) / 8u16 % 5u16 * 8u16 + 4u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Hanging => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 39u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 39u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Stage => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 39u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 39u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 39u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 39u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Water => match name {
                PropName::Level => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 80u16) / 1u16 % 16u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 80u16) / 1u16 % 16u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 80u16) / 1u16 % 16u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 80u16) / 1u16 % 16u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 80u16) / 1u16 % 16u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 80u16) / 1u16 % 16u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 80u16) / 1u16 % 16u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 80u16) / 1u16 % 16u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 80u16) / 1u16 % 16u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 80u16) / 1u16 % 16u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 80u16) / 1u16 % 16u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 80u16) / 1u16 % 16u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 80u16) / 1u16 % 16u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 80u16) / 1u16 % 16u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 80u16) / 1u16 % 16u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 80u16) / 1u16 % 16u16 * 1u16 + 15u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Lava => match name {
                PropName::Level => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 96u16) / 1u16 % 16u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 96u16) / 1u16 % 16u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 96u16) / 1u16 % 16u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 96u16) / 1u16 % 16u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 96u16) / 1u16 % 16u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 96u16) / 1u16 % 16u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 96u16) / 1u16 % 16u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 96u16) / 1u16 % 16u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 96u16) / 1u16 % 16u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 96u16) / 1u16 % 16u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 96u16) / 1u16 % 16u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 96u16) / 1u16 % 16u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 96u16) / 1u16 % 16u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 96u16) / 1u16 % 16u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 96u16) / 1u16 % 16u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 96u16) / 1u16 % 16u16 * 1u16 + 15u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SuspiciousSand => match name {
                PropName::Dusted => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 113u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 113u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 113u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 113u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SuspiciousGravel => match name {
                PropName::Dusted => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 119u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 119u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 119u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 119u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::OakLog => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 130u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 130u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 130u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SpruceLog => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 133u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 133u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 133u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BirchLog => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 136u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 136u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 136u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::JungleLog => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 139u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 139u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 139u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::AcaciaLog => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 142u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 142u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 142u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CherryLog => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 145u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 145u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 145u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DarkOakLog => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 148u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 148u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 148u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MangroveLog => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 151u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 151u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 151u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MangroveRoots => match name {
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 154u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 154u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MuddyMangroveRoots => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 156u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 156u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 156u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BambooBlock => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 159u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 159u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 159u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::StrippedSpruceLog => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 162u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 162u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 162u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::StrippedBirchLog => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 165u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 165u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 165u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::StrippedJungleLog => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 168u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 168u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 168u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::StrippedAcaciaLog => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 171u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 171u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 171u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::StrippedCherryLog => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 174u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 174u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 174u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::StrippedDarkOakLog => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 177u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 177u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 177u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::StrippedOakLog => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 180u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 180u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 180u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::StrippedMangroveLog => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 183u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 183u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 183u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::StrippedBambooBlock => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 186u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 186u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 186u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::OakWood => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 189u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 189u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 189u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SpruceWood => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 192u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 192u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 192u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BirchWood => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 195u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 195u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 195u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::JungleWood => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 198u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 198u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 198u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::AcaciaWood => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 201u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 201u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 201u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CherryWood => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 204u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 204u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 204u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DarkOakWood => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 207u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 207u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 207u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MangroveWood => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 210u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 210u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 210u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::StrippedOakWood => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 213u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 213u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 213u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::StrippedSpruceWood => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 216u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 216u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 216u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::StrippedBirchWood => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 219u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 219u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 219u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::StrippedJungleWood => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 222u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 222u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 222u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::StrippedAcaciaWood => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 225u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 225u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 225u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::StrippedCherryWood => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 228u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 228u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 228u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::StrippedDarkOakWood => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 231u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 231u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 231u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::StrippedMangroveWood => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 234u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 234u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 234u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::OakLeaves => match name {
                PropName::Distance => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 237u16) / 4u16 % 7u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 237u16) / 4u16 % 7u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 237u16) / 4u16 % 7u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 237u16) / 4u16 % 7u16 * 4u16 + 3u16 * 4u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 237u16) / 4u16 % 7u16 * 4u16 + 4u16 * 4u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 237u16) / 4u16 % 7u16 * 4u16 + 5u16 * 4u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 237u16) / 4u16 % 7u16 * 4u16 + 6u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Persistent => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 237u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 237u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 237u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 237u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SpruceLeaves => match name {
                PropName::Distance => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 265u16) / 4u16 % 7u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 265u16) / 4u16 % 7u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 265u16) / 4u16 % 7u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 265u16) / 4u16 % 7u16 * 4u16 + 3u16 * 4u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 265u16) / 4u16 % 7u16 * 4u16 + 4u16 * 4u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 265u16) / 4u16 % 7u16 * 4u16 + 5u16 * 4u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 265u16) / 4u16 % 7u16 * 4u16 + 6u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Persistent => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 265u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 265u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 265u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 265u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BirchLeaves => match name {
                PropName::Distance => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 293u16) / 4u16 % 7u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 293u16) / 4u16 % 7u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 293u16) / 4u16 % 7u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 293u16) / 4u16 % 7u16 * 4u16 + 3u16 * 4u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 293u16) / 4u16 % 7u16 * 4u16 + 4u16 * 4u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 293u16) / 4u16 % 7u16 * 4u16 + 5u16 * 4u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 293u16) / 4u16 % 7u16 * 4u16 + 6u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Persistent => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 293u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 293u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 293u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 293u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::JungleLeaves => match name {
                PropName::Distance => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 321u16) / 4u16 % 7u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 321u16) / 4u16 % 7u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 321u16) / 4u16 % 7u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 321u16) / 4u16 % 7u16 * 4u16 + 3u16 * 4u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 321u16) / 4u16 % 7u16 * 4u16 + 4u16 * 4u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 321u16) / 4u16 % 7u16 * 4u16 + 5u16 * 4u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 321u16) / 4u16 % 7u16 * 4u16 + 6u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Persistent => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 321u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 321u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 321u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 321u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::AcaciaLeaves => match name {
                PropName::Distance => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 349u16) / 4u16 % 7u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 349u16) / 4u16 % 7u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 349u16) / 4u16 % 7u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 349u16) / 4u16 % 7u16 * 4u16 + 3u16 * 4u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 349u16) / 4u16 % 7u16 * 4u16 + 4u16 * 4u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 349u16) / 4u16 % 7u16 * 4u16 + 5u16 * 4u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 349u16) / 4u16 % 7u16 * 4u16 + 6u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Persistent => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 349u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 349u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 349u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 349u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CherryLeaves => match name {
                PropName::Distance => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 377u16) / 4u16 % 7u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 377u16) / 4u16 % 7u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 377u16) / 4u16 % 7u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 377u16) / 4u16 % 7u16 * 4u16 + 3u16 * 4u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 377u16) / 4u16 % 7u16 * 4u16 + 4u16 * 4u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 377u16) / 4u16 % 7u16 * 4u16 + 5u16 * 4u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 377u16) / 4u16 % 7u16 * 4u16 + 6u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Persistent => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 377u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 377u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 377u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 377u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DarkOakLeaves => match name {
                PropName::Distance => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 405u16) / 4u16 % 7u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 405u16) / 4u16 % 7u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 405u16) / 4u16 % 7u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 405u16) / 4u16 % 7u16 * 4u16 + 3u16 * 4u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 405u16) / 4u16 % 7u16 * 4u16 + 4u16 * 4u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 405u16) / 4u16 % 7u16 * 4u16 + 5u16 * 4u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 405u16) / 4u16 % 7u16 * 4u16 + 6u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Persistent => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 405u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 405u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 405u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 405u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MangroveLeaves => match name {
                PropName::Distance => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 433u16) / 4u16 % 7u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 433u16) / 4u16 % 7u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 433u16) / 4u16 % 7u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 433u16) / 4u16 % 7u16 * 4u16 + 3u16 * 4u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 433u16) / 4u16 % 7u16 * 4u16 + 4u16 * 4u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 433u16) / 4u16 % 7u16 * 4u16 + 5u16 * 4u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 433u16) / 4u16 % 7u16 * 4u16 + 6u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Persistent => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 433u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 433u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 433u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 433u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::AzaleaLeaves => match name {
                PropName::Distance => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 461u16) / 4u16 % 7u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 461u16) / 4u16 % 7u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 461u16) / 4u16 % 7u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 461u16) / 4u16 % 7u16 * 4u16 + 3u16 * 4u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 461u16) / 4u16 % 7u16 * 4u16 + 4u16 * 4u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 461u16) / 4u16 % 7u16 * 4u16 + 5u16 * 4u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 461u16) / 4u16 % 7u16 * 4u16 + 6u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Persistent => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 461u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 461u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 461u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 461u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::FloweringAzaleaLeaves => match name {
                PropName::Distance => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 489u16) / 4u16 % 7u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 489u16) / 4u16 % 7u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 489u16) / 4u16 % 7u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 489u16) / 4u16 % 7u16 * 4u16 + 3u16 * 4u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 489u16) / 4u16 % 7u16 * 4u16 + 4u16 * 4u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 489u16) / 4u16 % 7u16 * 4u16 + 5u16 * 4u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 489u16) / 4u16 % 7u16 * 4u16 + 6u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Persistent => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 489u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 489u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 489u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 489u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Dispenser => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 523u16) / 2u16 % 6u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 523u16) / 2u16 % 6u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 523u16) / 2u16 % 6u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 523u16) / 2u16 % 6u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 523u16) / 2u16 % 6u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 523u16) / 2u16 % 6u16 * 2u16 + 5u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Triggered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 523u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 523u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::NoteBlock => match name {
                PropName::Instrument => match val {
                    PropValue::Harp => {
                        Self(self.0 - (self.0 - 538u16) / 50u16 % 23u16 * 50u16 + 0u16 * 50u16)
                    }
                    PropValue::Basedrum => {
                        Self(self.0 - (self.0 - 538u16) / 50u16 % 23u16 * 50u16 + 1u16 * 50u16)
                    }
                    PropValue::Snare => {
                        Self(self.0 - (self.0 - 538u16) / 50u16 % 23u16 * 50u16 + 2u16 * 50u16)
                    }
                    PropValue::Hat => {
                        Self(self.0 - (self.0 - 538u16) / 50u16 % 23u16 * 50u16 + 3u16 * 50u16)
                    }
                    PropValue::Bass => {
                        Self(self.0 - (self.0 - 538u16) / 50u16 % 23u16 * 50u16 + 4u16 * 50u16)
                    }
                    PropValue::Flute => {
                        Self(self.0 - (self.0 - 538u16) / 50u16 % 23u16 * 50u16 + 5u16 * 50u16)
                    }
                    PropValue::Bell => {
                        Self(self.0 - (self.0 - 538u16) / 50u16 % 23u16 * 50u16 + 6u16 * 50u16)
                    }
                    PropValue::Guitar => {
                        Self(self.0 - (self.0 - 538u16) / 50u16 % 23u16 * 50u16 + 7u16 * 50u16)
                    }
                    PropValue::Chime => {
                        Self(self.0 - (self.0 - 538u16) / 50u16 % 23u16 * 50u16 + 8u16 * 50u16)
                    }
                    PropValue::Xylophone => {
                        Self(self.0 - (self.0 - 538u16) / 50u16 % 23u16 * 50u16 + 9u16 * 50u16)
                    }
                    PropValue::IronXylophone => {
                        Self(self.0 - (self.0 - 538u16) / 50u16 % 23u16 * 50u16 + 10u16 * 50u16)
                    }
                    PropValue::CowBell => {
                        Self(self.0 - (self.0 - 538u16) / 50u16 % 23u16 * 50u16 + 11u16 * 50u16)
                    }
                    PropValue::Didgeridoo => {
                        Self(self.0 - (self.0 - 538u16) / 50u16 % 23u16 * 50u16 + 12u16 * 50u16)
                    }
                    PropValue::Bit => {
                        Self(self.0 - (self.0 - 538u16) / 50u16 % 23u16 * 50u16 + 13u16 * 50u16)
                    }
                    PropValue::Banjo => {
                        Self(self.0 - (self.0 - 538u16) / 50u16 % 23u16 * 50u16 + 14u16 * 50u16)
                    }
                    PropValue::Pling => {
                        Self(self.0 - (self.0 - 538u16) / 50u16 % 23u16 * 50u16 + 15u16 * 50u16)
                    }
                    PropValue::Zombie => {
                        Self(self.0 - (self.0 - 538u16) / 50u16 % 23u16 * 50u16 + 16u16 * 50u16)
                    }
                    PropValue::Skeleton => {
                        Self(self.0 - (self.0 - 538u16) / 50u16 % 23u16 * 50u16 + 17u16 * 50u16)
                    }
                    PropValue::Creeper => {
                        Self(self.0 - (self.0 - 538u16) / 50u16 % 23u16 * 50u16 + 18u16 * 50u16)
                    }
                    PropValue::Dragon => {
                        Self(self.0 - (self.0 - 538u16) / 50u16 % 23u16 * 50u16 + 19u16 * 50u16)
                    }
                    PropValue::WitherSkeleton => {
                        Self(self.0 - (self.0 - 538u16) / 50u16 % 23u16 * 50u16 + 20u16 * 50u16)
                    }
                    PropValue::Piglin => {
                        Self(self.0 - (self.0 - 538u16) / 50u16 % 23u16 * 50u16 + 21u16 * 50u16)
                    }
                    PropValue::CustomHead => {
                        Self(self.0 - (self.0 - 538u16) / 50u16 % 23u16 * 50u16 + 22u16 * 50u16)
                    }
                    _ => self,
                },
                PropName::Note => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 538u16) / 2u16 % 25u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 538u16) / 2u16 % 25u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 538u16) / 2u16 % 25u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 538u16) / 2u16 % 25u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 538u16) / 2u16 % 25u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 538u16) / 2u16 % 25u16 * 2u16 + 5u16 * 2u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 538u16) / 2u16 % 25u16 * 2u16 + 6u16 * 2u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 538u16) / 2u16 % 25u16 * 2u16 + 7u16 * 2u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 538u16) / 2u16 % 25u16 * 2u16 + 8u16 * 2u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 538u16) / 2u16 % 25u16 * 2u16 + 9u16 * 2u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 538u16) / 2u16 % 25u16 * 2u16 + 10u16 * 2u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 538u16) / 2u16 % 25u16 * 2u16 + 11u16 * 2u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 538u16) / 2u16 % 25u16 * 2u16 + 12u16 * 2u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 538u16) / 2u16 % 25u16 * 2u16 + 13u16 * 2u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 538u16) / 2u16 % 25u16 * 2u16 + 14u16 * 2u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 538u16) / 2u16 % 25u16 * 2u16 + 15u16 * 2u16)
                    }
                    PropValue::_16 => {
                        Self(self.0 - (self.0 - 538u16) / 2u16 % 25u16 * 2u16 + 16u16 * 2u16)
                    }
                    PropValue::_17 => {
                        Self(self.0 - (self.0 - 538u16) / 2u16 % 25u16 * 2u16 + 17u16 * 2u16)
                    }
                    PropValue::_18 => {
                        Self(self.0 - (self.0 - 538u16) / 2u16 % 25u16 * 2u16 + 18u16 * 2u16)
                    }
                    PropValue::_19 => {
                        Self(self.0 - (self.0 - 538u16) / 2u16 % 25u16 * 2u16 + 19u16 * 2u16)
                    }
                    PropValue::_20 => {
                        Self(self.0 - (self.0 - 538u16) / 2u16 % 25u16 * 2u16 + 20u16 * 2u16)
                    }
                    PropValue::_21 => {
                        Self(self.0 - (self.0 - 538u16) / 2u16 % 25u16 * 2u16 + 21u16 * 2u16)
                    }
                    PropValue::_22 => {
                        Self(self.0 - (self.0 - 538u16) / 2u16 % 25u16 * 2u16 + 22u16 * 2u16)
                    }
                    PropValue::_23 => {
                        Self(self.0 - (self.0 - 538u16) / 2u16 % 25u16 * 2u16 + 23u16 * 2u16)
                    }
                    PropValue::_24 => {
                        Self(self.0 - (self.0 - 538u16) / 2u16 % 25u16 * 2u16 + 24u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 538u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 538u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WhiteBed => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 1688u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 1688u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 1688u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 1688u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Occupied => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 1688u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 1688u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Part => match val {
                    PropValue::Head => {
                        Self(self.0 - (self.0 - 1688u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Foot => {
                        Self(self.0 - (self.0 - 1688u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::OrangeBed => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 1704u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 1704u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 1704u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 1704u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Occupied => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 1704u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 1704u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Part => match val {
                    PropValue::Head => {
                        Self(self.0 - (self.0 - 1704u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Foot => {
                        Self(self.0 - (self.0 - 1704u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MagentaBed => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 1720u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 1720u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 1720u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 1720u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Occupied => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 1720u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 1720u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Part => match val {
                    PropValue::Head => {
                        Self(self.0 - (self.0 - 1720u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Foot => {
                        Self(self.0 - (self.0 - 1720u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::LightBlueBed => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 1736u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 1736u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 1736u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 1736u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Occupied => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 1736u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 1736u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Part => match val {
                    PropValue::Head => {
                        Self(self.0 - (self.0 - 1736u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Foot => {
                        Self(self.0 - (self.0 - 1736u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::YellowBed => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 1752u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 1752u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 1752u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 1752u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Occupied => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 1752u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 1752u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Part => match val {
                    PropValue::Head => {
                        Self(self.0 - (self.0 - 1752u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Foot => {
                        Self(self.0 - (self.0 - 1752u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::LimeBed => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 1768u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 1768u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 1768u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 1768u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Occupied => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 1768u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 1768u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Part => match val {
                    PropValue::Head => {
                        Self(self.0 - (self.0 - 1768u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Foot => {
                        Self(self.0 - (self.0 - 1768u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PinkBed => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 1784u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 1784u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 1784u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 1784u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Occupied => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 1784u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 1784u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Part => match val {
                    PropValue::Head => {
                        Self(self.0 - (self.0 - 1784u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Foot => {
                        Self(self.0 - (self.0 - 1784u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::GrayBed => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 1800u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 1800u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 1800u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 1800u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Occupied => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 1800u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 1800u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Part => match val {
                    PropValue::Head => {
                        Self(self.0 - (self.0 - 1800u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Foot => {
                        Self(self.0 - (self.0 - 1800u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::LightGrayBed => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 1816u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 1816u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 1816u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 1816u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Occupied => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 1816u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 1816u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Part => match val {
                    PropValue::Head => {
                        Self(self.0 - (self.0 - 1816u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Foot => {
                        Self(self.0 - (self.0 - 1816u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CyanBed => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 1832u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 1832u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 1832u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 1832u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Occupied => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 1832u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 1832u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Part => match val {
                    PropValue::Head => {
                        Self(self.0 - (self.0 - 1832u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Foot => {
                        Self(self.0 - (self.0 - 1832u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PurpleBed => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 1848u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 1848u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 1848u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 1848u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Occupied => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 1848u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 1848u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Part => match val {
                    PropValue::Head => {
                        Self(self.0 - (self.0 - 1848u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Foot => {
                        Self(self.0 - (self.0 - 1848u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BlueBed => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 1864u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 1864u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 1864u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 1864u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Occupied => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 1864u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 1864u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Part => match val {
                    PropValue::Head => {
                        Self(self.0 - (self.0 - 1864u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Foot => {
                        Self(self.0 - (self.0 - 1864u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BrownBed => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 1880u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 1880u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 1880u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 1880u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Occupied => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 1880u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 1880u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Part => match val {
                    PropValue::Head => {
                        Self(self.0 - (self.0 - 1880u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Foot => {
                        Self(self.0 - (self.0 - 1880u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::GreenBed => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 1896u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 1896u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 1896u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 1896u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Occupied => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 1896u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 1896u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Part => match val {
                    PropValue::Head => {
                        Self(self.0 - (self.0 - 1896u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Foot => {
                        Self(self.0 - (self.0 - 1896u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::RedBed => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 1912u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 1912u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 1912u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 1912u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Occupied => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 1912u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 1912u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Part => match val {
                    PropValue::Head => {
                        Self(self.0 - (self.0 - 1912u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Foot => {
                        Self(self.0 - (self.0 - 1912u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BlackBed => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 1928u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 1928u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 1928u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 1928u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Occupied => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 1928u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 1928u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Part => match val {
                    PropValue::Head => {
                        Self(self.0 - (self.0 - 1928u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Foot => {
                        Self(self.0 - (self.0 - 1928u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PoweredRail => match name {
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 1944u16) / 12u16 % 2u16 * 12u16 + 0u16 * 12u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 1944u16) / 12u16 % 2u16 * 12u16 + 1u16 * 12u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::NorthSouth => {
                        Self(self.0 - (self.0 - 1944u16) / 2u16 % 6u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::EastWest => {
                        Self(self.0 - (self.0 - 1944u16) / 2u16 % 6u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::AscendingEast => {
                        Self(self.0 - (self.0 - 1944u16) / 2u16 % 6u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::AscendingWest => {
                        Self(self.0 - (self.0 - 1944u16) / 2u16 % 6u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::AscendingNorth => {
                        Self(self.0 - (self.0 - 1944u16) / 2u16 % 6u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::AscendingSouth => {
                        Self(self.0 - (self.0 - 1944u16) / 2u16 % 6u16 * 2u16 + 5u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 1944u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 1944u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DetectorRail => match name {
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 1968u16) / 12u16 % 2u16 * 12u16 + 0u16 * 12u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 1968u16) / 12u16 % 2u16 * 12u16 + 1u16 * 12u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::NorthSouth => {
                        Self(self.0 - (self.0 - 1968u16) / 2u16 % 6u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::EastWest => {
                        Self(self.0 - (self.0 - 1968u16) / 2u16 % 6u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::AscendingEast => {
                        Self(self.0 - (self.0 - 1968u16) / 2u16 % 6u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::AscendingWest => {
                        Self(self.0 - (self.0 - 1968u16) / 2u16 % 6u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::AscendingNorth => {
                        Self(self.0 - (self.0 - 1968u16) / 2u16 % 6u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::AscendingSouth => {
                        Self(self.0 - (self.0 - 1968u16) / 2u16 % 6u16 * 2u16 + 5u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 1968u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 1968u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::StickyPiston => match name {
                PropName::Extended => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 1992u16) / 6u16 % 2u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 1992u16) / 6u16 % 2u16 * 6u16 + 1u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 1992u16) / 1u16 % 6u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 1992u16) / 1u16 % 6u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 1992u16) / 1u16 % 6u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 1992u16) / 1u16 % 6u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 1992u16) / 1u16 % 6u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 1992u16) / 1u16 % 6u16 * 1u16 + 5u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::TallSeagrass => match name {
                PropName::Half => match val {
                    PropValue::Upper => {
                        Self(self.0 - (self.0 - 2009u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Lower => {
                        Self(self.0 - (self.0 - 2009u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Piston => match name {
                PropName::Extended => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 2011u16) / 6u16 % 2u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 2011u16) / 6u16 % 2u16 * 6u16 + 1u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 2011u16) / 1u16 % 6u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 2011u16) / 1u16 % 6u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 2011u16) / 1u16 % 6u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 2011u16) / 1u16 % 6u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 2011u16) / 1u16 % 6u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 2011u16) / 1u16 % 6u16 * 1u16 + 5u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PistonHead => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 2023u16) / 4u16 % 6u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 2023u16) / 4u16 % 6u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 2023u16) / 4u16 % 6u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 2023u16) / 4u16 % 6u16 * 4u16 + 3u16 * 4u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 2023u16) / 4u16 % 6u16 * 4u16 + 4u16 * 4u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 2023u16) / 4u16 % 6u16 * 4u16 + 5u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Short => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 2023u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 2023u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Type => match val {
                    PropValue::Normal => {
                        Self(self.0 - (self.0 - 2023u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Sticky => {
                        Self(self.0 - (self.0 - 2023u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MovingPiston => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 2063u16) / 2u16 % 6u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 2063u16) / 2u16 % 6u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 2063u16) / 2u16 % 6u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 2063u16) / 2u16 % 6u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 2063u16) / 2u16 % 6u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 2063u16) / 2u16 % 6u16 * 2u16 + 5u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Type => match val {
                    PropValue::Normal => {
                        Self(self.0 - (self.0 - 2063u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Sticky => {
                        Self(self.0 - (self.0 - 2063u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Tnt => match name {
                PropName::Unstable => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 2094u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 2094u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::ChiseledBookshelf => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 2097u16) / 64u16 % 4u16 * 64u16 + 0u16 * 64u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 2097u16) / 64u16 % 4u16 * 64u16 + 1u16 * 64u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 2097u16) / 64u16 % 4u16 * 64u16 + 2u16 * 64u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 2097u16) / 64u16 % 4u16 * 64u16 + 3u16 * 64u16)
                    }
                    _ => self,
                },
                PropName::Slot0Occupied => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 2097u16) / 32u16 % 2u16 * 32u16 + 0u16 * 32u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 2097u16) / 32u16 % 2u16 * 32u16 + 1u16 * 32u16)
                    }
                    _ => self,
                },
                PropName::Slot1Occupied => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 2097u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 2097u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::Slot2Occupied => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 2097u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 2097u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Slot3Occupied => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 2097u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 2097u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Slot4Occupied => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 2097u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 2097u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Slot5Occupied => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 2097u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 2097u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WallTorch => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 2356u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 2356u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 2356u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 2356u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Fire => match name {
                PropName::Age => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 2360u16) / 32u16 % 16u16 * 32u16 + 0u16 * 32u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 2360u16) / 32u16 % 16u16 * 32u16 + 1u16 * 32u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 2360u16) / 32u16 % 16u16 * 32u16 + 2u16 * 32u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 2360u16) / 32u16 % 16u16 * 32u16 + 3u16 * 32u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 2360u16) / 32u16 % 16u16 * 32u16 + 4u16 * 32u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 2360u16) / 32u16 % 16u16 * 32u16 + 5u16 * 32u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 2360u16) / 32u16 % 16u16 * 32u16 + 6u16 * 32u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 2360u16) / 32u16 % 16u16 * 32u16 + 7u16 * 32u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 2360u16) / 32u16 % 16u16 * 32u16 + 8u16 * 32u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 2360u16) / 32u16 % 16u16 * 32u16 + 9u16 * 32u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 2360u16) / 32u16 % 16u16 * 32u16 + 10u16 * 32u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 2360u16) / 32u16 % 16u16 * 32u16 + 11u16 * 32u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 2360u16) / 32u16 % 16u16 * 32u16 + 12u16 * 32u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 2360u16) / 32u16 % 16u16 * 32u16 + 13u16 * 32u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 2360u16) / 32u16 % 16u16 * 32u16 + 14u16 * 32u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 2360u16) / 32u16 % 16u16 * 32u16 + 15u16 * 32u16)
                    }
                    _ => self,
                },
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 2360u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 2360u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 2360u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 2360u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 2360u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 2360u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Up => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 2360u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 2360u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 2360u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 2360u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::OakStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 2874u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 2874u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 2874u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 2874u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 2874u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 2874u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 2874u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 2874u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 2874u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 2874u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 2874u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 2874u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 2874u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Chest => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 2954u16) / 6u16 % 4u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 2954u16) / 6u16 % 4u16 * 6u16 + 1u16 * 6u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 2954u16) / 6u16 % 4u16 * 6u16 + 2u16 * 6u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 2954u16) / 6u16 % 4u16 * 6u16 + 3u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::Type => match val {
                    PropValue::Single => {
                        Self(self.0 - (self.0 - 2954u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Left => {
                        Self(self.0 - (self.0 - 2954u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Right => {
                        Self(self.0 - (self.0 - 2954u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 2954u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 2954u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::RedstoneWire => match name {
                PropName::East => match val {
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 2978u16) / 432u16 % 3u16 * 432u16 + 0u16 * 432u16)
                    }
                    PropValue::Side => {
                        Self(self.0 - (self.0 - 2978u16) / 432u16 % 3u16 * 432u16 + 1u16 * 432u16)
                    }
                    PropValue::None => {
                        Self(self.0 - (self.0 - 2978u16) / 432u16 % 3u16 * 432u16 + 2u16 * 432u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 2978u16) / 144u16 % 3u16 * 144u16 + 0u16 * 144u16)
                    }
                    PropValue::Side => {
                        Self(self.0 - (self.0 - 2978u16) / 144u16 % 3u16 * 144u16 + 1u16 * 144u16)
                    }
                    PropValue::None => {
                        Self(self.0 - (self.0 - 2978u16) / 144u16 % 3u16 * 144u16 + 2u16 * 144u16)
                    }
                    _ => self,
                },
                PropName::Power => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 2978u16) / 9u16 % 16u16 * 9u16 + 0u16 * 9u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 2978u16) / 9u16 % 16u16 * 9u16 + 1u16 * 9u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 2978u16) / 9u16 % 16u16 * 9u16 + 2u16 * 9u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 2978u16) / 9u16 % 16u16 * 9u16 + 3u16 * 9u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 2978u16) / 9u16 % 16u16 * 9u16 + 4u16 * 9u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 2978u16) / 9u16 % 16u16 * 9u16 + 5u16 * 9u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 2978u16) / 9u16 % 16u16 * 9u16 + 6u16 * 9u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 2978u16) / 9u16 % 16u16 * 9u16 + 7u16 * 9u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 2978u16) / 9u16 % 16u16 * 9u16 + 8u16 * 9u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 2978u16) / 9u16 % 16u16 * 9u16 + 9u16 * 9u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 2978u16) / 9u16 % 16u16 * 9u16 + 10u16 * 9u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 2978u16) / 9u16 % 16u16 * 9u16 + 11u16 * 9u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 2978u16) / 9u16 % 16u16 * 9u16 + 12u16 * 9u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 2978u16) / 9u16 % 16u16 * 9u16 + 13u16 * 9u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 2978u16) / 9u16 % 16u16 * 9u16 + 14u16 * 9u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 2978u16) / 9u16 % 16u16 * 9u16 + 15u16 * 9u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 2978u16) / 3u16 % 3u16 * 3u16 + 0u16 * 3u16)
                    }
                    PropValue::Side => {
                        Self(self.0 - (self.0 - 2978u16) / 3u16 % 3u16 * 3u16 + 1u16 * 3u16)
                    }
                    PropValue::None => {
                        Self(self.0 - (self.0 - 2978u16) / 3u16 % 3u16 * 3u16 + 2u16 * 3u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 2978u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Side => {
                        Self(self.0 - (self.0 - 2978u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::None => {
                        Self(self.0 - (self.0 - 2978u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Wheat => match name {
                PropName::Age => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 4278u16) / 1u16 % 8u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 4278u16) / 1u16 % 8u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 4278u16) / 1u16 % 8u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 4278u16) / 1u16 % 8u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 4278u16) / 1u16 % 8u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 4278u16) / 1u16 % 8u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 4278u16) / 1u16 % 8u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 4278u16) / 1u16 % 8u16 * 1u16 + 7u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Farmland => match name {
                PropName::Moisture => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 4286u16) / 1u16 % 8u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 4286u16) / 1u16 % 8u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 4286u16) / 1u16 % 8u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 4286u16) / 1u16 % 8u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 4286u16) / 1u16 % 8u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 4286u16) / 1u16 % 8u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 4286u16) / 1u16 % 8u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 4286u16) / 1u16 % 8u16 * 1u16 + 7u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Furnace => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 4294u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 4294u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 4294u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 4294u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 4294u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 4294u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::OakSign => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 4302u16) / 2u16 % 16u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 4302u16) / 2u16 % 16u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 4302u16) / 2u16 % 16u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 4302u16) / 2u16 % 16u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 4302u16) / 2u16 % 16u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 4302u16) / 2u16 % 16u16 * 2u16 + 5u16 * 2u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 4302u16) / 2u16 % 16u16 * 2u16 + 6u16 * 2u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 4302u16) / 2u16 % 16u16 * 2u16 + 7u16 * 2u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 4302u16) / 2u16 % 16u16 * 2u16 + 8u16 * 2u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 4302u16) / 2u16 % 16u16 * 2u16 + 9u16 * 2u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 4302u16) / 2u16 % 16u16 * 2u16 + 10u16 * 2u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 4302u16) / 2u16 % 16u16 * 2u16 + 11u16 * 2u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 4302u16) / 2u16 % 16u16 * 2u16 + 12u16 * 2u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 4302u16) / 2u16 % 16u16 * 2u16 + 13u16 * 2u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 4302u16) / 2u16 % 16u16 * 2u16 + 14u16 * 2u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 4302u16) / 2u16 % 16u16 * 2u16 + 15u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 4302u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 4302u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SpruceSign => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 4334u16) / 2u16 % 16u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 4334u16) / 2u16 % 16u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 4334u16) / 2u16 % 16u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 4334u16) / 2u16 % 16u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 4334u16) / 2u16 % 16u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 4334u16) / 2u16 % 16u16 * 2u16 + 5u16 * 2u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 4334u16) / 2u16 % 16u16 * 2u16 + 6u16 * 2u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 4334u16) / 2u16 % 16u16 * 2u16 + 7u16 * 2u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 4334u16) / 2u16 % 16u16 * 2u16 + 8u16 * 2u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 4334u16) / 2u16 % 16u16 * 2u16 + 9u16 * 2u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 4334u16) / 2u16 % 16u16 * 2u16 + 10u16 * 2u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 4334u16) / 2u16 % 16u16 * 2u16 + 11u16 * 2u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 4334u16) / 2u16 % 16u16 * 2u16 + 12u16 * 2u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 4334u16) / 2u16 % 16u16 * 2u16 + 13u16 * 2u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 4334u16) / 2u16 % 16u16 * 2u16 + 14u16 * 2u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 4334u16) / 2u16 % 16u16 * 2u16 + 15u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 4334u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 4334u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BirchSign => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 4366u16) / 2u16 % 16u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 4366u16) / 2u16 % 16u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 4366u16) / 2u16 % 16u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 4366u16) / 2u16 % 16u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 4366u16) / 2u16 % 16u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 4366u16) / 2u16 % 16u16 * 2u16 + 5u16 * 2u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 4366u16) / 2u16 % 16u16 * 2u16 + 6u16 * 2u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 4366u16) / 2u16 % 16u16 * 2u16 + 7u16 * 2u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 4366u16) / 2u16 % 16u16 * 2u16 + 8u16 * 2u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 4366u16) / 2u16 % 16u16 * 2u16 + 9u16 * 2u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 4366u16) / 2u16 % 16u16 * 2u16 + 10u16 * 2u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 4366u16) / 2u16 % 16u16 * 2u16 + 11u16 * 2u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 4366u16) / 2u16 % 16u16 * 2u16 + 12u16 * 2u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 4366u16) / 2u16 % 16u16 * 2u16 + 13u16 * 2u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 4366u16) / 2u16 % 16u16 * 2u16 + 14u16 * 2u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 4366u16) / 2u16 % 16u16 * 2u16 + 15u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 4366u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 4366u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::AcaciaSign => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 4398u16) / 2u16 % 16u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 4398u16) / 2u16 % 16u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 4398u16) / 2u16 % 16u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 4398u16) / 2u16 % 16u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 4398u16) / 2u16 % 16u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 4398u16) / 2u16 % 16u16 * 2u16 + 5u16 * 2u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 4398u16) / 2u16 % 16u16 * 2u16 + 6u16 * 2u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 4398u16) / 2u16 % 16u16 * 2u16 + 7u16 * 2u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 4398u16) / 2u16 % 16u16 * 2u16 + 8u16 * 2u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 4398u16) / 2u16 % 16u16 * 2u16 + 9u16 * 2u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 4398u16) / 2u16 % 16u16 * 2u16 + 10u16 * 2u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 4398u16) / 2u16 % 16u16 * 2u16 + 11u16 * 2u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 4398u16) / 2u16 % 16u16 * 2u16 + 12u16 * 2u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 4398u16) / 2u16 % 16u16 * 2u16 + 13u16 * 2u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 4398u16) / 2u16 % 16u16 * 2u16 + 14u16 * 2u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 4398u16) / 2u16 % 16u16 * 2u16 + 15u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 4398u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 4398u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CherrySign => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 4430u16) / 2u16 % 16u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 4430u16) / 2u16 % 16u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 4430u16) / 2u16 % 16u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 4430u16) / 2u16 % 16u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 4430u16) / 2u16 % 16u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 4430u16) / 2u16 % 16u16 * 2u16 + 5u16 * 2u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 4430u16) / 2u16 % 16u16 * 2u16 + 6u16 * 2u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 4430u16) / 2u16 % 16u16 * 2u16 + 7u16 * 2u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 4430u16) / 2u16 % 16u16 * 2u16 + 8u16 * 2u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 4430u16) / 2u16 % 16u16 * 2u16 + 9u16 * 2u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 4430u16) / 2u16 % 16u16 * 2u16 + 10u16 * 2u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 4430u16) / 2u16 % 16u16 * 2u16 + 11u16 * 2u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 4430u16) / 2u16 % 16u16 * 2u16 + 12u16 * 2u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 4430u16) / 2u16 % 16u16 * 2u16 + 13u16 * 2u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 4430u16) / 2u16 % 16u16 * 2u16 + 14u16 * 2u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 4430u16) / 2u16 % 16u16 * 2u16 + 15u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 4430u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 4430u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::JungleSign => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 4462u16) / 2u16 % 16u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 4462u16) / 2u16 % 16u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 4462u16) / 2u16 % 16u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 4462u16) / 2u16 % 16u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 4462u16) / 2u16 % 16u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 4462u16) / 2u16 % 16u16 * 2u16 + 5u16 * 2u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 4462u16) / 2u16 % 16u16 * 2u16 + 6u16 * 2u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 4462u16) / 2u16 % 16u16 * 2u16 + 7u16 * 2u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 4462u16) / 2u16 % 16u16 * 2u16 + 8u16 * 2u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 4462u16) / 2u16 % 16u16 * 2u16 + 9u16 * 2u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 4462u16) / 2u16 % 16u16 * 2u16 + 10u16 * 2u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 4462u16) / 2u16 % 16u16 * 2u16 + 11u16 * 2u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 4462u16) / 2u16 % 16u16 * 2u16 + 12u16 * 2u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 4462u16) / 2u16 % 16u16 * 2u16 + 13u16 * 2u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 4462u16) / 2u16 % 16u16 * 2u16 + 14u16 * 2u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 4462u16) / 2u16 % 16u16 * 2u16 + 15u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 4462u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 4462u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DarkOakSign => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 4494u16) / 2u16 % 16u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 4494u16) / 2u16 % 16u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 4494u16) / 2u16 % 16u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 4494u16) / 2u16 % 16u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 4494u16) / 2u16 % 16u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 4494u16) / 2u16 % 16u16 * 2u16 + 5u16 * 2u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 4494u16) / 2u16 % 16u16 * 2u16 + 6u16 * 2u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 4494u16) / 2u16 % 16u16 * 2u16 + 7u16 * 2u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 4494u16) / 2u16 % 16u16 * 2u16 + 8u16 * 2u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 4494u16) / 2u16 % 16u16 * 2u16 + 9u16 * 2u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 4494u16) / 2u16 % 16u16 * 2u16 + 10u16 * 2u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 4494u16) / 2u16 % 16u16 * 2u16 + 11u16 * 2u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 4494u16) / 2u16 % 16u16 * 2u16 + 12u16 * 2u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 4494u16) / 2u16 % 16u16 * 2u16 + 13u16 * 2u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 4494u16) / 2u16 % 16u16 * 2u16 + 14u16 * 2u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 4494u16) / 2u16 % 16u16 * 2u16 + 15u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 4494u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 4494u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MangroveSign => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 4526u16) / 2u16 % 16u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 4526u16) / 2u16 % 16u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 4526u16) / 2u16 % 16u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 4526u16) / 2u16 % 16u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 4526u16) / 2u16 % 16u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 4526u16) / 2u16 % 16u16 * 2u16 + 5u16 * 2u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 4526u16) / 2u16 % 16u16 * 2u16 + 6u16 * 2u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 4526u16) / 2u16 % 16u16 * 2u16 + 7u16 * 2u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 4526u16) / 2u16 % 16u16 * 2u16 + 8u16 * 2u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 4526u16) / 2u16 % 16u16 * 2u16 + 9u16 * 2u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 4526u16) / 2u16 % 16u16 * 2u16 + 10u16 * 2u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 4526u16) / 2u16 % 16u16 * 2u16 + 11u16 * 2u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 4526u16) / 2u16 % 16u16 * 2u16 + 12u16 * 2u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 4526u16) / 2u16 % 16u16 * 2u16 + 13u16 * 2u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 4526u16) / 2u16 % 16u16 * 2u16 + 14u16 * 2u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 4526u16) / 2u16 % 16u16 * 2u16 + 15u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 4526u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 4526u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BambooSign => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 4558u16) / 2u16 % 16u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 4558u16) / 2u16 % 16u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 4558u16) / 2u16 % 16u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 4558u16) / 2u16 % 16u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 4558u16) / 2u16 % 16u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 4558u16) / 2u16 % 16u16 * 2u16 + 5u16 * 2u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 4558u16) / 2u16 % 16u16 * 2u16 + 6u16 * 2u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 4558u16) / 2u16 % 16u16 * 2u16 + 7u16 * 2u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 4558u16) / 2u16 % 16u16 * 2u16 + 8u16 * 2u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 4558u16) / 2u16 % 16u16 * 2u16 + 9u16 * 2u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 4558u16) / 2u16 % 16u16 * 2u16 + 10u16 * 2u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 4558u16) / 2u16 % 16u16 * 2u16 + 11u16 * 2u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 4558u16) / 2u16 % 16u16 * 2u16 + 12u16 * 2u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 4558u16) / 2u16 % 16u16 * 2u16 + 13u16 * 2u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 4558u16) / 2u16 % 16u16 * 2u16 + 14u16 * 2u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 4558u16) / 2u16 % 16u16 * 2u16 + 15u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 4558u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 4558u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::OakDoor => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 4590u16) / 16u16 % 4u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 4590u16) / 16u16 % 4u16 * 16u16 + 1u16 * 16u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 4590u16) / 16u16 % 4u16 * 16u16 + 2u16 * 16u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 4590u16) / 16u16 % 4u16 * 16u16 + 3u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Upper => {
                        Self(self.0 - (self.0 - 4590u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Lower => {
                        Self(self.0 - (self.0 - 4590u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Hinge => match val {
                    PropValue::Left => {
                        Self(self.0 - (self.0 - 4590u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::Right => {
                        Self(self.0 - (self.0 - 4590u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 4590u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 4590u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 4590u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 4590u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Ladder => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 4654u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 4654u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 4654u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 4654u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 4654u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 4654u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Rail => match name {
                PropName::Shape => match val {
                    PropValue::NorthSouth => {
                        Self(self.0 - (self.0 - 4662u16) / 2u16 % 10u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::EastWest => {
                        Self(self.0 - (self.0 - 4662u16) / 2u16 % 10u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::AscendingEast => {
                        Self(self.0 - (self.0 - 4662u16) / 2u16 % 10u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::AscendingWest => {
                        Self(self.0 - (self.0 - 4662u16) / 2u16 % 10u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::AscendingNorth => {
                        Self(self.0 - (self.0 - 4662u16) / 2u16 % 10u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::AscendingSouth => {
                        Self(self.0 - (self.0 - 4662u16) / 2u16 % 10u16 * 2u16 + 5u16 * 2u16)
                    }
                    PropValue::SouthEast => {
                        Self(self.0 - (self.0 - 4662u16) / 2u16 % 10u16 * 2u16 + 6u16 * 2u16)
                    }
                    PropValue::SouthWest => {
                        Self(self.0 - (self.0 - 4662u16) / 2u16 % 10u16 * 2u16 + 7u16 * 2u16)
                    }
                    PropValue::NorthWest => {
                        Self(self.0 - (self.0 - 4662u16) / 2u16 % 10u16 * 2u16 + 8u16 * 2u16)
                    }
                    PropValue::NorthEast => {
                        Self(self.0 - (self.0 - 4662u16) / 2u16 % 10u16 * 2u16 + 9u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 4662u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 4662u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CobblestoneStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 4682u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 4682u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 4682u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 4682u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 4682u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 4682u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 4682u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 4682u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 4682u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 4682u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 4682u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 4682u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 4682u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::OakWallSign => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 4762u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 4762u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 4762u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 4762u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 4762u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 4762u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SpruceWallSign => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 4770u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 4770u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 4770u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 4770u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 4770u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 4770u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BirchWallSign => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 4778u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 4778u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 4778u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 4778u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 4778u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 4778u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::AcaciaWallSign => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 4786u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 4786u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 4786u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 4786u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 4786u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 4786u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CherryWallSign => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 4794u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 4794u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 4794u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 4794u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 4794u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 4794u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::JungleWallSign => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 4802u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 4802u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 4802u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 4802u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 4802u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 4802u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DarkOakWallSign => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 4810u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 4810u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 4810u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 4810u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 4810u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 4810u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MangroveWallSign => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 4818u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 4818u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 4818u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 4818u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 4818u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 4818u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BambooWallSign => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 4826u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 4826u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 4826u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 4826u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 4826u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 4826u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::OakHangingSign => match name {
                PropName::Attached => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 4834u16) / 32u16 % 2u16 * 32u16 + 0u16 * 32u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 4834u16) / 32u16 % 2u16 * 32u16 + 1u16 * 32u16)
                    }
                    _ => self,
                },
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 4834u16) / 2u16 % 16u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 4834u16) / 2u16 % 16u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 4834u16) / 2u16 % 16u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 4834u16) / 2u16 % 16u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 4834u16) / 2u16 % 16u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 4834u16) / 2u16 % 16u16 * 2u16 + 5u16 * 2u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 4834u16) / 2u16 % 16u16 * 2u16 + 6u16 * 2u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 4834u16) / 2u16 % 16u16 * 2u16 + 7u16 * 2u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 4834u16) / 2u16 % 16u16 * 2u16 + 8u16 * 2u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 4834u16) / 2u16 % 16u16 * 2u16 + 9u16 * 2u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 4834u16) / 2u16 % 16u16 * 2u16 + 10u16 * 2u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 4834u16) / 2u16 % 16u16 * 2u16 + 11u16 * 2u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 4834u16) / 2u16 % 16u16 * 2u16 + 12u16 * 2u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 4834u16) / 2u16 % 16u16 * 2u16 + 13u16 * 2u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 4834u16) / 2u16 % 16u16 * 2u16 + 14u16 * 2u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 4834u16) / 2u16 % 16u16 * 2u16 + 15u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 4834u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 4834u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SpruceHangingSign => match name {
                PropName::Attached => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 4898u16) / 32u16 % 2u16 * 32u16 + 0u16 * 32u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 4898u16) / 32u16 % 2u16 * 32u16 + 1u16 * 32u16)
                    }
                    _ => self,
                },
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 4898u16) / 2u16 % 16u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 4898u16) / 2u16 % 16u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 4898u16) / 2u16 % 16u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 4898u16) / 2u16 % 16u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 4898u16) / 2u16 % 16u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 4898u16) / 2u16 % 16u16 * 2u16 + 5u16 * 2u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 4898u16) / 2u16 % 16u16 * 2u16 + 6u16 * 2u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 4898u16) / 2u16 % 16u16 * 2u16 + 7u16 * 2u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 4898u16) / 2u16 % 16u16 * 2u16 + 8u16 * 2u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 4898u16) / 2u16 % 16u16 * 2u16 + 9u16 * 2u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 4898u16) / 2u16 % 16u16 * 2u16 + 10u16 * 2u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 4898u16) / 2u16 % 16u16 * 2u16 + 11u16 * 2u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 4898u16) / 2u16 % 16u16 * 2u16 + 12u16 * 2u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 4898u16) / 2u16 % 16u16 * 2u16 + 13u16 * 2u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 4898u16) / 2u16 % 16u16 * 2u16 + 14u16 * 2u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 4898u16) / 2u16 % 16u16 * 2u16 + 15u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 4898u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 4898u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BirchHangingSign => match name {
                PropName::Attached => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 4962u16) / 32u16 % 2u16 * 32u16 + 0u16 * 32u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 4962u16) / 32u16 % 2u16 * 32u16 + 1u16 * 32u16)
                    }
                    _ => self,
                },
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 4962u16) / 2u16 % 16u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 4962u16) / 2u16 % 16u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 4962u16) / 2u16 % 16u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 4962u16) / 2u16 % 16u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 4962u16) / 2u16 % 16u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 4962u16) / 2u16 % 16u16 * 2u16 + 5u16 * 2u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 4962u16) / 2u16 % 16u16 * 2u16 + 6u16 * 2u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 4962u16) / 2u16 % 16u16 * 2u16 + 7u16 * 2u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 4962u16) / 2u16 % 16u16 * 2u16 + 8u16 * 2u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 4962u16) / 2u16 % 16u16 * 2u16 + 9u16 * 2u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 4962u16) / 2u16 % 16u16 * 2u16 + 10u16 * 2u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 4962u16) / 2u16 % 16u16 * 2u16 + 11u16 * 2u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 4962u16) / 2u16 % 16u16 * 2u16 + 12u16 * 2u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 4962u16) / 2u16 % 16u16 * 2u16 + 13u16 * 2u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 4962u16) / 2u16 % 16u16 * 2u16 + 14u16 * 2u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 4962u16) / 2u16 % 16u16 * 2u16 + 15u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 4962u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 4962u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::AcaciaHangingSign => match name {
                PropName::Attached => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5026u16) / 32u16 % 2u16 * 32u16 + 0u16 * 32u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5026u16) / 32u16 % 2u16 * 32u16 + 1u16 * 32u16)
                    }
                    _ => self,
                },
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 5026u16) / 2u16 % 16u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 5026u16) / 2u16 % 16u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 5026u16) / 2u16 % 16u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 5026u16) / 2u16 % 16u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 5026u16) / 2u16 % 16u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 5026u16) / 2u16 % 16u16 * 2u16 + 5u16 * 2u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 5026u16) / 2u16 % 16u16 * 2u16 + 6u16 * 2u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 5026u16) / 2u16 % 16u16 * 2u16 + 7u16 * 2u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 5026u16) / 2u16 % 16u16 * 2u16 + 8u16 * 2u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 5026u16) / 2u16 % 16u16 * 2u16 + 9u16 * 2u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 5026u16) / 2u16 % 16u16 * 2u16 + 10u16 * 2u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 5026u16) / 2u16 % 16u16 * 2u16 + 11u16 * 2u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 5026u16) / 2u16 % 16u16 * 2u16 + 12u16 * 2u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 5026u16) / 2u16 % 16u16 * 2u16 + 13u16 * 2u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 5026u16) / 2u16 % 16u16 * 2u16 + 14u16 * 2u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 5026u16) / 2u16 % 16u16 * 2u16 + 15u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5026u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5026u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CherryHangingSign => match name {
                PropName::Attached => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5090u16) / 32u16 % 2u16 * 32u16 + 0u16 * 32u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5090u16) / 32u16 % 2u16 * 32u16 + 1u16 * 32u16)
                    }
                    _ => self,
                },
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 5090u16) / 2u16 % 16u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 5090u16) / 2u16 % 16u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 5090u16) / 2u16 % 16u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 5090u16) / 2u16 % 16u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 5090u16) / 2u16 % 16u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 5090u16) / 2u16 % 16u16 * 2u16 + 5u16 * 2u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 5090u16) / 2u16 % 16u16 * 2u16 + 6u16 * 2u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 5090u16) / 2u16 % 16u16 * 2u16 + 7u16 * 2u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 5090u16) / 2u16 % 16u16 * 2u16 + 8u16 * 2u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 5090u16) / 2u16 % 16u16 * 2u16 + 9u16 * 2u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 5090u16) / 2u16 % 16u16 * 2u16 + 10u16 * 2u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 5090u16) / 2u16 % 16u16 * 2u16 + 11u16 * 2u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 5090u16) / 2u16 % 16u16 * 2u16 + 12u16 * 2u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 5090u16) / 2u16 % 16u16 * 2u16 + 13u16 * 2u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 5090u16) / 2u16 % 16u16 * 2u16 + 14u16 * 2u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 5090u16) / 2u16 % 16u16 * 2u16 + 15u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5090u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5090u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::JungleHangingSign => match name {
                PropName::Attached => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5154u16) / 32u16 % 2u16 * 32u16 + 0u16 * 32u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5154u16) / 32u16 % 2u16 * 32u16 + 1u16 * 32u16)
                    }
                    _ => self,
                },
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 5154u16) / 2u16 % 16u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 5154u16) / 2u16 % 16u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 5154u16) / 2u16 % 16u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 5154u16) / 2u16 % 16u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 5154u16) / 2u16 % 16u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 5154u16) / 2u16 % 16u16 * 2u16 + 5u16 * 2u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 5154u16) / 2u16 % 16u16 * 2u16 + 6u16 * 2u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 5154u16) / 2u16 % 16u16 * 2u16 + 7u16 * 2u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 5154u16) / 2u16 % 16u16 * 2u16 + 8u16 * 2u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 5154u16) / 2u16 % 16u16 * 2u16 + 9u16 * 2u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 5154u16) / 2u16 % 16u16 * 2u16 + 10u16 * 2u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 5154u16) / 2u16 % 16u16 * 2u16 + 11u16 * 2u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 5154u16) / 2u16 % 16u16 * 2u16 + 12u16 * 2u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 5154u16) / 2u16 % 16u16 * 2u16 + 13u16 * 2u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 5154u16) / 2u16 % 16u16 * 2u16 + 14u16 * 2u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 5154u16) / 2u16 % 16u16 * 2u16 + 15u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5154u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5154u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DarkOakHangingSign => match name {
                PropName::Attached => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5218u16) / 32u16 % 2u16 * 32u16 + 0u16 * 32u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5218u16) / 32u16 % 2u16 * 32u16 + 1u16 * 32u16)
                    }
                    _ => self,
                },
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 5218u16) / 2u16 % 16u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 5218u16) / 2u16 % 16u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 5218u16) / 2u16 % 16u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 5218u16) / 2u16 % 16u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 5218u16) / 2u16 % 16u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 5218u16) / 2u16 % 16u16 * 2u16 + 5u16 * 2u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 5218u16) / 2u16 % 16u16 * 2u16 + 6u16 * 2u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 5218u16) / 2u16 % 16u16 * 2u16 + 7u16 * 2u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 5218u16) / 2u16 % 16u16 * 2u16 + 8u16 * 2u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 5218u16) / 2u16 % 16u16 * 2u16 + 9u16 * 2u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 5218u16) / 2u16 % 16u16 * 2u16 + 10u16 * 2u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 5218u16) / 2u16 % 16u16 * 2u16 + 11u16 * 2u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 5218u16) / 2u16 % 16u16 * 2u16 + 12u16 * 2u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 5218u16) / 2u16 % 16u16 * 2u16 + 13u16 * 2u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 5218u16) / 2u16 % 16u16 * 2u16 + 14u16 * 2u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 5218u16) / 2u16 % 16u16 * 2u16 + 15u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5218u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5218u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CrimsonHangingSign => match name {
                PropName::Attached => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5282u16) / 32u16 % 2u16 * 32u16 + 0u16 * 32u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5282u16) / 32u16 % 2u16 * 32u16 + 1u16 * 32u16)
                    }
                    _ => self,
                },
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 5282u16) / 2u16 % 16u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 5282u16) / 2u16 % 16u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 5282u16) / 2u16 % 16u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 5282u16) / 2u16 % 16u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 5282u16) / 2u16 % 16u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 5282u16) / 2u16 % 16u16 * 2u16 + 5u16 * 2u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 5282u16) / 2u16 % 16u16 * 2u16 + 6u16 * 2u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 5282u16) / 2u16 % 16u16 * 2u16 + 7u16 * 2u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 5282u16) / 2u16 % 16u16 * 2u16 + 8u16 * 2u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 5282u16) / 2u16 % 16u16 * 2u16 + 9u16 * 2u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 5282u16) / 2u16 % 16u16 * 2u16 + 10u16 * 2u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 5282u16) / 2u16 % 16u16 * 2u16 + 11u16 * 2u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 5282u16) / 2u16 % 16u16 * 2u16 + 12u16 * 2u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 5282u16) / 2u16 % 16u16 * 2u16 + 13u16 * 2u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 5282u16) / 2u16 % 16u16 * 2u16 + 14u16 * 2u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 5282u16) / 2u16 % 16u16 * 2u16 + 15u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5282u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5282u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WarpedHangingSign => match name {
                PropName::Attached => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5346u16) / 32u16 % 2u16 * 32u16 + 0u16 * 32u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5346u16) / 32u16 % 2u16 * 32u16 + 1u16 * 32u16)
                    }
                    _ => self,
                },
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 5346u16) / 2u16 % 16u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 5346u16) / 2u16 % 16u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 5346u16) / 2u16 % 16u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 5346u16) / 2u16 % 16u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 5346u16) / 2u16 % 16u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 5346u16) / 2u16 % 16u16 * 2u16 + 5u16 * 2u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 5346u16) / 2u16 % 16u16 * 2u16 + 6u16 * 2u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 5346u16) / 2u16 % 16u16 * 2u16 + 7u16 * 2u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 5346u16) / 2u16 % 16u16 * 2u16 + 8u16 * 2u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 5346u16) / 2u16 % 16u16 * 2u16 + 9u16 * 2u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 5346u16) / 2u16 % 16u16 * 2u16 + 10u16 * 2u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 5346u16) / 2u16 % 16u16 * 2u16 + 11u16 * 2u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 5346u16) / 2u16 % 16u16 * 2u16 + 12u16 * 2u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 5346u16) / 2u16 % 16u16 * 2u16 + 13u16 * 2u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 5346u16) / 2u16 % 16u16 * 2u16 + 14u16 * 2u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 5346u16) / 2u16 % 16u16 * 2u16 + 15u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5346u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5346u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MangroveHangingSign => match name {
                PropName::Attached => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5410u16) / 32u16 % 2u16 * 32u16 + 0u16 * 32u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5410u16) / 32u16 % 2u16 * 32u16 + 1u16 * 32u16)
                    }
                    _ => self,
                },
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 5410u16) / 2u16 % 16u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 5410u16) / 2u16 % 16u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 5410u16) / 2u16 % 16u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 5410u16) / 2u16 % 16u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 5410u16) / 2u16 % 16u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 5410u16) / 2u16 % 16u16 * 2u16 + 5u16 * 2u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 5410u16) / 2u16 % 16u16 * 2u16 + 6u16 * 2u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 5410u16) / 2u16 % 16u16 * 2u16 + 7u16 * 2u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 5410u16) / 2u16 % 16u16 * 2u16 + 8u16 * 2u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 5410u16) / 2u16 % 16u16 * 2u16 + 9u16 * 2u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 5410u16) / 2u16 % 16u16 * 2u16 + 10u16 * 2u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 5410u16) / 2u16 % 16u16 * 2u16 + 11u16 * 2u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 5410u16) / 2u16 % 16u16 * 2u16 + 12u16 * 2u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 5410u16) / 2u16 % 16u16 * 2u16 + 13u16 * 2u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 5410u16) / 2u16 % 16u16 * 2u16 + 14u16 * 2u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 5410u16) / 2u16 % 16u16 * 2u16 + 15u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5410u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5410u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BambooHangingSign => match name {
                PropName::Attached => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5474u16) / 32u16 % 2u16 * 32u16 + 0u16 * 32u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5474u16) / 32u16 % 2u16 * 32u16 + 1u16 * 32u16)
                    }
                    _ => self,
                },
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 5474u16) / 2u16 % 16u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 5474u16) / 2u16 % 16u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 5474u16) / 2u16 % 16u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 5474u16) / 2u16 % 16u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 5474u16) / 2u16 % 16u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 5474u16) / 2u16 % 16u16 * 2u16 + 5u16 * 2u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 5474u16) / 2u16 % 16u16 * 2u16 + 6u16 * 2u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 5474u16) / 2u16 % 16u16 * 2u16 + 7u16 * 2u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 5474u16) / 2u16 % 16u16 * 2u16 + 8u16 * 2u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 5474u16) / 2u16 % 16u16 * 2u16 + 9u16 * 2u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 5474u16) / 2u16 % 16u16 * 2u16 + 10u16 * 2u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 5474u16) / 2u16 % 16u16 * 2u16 + 11u16 * 2u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 5474u16) / 2u16 % 16u16 * 2u16 + 12u16 * 2u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 5474u16) / 2u16 % 16u16 * 2u16 + 13u16 * 2u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 5474u16) / 2u16 % 16u16 * 2u16 + 14u16 * 2u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 5474u16) / 2u16 % 16u16 * 2u16 + 15u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5474u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5474u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::OakWallHangingSign => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 5538u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 5538u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 5538u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 5538u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5538u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5538u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SpruceWallHangingSign => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 5546u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 5546u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 5546u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 5546u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5546u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5546u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BirchWallHangingSign => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 5554u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 5554u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 5554u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 5554u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5554u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5554u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::AcaciaWallHangingSign => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 5562u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 5562u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 5562u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 5562u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5562u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5562u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CherryWallHangingSign => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 5570u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 5570u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 5570u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 5570u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5570u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5570u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::JungleWallHangingSign => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 5578u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 5578u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 5578u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 5578u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5578u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5578u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DarkOakWallHangingSign => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 5586u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 5586u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 5586u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 5586u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5586u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5586u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MangroveWallHangingSign => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 5594u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 5594u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 5594u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 5594u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5594u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5594u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CrimsonWallHangingSign => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 5602u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 5602u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 5602u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 5602u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5602u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5602u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WarpedWallHangingSign => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 5610u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 5610u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 5610u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 5610u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5610u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5610u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BambooWallHangingSign => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 5618u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 5618u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 5618u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 5618u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5618u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5618u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Lever => match name {
                PropName::Face => match val {
                    PropValue::Floor => {
                        Self(self.0 - (self.0 - 5626u16) / 8u16 % 3u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Wall => {
                        Self(self.0 - (self.0 - 5626u16) / 8u16 % 3u16 * 8u16 + 1u16 * 8u16)
                    }
                    PropValue::Ceiling => {
                        Self(self.0 - (self.0 - 5626u16) / 8u16 % 3u16 * 8u16 + 2u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 5626u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 5626u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 5626u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 5626u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5626u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5626u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::StonePressurePlate => match name {
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5650u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5650u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::IronDoor => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 5652u16) / 16u16 % 4u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 5652u16) / 16u16 % 4u16 * 16u16 + 1u16 * 16u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 5652u16) / 16u16 % 4u16 * 16u16 + 2u16 * 16u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 5652u16) / 16u16 % 4u16 * 16u16 + 3u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Upper => {
                        Self(self.0 - (self.0 - 5652u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Lower => {
                        Self(self.0 - (self.0 - 5652u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Hinge => match val {
                    PropValue::Left => {
                        Self(self.0 - (self.0 - 5652u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::Right => {
                        Self(self.0 - (self.0 - 5652u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5652u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5652u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5652u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5652u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::OakPressurePlate => match name {
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5716u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5716u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SprucePressurePlate => match name {
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5718u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5718u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BirchPressurePlate => match name {
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5720u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5720u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::JunglePressurePlate => match name {
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5722u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5722u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::AcaciaPressurePlate => match name {
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5724u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5724u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CherryPressurePlate => match name {
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5726u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5726u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DarkOakPressurePlate => match name {
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5728u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5728u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MangrovePressurePlate => match name {
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5730u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5730u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BambooPressurePlate => match name {
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5732u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5732u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::RedstoneOre => match name {
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5734u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5734u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DeepslateRedstoneOre => match name {
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5736u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5736u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::RedstoneTorch => match name {
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5738u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5738u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::RedstoneWallTorch => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 5740u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 5740u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 5740u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 5740u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5740u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5740u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::StoneButton => match name {
                PropName::Face => match val {
                    PropValue::Floor => {
                        Self(self.0 - (self.0 - 5748u16) / 8u16 % 3u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Wall => {
                        Self(self.0 - (self.0 - 5748u16) / 8u16 % 3u16 * 8u16 + 1u16 * 8u16)
                    }
                    PropValue::Ceiling => {
                        Self(self.0 - (self.0 - 5748u16) / 8u16 % 3u16 * 8u16 + 2u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 5748u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 5748u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 5748u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 5748u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5748u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5748u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Snow => match name {
                PropName::Layers => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 5772u16) / 1u16 % 8u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 5772u16) / 1u16 % 8u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 5772u16) / 1u16 % 8u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 5772u16) / 1u16 % 8u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 5772u16) / 1u16 % 8u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 5772u16) / 1u16 % 8u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 5772u16) / 1u16 % 8u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 5772u16) / 1u16 % 8u16 * 1u16 + 7u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Cactus => match name {
                PropName::Age => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 5782u16) / 1u16 % 16u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 5782u16) / 1u16 % 16u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 5782u16) / 1u16 % 16u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 5782u16) / 1u16 % 16u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 5782u16) / 1u16 % 16u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 5782u16) / 1u16 % 16u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 5782u16) / 1u16 % 16u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 5782u16) / 1u16 % 16u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 5782u16) / 1u16 % 16u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 5782u16) / 1u16 % 16u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 5782u16) / 1u16 % 16u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 5782u16) / 1u16 % 16u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 5782u16) / 1u16 % 16u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 5782u16) / 1u16 % 16u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 5782u16) / 1u16 % 16u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 5782u16) / 1u16 % 16u16 * 1u16 + 15u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SugarCane => match name {
                PropName::Age => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 5799u16) / 1u16 % 16u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 5799u16) / 1u16 % 16u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 5799u16) / 1u16 % 16u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 5799u16) / 1u16 % 16u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 5799u16) / 1u16 % 16u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 5799u16) / 1u16 % 16u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 5799u16) / 1u16 % 16u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 5799u16) / 1u16 % 16u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 5799u16) / 1u16 % 16u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 5799u16) / 1u16 % 16u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 5799u16) / 1u16 % 16u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 5799u16) / 1u16 % 16u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 5799u16) / 1u16 % 16u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 5799u16) / 1u16 % 16u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 5799u16) / 1u16 % 16u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 5799u16) / 1u16 % 16u16 * 1u16 + 15u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Jukebox => match name {
                PropName::HasRecord => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5815u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5815u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::OakFence => match name {
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5817u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5817u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5817u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5817u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5817u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5817u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5817u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5817u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5817u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5817u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Basalt => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 5853u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 5853u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 5853u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PolishedBasalt => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 5856u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 5856u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 5856u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SoulWallTorch => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 5860u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 5860u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 5860u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 5860u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::NetherPortal => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 5865u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 5865u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CarvedPumpkin => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 5867u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 5867u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 5867u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 5867u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::JackOLantern => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 5871u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 5871u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 5871u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 5871u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Cake => match name {
                PropName::Bites => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 5875u16) / 1u16 % 7u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 5875u16) / 1u16 % 7u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 5875u16) / 1u16 % 7u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 5875u16) / 1u16 % 7u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 5875u16) / 1u16 % 7u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 5875u16) / 1u16 % 7u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 5875u16) / 1u16 % 7u16 * 1u16 + 6u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Repeater => match name {
                PropName::Delay => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 5882u16) / 16u16 % 4u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 5882u16) / 16u16 % 4u16 * 16u16 + 1u16 * 16u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 5882u16) / 16u16 % 4u16 * 16u16 + 2u16 * 16u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 5882u16) / 16u16 % 4u16 * 16u16 + 3u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 5882u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 5882u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 5882u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 5882u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Locked => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5882u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5882u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5882u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5882u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::OakTrapdoor => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 5962u16) / 16u16 % 4u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 5962u16) / 16u16 % 4u16 * 16u16 + 1u16 * 16u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 5962u16) / 16u16 % 4u16 * 16u16 + 2u16 * 16u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 5962u16) / 16u16 % 4u16 * 16u16 + 3u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 5962u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 5962u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5962u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5962u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5962u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5962u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 5962u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 5962u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SpruceTrapdoor => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 6026u16) / 16u16 % 4u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 6026u16) / 16u16 % 4u16 * 16u16 + 1u16 * 16u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 6026u16) / 16u16 % 4u16 * 16u16 + 2u16 * 16u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 6026u16) / 16u16 % 4u16 * 16u16 + 3u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 6026u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 6026u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6026u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6026u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6026u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6026u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6026u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6026u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BirchTrapdoor => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 6090u16) / 16u16 % 4u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 6090u16) / 16u16 % 4u16 * 16u16 + 1u16 * 16u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 6090u16) / 16u16 % 4u16 * 16u16 + 2u16 * 16u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 6090u16) / 16u16 % 4u16 * 16u16 + 3u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 6090u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 6090u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6090u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6090u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6090u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6090u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6090u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6090u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::JungleTrapdoor => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 6154u16) / 16u16 % 4u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 6154u16) / 16u16 % 4u16 * 16u16 + 1u16 * 16u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 6154u16) / 16u16 % 4u16 * 16u16 + 2u16 * 16u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 6154u16) / 16u16 % 4u16 * 16u16 + 3u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 6154u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 6154u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6154u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6154u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6154u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6154u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6154u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6154u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::AcaciaTrapdoor => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 6218u16) / 16u16 % 4u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 6218u16) / 16u16 % 4u16 * 16u16 + 1u16 * 16u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 6218u16) / 16u16 % 4u16 * 16u16 + 2u16 * 16u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 6218u16) / 16u16 % 4u16 * 16u16 + 3u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 6218u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 6218u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6218u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6218u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6218u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6218u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6218u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6218u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CherryTrapdoor => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 6282u16) / 16u16 % 4u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 6282u16) / 16u16 % 4u16 * 16u16 + 1u16 * 16u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 6282u16) / 16u16 % 4u16 * 16u16 + 2u16 * 16u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 6282u16) / 16u16 % 4u16 * 16u16 + 3u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 6282u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 6282u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6282u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6282u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6282u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6282u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6282u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6282u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DarkOakTrapdoor => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 6346u16) / 16u16 % 4u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 6346u16) / 16u16 % 4u16 * 16u16 + 1u16 * 16u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 6346u16) / 16u16 % 4u16 * 16u16 + 2u16 * 16u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 6346u16) / 16u16 % 4u16 * 16u16 + 3u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 6346u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 6346u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6346u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6346u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6346u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6346u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6346u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6346u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MangroveTrapdoor => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 6410u16) / 16u16 % 4u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 6410u16) / 16u16 % 4u16 * 16u16 + 1u16 * 16u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 6410u16) / 16u16 % 4u16 * 16u16 + 2u16 * 16u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 6410u16) / 16u16 % 4u16 * 16u16 + 3u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 6410u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 6410u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6410u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6410u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6410u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6410u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6410u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6410u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BambooTrapdoor => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 6474u16) / 16u16 % 4u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 6474u16) / 16u16 % 4u16 * 16u16 + 1u16 * 16u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 6474u16) / 16u16 % 4u16 * 16u16 + 2u16 * 16u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 6474u16) / 16u16 % 4u16 * 16u16 + 3u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 6474u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 6474u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6474u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6474u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6474u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6474u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6474u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6474u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BrownMushroomBlock => match name {
                PropName::Down => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6550u16) / 32u16 % 2u16 * 32u16 + 0u16 * 32u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6550u16) / 32u16 % 2u16 * 32u16 + 1u16 * 32u16)
                    }
                    _ => self,
                },
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6550u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6550u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6550u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6550u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6550u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6550u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Up => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6550u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6550u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6550u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6550u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::RedMushroomBlock => match name {
                PropName::Down => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6614u16) / 32u16 % 2u16 * 32u16 + 0u16 * 32u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6614u16) / 32u16 % 2u16 * 32u16 + 1u16 * 32u16)
                    }
                    _ => self,
                },
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6614u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6614u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6614u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6614u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6614u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6614u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Up => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6614u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6614u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6614u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6614u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MushroomStem => match name {
                PropName::Down => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6678u16) / 32u16 % 2u16 * 32u16 + 0u16 * 32u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6678u16) / 32u16 % 2u16 * 32u16 + 1u16 * 32u16)
                    }
                    _ => self,
                },
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6678u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6678u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6678u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6678u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6678u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6678u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Up => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6678u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6678u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6678u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6678u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::IronBars => match name {
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6742u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6742u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6742u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6742u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6742u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6742u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6742u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6742u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6742u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6742u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Chain => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 6774u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 6774u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 6774u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6774u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6774u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::GlassPane => match name {
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6780u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6780u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6780u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6780u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6780u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6780u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6780u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6780u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6780u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6780u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::AttachedPumpkinStem => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 6813u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 6813u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 6813u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 6813u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::AttachedMelonStem => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 6817u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 6817u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 6817u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 6817u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PumpkinStem => match name {
                PropName::Age => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 6821u16) / 1u16 % 8u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 6821u16) / 1u16 % 8u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 6821u16) / 1u16 % 8u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 6821u16) / 1u16 % 8u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 6821u16) / 1u16 % 8u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 6821u16) / 1u16 % 8u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 6821u16) / 1u16 % 8u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 6821u16) / 1u16 % 8u16 * 1u16 + 7u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MelonStem => match name {
                PropName::Age => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 6829u16) / 1u16 % 8u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 6829u16) / 1u16 % 8u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 6829u16) / 1u16 % 8u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 6829u16) / 1u16 % 8u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 6829u16) / 1u16 % 8u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 6829u16) / 1u16 % 8u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 6829u16) / 1u16 % 8u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 6829u16) / 1u16 % 8u16 * 1u16 + 7u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Vine => match name {
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6837u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6837u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6837u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6837u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6837u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6837u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Up => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6837u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6837u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6837u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6837u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::GlowLichen => match name {
                PropName::Down => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6869u16) / 64u16 % 2u16 * 64u16 + 0u16 * 64u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6869u16) / 64u16 % 2u16 * 64u16 + 1u16 * 64u16)
                    }
                    _ => self,
                },
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6869u16) / 32u16 % 2u16 * 32u16 + 0u16 * 32u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6869u16) / 32u16 % 2u16 * 32u16 + 1u16 * 32u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6869u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6869u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6869u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6869u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Up => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6869u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6869u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6869u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6869u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6869u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6869u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::OakFenceGate => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 6997u16) / 8u16 % 4u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 6997u16) / 8u16 % 4u16 * 8u16 + 1u16 * 8u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 6997u16) / 8u16 % 4u16 * 8u16 + 2u16 * 8u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 6997u16) / 8u16 % 4u16 * 8u16 + 3u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::InWall => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6997u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6997u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6997u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6997u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 6997u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 6997u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BrickStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 7029u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 7029u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 7029u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 7029u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 7029u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 7029u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 7029u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 7029u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 7029u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 7029u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 7029u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 7029u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 7029u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::StoneBrickStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 7109u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 7109u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 7109u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 7109u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 7109u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 7109u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 7109u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 7109u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 7109u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 7109u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 7109u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 7109u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 7109u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MudBrickStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 7189u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 7189u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 7189u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 7189u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 7189u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 7189u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 7189u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 7189u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 7189u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 7189u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 7189u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 7189u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 7189u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Mycelium => match name {
                PropName::Snowy => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 7269u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 7269u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::NetherBrickFence => match name {
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 7273u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 7273u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 7273u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 7273u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 7273u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 7273u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 7273u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 7273u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 7273u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 7273u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::NetherBrickStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 7305u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 7305u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 7305u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 7305u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 7305u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 7305u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 7305u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 7305u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 7305u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 7305u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 7305u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 7305u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 7305u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::NetherWart => match name {
                PropName::Age => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 7385u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 7385u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 7385u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 7385u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BrewingStand => match name {
                PropName::HasBottle0 => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 7390u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 7390u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::HasBottle1 => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 7390u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 7390u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::HasBottle2 => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 7390u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 7390u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WaterCauldron => match name {
                PropName::Level => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 7399u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 7399u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 7399u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PowderSnowCauldron => match name {
                PropName::Level => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 7403u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 7403u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 7403u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::EndPortalFrame => match name {
                PropName::Eye => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 7407u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 7407u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 7407u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 7407u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 7407u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 7407u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::RedstoneLamp => match name {
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 7417u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 7417u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Cocoa => match name {
                PropName::Age => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 7419u16) / 4u16 % 3u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 7419u16) / 4u16 % 3u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 7419u16) / 4u16 % 3u16 * 4u16 + 2u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 7419u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 7419u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 7419u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 7419u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SandstoneStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 7431u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 7431u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 7431u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 7431u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 7431u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 7431u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 7431u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 7431u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 7431u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 7431u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 7431u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 7431u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 7431u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::EnderChest => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 7513u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 7513u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 7513u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 7513u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 7513u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 7513u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::TripwireHook => match name {
                PropName::Attached => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 7521u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 7521u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 7521u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 7521u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 7521u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 7521u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 7521u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 7521u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Tripwire => match name {
                PropName::Attached => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 7537u16) / 64u16 % 2u16 * 64u16 + 0u16 * 64u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 7537u16) / 64u16 % 2u16 * 64u16 + 1u16 * 64u16)
                    }
                    _ => self,
                },
                PropName::Disarmed => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 7537u16) / 32u16 % 2u16 * 32u16 + 0u16 * 32u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 7537u16) / 32u16 % 2u16 * 32u16 + 1u16 * 32u16)
                    }
                    _ => self,
                },
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 7537u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 7537u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 7537u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 7537u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 7537u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 7537u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 7537u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 7537u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 7537u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 7537u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SpruceStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 7666u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 7666u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 7666u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 7666u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 7666u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 7666u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 7666u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 7666u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 7666u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 7666u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 7666u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 7666u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 7666u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BirchStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 7746u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 7746u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 7746u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 7746u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 7746u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 7746u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 7746u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 7746u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 7746u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 7746u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 7746u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 7746u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 7746u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::JungleStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 7826u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 7826u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 7826u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 7826u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 7826u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 7826u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 7826u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 7826u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 7826u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 7826u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 7826u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 7826u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 7826u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CommandBlock => match name {
                PropName::Conditional => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 7906u16) / 6u16 % 2u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 7906u16) / 6u16 % 2u16 * 6u16 + 1u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 7906u16) / 1u16 % 6u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 7906u16) / 1u16 % 6u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 7906u16) / 1u16 % 6u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 7906u16) / 1u16 % 6u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 7906u16) / 1u16 % 6u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 7906u16) / 1u16 % 6u16 * 1u16 + 5u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CobblestoneWall => match name {
                PropName::East => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 7919u16) / 108u16 % 3u16 * 108u16 + 0u16 * 108u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 7919u16) / 108u16 % 3u16 * 108u16 + 1u16 * 108u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 7919u16) / 108u16 % 3u16 * 108u16 + 2u16 * 108u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 7919u16) / 36u16 % 3u16 * 36u16 + 0u16 * 36u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 7919u16) / 36u16 % 3u16 * 36u16 + 1u16 * 36u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 7919u16) / 36u16 % 3u16 * 36u16 + 2u16 * 36u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 7919u16) / 12u16 % 3u16 * 12u16 + 0u16 * 12u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 7919u16) / 12u16 % 3u16 * 12u16 + 1u16 * 12u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 7919u16) / 12u16 % 3u16 * 12u16 + 2u16 * 12u16)
                    }
                    _ => self,
                },
                PropName::Up => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 7919u16) / 6u16 % 2u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 7919u16) / 6u16 % 2u16 * 6u16 + 1u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 7919u16) / 3u16 % 2u16 * 3u16 + 0u16 * 3u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 7919u16) / 3u16 % 2u16 * 3u16 + 1u16 * 3u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 7919u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 7919u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 7919u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MossyCobblestoneWall => match name {
                PropName::East => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 8243u16) / 108u16 % 3u16 * 108u16 + 0u16 * 108u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 8243u16) / 108u16 % 3u16 * 108u16 + 1u16 * 108u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 8243u16) / 108u16 % 3u16 * 108u16 + 2u16 * 108u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 8243u16) / 36u16 % 3u16 * 36u16 + 0u16 * 36u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 8243u16) / 36u16 % 3u16 * 36u16 + 1u16 * 36u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 8243u16) / 36u16 % 3u16 * 36u16 + 2u16 * 36u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 8243u16) / 12u16 % 3u16 * 12u16 + 0u16 * 12u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 8243u16) / 12u16 % 3u16 * 12u16 + 1u16 * 12u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 8243u16) / 12u16 % 3u16 * 12u16 + 2u16 * 12u16)
                    }
                    _ => self,
                },
                PropName::Up => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 8243u16) / 6u16 % 2u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 8243u16) / 6u16 % 2u16 * 6u16 + 1u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 8243u16) / 3u16 % 2u16 * 3u16 + 0u16 * 3u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 8243u16) / 3u16 % 2u16 * 3u16 + 1u16 * 3u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 8243u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 8243u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 8243u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Carrots => match name {
                PropName::Age => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 8595u16) / 1u16 % 8u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 8595u16) / 1u16 % 8u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 8595u16) / 1u16 % 8u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 8595u16) / 1u16 % 8u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 8595u16) / 1u16 % 8u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 8595u16) / 1u16 % 8u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 8595u16) / 1u16 % 8u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 8595u16) / 1u16 % 8u16 * 1u16 + 7u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Potatoes => match name {
                PropName::Age => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 8603u16) / 1u16 % 8u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 8603u16) / 1u16 % 8u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 8603u16) / 1u16 % 8u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 8603u16) / 1u16 % 8u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 8603u16) / 1u16 % 8u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 8603u16) / 1u16 % 8u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 8603u16) / 1u16 % 8u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 8603u16) / 1u16 % 8u16 * 1u16 + 7u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::OakButton => match name {
                PropName::Face => match val {
                    PropValue::Floor => {
                        Self(self.0 - (self.0 - 8611u16) / 8u16 % 3u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Wall => {
                        Self(self.0 - (self.0 - 8611u16) / 8u16 % 3u16 * 8u16 + 1u16 * 8u16)
                    }
                    PropValue::Ceiling => {
                        Self(self.0 - (self.0 - 8611u16) / 8u16 % 3u16 * 8u16 + 2u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 8611u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 8611u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 8611u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 8611u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 8611u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 8611u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SpruceButton => match name {
                PropName::Face => match val {
                    PropValue::Floor => {
                        Self(self.0 - (self.0 - 8635u16) / 8u16 % 3u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Wall => {
                        Self(self.0 - (self.0 - 8635u16) / 8u16 % 3u16 * 8u16 + 1u16 * 8u16)
                    }
                    PropValue::Ceiling => {
                        Self(self.0 - (self.0 - 8635u16) / 8u16 % 3u16 * 8u16 + 2u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 8635u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 8635u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 8635u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 8635u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 8635u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 8635u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BirchButton => match name {
                PropName::Face => match val {
                    PropValue::Floor => {
                        Self(self.0 - (self.0 - 8659u16) / 8u16 % 3u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Wall => {
                        Self(self.0 - (self.0 - 8659u16) / 8u16 % 3u16 * 8u16 + 1u16 * 8u16)
                    }
                    PropValue::Ceiling => {
                        Self(self.0 - (self.0 - 8659u16) / 8u16 % 3u16 * 8u16 + 2u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 8659u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 8659u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 8659u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 8659u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 8659u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 8659u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::JungleButton => match name {
                PropName::Face => match val {
                    PropValue::Floor => {
                        Self(self.0 - (self.0 - 8683u16) / 8u16 % 3u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Wall => {
                        Self(self.0 - (self.0 - 8683u16) / 8u16 % 3u16 * 8u16 + 1u16 * 8u16)
                    }
                    PropValue::Ceiling => {
                        Self(self.0 - (self.0 - 8683u16) / 8u16 % 3u16 * 8u16 + 2u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 8683u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 8683u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 8683u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 8683u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 8683u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 8683u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::AcaciaButton => match name {
                PropName::Face => match val {
                    PropValue::Floor => {
                        Self(self.0 - (self.0 - 8707u16) / 8u16 % 3u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Wall => {
                        Self(self.0 - (self.0 - 8707u16) / 8u16 % 3u16 * 8u16 + 1u16 * 8u16)
                    }
                    PropValue::Ceiling => {
                        Self(self.0 - (self.0 - 8707u16) / 8u16 % 3u16 * 8u16 + 2u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 8707u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 8707u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 8707u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 8707u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 8707u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 8707u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CherryButton => match name {
                PropName::Face => match val {
                    PropValue::Floor => {
                        Self(self.0 - (self.0 - 8731u16) / 8u16 % 3u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Wall => {
                        Self(self.0 - (self.0 - 8731u16) / 8u16 % 3u16 * 8u16 + 1u16 * 8u16)
                    }
                    PropValue::Ceiling => {
                        Self(self.0 - (self.0 - 8731u16) / 8u16 % 3u16 * 8u16 + 2u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 8731u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 8731u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 8731u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 8731u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 8731u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 8731u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DarkOakButton => match name {
                PropName::Face => match val {
                    PropValue::Floor => {
                        Self(self.0 - (self.0 - 8755u16) / 8u16 % 3u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Wall => {
                        Self(self.0 - (self.0 - 8755u16) / 8u16 % 3u16 * 8u16 + 1u16 * 8u16)
                    }
                    PropValue::Ceiling => {
                        Self(self.0 - (self.0 - 8755u16) / 8u16 % 3u16 * 8u16 + 2u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 8755u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 8755u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 8755u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 8755u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 8755u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 8755u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MangroveButton => match name {
                PropName::Face => match val {
                    PropValue::Floor => {
                        Self(self.0 - (self.0 - 8779u16) / 8u16 % 3u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Wall => {
                        Self(self.0 - (self.0 - 8779u16) / 8u16 % 3u16 * 8u16 + 1u16 * 8u16)
                    }
                    PropValue::Ceiling => {
                        Self(self.0 - (self.0 - 8779u16) / 8u16 % 3u16 * 8u16 + 2u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 8779u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 8779u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 8779u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 8779u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 8779u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 8779u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BambooButton => match name {
                PropName::Face => match val {
                    PropValue::Floor => {
                        Self(self.0 - (self.0 - 8803u16) / 8u16 % 3u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Wall => {
                        Self(self.0 - (self.0 - 8803u16) / 8u16 % 3u16 * 8u16 + 1u16 * 8u16)
                    }
                    PropValue::Ceiling => {
                        Self(self.0 - (self.0 - 8803u16) / 8u16 % 3u16 * 8u16 + 2u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 8803u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 8803u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 8803u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 8803u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 8803u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 8803u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SkeletonSkull => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 8827u16) / 1u16 % 16u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 8827u16) / 1u16 % 16u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 8827u16) / 1u16 % 16u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 8827u16) / 1u16 % 16u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 8827u16) / 1u16 % 16u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 8827u16) / 1u16 % 16u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 8827u16) / 1u16 % 16u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 8827u16) / 1u16 % 16u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 8827u16) / 1u16 % 16u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 8827u16) / 1u16 % 16u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 8827u16) / 1u16 % 16u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 8827u16) / 1u16 % 16u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 8827u16) / 1u16 % 16u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 8827u16) / 1u16 % 16u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 8827u16) / 1u16 % 16u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 8827u16) / 1u16 % 16u16 * 1u16 + 15u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SkeletonWallSkull => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 8843u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 8843u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 8843u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 8843u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WitherSkeletonSkull => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 8847u16) / 1u16 % 16u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 8847u16) / 1u16 % 16u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 8847u16) / 1u16 % 16u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 8847u16) / 1u16 % 16u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 8847u16) / 1u16 % 16u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 8847u16) / 1u16 % 16u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 8847u16) / 1u16 % 16u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 8847u16) / 1u16 % 16u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 8847u16) / 1u16 % 16u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 8847u16) / 1u16 % 16u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 8847u16) / 1u16 % 16u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 8847u16) / 1u16 % 16u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 8847u16) / 1u16 % 16u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 8847u16) / 1u16 % 16u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 8847u16) / 1u16 % 16u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 8847u16) / 1u16 % 16u16 * 1u16 + 15u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WitherSkeletonWallSkull => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 8863u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 8863u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 8863u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 8863u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::ZombieHead => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 8867u16) / 1u16 % 16u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 8867u16) / 1u16 % 16u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 8867u16) / 1u16 % 16u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 8867u16) / 1u16 % 16u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 8867u16) / 1u16 % 16u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 8867u16) / 1u16 % 16u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 8867u16) / 1u16 % 16u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 8867u16) / 1u16 % 16u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 8867u16) / 1u16 % 16u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 8867u16) / 1u16 % 16u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 8867u16) / 1u16 % 16u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 8867u16) / 1u16 % 16u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 8867u16) / 1u16 % 16u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 8867u16) / 1u16 % 16u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 8867u16) / 1u16 % 16u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 8867u16) / 1u16 % 16u16 * 1u16 + 15u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::ZombieWallHead => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 8883u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 8883u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 8883u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 8883u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PlayerHead => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 8887u16) / 1u16 % 16u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 8887u16) / 1u16 % 16u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 8887u16) / 1u16 % 16u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 8887u16) / 1u16 % 16u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 8887u16) / 1u16 % 16u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 8887u16) / 1u16 % 16u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 8887u16) / 1u16 % 16u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 8887u16) / 1u16 % 16u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 8887u16) / 1u16 % 16u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 8887u16) / 1u16 % 16u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 8887u16) / 1u16 % 16u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 8887u16) / 1u16 % 16u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 8887u16) / 1u16 % 16u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 8887u16) / 1u16 % 16u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 8887u16) / 1u16 % 16u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 8887u16) / 1u16 % 16u16 * 1u16 + 15u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PlayerWallHead => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 8903u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 8903u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 8903u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 8903u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CreeperHead => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 8907u16) / 1u16 % 16u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 8907u16) / 1u16 % 16u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 8907u16) / 1u16 % 16u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 8907u16) / 1u16 % 16u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 8907u16) / 1u16 % 16u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 8907u16) / 1u16 % 16u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 8907u16) / 1u16 % 16u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 8907u16) / 1u16 % 16u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 8907u16) / 1u16 % 16u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 8907u16) / 1u16 % 16u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 8907u16) / 1u16 % 16u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 8907u16) / 1u16 % 16u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 8907u16) / 1u16 % 16u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 8907u16) / 1u16 % 16u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 8907u16) / 1u16 % 16u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 8907u16) / 1u16 % 16u16 * 1u16 + 15u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CreeperWallHead => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 8923u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 8923u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 8923u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 8923u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DragonHead => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 8927u16) / 1u16 % 16u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 8927u16) / 1u16 % 16u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 8927u16) / 1u16 % 16u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 8927u16) / 1u16 % 16u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 8927u16) / 1u16 % 16u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 8927u16) / 1u16 % 16u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 8927u16) / 1u16 % 16u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 8927u16) / 1u16 % 16u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 8927u16) / 1u16 % 16u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 8927u16) / 1u16 % 16u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 8927u16) / 1u16 % 16u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 8927u16) / 1u16 % 16u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 8927u16) / 1u16 % 16u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 8927u16) / 1u16 % 16u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 8927u16) / 1u16 % 16u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 8927u16) / 1u16 % 16u16 * 1u16 + 15u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DragonWallHead => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 8943u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 8943u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 8943u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 8943u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PiglinHead => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 8947u16) / 1u16 % 16u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 8947u16) / 1u16 % 16u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 8947u16) / 1u16 % 16u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 8947u16) / 1u16 % 16u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 8947u16) / 1u16 % 16u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 8947u16) / 1u16 % 16u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 8947u16) / 1u16 % 16u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 8947u16) / 1u16 % 16u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 8947u16) / 1u16 % 16u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 8947u16) / 1u16 % 16u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 8947u16) / 1u16 % 16u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 8947u16) / 1u16 % 16u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 8947u16) / 1u16 % 16u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 8947u16) / 1u16 % 16u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 8947u16) / 1u16 % 16u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 8947u16) / 1u16 % 16u16 * 1u16 + 15u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PiglinWallHead => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 8963u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 8963u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 8963u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 8963u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Anvil => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 8967u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 8967u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 8967u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 8967u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::ChippedAnvil => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 8971u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 8971u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 8971u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 8971u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DamagedAnvil => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 8975u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 8975u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 8975u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 8975u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::TrappedChest => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 8979u16) / 6u16 % 4u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 8979u16) / 6u16 % 4u16 * 6u16 + 1u16 * 6u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 8979u16) / 6u16 % 4u16 * 6u16 + 2u16 * 6u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 8979u16) / 6u16 % 4u16 * 6u16 + 3u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::Type => match val {
                    PropValue::Single => {
                        Self(self.0 - (self.0 - 8979u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Left => {
                        Self(self.0 - (self.0 - 8979u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Right => {
                        Self(self.0 - (self.0 - 8979u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 8979u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 8979u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::LightWeightedPressurePlate => match name {
                PropName::Power => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 9003u16) / 1u16 % 16u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 9003u16) / 1u16 % 16u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 9003u16) / 1u16 % 16u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 9003u16) / 1u16 % 16u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 9003u16) / 1u16 % 16u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 9003u16) / 1u16 % 16u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 9003u16) / 1u16 % 16u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 9003u16) / 1u16 % 16u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 9003u16) / 1u16 % 16u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 9003u16) / 1u16 % 16u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 9003u16) / 1u16 % 16u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 9003u16) / 1u16 % 16u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 9003u16) / 1u16 % 16u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 9003u16) / 1u16 % 16u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 9003u16) / 1u16 % 16u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 9003u16) / 1u16 % 16u16 * 1u16 + 15u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::HeavyWeightedPressurePlate => match name {
                PropName::Power => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 9019u16) / 1u16 % 16u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 9019u16) / 1u16 % 16u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 9019u16) / 1u16 % 16u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 9019u16) / 1u16 % 16u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 9019u16) / 1u16 % 16u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 9019u16) / 1u16 % 16u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 9019u16) / 1u16 % 16u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 9019u16) / 1u16 % 16u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 9019u16) / 1u16 % 16u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 9019u16) / 1u16 % 16u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 9019u16) / 1u16 % 16u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 9019u16) / 1u16 % 16u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 9019u16) / 1u16 % 16u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 9019u16) / 1u16 % 16u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 9019u16) / 1u16 % 16u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 9019u16) / 1u16 % 16u16 * 1u16 + 15u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Comparator => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 9035u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 9035u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 9035u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 9035u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Mode => match val {
                    PropValue::Compare => {
                        Self(self.0 - (self.0 - 9035u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Subtract => {
                        Self(self.0 - (self.0 - 9035u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9035u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9035u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DaylightDetector => match name {
                PropName::Inverted => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9051u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9051u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::Power => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 9051u16) / 1u16 % 16u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 9051u16) / 1u16 % 16u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 9051u16) / 1u16 % 16u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 9051u16) / 1u16 % 16u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 9051u16) / 1u16 % 16u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 9051u16) / 1u16 % 16u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 9051u16) / 1u16 % 16u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 9051u16) / 1u16 % 16u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 9051u16) / 1u16 % 16u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 9051u16) / 1u16 % 16u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 9051u16) / 1u16 % 16u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 9051u16) / 1u16 % 16u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 9051u16) / 1u16 % 16u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 9051u16) / 1u16 % 16u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 9051u16) / 1u16 % 16u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 9051u16) / 1u16 % 16u16 * 1u16 + 15u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Hopper => match name {
                PropName::Enabled => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9085u16) / 5u16 % 2u16 * 5u16 + 0u16 * 5u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9085u16) / 5u16 % 2u16 * 5u16 + 1u16 * 5u16)
                    }
                    _ => self,
                },
                PropName::Facing => match val {
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 9085u16) / 1u16 % 5u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::North => {
                        Self(self.0 - (self.0 - 9085u16) / 1u16 % 5u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 9085u16) / 1u16 % 5u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 9085u16) / 1u16 % 5u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 9085u16) / 1u16 % 5u16 * 1u16 + 4u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::QuartzPillar => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 9097u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 9097u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 9097u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::QuartzStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 9100u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 9100u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 9100u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 9100u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 9100u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 9100u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 9100u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 9100u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 9100u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 9100u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 9100u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9100u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9100u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::ActivatorRail => match name {
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9180u16) / 12u16 % 2u16 * 12u16 + 0u16 * 12u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9180u16) / 12u16 % 2u16 * 12u16 + 1u16 * 12u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::NorthSouth => {
                        Self(self.0 - (self.0 - 9180u16) / 2u16 % 6u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::EastWest => {
                        Self(self.0 - (self.0 - 9180u16) / 2u16 % 6u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::AscendingEast => {
                        Self(self.0 - (self.0 - 9180u16) / 2u16 % 6u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::AscendingWest => {
                        Self(self.0 - (self.0 - 9180u16) / 2u16 % 6u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::AscendingNorth => {
                        Self(self.0 - (self.0 - 9180u16) / 2u16 % 6u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::AscendingSouth => {
                        Self(self.0 - (self.0 - 9180u16) / 2u16 % 6u16 * 2u16 + 5u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9180u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9180u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Dropper => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 9204u16) / 2u16 % 6u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 9204u16) / 2u16 % 6u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 9204u16) / 2u16 % 6u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 9204u16) / 2u16 % 6u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 9204u16) / 2u16 % 6u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 9204u16) / 2u16 % 6u16 * 2u16 + 5u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Triggered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9204u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9204u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WhiteStainedGlassPane => match name {
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9232u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9232u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9232u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9232u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9232u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9232u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9232u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9232u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9232u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9232u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::OrangeStainedGlassPane => match name {
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9264u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9264u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9264u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9264u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9264u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9264u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9264u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9264u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9264u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9264u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MagentaStainedGlassPane => match name {
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9296u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9296u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9296u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9296u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9296u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9296u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9296u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9296u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9296u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9296u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::LightBlueStainedGlassPane => match name {
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9328u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9328u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9328u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9328u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9328u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9328u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9328u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9328u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9328u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9328u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::YellowStainedGlassPane => match name {
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9360u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9360u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9360u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9360u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9360u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9360u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9360u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9360u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9360u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9360u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::LimeStainedGlassPane => match name {
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9392u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9392u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9392u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9392u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9392u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9392u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9392u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9392u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9392u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9392u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PinkStainedGlassPane => match name {
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9424u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9424u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9424u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9424u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9424u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9424u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9424u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9424u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9424u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9424u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::GrayStainedGlassPane => match name {
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9456u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9456u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9456u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9456u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9456u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9456u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9456u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9456u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9456u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9456u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::LightGrayStainedGlassPane => match name {
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9488u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9488u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9488u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9488u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9488u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9488u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9488u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9488u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9488u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9488u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CyanStainedGlassPane => match name {
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9520u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9520u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9520u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9520u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9520u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9520u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9520u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9520u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9520u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9520u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PurpleStainedGlassPane => match name {
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9552u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9552u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9552u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9552u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9552u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9552u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9552u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9552u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9552u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9552u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BlueStainedGlassPane => match name {
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9584u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9584u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9584u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9584u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9584u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9584u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9584u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9584u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9584u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9584u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BrownStainedGlassPane => match name {
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9616u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9616u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9616u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9616u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9616u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9616u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9616u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9616u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9616u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9616u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::GreenStainedGlassPane => match name {
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9648u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9648u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9648u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9648u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9648u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9648u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9648u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9648u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9648u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9648u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::RedStainedGlassPane => match name {
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9680u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9680u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9680u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9680u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9680u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9680u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9680u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9680u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9680u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9680u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BlackStainedGlassPane => match name {
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9712u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9712u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9712u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9712u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9712u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9712u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9712u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9712u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9712u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9712u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::AcaciaStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 9744u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 9744u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 9744u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 9744u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 9744u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 9744u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 9744u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 9744u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 9744u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 9744u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 9744u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9744u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9744u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CherryStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 9824u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 9824u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 9824u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 9824u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 9824u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 9824u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 9824u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 9824u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 9824u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 9824u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 9824u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9824u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9824u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DarkOakStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 9904u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 9904u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 9904u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 9904u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 9904u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 9904u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 9904u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 9904u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 9904u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 9904u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 9904u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9904u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9904u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MangroveStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 9984u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 9984u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 9984u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 9984u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 9984u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 9984u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 9984u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 9984u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 9984u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 9984u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 9984u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 9984u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 9984u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BambooStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 10064u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 10064u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 10064u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 10064u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 10064u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 10064u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 10064u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 10064u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 10064u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 10064u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 10064u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 10064u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 10064u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BambooMosaicStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 10144u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 10144u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 10144u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 10144u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 10144u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 10144u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 10144u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 10144u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 10144u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 10144u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 10144u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 10144u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 10144u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Light => match name {
                PropName::Level => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 10226u16) / 2u16 % 16u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 10226u16) / 2u16 % 16u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 10226u16) / 2u16 % 16u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 10226u16) / 2u16 % 16u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 10226u16) / 2u16 % 16u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 10226u16) / 2u16 % 16u16 * 2u16 + 5u16 * 2u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 10226u16) / 2u16 % 16u16 * 2u16 + 6u16 * 2u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 10226u16) / 2u16 % 16u16 * 2u16 + 7u16 * 2u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 10226u16) / 2u16 % 16u16 * 2u16 + 8u16 * 2u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 10226u16) / 2u16 % 16u16 * 2u16 + 9u16 * 2u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 10226u16) / 2u16 % 16u16 * 2u16 + 10u16 * 2u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 10226u16) / 2u16 % 16u16 * 2u16 + 11u16 * 2u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 10226u16) / 2u16 % 16u16 * 2u16 + 12u16 * 2u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 10226u16) / 2u16 % 16u16 * 2u16 + 13u16 * 2u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 10226u16) / 2u16 % 16u16 * 2u16 + 14u16 * 2u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 10226u16) / 2u16 % 16u16 * 2u16 + 15u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 10226u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 10226u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::IronTrapdoor => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 10258u16) / 16u16 % 4u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 10258u16) / 16u16 % 4u16 * 16u16 + 1u16 * 16u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 10258u16) / 16u16 % 4u16 * 16u16 + 2u16 * 16u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 10258u16) / 16u16 % 4u16 * 16u16 + 3u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 10258u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 10258u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 10258u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 10258u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 10258u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 10258u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 10258u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 10258u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PrismarineStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 10325u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 10325u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 10325u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 10325u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 10325u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 10325u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 10325u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 10325u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 10325u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 10325u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 10325u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 10325u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 10325u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PrismarineBrickStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 10405u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 10405u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 10405u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 10405u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 10405u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 10405u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 10405u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 10405u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 10405u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 10405u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 10405u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 10405u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 10405u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DarkPrismarineStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 10485u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 10485u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 10485u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 10485u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 10485u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 10485u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 10485u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 10485u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 10485u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 10485u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 10485u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 10485u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 10485u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PrismarineSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 10565u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 10565u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 10565u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 10565u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 10565u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PrismarineBrickSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 10571u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 10571u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 10571u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 10571u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 10571u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DarkPrismarineSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 10577u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 10577u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 10577u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 10577u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 10577u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::HayBlock => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 10584u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 10584u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 10584u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Sunflower => match name {
                PropName::Half => match val {
                    PropValue::Upper => {
                        Self(self.0 - (self.0 - 10606u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Lower => {
                        Self(self.0 - (self.0 - 10606u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Lilac => match name {
                PropName::Half => match val {
                    PropValue::Upper => {
                        Self(self.0 - (self.0 - 10608u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Lower => {
                        Self(self.0 - (self.0 - 10608u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::RoseBush => match name {
                PropName::Half => match val {
                    PropValue::Upper => {
                        Self(self.0 - (self.0 - 10610u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Lower => {
                        Self(self.0 - (self.0 - 10610u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Peony => match name {
                PropName::Half => match val {
                    PropValue::Upper => {
                        Self(self.0 - (self.0 - 10612u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Lower => {
                        Self(self.0 - (self.0 - 10612u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::TallGrass => match name {
                PropName::Half => match val {
                    PropValue::Upper => {
                        Self(self.0 - (self.0 - 10614u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Lower => {
                        Self(self.0 - (self.0 - 10614u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::LargeFern => match name {
                PropName::Half => match val {
                    PropValue::Upper => {
                        Self(self.0 - (self.0 - 10616u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Lower => {
                        Self(self.0 - (self.0 - 10616u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WhiteBanner => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 10618u16) / 1u16 % 16u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 10618u16) / 1u16 % 16u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 10618u16) / 1u16 % 16u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 10618u16) / 1u16 % 16u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 10618u16) / 1u16 % 16u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 10618u16) / 1u16 % 16u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 10618u16) / 1u16 % 16u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 10618u16) / 1u16 % 16u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 10618u16) / 1u16 % 16u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 10618u16) / 1u16 % 16u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 10618u16) / 1u16 % 16u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 10618u16) / 1u16 % 16u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 10618u16) / 1u16 % 16u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 10618u16) / 1u16 % 16u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 10618u16) / 1u16 % 16u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 10618u16) / 1u16 % 16u16 * 1u16 + 15u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::OrangeBanner => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 10634u16) / 1u16 % 16u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 10634u16) / 1u16 % 16u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 10634u16) / 1u16 % 16u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 10634u16) / 1u16 % 16u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 10634u16) / 1u16 % 16u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 10634u16) / 1u16 % 16u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 10634u16) / 1u16 % 16u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 10634u16) / 1u16 % 16u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 10634u16) / 1u16 % 16u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 10634u16) / 1u16 % 16u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 10634u16) / 1u16 % 16u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 10634u16) / 1u16 % 16u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 10634u16) / 1u16 % 16u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 10634u16) / 1u16 % 16u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 10634u16) / 1u16 % 16u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 10634u16) / 1u16 % 16u16 * 1u16 + 15u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MagentaBanner => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 10650u16) / 1u16 % 16u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 10650u16) / 1u16 % 16u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 10650u16) / 1u16 % 16u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 10650u16) / 1u16 % 16u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 10650u16) / 1u16 % 16u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 10650u16) / 1u16 % 16u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 10650u16) / 1u16 % 16u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 10650u16) / 1u16 % 16u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 10650u16) / 1u16 % 16u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 10650u16) / 1u16 % 16u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 10650u16) / 1u16 % 16u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 10650u16) / 1u16 % 16u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 10650u16) / 1u16 % 16u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 10650u16) / 1u16 % 16u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 10650u16) / 1u16 % 16u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 10650u16) / 1u16 % 16u16 * 1u16 + 15u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::LightBlueBanner => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 10666u16) / 1u16 % 16u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 10666u16) / 1u16 % 16u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 10666u16) / 1u16 % 16u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 10666u16) / 1u16 % 16u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 10666u16) / 1u16 % 16u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 10666u16) / 1u16 % 16u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 10666u16) / 1u16 % 16u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 10666u16) / 1u16 % 16u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 10666u16) / 1u16 % 16u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 10666u16) / 1u16 % 16u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 10666u16) / 1u16 % 16u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 10666u16) / 1u16 % 16u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 10666u16) / 1u16 % 16u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 10666u16) / 1u16 % 16u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 10666u16) / 1u16 % 16u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 10666u16) / 1u16 % 16u16 * 1u16 + 15u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::YellowBanner => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 10682u16) / 1u16 % 16u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 10682u16) / 1u16 % 16u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 10682u16) / 1u16 % 16u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 10682u16) / 1u16 % 16u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 10682u16) / 1u16 % 16u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 10682u16) / 1u16 % 16u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 10682u16) / 1u16 % 16u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 10682u16) / 1u16 % 16u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 10682u16) / 1u16 % 16u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 10682u16) / 1u16 % 16u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 10682u16) / 1u16 % 16u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 10682u16) / 1u16 % 16u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 10682u16) / 1u16 % 16u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 10682u16) / 1u16 % 16u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 10682u16) / 1u16 % 16u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 10682u16) / 1u16 % 16u16 * 1u16 + 15u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::LimeBanner => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 10698u16) / 1u16 % 16u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 10698u16) / 1u16 % 16u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 10698u16) / 1u16 % 16u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 10698u16) / 1u16 % 16u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 10698u16) / 1u16 % 16u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 10698u16) / 1u16 % 16u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 10698u16) / 1u16 % 16u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 10698u16) / 1u16 % 16u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 10698u16) / 1u16 % 16u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 10698u16) / 1u16 % 16u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 10698u16) / 1u16 % 16u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 10698u16) / 1u16 % 16u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 10698u16) / 1u16 % 16u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 10698u16) / 1u16 % 16u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 10698u16) / 1u16 % 16u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 10698u16) / 1u16 % 16u16 * 1u16 + 15u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PinkBanner => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 10714u16) / 1u16 % 16u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 10714u16) / 1u16 % 16u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 10714u16) / 1u16 % 16u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 10714u16) / 1u16 % 16u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 10714u16) / 1u16 % 16u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 10714u16) / 1u16 % 16u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 10714u16) / 1u16 % 16u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 10714u16) / 1u16 % 16u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 10714u16) / 1u16 % 16u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 10714u16) / 1u16 % 16u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 10714u16) / 1u16 % 16u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 10714u16) / 1u16 % 16u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 10714u16) / 1u16 % 16u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 10714u16) / 1u16 % 16u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 10714u16) / 1u16 % 16u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 10714u16) / 1u16 % 16u16 * 1u16 + 15u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::GrayBanner => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 10730u16) / 1u16 % 16u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 10730u16) / 1u16 % 16u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 10730u16) / 1u16 % 16u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 10730u16) / 1u16 % 16u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 10730u16) / 1u16 % 16u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 10730u16) / 1u16 % 16u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 10730u16) / 1u16 % 16u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 10730u16) / 1u16 % 16u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 10730u16) / 1u16 % 16u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 10730u16) / 1u16 % 16u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 10730u16) / 1u16 % 16u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 10730u16) / 1u16 % 16u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 10730u16) / 1u16 % 16u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 10730u16) / 1u16 % 16u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 10730u16) / 1u16 % 16u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 10730u16) / 1u16 % 16u16 * 1u16 + 15u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::LightGrayBanner => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 10746u16) / 1u16 % 16u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 10746u16) / 1u16 % 16u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 10746u16) / 1u16 % 16u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 10746u16) / 1u16 % 16u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 10746u16) / 1u16 % 16u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 10746u16) / 1u16 % 16u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 10746u16) / 1u16 % 16u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 10746u16) / 1u16 % 16u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 10746u16) / 1u16 % 16u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 10746u16) / 1u16 % 16u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 10746u16) / 1u16 % 16u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 10746u16) / 1u16 % 16u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 10746u16) / 1u16 % 16u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 10746u16) / 1u16 % 16u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 10746u16) / 1u16 % 16u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 10746u16) / 1u16 % 16u16 * 1u16 + 15u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CyanBanner => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 10762u16) / 1u16 % 16u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 10762u16) / 1u16 % 16u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 10762u16) / 1u16 % 16u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 10762u16) / 1u16 % 16u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 10762u16) / 1u16 % 16u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 10762u16) / 1u16 % 16u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 10762u16) / 1u16 % 16u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 10762u16) / 1u16 % 16u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 10762u16) / 1u16 % 16u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 10762u16) / 1u16 % 16u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 10762u16) / 1u16 % 16u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 10762u16) / 1u16 % 16u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 10762u16) / 1u16 % 16u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 10762u16) / 1u16 % 16u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 10762u16) / 1u16 % 16u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 10762u16) / 1u16 % 16u16 * 1u16 + 15u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PurpleBanner => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 10778u16) / 1u16 % 16u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 10778u16) / 1u16 % 16u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 10778u16) / 1u16 % 16u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 10778u16) / 1u16 % 16u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 10778u16) / 1u16 % 16u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 10778u16) / 1u16 % 16u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 10778u16) / 1u16 % 16u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 10778u16) / 1u16 % 16u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 10778u16) / 1u16 % 16u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 10778u16) / 1u16 % 16u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 10778u16) / 1u16 % 16u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 10778u16) / 1u16 % 16u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 10778u16) / 1u16 % 16u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 10778u16) / 1u16 % 16u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 10778u16) / 1u16 % 16u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 10778u16) / 1u16 % 16u16 * 1u16 + 15u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BlueBanner => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 10794u16) / 1u16 % 16u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 10794u16) / 1u16 % 16u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 10794u16) / 1u16 % 16u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 10794u16) / 1u16 % 16u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 10794u16) / 1u16 % 16u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 10794u16) / 1u16 % 16u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 10794u16) / 1u16 % 16u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 10794u16) / 1u16 % 16u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 10794u16) / 1u16 % 16u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 10794u16) / 1u16 % 16u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 10794u16) / 1u16 % 16u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 10794u16) / 1u16 % 16u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 10794u16) / 1u16 % 16u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 10794u16) / 1u16 % 16u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 10794u16) / 1u16 % 16u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 10794u16) / 1u16 % 16u16 * 1u16 + 15u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BrownBanner => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 10810u16) / 1u16 % 16u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 10810u16) / 1u16 % 16u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 10810u16) / 1u16 % 16u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 10810u16) / 1u16 % 16u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 10810u16) / 1u16 % 16u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 10810u16) / 1u16 % 16u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 10810u16) / 1u16 % 16u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 10810u16) / 1u16 % 16u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 10810u16) / 1u16 % 16u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 10810u16) / 1u16 % 16u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 10810u16) / 1u16 % 16u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 10810u16) / 1u16 % 16u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 10810u16) / 1u16 % 16u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 10810u16) / 1u16 % 16u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 10810u16) / 1u16 % 16u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 10810u16) / 1u16 % 16u16 * 1u16 + 15u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::GreenBanner => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 10826u16) / 1u16 % 16u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 10826u16) / 1u16 % 16u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 10826u16) / 1u16 % 16u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 10826u16) / 1u16 % 16u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 10826u16) / 1u16 % 16u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 10826u16) / 1u16 % 16u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 10826u16) / 1u16 % 16u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 10826u16) / 1u16 % 16u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 10826u16) / 1u16 % 16u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 10826u16) / 1u16 % 16u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 10826u16) / 1u16 % 16u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 10826u16) / 1u16 % 16u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 10826u16) / 1u16 % 16u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 10826u16) / 1u16 % 16u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 10826u16) / 1u16 % 16u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 10826u16) / 1u16 % 16u16 * 1u16 + 15u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::RedBanner => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 10842u16) / 1u16 % 16u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 10842u16) / 1u16 % 16u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 10842u16) / 1u16 % 16u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 10842u16) / 1u16 % 16u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 10842u16) / 1u16 % 16u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 10842u16) / 1u16 % 16u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 10842u16) / 1u16 % 16u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 10842u16) / 1u16 % 16u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 10842u16) / 1u16 % 16u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 10842u16) / 1u16 % 16u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 10842u16) / 1u16 % 16u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 10842u16) / 1u16 % 16u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 10842u16) / 1u16 % 16u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 10842u16) / 1u16 % 16u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 10842u16) / 1u16 % 16u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 10842u16) / 1u16 % 16u16 * 1u16 + 15u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BlackBanner => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 10858u16) / 1u16 % 16u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 10858u16) / 1u16 % 16u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 10858u16) / 1u16 % 16u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 10858u16) / 1u16 % 16u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 10858u16) / 1u16 % 16u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 10858u16) / 1u16 % 16u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 10858u16) / 1u16 % 16u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 10858u16) / 1u16 % 16u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 10858u16) / 1u16 % 16u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 10858u16) / 1u16 % 16u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 10858u16) / 1u16 % 16u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 10858u16) / 1u16 % 16u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 10858u16) / 1u16 % 16u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 10858u16) / 1u16 % 16u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 10858u16) / 1u16 % 16u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 10858u16) / 1u16 % 16u16 * 1u16 + 15u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WhiteWallBanner => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 10874u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 10874u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 10874u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 10874u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::OrangeWallBanner => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 10878u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 10878u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 10878u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 10878u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MagentaWallBanner => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 10882u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 10882u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 10882u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 10882u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::LightBlueWallBanner => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 10886u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 10886u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 10886u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 10886u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::YellowWallBanner => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 10890u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 10890u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 10890u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 10890u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::LimeWallBanner => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 10894u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 10894u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 10894u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 10894u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PinkWallBanner => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 10898u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 10898u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 10898u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 10898u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::GrayWallBanner => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 10902u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 10902u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 10902u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 10902u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::LightGrayWallBanner => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 10906u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 10906u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 10906u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 10906u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CyanWallBanner => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 10910u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 10910u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 10910u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 10910u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PurpleWallBanner => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 10914u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 10914u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 10914u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 10914u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BlueWallBanner => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 10918u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 10918u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 10918u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 10918u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BrownWallBanner => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 10922u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 10922u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 10922u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 10922u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::GreenWallBanner => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 10926u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 10926u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 10926u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 10926u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::RedWallBanner => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 10930u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 10930u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 10930u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 10930u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BlackWallBanner => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 10934u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 10934u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 10934u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 10934u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::RedSandstoneStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 10941u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 10941u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 10941u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 10941u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 10941u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 10941u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 10941u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 10941u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 10941u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 10941u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 10941u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 10941u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 10941u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::OakSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 11021u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 11021u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 11021u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11021u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11021u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SpruceSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 11027u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 11027u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 11027u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11027u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11027u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BirchSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 11033u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 11033u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 11033u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11033u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11033u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::JungleSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 11039u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 11039u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 11039u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11039u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11039u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::AcaciaSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 11045u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 11045u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 11045u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11045u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11045u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CherrySlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 11051u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 11051u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 11051u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11051u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11051u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DarkOakSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 11057u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 11057u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 11057u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11057u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11057u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MangroveSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 11063u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 11063u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 11063u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11063u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11063u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BambooSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 11069u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 11069u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 11069u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11069u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11069u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BambooMosaicSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 11075u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 11075u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 11075u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11075u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11075u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::StoneSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 11081u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 11081u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 11081u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11081u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11081u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SmoothStoneSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 11087u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 11087u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 11087u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11087u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11087u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SandstoneSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 11093u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 11093u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 11093u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11093u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11093u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CutSandstoneSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 11099u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 11099u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 11099u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11099u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11099u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PetrifiedOakSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 11105u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 11105u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 11105u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11105u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11105u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CobblestoneSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 11111u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 11111u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 11111u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11111u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11111u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BrickSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 11117u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 11117u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 11117u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11117u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11117u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::StoneBrickSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 11123u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 11123u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 11123u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11123u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11123u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MudBrickSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 11129u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 11129u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 11129u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11129u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11129u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::NetherBrickSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 11135u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 11135u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 11135u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11135u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11135u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::QuartzSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 11141u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 11141u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 11141u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11141u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11141u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::RedSandstoneSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 11147u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 11147u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 11147u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11147u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11147u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CutRedSandstoneSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 11153u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 11153u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 11153u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11153u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11153u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PurpurSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 11159u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 11159u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 11159u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11159u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11159u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SpruceFenceGate => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 11169u16) / 8u16 % 4u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 11169u16) / 8u16 % 4u16 * 8u16 + 1u16 * 8u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 11169u16) / 8u16 % 4u16 * 8u16 + 2u16 * 8u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 11169u16) / 8u16 % 4u16 * 8u16 + 3u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::InWall => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11169u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11169u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11169u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11169u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11169u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11169u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BirchFenceGate => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 11201u16) / 8u16 % 4u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 11201u16) / 8u16 % 4u16 * 8u16 + 1u16 * 8u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 11201u16) / 8u16 % 4u16 * 8u16 + 2u16 * 8u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 11201u16) / 8u16 % 4u16 * 8u16 + 3u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::InWall => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11201u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11201u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11201u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11201u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11201u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11201u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::JungleFenceGate => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 11233u16) / 8u16 % 4u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 11233u16) / 8u16 % 4u16 * 8u16 + 1u16 * 8u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 11233u16) / 8u16 % 4u16 * 8u16 + 2u16 * 8u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 11233u16) / 8u16 % 4u16 * 8u16 + 3u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::InWall => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11233u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11233u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11233u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11233u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11233u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11233u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::AcaciaFenceGate => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 11265u16) / 8u16 % 4u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 11265u16) / 8u16 % 4u16 * 8u16 + 1u16 * 8u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 11265u16) / 8u16 % 4u16 * 8u16 + 2u16 * 8u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 11265u16) / 8u16 % 4u16 * 8u16 + 3u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::InWall => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11265u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11265u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11265u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11265u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11265u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11265u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CherryFenceGate => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 11297u16) / 8u16 % 4u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 11297u16) / 8u16 % 4u16 * 8u16 + 1u16 * 8u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 11297u16) / 8u16 % 4u16 * 8u16 + 2u16 * 8u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 11297u16) / 8u16 % 4u16 * 8u16 + 3u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::InWall => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11297u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11297u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11297u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11297u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11297u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11297u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DarkOakFenceGate => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 11329u16) / 8u16 % 4u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 11329u16) / 8u16 % 4u16 * 8u16 + 1u16 * 8u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 11329u16) / 8u16 % 4u16 * 8u16 + 2u16 * 8u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 11329u16) / 8u16 % 4u16 * 8u16 + 3u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::InWall => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11329u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11329u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11329u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11329u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11329u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11329u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MangroveFenceGate => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 11361u16) / 8u16 % 4u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 11361u16) / 8u16 % 4u16 * 8u16 + 1u16 * 8u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 11361u16) / 8u16 % 4u16 * 8u16 + 2u16 * 8u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 11361u16) / 8u16 % 4u16 * 8u16 + 3u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::InWall => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11361u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11361u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11361u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11361u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11361u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11361u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BambooFenceGate => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 11393u16) / 8u16 % 4u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 11393u16) / 8u16 % 4u16 * 8u16 + 1u16 * 8u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 11393u16) / 8u16 % 4u16 * 8u16 + 2u16 * 8u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 11393u16) / 8u16 % 4u16 * 8u16 + 3u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::InWall => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11393u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11393u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11393u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11393u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11393u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11393u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SpruceFence => match name {
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11425u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11425u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11425u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11425u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11425u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11425u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11425u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11425u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11425u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11425u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BirchFence => match name {
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11457u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11457u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11457u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11457u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11457u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11457u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11457u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11457u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11457u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11457u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::JungleFence => match name {
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11489u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11489u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11489u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11489u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11489u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11489u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11489u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11489u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11489u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11489u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::AcaciaFence => match name {
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11521u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11521u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11521u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11521u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11521u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11521u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11521u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11521u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11521u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11521u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CherryFence => match name {
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11553u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11553u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11553u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11553u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11553u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11553u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11553u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11553u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11553u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11553u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DarkOakFence => match name {
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11585u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11585u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11585u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11585u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11585u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11585u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11585u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11585u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11585u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11585u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MangroveFence => match name {
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11617u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11617u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11617u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11617u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11617u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11617u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11617u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11617u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11617u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11617u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BambooFence => match name {
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11649u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11649u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11649u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11649u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11649u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11649u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11649u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11649u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11649u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11649u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SpruceDoor => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 11681u16) / 16u16 % 4u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 11681u16) / 16u16 % 4u16 * 16u16 + 1u16 * 16u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 11681u16) / 16u16 % 4u16 * 16u16 + 2u16 * 16u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 11681u16) / 16u16 % 4u16 * 16u16 + 3u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Upper => {
                        Self(self.0 - (self.0 - 11681u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Lower => {
                        Self(self.0 - (self.0 - 11681u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Hinge => match val {
                    PropValue::Left => {
                        Self(self.0 - (self.0 - 11681u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::Right => {
                        Self(self.0 - (self.0 - 11681u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11681u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11681u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11681u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11681u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BirchDoor => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 11745u16) / 16u16 % 4u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 11745u16) / 16u16 % 4u16 * 16u16 + 1u16 * 16u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 11745u16) / 16u16 % 4u16 * 16u16 + 2u16 * 16u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 11745u16) / 16u16 % 4u16 * 16u16 + 3u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Upper => {
                        Self(self.0 - (self.0 - 11745u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Lower => {
                        Self(self.0 - (self.0 - 11745u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Hinge => match val {
                    PropValue::Left => {
                        Self(self.0 - (self.0 - 11745u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::Right => {
                        Self(self.0 - (self.0 - 11745u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11745u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11745u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11745u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11745u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::JungleDoor => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 11809u16) / 16u16 % 4u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 11809u16) / 16u16 % 4u16 * 16u16 + 1u16 * 16u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 11809u16) / 16u16 % 4u16 * 16u16 + 2u16 * 16u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 11809u16) / 16u16 % 4u16 * 16u16 + 3u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Upper => {
                        Self(self.0 - (self.0 - 11809u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Lower => {
                        Self(self.0 - (self.0 - 11809u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Hinge => match val {
                    PropValue::Left => {
                        Self(self.0 - (self.0 - 11809u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::Right => {
                        Self(self.0 - (self.0 - 11809u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11809u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11809u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11809u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11809u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::AcaciaDoor => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 11873u16) / 16u16 % 4u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 11873u16) / 16u16 % 4u16 * 16u16 + 1u16 * 16u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 11873u16) / 16u16 % 4u16 * 16u16 + 2u16 * 16u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 11873u16) / 16u16 % 4u16 * 16u16 + 3u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Upper => {
                        Self(self.0 - (self.0 - 11873u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Lower => {
                        Self(self.0 - (self.0 - 11873u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Hinge => match val {
                    PropValue::Left => {
                        Self(self.0 - (self.0 - 11873u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::Right => {
                        Self(self.0 - (self.0 - 11873u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11873u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11873u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11873u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11873u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CherryDoor => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 11937u16) / 16u16 % 4u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 11937u16) / 16u16 % 4u16 * 16u16 + 1u16 * 16u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 11937u16) / 16u16 % 4u16 * 16u16 + 2u16 * 16u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 11937u16) / 16u16 % 4u16 * 16u16 + 3u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Upper => {
                        Self(self.0 - (self.0 - 11937u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Lower => {
                        Self(self.0 - (self.0 - 11937u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Hinge => match val {
                    PropValue::Left => {
                        Self(self.0 - (self.0 - 11937u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::Right => {
                        Self(self.0 - (self.0 - 11937u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11937u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11937u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 11937u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 11937u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DarkOakDoor => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12001u16) / 16u16 % 4u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12001u16) / 16u16 % 4u16 * 16u16 + 1u16 * 16u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12001u16) / 16u16 % 4u16 * 16u16 + 2u16 * 16u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12001u16) / 16u16 % 4u16 * 16u16 + 3u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Upper => {
                        Self(self.0 - (self.0 - 12001u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Lower => {
                        Self(self.0 - (self.0 - 12001u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Hinge => match val {
                    PropValue::Left => {
                        Self(self.0 - (self.0 - 12001u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::Right => {
                        Self(self.0 - (self.0 - 12001u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12001u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12001u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12001u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12001u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MangroveDoor => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12065u16) / 16u16 % 4u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12065u16) / 16u16 % 4u16 * 16u16 + 1u16 * 16u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12065u16) / 16u16 % 4u16 * 16u16 + 2u16 * 16u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12065u16) / 16u16 % 4u16 * 16u16 + 3u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Upper => {
                        Self(self.0 - (self.0 - 12065u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Lower => {
                        Self(self.0 - (self.0 - 12065u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Hinge => match val {
                    PropValue::Left => {
                        Self(self.0 - (self.0 - 12065u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::Right => {
                        Self(self.0 - (self.0 - 12065u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12065u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12065u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12065u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12065u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BambooDoor => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12129u16) / 16u16 % 4u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12129u16) / 16u16 % 4u16 * 16u16 + 1u16 * 16u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12129u16) / 16u16 % 4u16 * 16u16 + 2u16 * 16u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12129u16) / 16u16 % 4u16 * 16u16 + 3u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Upper => {
                        Self(self.0 - (self.0 - 12129u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Lower => {
                        Self(self.0 - (self.0 - 12129u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Hinge => match val {
                    PropValue::Left => {
                        Self(self.0 - (self.0 - 12129u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::Right => {
                        Self(self.0 - (self.0 - 12129u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12129u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12129u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12129u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12129u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::EndRod => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12193u16) / 1u16 % 6u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12193u16) / 1u16 % 6u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12193u16) / 1u16 % 6u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12193u16) / 1u16 % 6u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 12193u16) / 1u16 % 6u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 12193u16) / 1u16 % 6u16 * 1u16 + 5u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::ChorusPlant => match name {
                PropName::Down => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12199u16) / 32u16 % 2u16 * 32u16 + 0u16 * 32u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12199u16) / 32u16 % 2u16 * 32u16 + 1u16 * 32u16)
                    }
                    _ => self,
                },
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12199u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12199u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12199u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12199u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12199u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12199u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Up => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12199u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12199u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12199u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12199u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::ChorusFlower => match name {
                PropName::Age => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 12263u16) / 1u16 % 6u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 12263u16) / 1u16 % 6u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 12263u16) / 1u16 % 6u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 12263u16) / 1u16 % 6u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 12263u16) / 1u16 % 6u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 12263u16) / 1u16 % 6u16 * 1u16 + 5u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PurpurPillar => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 12270u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 12270u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 12270u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PurpurStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12273u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12273u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12273u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12273u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 12273u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 12273u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 12273u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 12273u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 12273u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 12273u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 12273u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12273u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12273u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::TorchflowerCrop => match name {
                PropName::Age => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 12354u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 12354u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PitcherCrop => match name {
                PropName::Age => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 12356u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 12356u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 12356u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 12356u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 12356u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Upper => {
                        Self(self.0 - (self.0 - 12356u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Lower => {
                        Self(self.0 - (self.0 - 12356u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PitcherPlant => match name {
                PropName::Half => match val {
                    PropValue::Upper => {
                        Self(self.0 - (self.0 - 12366u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Lower => {
                        Self(self.0 - (self.0 - 12366u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Beetroots => match name {
                PropName::Age => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 12368u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 12368u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 12368u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 12368u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::RepeatingCommandBlock => match name {
                PropName::Conditional => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12374u16) / 6u16 % 2u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12374u16) / 6u16 % 2u16 * 6u16 + 1u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12374u16) / 1u16 % 6u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12374u16) / 1u16 % 6u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12374u16) / 1u16 % 6u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12374u16) / 1u16 % 6u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 12374u16) / 1u16 % 6u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 12374u16) / 1u16 % 6u16 * 1u16 + 5u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::ChainCommandBlock => match name {
                PropName::Conditional => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12386u16) / 6u16 % 2u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12386u16) / 6u16 % 2u16 * 6u16 + 1u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12386u16) / 1u16 % 6u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12386u16) / 1u16 % 6u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12386u16) / 1u16 % 6u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12386u16) / 1u16 % 6u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 12386u16) / 1u16 % 6u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 12386u16) / 1u16 % 6u16 * 1u16 + 5u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::FrostedIce => match name {
                PropName::Age => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 12398u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 12398u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 12398u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 12398u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BoneBlock => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 12405u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 12405u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 12405u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Observer => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12409u16) / 2u16 % 6u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12409u16) / 2u16 % 6u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12409u16) / 2u16 % 6u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12409u16) / 2u16 % 6u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 12409u16) / 2u16 % 6u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 12409u16) / 2u16 % 6u16 * 2u16 + 5u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12409u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12409u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::ShulkerBox => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12421u16) / 1u16 % 6u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12421u16) / 1u16 % 6u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12421u16) / 1u16 % 6u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12421u16) / 1u16 % 6u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 12421u16) / 1u16 % 6u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 12421u16) / 1u16 % 6u16 * 1u16 + 5u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WhiteShulkerBox => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12427u16) / 1u16 % 6u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12427u16) / 1u16 % 6u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12427u16) / 1u16 % 6u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12427u16) / 1u16 % 6u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 12427u16) / 1u16 % 6u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 12427u16) / 1u16 % 6u16 * 1u16 + 5u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::OrangeShulkerBox => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12433u16) / 1u16 % 6u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12433u16) / 1u16 % 6u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12433u16) / 1u16 % 6u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12433u16) / 1u16 % 6u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 12433u16) / 1u16 % 6u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 12433u16) / 1u16 % 6u16 * 1u16 + 5u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MagentaShulkerBox => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12439u16) / 1u16 % 6u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12439u16) / 1u16 % 6u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12439u16) / 1u16 % 6u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12439u16) / 1u16 % 6u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 12439u16) / 1u16 % 6u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 12439u16) / 1u16 % 6u16 * 1u16 + 5u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::LightBlueShulkerBox => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12445u16) / 1u16 % 6u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12445u16) / 1u16 % 6u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12445u16) / 1u16 % 6u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12445u16) / 1u16 % 6u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 12445u16) / 1u16 % 6u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 12445u16) / 1u16 % 6u16 * 1u16 + 5u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::YellowShulkerBox => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12451u16) / 1u16 % 6u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12451u16) / 1u16 % 6u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12451u16) / 1u16 % 6u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12451u16) / 1u16 % 6u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 12451u16) / 1u16 % 6u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 12451u16) / 1u16 % 6u16 * 1u16 + 5u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::LimeShulkerBox => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12457u16) / 1u16 % 6u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12457u16) / 1u16 % 6u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12457u16) / 1u16 % 6u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12457u16) / 1u16 % 6u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 12457u16) / 1u16 % 6u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 12457u16) / 1u16 % 6u16 * 1u16 + 5u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PinkShulkerBox => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12463u16) / 1u16 % 6u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12463u16) / 1u16 % 6u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12463u16) / 1u16 % 6u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12463u16) / 1u16 % 6u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 12463u16) / 1u16 % 6u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 12463u16) / 1u16 % 6u16 * 1u16 + 5u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::GrayShulkerBox => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12469u16) / 1u16 % 6u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12469u16) / 1u16 % 6u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12469u16) / 1u16 % 6u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12469u16) / 1u16 % 6u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 12469u16) / 1u16 % 6u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 12469u16) / 1u16 % 6u16 * 1u16 + 5u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::LightGrayShulkerBox => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12475u16) / 1u16 % 6u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12475u16) / 1u16 % 6u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12475u16) / 1u16 % 6u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12475u16) / 1u16 % 6u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 12475u16) / 1u16 % 6u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 12475u16) / 1u16 % 6u16 * 1u16 + 5u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CyanShulkerBox => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12481u16) / 1u16 % 6u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12481u16) / 1u16 % 6u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12481u16) / 1u16 % 6u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12481u16) / 1u16 % 6u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 12481u16) / 1u16 % 6u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 12481u16) / 1u16 % 6u16 * 1u16 + 5u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PurpleShulkerBox => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12487u16) / 1u16 % 6u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12487u16) / 1u16 % 6u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12487u16) / 1u16 % 6u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12487u16) / 1u16 % 6u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 12487u16) / 1u16 % 6u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 12487u16) / 1u16 % 6u16 * 1u16 + 5u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BlueShulkerBox => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12493u16) / 1u16 % 6u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12493u16) / 1u16 % 6u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12493u16) / 1u16 % 6u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12493u16) / 1u16 % 6u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 12493u16) / 1u16 % 6u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 12493u16) / 1u16 % 6u16 * 1u16 + 5u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BrownShulkerBox => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12499u16) / 1u16 % 6u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12499u16) / 1u16 % 6u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12499u16) / 1u16 % 6u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12499u16) / 1u16 % 6u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 12499u16) / 1u16 % 6u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 12499u16) / 1u16 % 6u16 * 1u16 + 5u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::GreenShulkerBox => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12505u16) / 1u16 % 6u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12505u16) / 1u16 % 6u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12505u16) / 1u16 % 6u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12505u16) / 1u16 % 6u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 12505u16) / 1u16 % 6u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 12505u16) / 1u16 % 6u16 * 1u16 + 5u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::RedShulkerBox => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12511u16) / 1u16 % 6u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12511u16) / 1u16 % 6u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12511u16) / 1u16 % 6u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12511u16) / 1u16 % 6u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 12511u16) / 1u16 % 6u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 12511u16) / 1u16 % 6u16 * 1u16 + 5u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BlackShulkerBox => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12517u16) / 1u16 % 6u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12517u16) / 1u16 % 6u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12517u16) / 1u16 % 6u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12517u16) / 1u16 % 6u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 12517u16) / 1u16 % 6u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 12517u16) / 1u16 % 6u16 * 1u16 + 5u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WhiteGlazedTerracotta => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12523u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12523u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12523u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12523u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::OrangeGlazedTerracotta => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12527u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12527u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12527u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12527u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MagentaGlazedTerracotta => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12531u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12531u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12531u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12531u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::LightBlueGlazedTerracotta => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12535u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12535u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12535u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12535u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::YellowGlazedTerracotta => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12539u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12539u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12539u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12539u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::LimeGlazedTerracotta => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12543u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12543u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12543u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12543u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PinkGlazedTerracotta => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12547u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12547u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12547u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12547u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::GrayGlazedTerracotta => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12551u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12551u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12551u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12551u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::LightGrayGlazedTerracotta => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12555u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12555u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12555u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12555u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CyanGlazedTerracotta => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12559u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12559u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12559u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12559u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PurpleGlazedTerracotta => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12563u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12563u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12563u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12563u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BlueGlazedTerracotta => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12567u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12567u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12567u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12567u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BrownGlazedTerracotta => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12571u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12571u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12571u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12571u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::GreenGlazedTerracotta => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12575u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12575u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12575u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12575u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::RedGlazedTerracotta => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12579u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12579u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12579u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12579u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BlackGlazedTerracotta => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12583u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12583u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12583u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12583u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Kelp => match name {
                PropName::Age => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 12619u16) / 1u16 % 26u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 12619u16) / 1u16 % 26u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 12619u16) / 1u16 % 26u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 12619u16) / 1u16 % 26u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 12619u16) / 1u16 % 26u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 12619u16) / 1u16 % 26u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 12619u16) / 1u16 % 26u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 12619u16) / 1u16 % 26u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 12619u16) / 1u16 % 26u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 12619u16) / 1u16 % 26u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 12619u16) / 1u16 % 26u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 12619u16) / 1u16 % 26u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 12619u16) / 1u16 % 26u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 12619u16) / 1u16 % 26u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 12619u16) / 1u16 % 26u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 12619u16) / 1u16 % 26u16 * 1u16 + 15u16 * 1u16)
                    }
                    PropValue::_16 => {
                        Self(self.0 - (self.0 - 12619u16) / 1u16 % 26u16 * 1u16 + 16u16 * 1u16)
                    }
                    PropValue::_17 => {
                        Self(self.0 - (self.0 - 12619u16) / 1u16 % 26u16 * 1u16 + 17u16 * 1u16)
                    }
                    PropValue::_18 => {
                        Self(self.0 - (self.0 - 12619u16) / 1u16 % 26u16 * 1u16 + 18u16 * 1u16)
                    }
                    PropValue::_19 => {
                        Self(self.0 - (self.0 - 12619u16) / 1u16 % 26u16 * 1u16 + 19u16 * 1u16)
                    }
                    PropValue::_20 => {
                        Self(self.0 - (self.0 - 12619u16) / 1u16 % 26u16 * 1u16 + 20u16 * 1u16)
                    }
                    PropValue::_21 => {
                        Self(self.0 - (self.0 - 12619u16) / 1u16 % 26u16 * 1u16 + 21u16 * 1u16)
                    }
                    PropValue::_22 => {
                        Self(self.0 - (self.0 - 12619u16) / 1u16 % 26u16 * 1u16 + 22u16 * 1u16)
                    }
                    PropValue::_23 => {
                        Self(self.0 - (self.0 - 12619u16) / 1u16 % 26u16 * 1u16 + 23u16 * 1u16)
                    }
                    PropValue::_24 => {
                        Self(self.0 - (self.0 - 12619u16) / 1u16 % 26u16 * 1u16 + 24u16 * 1u16)
                    }
                    PropValue::_25 => {
                        Self(self.0 - (self.0 - 12619u16) / 1u16 % 26u16 * 1u16 + 25u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::TurtleEgg => match name {
                PropName::Eggs => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 12647u16) / 3u16 % 4u16 * 3u16 + 0u16 * 3u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 12647u16) / 3u16 % 4u16 * 3u16 + 1u16 * 3u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 12647u16) / 3u16 % 4u16 * 3u16 + 2u16 * 3u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 12647u16) / 3u16 % 4u16 * 3u16 + 3u16 * 3u16)
                    }
                    _ => self,
                },
                PropName::Hatch => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 12647u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 12647u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 12647u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SnifferEgg => match name {
                PropName::Hatch => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 12659u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 12659u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 12659u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DeadTubeCoral => match name {
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12672u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12672u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DeadBrainCoral => match name {
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12674u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12674u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DeadBubbleCoral => match name {
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12676u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12676u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DeadFireCoral => match name {
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12678u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12678u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DeadHornCoral => match name {
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12680u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12680u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::TubeCoral => match name {
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12682u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12682u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BrainCoral => match name {
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12684u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12684u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BubbleCoral => match name {
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12686u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12686u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::FireCoral => match name {
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12688u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12688u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::HornCoral => match name {
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12690u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12690u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DeadTubeCoralFan => match name {
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12692u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12692u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DeadBrainCoralFan => match name {
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12694u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12694u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DeadBubbleCoralFan => match name {
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12696u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12696u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DeadFireCoralFan => match name {
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12698u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12698u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DeadHornCoralFan => match name {
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12700u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12700u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::TubeCoralFan => match name {
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12702u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12702u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BrainCoralFan => match name {
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12704u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12704u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BubbleCoralFan => match name {
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12706u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12706u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::FireCoralFan => match name {
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12708u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12708u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::HornCoralFan => match name {
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12710u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12710u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DeadTubeCoralWallFan => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12712u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12712u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12712u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12712u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12712u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12712u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DeadBrainCoralWallFan => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12720u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12720u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12720u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12720u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12720u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12720u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DeadBubbleCoralWallFan => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12728u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12728u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12728u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12728u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12728u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12728u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DeadFireCoralWallFan => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12736u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12736u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12736u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12736u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12736u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12736u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DeadHornCoralWallFan => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12744u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12744u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12744u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12744u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12744u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12744u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::TubeCoralWallFan => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12752u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12752u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12752u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12752u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12752u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12752u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BrainCoralWallFan => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12760u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12760u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12760u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12760u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12760u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12760u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BubbleCoralWallFan => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12768u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12768u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12768u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12768u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12768u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12768u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::FireCoralWallFan => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12776u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12776u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12776u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12776u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12776u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12776u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::HornCoralWallFan => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12784u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12784u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12784u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12784u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12784u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12784u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SeaPickle => match name {
                PropName::Pickles => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 12792u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 12792u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 12792u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 12792u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12792u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12792u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Conduit => match name {
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12801u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12801u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Bamboo => match name {
                PropName::Age => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 12804u16) / 6u16 % 2u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 12804u16) / 6u16 % 2u16 * 6u16 + 1u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::Leaves => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 12804u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Small => {
                        Self(self.0 - (self.0 - 12804u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Large => {
                        Self(self.0 - (self.0 - 12804u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Stage => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 12804u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 12804u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BubbleColumn => match name {
                PropName::Drag => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12819u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12819u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PolishedGraniteStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12821u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12821u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12821u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12821u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 12821u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 12821u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 12821u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 12821u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 12821u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 12821u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 12821u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12821u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12821u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SmoothRedSandstoneStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12901u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12901u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12901u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12901u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 12901u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 12901u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 12901u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 12901u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 12901u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 12901u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 12901u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12901u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12901u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MossyStoneBrickStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 12981u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 12981u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 12981u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 12981u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 12981u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 12981u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 12981u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 12981u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 12981u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 12981u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 12981u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 12981u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 12981u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PolishedDioriteStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 13061u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 13061u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 13061u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 13061u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 13061u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 13061u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 13061u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 13061u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 13061u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 13061u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 13061u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 13061u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 13061u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MossyCobblestoneStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 13141u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 13141u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 13141u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 13141u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 13141u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 13141u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 13141u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 13141u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 13141u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 13141u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 13141u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 13141u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 13141u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::EndStoneBrickStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 13221u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 13221u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 13221u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 13221u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 13221u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 13221u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 13221u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 13221u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 13221u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 13221u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 13221u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 13221u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 13221u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::StoneStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 13301u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 13301u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 13301u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 13301u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 13301u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 13301u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 13301u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 13301u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 13301u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 13301u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 13301u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 13301u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 13301u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SmoothSandstoneStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 13381u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 13381u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 13381u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 13381u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 13381u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 13381u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 13381u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 13381u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 13381u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 13381u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 13381u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 13381u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 13381u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SmoothQuartzStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 13461u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 13461u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 13461u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 13461u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 13461u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 13461u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 13461u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 13461u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 13461u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 13461u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 13461u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 13461u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 13461u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::GraniteStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 13541u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 13541u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 13541u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 13541u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 13541u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 13541u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 13541u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 13541u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 13541u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 13541u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 13541u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 13541u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 13541u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::AndesiteStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 13621u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 13621u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 13621u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 13621u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 13621u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 13621u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 13621u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 13621u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 13621u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 13621u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 13621u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 13621u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 13621u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::RedNetherBrickStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 13701u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 13701u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 13701u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 13701u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 13701u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 13701u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 13701u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 13701u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 13701u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 13701u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 13701u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 13701u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 13701u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PolishedAndesiteStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 13781u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 13781u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 13781u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 13781u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 13781u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 13781u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 13781u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 13781u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 13781u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 13781u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 13781u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 13781u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 13781u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DioriteStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 13861u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 13861u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 13861u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 13861u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 13861u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 13861u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 13861u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 13861u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 13861u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 13861u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 13861u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 13861u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 13861u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PolishedGraniteSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 13941u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 13941u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 13941u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 13941u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 13941u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SmoothRedSandstoneSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 13947u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 13947u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 13947u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 13947u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 13947u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MossyStoneBrickSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 13953u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 13953u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 13953u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 13953u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 13953u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PolishedDioriteSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 13959u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 13959u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 13959u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 13959u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 13959u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MossyCobblestoneSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 13965u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 13965u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 13965u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 13965u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 13965u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::EndStoneBrickSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 13971u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 13971u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 13971u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 13971u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 13971u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SmoothSandstoneSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 13977u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 13977u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 13977u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 13977u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 13977u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SmoothQuartzSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 13983u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 13983u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 13983u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 13983u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 13983u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::GraniteSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 13989u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 13989u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 13989u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 13989u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 13989u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::AndesiteSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 13995u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 13995u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 13995u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 13995u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 13995u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::RedNetherBrickSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 14001u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 14001u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 14001u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 14001u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 14001u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PolishedAndesiteSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 14007u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 14007u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 14007u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 14007u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 14007u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DioriteSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 14013u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 14013u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 14013u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 14013u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 14013u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BrickWall => match name {
                PropName::East => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 14019u16) / 108u16 % 3u16 * 108u16 + 0u16 * 108u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 14019u16) / 108u16 % 3u16 * 108u16 + 1u16 * 108u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 14019u16) / 108u16 % 3u16 * 108u16 + 2u16 * 108u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 14019u16) / 36u16 % 3u16 * 36u16 + 0u16 * 36u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 14019u16) / 36u16 % 3u16 * 36u16 + 1u16 * 36u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 14019u16) / 36u16 % 3u16 * 36u16 + 2u16 * 36u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 14019u16) / 12u16 % 3u16 * 12u16 + 0u16 * 12u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 14019u16) / 12u16 % 3u16 * 12u16 + 1u16 * 12u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 14019u16) / 12u16 % 3u16 * 12u16 + 2u16 * 12u16)
                    }
                    _ => self,
                },
                PropName::Up => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 14019u16) / 6u16 % 2u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 14019u16) / 6u16 % 2u16 * 6u16 + 1u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 14019u16) / 3u16 % 2u16 * 3u16 + 0u16 * 3u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 14019u16) / 3u16 % 2u16 * 3u16 + 1u16 * 3u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 14019u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 14019u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 14019u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PrismarineWall => match name {
                PropName::East => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 14343u16) / 108u16 % 3u16 * 108u16 + 0u16 * 108u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 14343u16) / 108u16 % 3u16 * 108u16 + 1u16 * 108u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 14343u16) / 108u16 % 3u16 * 108u16 + 2u16 * 108u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 14343u16) / 36u16 % 3u16 * 36u16 + 0u16 * 36u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 14343u16) / 36u16 % 3u16 * 36u16 + 1u16 * 36u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 14343u16) / 36u16 % 3u16 * 36u16 + 2u16 * 36u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 14343u16) / 12u16 % 3u16 * 12u16 + 0u16 * 12u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 14343u16) / 12u16 % 3u16 * 12u16 + 1u16 * 12u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 14343u16) / 12u16 % 3u16 * 12u16 + 2u16 * 12u16)
                    }
                    _ => self,
                },
                PropName::Up => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 14343u16) / 6u16 % 2u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 14343u16) / 6u16 % 2u16 * 6u16 + 1u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 14343u16) / 3u16 % 2u16 * 3u16 + 0u16 * 3u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 14343u16) / 3u16 % 2u16 * 3u16 + 1u16 * 3u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 14343u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 14343u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 14343u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::RedSandstoneWall => match name {
                PropName::East => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 14667u16) / 108u16 % 3u16 * 108u16 + 0u16 * 108u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 14667u16) / 108u16 % 3u16 * 108u16 + 1u16 * 108u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 14667u16) / 108u16 % 3u16 * 108u16 + 2u16 * 108u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 14667u16) / 36u16 % 3u16 * 36u16 + 0u16 * 36u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 14667u16) / 36u16 % 3u16 * 36u16 + 1u16 * 36u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 14667u16) / 36u16 % 3u16 * 36u16 + 2u16 * 36u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 14667u16) / 12u16 % 3u16 * 12u16 + 0u16 * 12u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 14667u16) / 12u16 % 3u16 * 12u16 + 1u16 * 12u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 14667u16) / 12u16 % 3u16 * 12u16 + 2u16 * 12u16)
                    }
                    _ => self,
                },
                PropName::Up => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 14667u16) / 6u16 % 2u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 14667u16) / 6u16 % 2u16 * 6u16 + 1u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 14667u16) / 3u16 % 2u16 * 3u16 + 0u16 * 3u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 14667u16) / 3u16 % 2u16 * 3u16 + 1u16 * 3u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 14667u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 14667u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 14667u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MossyStoneBrickWall => match name {
                PropName::East => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 14991u16) / 108u16 % 3u16 * 108u16 + 0u16 * 108u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 14991u16) / 108u16 % 3u16 * 108u16 + 1u16 * 108u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 14991u16) / 108u16 % 3u16 * 108u16 + 2u16 * 108u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 14991u16) / 36u16 % 3u16 * 36u16 + 0u16 * 36u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 14991u16) / 36u16 % 3u16 * 36u16 + 1u16 * 36u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 14991u16) / 36u16 % 3u16 * 36u16 + 2u16 * 36u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 14991u16) / 12u16 % 3u16 * 12u16 + 0u16 * 12u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 14991u16) / 12u16 % 3u16 * 12u16 + 1u16 * 12u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 14991u16) / 12u16 % 3u16 * 12u16 + 2u16 * 12u16)
                    }
                    _ => self,
                },
                PropName::Up => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 14991u16) / 6u16 % 2u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 14991u16) / 6u16 % 2u16 * 6u16 + 1u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 14991u16) / 3u16 % 2u16 * 3u16 + 0u16 * 3u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 14991u16) / 3u16 % 2u16 * 3u16 + 1u16 * 3u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 14991u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 14991u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 14991u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::GraniteWall => match name {
                PropName::East => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 15315u16) / 108u16 % 3u16 * 108u16 + 0u16 * 108u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 15315u16) / 108u16 % 3u16 * 108u16 + 1u16 * 108u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 15315u16) / 108u16 % 3u16 * 108u16 + 2u16 * 108u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 15315u16) / 36u16 % 3u16 * 36u16 + 0u16 * 36u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 15315u16) / 36u16 % 3u16 * 36u16 + 1u16 * 36u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 15315u16) / 36u16 % 3u16 * 36u16 + 2u16 * 36u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 15315u16) / 12u16 % 3u16 * 12u16 + 0u16 * 12u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 15315u16) / 12u16 % 3u16 * 12u16 + 1u16 * 12u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 15315u16) / 12u16 % 3u16 * 12u16 + 2u16 * 12u16)
                    }
                    _ => self,
                },
                PropName::Up => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 15315u16) / 6u16 % 2u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 15315u16) / 6u16 % 2u16 * 6u16 + 1u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 15315u16) / 3u16 % 2u16 * 3u16 + 0u16 * 3u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 15315u16) / 3u16 % 2u16 * 3u16 + 1u16 * 3u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 15315u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 15315u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 15315u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::StoneBrickWall => match name {
                PropName::East => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 15639u16) / 108u16 % 3u16 * 108u16 + 0u16 * 108u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 15639u16) / 108u16 % 3u16 * 108u16 + 1u16 * 108u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 15639u16) / 108u16 % 3u16 * 108u16 + 2u16 * 108u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 15639u16) / 36u16 % 3u16 * 36u16 + 0u16 * 36u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 15639u16) / 36u16 % 3u16 * 36u16 + 1u16 * 36u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 15639u16) / 36u16 % 3u16 * 36u16 + 2u16 * 36u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 15639u16) / 12u16 % 3u16 * 12u16 + 0u16 * 12u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 15639u16) / 12u16 % 3u16 * 12u16 + 1u16 * 12u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 15639u16) / 12u16 % 3u16 * 12u16 + 2u16 * 12u16)
                    }
                    _ => self,
                },
                PropName::Up => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 15639u16) / 6u16 % 2u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 15639u16) / 6u16 % 2u16 * 6u16 + 1u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 15639u16) / 3u16 % 2u16 * 3u16 + 0u16 * 3u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 15639u16) / 3u16 % 2u16 * 3u16 + 1u16 * 3u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 15639u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 15639u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 15639u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MudBrickWall => match name {
                PropName::East => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 15963u16) / 108u16 % 3u16 * 108u16 + 0u16 * 108u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 15963u16) / 108u16 % 3u16 * 108u16 + 1u16 * 108u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 15963u16) / 108u16 % 3u16 * 108u16 + 2u16 * 108u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 15963u16) / 36u16 % 3u16 * 36u16 + 0u16 * 36u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 15963u16) / 36u16 % 3u16 * 36u16 + 1u16 * 36u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 15963u16) / 36u16 % 3u16 * 36u16 + 2u16 * 36u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 15963u16) / 12u16 % 3u16 * 12u16 + 0u16 * 12u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 15963u16) / 12u16 % 3u16 * 12u16 + 1u16 * 12u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 15963u16) / 12u16 % 3u16 * 12u16 + 2u16 * 12u16)
                    }
                    _ => self,
                },
                PropName::Up => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 15963u16) / 6u16 % 2u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 15963u16) / 6u16 % 2u16 * 6u16 + 1u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 15963u16) / 3u16 % 2u16 * 3u16 + 0u16 * 3u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 15963u16) / 3u16 % 2u16 * 3u16 + 1u16 * 3u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 15963u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 15963u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 15963u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::NetherBrickWall => match name {
                PropName::East => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 16287u16) / 108u16 % 3u16 * 108u16 + 0u16 * 108u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 16287u16) / 108u16 % 3u16 * 108u16 + 1u16 * 108u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 16287u16) / 108u16 % 3u16 * 108u16 + 2u16 * 108u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 16287u16) / 36u16 % 3u16 * 36u16 + 0u16 * 36u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 16287u16) / 36u16 % 3u16 * 36u16 + 1u16 * 36u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 16287u16) / 36u16 % 3u16 * 36u16 + 2u16 * 36u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 16287u16) / 12u16 % 3u16 * 12u16 + 0u16 * 12u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 16287u16) / 12u16 % 3u16 * 12u16 + 1u16 * 12u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 16287u16) / 12u16 % 3u16 * 12u16 + 2u16 * 12u16)
                    }
                    _ => self,
                },
                PropName::Up => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 16287u16) / 6u16 % 2u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 16287u16) / 6u16 % 2u16 * 6u16 + 1u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 16287u16) / 3u16 % 2u16 * 3u16 + 0u16 * 3u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 16287u16) / 3u16 % 2u16 * 3u16 + 1u16 * 3u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 16287u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 16287u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 16287u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::AndesiteWall => match name {
                PropName::East => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 16611u16) / 108u16 % 3u16 * 108u16 + 0u16 * 108u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 16611u16) / 108u16 % 3u16 * 108u16 + 1u16 * 108u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 16611u16) / 108u16 % 3u16 * 108u16 + 2u16 * 108u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 16611u16) / 36u16 % 3u16 * 36u16 + 0u16 * 36u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 16611u16) / 36u16 % 3u16 * 36u16 + 1u16 * 36u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 16611u16) / 36u16 % 3u16 * 36u16 + 2u16 * 36u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 16611u16) / 12u16 % 3u16 * 12u16 + 0u16 * 12u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 16611u16) / 12u16 % 3u16 * 12u16 + 1u16 * 12u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 16611u16) / 12u16 % 3u16 * 12u16 + 2u16 * 12u16)
                    }
                    _ => self,
                },
                PropName::Up => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 16611u16) / 6u16 % 2u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 16611u16) / 6u16 % 2u16 * 6u16 + 1u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 16611u16) / 3u16 % 2u16 * 3u16 + 0u16 * 3u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 16611u16) / 3u16 % 2u16 * 3u16 + 1u16 * 3u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 16611u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 16611u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 16611u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::RedNetherBrickWall => match name {
                PropName::East => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 16935u16) / 108u16 % 3u16 * 108u16 + 0u16 * 108u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 16935u16) / 108u16 % 3u16 * 108u16 + 1u16 * 108u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 16935u16) / 108u16 % 3u16 * 108u16 + 2u16 * 108u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 16935u16) / 36u16 % 3u16 * 36u16 + 0u16 * 36u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 16935u16) / 36u16 % 3u16 * 36u16 + 1u16 * 36u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 16935u16) / 36u16 % 3u16 * 36u16 + 2u16 * 36u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 16935u16) / 12u16 % 3u16 * 12u16 + 0u16 * 12u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 16935u16) / 12u16 % 3u16 * 12u16 + 1u16 * 12u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 16935u16) / 12u16 % 3u16 * 12u16 + 2u16 * 12u16)
                    }
                    _ => self,
                },
                PropName::Up => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 16935u16) / 6u16 % 2u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 16935u16) / 6u16 % 2u16 * 6u16 + 1u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 16935u16) / 3u16 % 2u16 * 3u16 + 0u16 * 3u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 16935u16) / 3u16 % 2u16 * 3u16 + 1u16 * 3u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 16935u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 16935u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 16935u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SandstoneWall => match name {
                PropName::East => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 17259u16) / 108u16 % 3u16 * 108u16 + 0u16 * 108u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 17259u16) / 108u16 % 3u16 * 108u16 + 1u16 * 108u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 17259u16) / 108u16 % 3u16 * 108u16 + 2u16 * 108u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 17259u16) / 36u16 % 3u16 * 36u16 + 0u16 * 36u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 17259u16) / 36u16 % 3u16 * 36u16 + 1u16 * 36u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 17259u16) / 36u16 % 3u16 * 36u16 + 2u16 * 36u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 17259u16) / 12u16 % 3u16 * 12u16 + 0u16 * 12u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 17259u16) / 12u16 % 3u16 * 12u16 + 1u16 * 12u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 17259u16) / 12u16 % 3u16 * 12u16 + 2u16 * 12u16)
                    }
                    _ => self,
                },
                PropName::Up => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 17259u16) / 6u16 % 2u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 17259u16) / 6u16 % 2u16 * 6u16 + 1u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 17259u16) / 3u16 % 2u16 * 3u16 + 0u16 * 3u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 17259u16) / 3u16 % 2u16 * 3u16 + 1u16 * 3u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 17259u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 17259u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 17259u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::EndStoneBrickWall => match name {
                PropName::East => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 17583u16) / 108u16 % 3u16 * 108u16 + 0u16 * 108u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 17583u16) / 108u16 % 3u16 * 108u16 + 1u16 * 108u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 17583u16) / 108u16 % 3u16 * 108u16 + 2u16 * 108u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 17583u16) / 36u16 % 3u16 * 36u16 + 0u16 * 36u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 17583u16) / 36u16 % 3u16 * 36u16 + 1u16 * 36u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 17583u16) / 36u16 % 3u16 * 36u16 + 2u16 * 36u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 17583u16) / 12u16 % 3u16 * 12u16 + 0u16 * 12u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 17583u16) / 12u16 % 3u16 * 12u16 + 1u16 * 12u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 17583u16) / 12u16 % 3u16 * 12u16 + 2u16 * 12u16)
                    }
                    _ => self,
                },
                PropName::Up => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 17583u16) / 6u16 % 2u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 17583u16) / 6u16 % 2u16 * 6u16 + 1u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 17583u16) / 3u16 % 2u16 * 3u16 + 0u16 * 3u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 17583u16) / 3u16 % 2u16 * 3u16 + 1u16 * 3u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 17583u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 17583u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 17583u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DioriteWall => match name {
                PropName::East => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 17907u16) / 108u16 % 3u16 * 108u16 + 0u16 * 108u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 17907u16) / 108u16 % 3u16 * 108u16 + 1u16 * 108u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 17907u16) / 108u16 % 3u16 * 108u16 + 2u16 * 108u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 17907u16) / 36u16 % 3u16 * 36u16 + 0u16 * 36u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 17907u16) / 36u16 % 3u16 * 36u16 + 1u16 * 36u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 17907u16) / 36u16 % 3u16 * 36u16 + 2u16 * 36u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 17907u16) / 12u16 % 3u16 * 12u16 + 0u16 * 12u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 17907u16) / 12u16 % 3u16 * 12u16 + 1u16 * 12u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 17907u16) / 12u16 % 3u16 * 12u16 + 2u16 * 12u16)
                    }
                    _ => self,
                },
                PropName::Up => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 17907u16) / 6u16 % 2u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 17907u16) / 6u16 % 2u16 * 6u16 + 1u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 17907u16) / 3u16 % 2u16 * 3u16 + 0u16 * 3u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 17907u16) / 3u16 % 2u16 * 3u16 + 1u16 * 3u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 17907u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 17907u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 17907u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Scaffolding => match name {
                PropName::Bottom => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18231u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18231u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::Distance => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 18231u16) / 2u16 % 8u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 18231u16) / 2u16 % 8u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 18231u16) / 2u16 % 8u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 18231u16) / 2u16 % 8u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 18231u16) / 2u16 % 8u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 18231u16) / 2u16 % 8u16 * 2u16 + 5u16 * 2u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 18231u16) / 2u16 % 8u16 * 2u16 + 6u16 * 2u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 18231u16) / 2u16 % 8u16 * 2u16 + 7u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18231u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18231u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Loom => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 18263u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 18263u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 18263u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 18263u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Barrel => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 18267u16) / 2u16 % 6u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 18267u16) / 2u16 % 6u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 18267u16) / 2u16 % 6u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 18267u16) / 2u16 % 6u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 18267u16) / 2u16 % 6u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 18267u16) / 2u16 % 6u16 * 2u16 + 5u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18267u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18267u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Smoker => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 18279u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 18279u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 18279u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 18279u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18279u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18279u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BlastFurnace => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 18287u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 18287u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 18287u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 18287u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18287u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18287u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Grindstone => match name {
                PropName::Face => match val {
                    PropValue::Floor => {
                        Self(self.0 - (self.0 - 18297u16) / 4u16 % 3u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::Wall => {
                        Self(self.0 - (self.0 - 18297u16) / 4u16 % 3u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::Ceiling => {
                        Self(self.0 - (self.0 - 18297u16) / 4u16 % 3u16 * 4u16 + 2u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 18297u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 18297u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 18297u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 18297u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Lectern => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 18309u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 18309u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 18309u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 18309u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::HasBook => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18309u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18309u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18309u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18309u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Stonecutter => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 18326u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 18326u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 18326u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 18326u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Bell => match name {
                PropName::Attachment => match val {
                    PropValue::Floor => {
                        Self(self.0 - (self.0 - 18330u16) / 8u16 % 4u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Ceiling => {
                        Self(self.0 - (self.0 - 18330u16) / 8u16 % 4u16 * 8u16 + 1u16 * 8u16)
                    }
                    PropValue::SingleWall => {
                        Self(self.0 - (self.0 - 18330u16) / 8u16 % 4u16 * 8u16 + 2u16 * 8u16)
                    }
                    PropValue::DoubleWall => {
                        Self(self.0 - (self.0 - 18330u16) / 8u16 % 4u16 * 8u16 + 3u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 18330u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 18330u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 18330u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 18330u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18330u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18330u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Lantern => match name {
                PropName::Hanging => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18362u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18362u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18362u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18362u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SoulLantern => match name {
                PropName::Hanging => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18366u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18366u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18366u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18366u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Campfire => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 18370u16) / 8u16 % 4u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 18370u16) / 8u16 % 4u16 * 8u16 + 1u16 * 8u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 18370u16) / 8u16 % 4u16 * 8u16 + 2u16 * 8u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 18370u16) / 8u16 % 4u16 * 8u16 + 3u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18370u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18370u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::SignalFire => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18370u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18370u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18370u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18370u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SoulCampfire => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 18402u16) / 8u16 % 4u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 18402u16) / 8u16 % 4u16 * 8u16 + 1u16 * 8u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 18402u16) / 8u16 % 4u16 * 8u16 + 2u16 * 8u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 18402u16) / 8u16 % 4u16 * 8u16 + 3u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18402u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18402u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::SignalFire => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18402u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18402u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18402u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18402u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SweetBerryBush => match name {
                PropName::Age => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 18434u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 18434u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 18434u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 18434u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WarpedStem => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 18438u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 18438u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 18438u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::StrippedWarpedStem => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 18441u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 18441u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 18441u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WarpedHyphae => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 18444u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 18444u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 18444u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::StrippedWarpedHyphae => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 18447u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 18447u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 18447u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CrimsonStem => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 18455u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 18455u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 18455u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::StrippedCrimsonStem => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 18458u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 18458u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 18458u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CrimsonHyphae => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 18461u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 18461u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 18461u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::StrippedCrimsonHyphae => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 18464u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 18464u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 18464u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WeepingVines => match name {
                PropName::Age => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 18470u16) / 1u16 % 26u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 18470u16) / 1u16 % 26u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 18470u16) / 1u16 % 26u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 18470u16) / 1u16 % 26u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 18470u16) / 1u16 % 26u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 18470u16) / 1u16 % 26u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 18470u16) / 1u16 % 26u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 18470u16) / 1u16 % 26u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 18470u16) / 1u16 % 26u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 18470u16) / 1u16 % 26u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 18470u16) / 1u16 % 26u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 18470u16) / 1u16 % 26u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 18470u16) / 1u16 % 26u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 18470u16) / 1u16 % 26u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 18470u16) / 1u16 % 26u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 18470u16) / 1u16 % 26u16 * 1u16 + 15u16 * 1u16)
                    }
                    PropValue::_16 => {
                        Self(self.0 - (self.0 - 18470u16) / 1u16 % 26u16 * 1u16 + 16u16 * 1u16)
                    }
                    PropValue::_17 => {
                        Self(self.0 - (self.0 - 18470u16) / 1u16 % 26u16 * 1u16 + 17u16 * 1u16)
                    }
                    PropValue::_18 => {
                        Self(self.0 - (self.0 - 18470u16) / 1u16 % 26u16 * 1u16 + 18u16 * 1u16)
                    }
                    PropValue::_19 => {
                        Self(self.0 - (self.0 - 18470u16) / 1u16 % 26u16 * 1u16 + 19u16 * 1u16)
                    }
                    PropValue::_20 => {
                        Self(self.0 - (self.0 - 18470u16) / 1u16 % 26u16 * 1u16 + 20u16 * 1u16)
                    }
                    PropValue::_21 => {
                        Self(self.0 - (self.0 - 18470u16) / 1u16 % 26u16 * 1u16 + 21u16 * 1u16)
                    }
                    PropValue::_22 => {
                        Self(self.0 - (self.0 - 18470u16) / 1u16 % 26u16 * 1u16 + 22u16 * 1u16)
                    }
                    PropValue::_23 => {
                        Self(self.0 - (self.0 - 18470u16) / 1u16 % 26u16 * 1u16 + 23u16 * 1u16)
                    }
                    PropValue::_24 => {
                        Self(self.0 - (self.0 - 18470u16) / 1u16 % 26u16 * 1u16 + 24u16 * 1u16)
                    }
                    PropValue::_25 => {
                        Self(self.0 - (self.0 - 18470u16) / 1u16 % 26u16 * 1u16 + 25u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::TwistingVines => match name {
                PropName::Age => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 18497u16) / 1u16 % 26u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 18497u16) / 1u16 % 26u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 18497u16) / 1u16 % 26u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 18497u16) / 1u16 % 26u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 18497u16) / 1u16 % 26u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 18497u16) / 1u16 % 26u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 18497u16) / 1u16 % 26u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 18497u16) / 1u16 % 26u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 18497u16) / 1u16 % 26u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 18497u16) / 1u16 % 26u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 18497u16) / 1u16 % 26u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 18497u16) / 1u16 % 26u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 18497u16) / 1u16 % 26u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 18497u16) / 1u16 % 26u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 18497u16) / 1u16 % 26u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 18497u16) / 1u16 % 26u16 * 1u16 + 15u16 * 1u16)
                    }
                    PropValue::_16 => {
                        Self(self.0 - (self.0 - 18497u16) / 1u16 % 26u16 * 1u16 + 16u16 * 1u16)
                    }
                    PropValue::_17 => {
                        Self(self.0 - (self.0 - 18497u16) / 1u16 % 26u16 * 1u16 + 17u16 * 1u16)
                    }
                    PropValue::_18 => {
                        Self(self.0 - (self.0 - 18497u16) / 1u16 % 26u16 * 1u16 + 18u16 * 1u16)
                    }
                    PropValue::_19 => {
                        Self(self.0 - (self.0 - 18497u16) / 1u16 % 26u16 * 1u16 + 19u16 * 1u16)
                    }
                    PropValue::_20 => {
                        Self(self.0 - (self.0 - 18497u16) / 1u16 % 26u16 * 1u16 + 20u16 * 1u16)
                    }
                    PropValue::_21 => {
                        Self(self.0 - (self.0 - 18497u16) / 1u16 % 26u16 * 1u16 + 21u16 * 1u16)
                    }
                    PropValue::_22 => {
                        Self(self.0 - (self.0 - 18497u16) / 1u16 % 26u16 * 1u16 + 22u16 * 1u16)
                    }
                    PropValue::_23 => {
                        Self(self.0 - (self.0 - 18497u16) / 1u16 % 26u16 * 1u16 + 23u16 * 1u16)
                    }
                    PropValue::_24 => {
                        Self(self.0 - (self.0 - 18497u16) / 1u16 % 26u16 * 1u16 + 24u16 * 1u16)
                    }
                    PropValue::_25 => {
                        Self(self.0 - (self.0 - 18497u16) / 1u16 % 26u16 * 1u16 + 25u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CrimsonSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 18527u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 18527u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 18527u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18527u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18527u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WarpedSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 18533u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 18533u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 18533u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18533u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18533u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CrimsonPressurePlate => match name {
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18539u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18539u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WarpedPressurePlate => match name {
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18541u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18541u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CrimsonFence => match name {
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18543u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18543u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18543u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18543u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18543u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18543u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18543u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18543u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18543u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18543u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WarpedFence => match name {
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18575u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18575u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18575u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18575u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18575u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18575u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18575u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18575u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18575u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18575u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CrimsonTrapdoor => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 18607u16) / 16u16 % 4u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 18607u16) / 16u16 % 4u16 * 16u16 + 1u16 * 16u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 18607u16) / 16u16 % 4u16 * 16u16 + 2u16 * 16u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 18607u16) / 16u16 % 4u16 * 16u16 + 3u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 18607u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 18607u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18607u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18607u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18607u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18607u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18607u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18607u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WarpedTrapdoor => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 18671u16) / 16u16 % 4u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 18671u16) / 16u16 % 4u16 * 16u16 + 1u16 * 16u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 18671u16) / 16u16 % 4u16 * 16u16 + 2u16 * 16u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 18671u16) / 16u16 % 4u16 * 16u16 + 3u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 18671u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 18671u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18671u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18671u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18671u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18671u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18671u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18671u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CrimsonFenceGate => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 18735u16) / 8u16 % 4u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 18735u16) / 8u16 % 4u16 * 8u16 + 1u16 * 8u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 18735u16) / 8u16 % 4u16 * 8u16 + 2u16 * 8u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 18735u16) / 8u16 % 4u16 * 8u16 + 3u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::InWall => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18735u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18735u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18735u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18735u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18735u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18735u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WarpedFenceGate => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 18767u16) / 8u16 % 4u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 18767u16) / 8u16 % 4u16 * 8u16 + 1u16 * 8u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 18767u16) / 8u16 % 4u16 * 8u16 + 2u16 * 8u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 18767u16) / 8u16 % 4u16 * 8u16 + 3u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::InWall => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18767u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18767u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18767u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18767u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18767u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18767u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CrimsonStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 18799u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 18799u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 18799u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 18799u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 18799u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 18799u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 18799u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 18799u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 18799u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 18799u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 18799u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18799u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18799u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WarpedStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 18879u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 18879u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 18879u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 18879u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 18879u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 18879u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 18879u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 18879u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 18879u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 18879u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 18879u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18879u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18879u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CrimsonButton => match name {
                PropName::Face => match val {
                    PropValue::Floor => {
                        Self(self.0 - (self.0 - 18959u16) / 8u16 % 3u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Wall => {
                        Self(self.0 - (self.0 - 18959u16) / 8u16 % 3u16 * 8u16 + 1u16 * 8u16)
                    }
                    PropValue::Ceiling => {
                        Self(self.0 - (self.0 - 18959u16) / 8u16 % 3u16 * 8u16 + 2u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 18959u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 18959u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 18959u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 18959u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18959u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18959u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WarpedButton => match name {
                PropName::Face => match val {
                    PropValue::Floor => {
                        Self(self.0 - (self.0 - 18983u16) / 8u16 % 3u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Wall => {
                        Self(self.0 - (self.0 - 18983u16) / 8u16 % 3u16 * 8u16 + 1u16 * 8u16)
                    }
                    PropValue::Ceiling => {
                        Self(self.0 - (self.0 - 18983u16) / 8u16 % 3u16 * 8u16 + 2u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 18983u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 18983u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 18983u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 18983u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 18983u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 18983u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CrimsonDoor => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 19007u16) / 16u16 % 4u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 19007u16) / 16u16 % 4u16 * 16u16 + 1u16 * 16u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 19007u16) / 16u16 % 4u16 * 16u16 + 2u16 * 16u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 19007u16) / 16u16 % 4u16 * 16u16 + 3u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Upper => {
                        Self(self.0 - (self.0 - 19007u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Lower => {
                        Self(self.0 - (self.0 - 19007u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Hinge => match val {
                    PropValue::Left => {
                        Self(self.0 - (self.0 - 19007u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::Right => {
                        Self(self.0 - (self.0 - 19007u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 19007u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 19007u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 19007u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 19007u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WarpedDoor => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 19071u16) / 16u16 % 4u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 19071u16) / 16u16 % 4u16 * 16u16 + 1u16 * 16u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 19071u16) / 16u16 % 4u16 * 16u16 + 2u16 * 16u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 19071u16) / 16u16 % 4u16 * 16u16 + 3u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Upper => {
                        Self(self.0 - (self.0 - 19071u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Lower => {
                        Self(self.0 - (self.0 - 19071u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Hinge => match val {
                    PropValue::Left => {
                        Self(self.0 - (self.0 - 19071u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::Right => {
                        Self(self.0 - (self.0 - 19071u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Open => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 19071u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 19071u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 19071u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 19071u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CrimsonSign => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 19135u16) / 2u16 % 16u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 19135u16) / 2u16 % 16u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 19135u16) / 2u16 % 16u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 19135u16) / 2u16 % 16u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 19135u16) / 2u16 % 16u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 19135u16) / 2u16 % 16u16 * 2u16 + 5u16 * 2u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 19135u16) / 2u16 % 16u16 * 2u16 + 6u16 * 2u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 19135u16) / 2u16 % 16u16 * 2u16 + 7u16 * 2u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 19135u16) / 2u16 % 16u16 * 2u16 + 8u16 * 2u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 19135u16) / 2u16 % 16u16 * 2u16 + 9u16 * 2u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 19135u16) / 2u16 % 16u16 * 2u16 + 10u16 * 2u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 19135u16) / 2u16 % 16u16 * 2u16 + 11u16 * 2u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 19135u16) / 2u16 % 16u16 * 2u16 + 12u16 * 2u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 19135u16) / 2u16 % 16u16 * 2u16 + 13u16 * 2u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 19135u16) / 2u16 % 16u16 * 2u16 + 14u16 * 2u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 19135u16) / 2u16 % 16u16 * 2u16 + 15u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 19135u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 19135u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WarpedSign => match name {
                PropName::Rotation => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 19167u16) / 2u16 % 16u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 19167u16) / 2u16 % 16u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 19167u16) / 2u16 % 16u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 19167u16) / 2u16 % 16u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 19167u16) / 2u16 % 16u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 19167u16) / 2u16 % 16u16 * 2u16 + 5u16 * 2u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 19167u16) / 2u16 % 16u16 * 2u16 + 6u16 * 2u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 19167u16) / 2u16 % 16u16 * 2u16 + 7u16 * 2u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 19167u16) / 2u16 % 16u16 * 2u16 + 8u16 * 2u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 19167u16) / 2u16 % 16u16 * 2u16 + 9u16 * 2u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 19167u16) / 2u16 % 16u16 * 2u16 + 10u16 * 2u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 19167u16) / 2u16 % 16u16 * 2u16 + 11u16 * 2u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 19167u16) / 2u16 % 16u16 * 2u16 + 12u16 * 2u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 19167u16) / 2u16 % 16u16 * 2u16 + 13u16 * 2u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 19167u16) / 2u16 % 16u16 * 2u16 + 14u16 * 2u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 19167u16) / 2u16 % 16u16 * 2u16 + 15u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 19167u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 19167u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CrimsonWallSign => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 19199u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 19199u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 19199u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 19199u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 19199u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 19199u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WarpedWallSign => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 19207u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 19207u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 19207u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 19207u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 19207u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 19207u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::StructureBlock => match name {
                PropName::Mode => match val {
                    PropValue::Save => {
                        Self(self.0 - (self.0 - 19215u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Load => {
                        Self(self.0 - (self.0 - 19215u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Corner => {
                        Self(self.0 - (self.0 - 19215u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::Data => {
                        Self(self.0 - (self.0 - 19215u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Jigsaw => match name {
                PropName::Orientation => match val {
                    PropValue::DownEast => {
                        Self(self.0 - (self.0 - 19219u16) / 1u16 % 12u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::DownNorth => {
                        Self(self.0 - (self.0 - 19219u16) / 1u16 % 12u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::DownSouth => {
                        Self(self.0 - (self.0 - 19219u16) / 1u16 % 12u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::DownWest => {
                        Self(self.0 - (self.0 - 19219u16) / 1u16 % 12u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::UpEast => {
                        Self(self.0 - (self.0 - 19219u16) / 1u16 % 12u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::UpNorth => {
                        Self(self.0 - (self.0 - 19219u16) / 1u16 % 12u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::UpSouth => {
                        Self(self.0 - (self.0 - 19219u16) / 1u16 % 12u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::UpWest => {
                        Self(self.0 - (self.0 - 19219u16) / 1u16 % 12u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::WestUp => {
                        Self(self.0 - (self.0 - 19219u16) / 1u16 % 12u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::EastUp => {
                        Self(self.0 - (self.0 - 19219u16) / 1u16 % 12u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::NorthUp => {
                        Self(self.0 - (self.0 - 19219u16) / 1u16 % 12u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::SouthUp => {
                        Self(self.0 - (self.0 - 19219u16) / 1u16 % 12u16 * 1u16 + 11u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Composter => match name {
                PropName::Level => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 19231u16) / 1u16 % 9u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 19231u16) / 1u16 % 9u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 19231u16) / 1u16 % 9u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 19231u16) / 1u16 % 9u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 19231u16) / 1u16 % 9u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 19231u16) / 1u16 % 9u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 19231u16) / 1u16 % 9u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 19231u16) / 1u16 % 9u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 19231u16) / 1u16 % 9u16 * 1u16 + 8u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Target => match name {
                PropName::Power => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 19240u16) / 1u16 % 16u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 19240u16) / 1u16 % 16u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 19240u16) / 1u16 % 16u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 19240u16) / 1u16 % 16u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 19240u16) / 1u16 % 16u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 19240u16) / 1u16 % 16u16 * 1u16 + 5u16 * 1u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 19240u16) / 1u16 % 16u16 * 1u16 + 6u16 * 1u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 19240u16) / 1u16 % 16u16 * 1u16 + 7u16 * 1u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 19240u16) / 1u16 % 16u16 * 1u16 + 8u16 * 1u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 19240u16) / 1u16 % 16u16 * 1u16 + 9u16 * 1u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 19240u16) / 1u16 % 16u16 * 1u16 + 10u16 * 1u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 19240u16) / 1u16 % 16u16 * 1u16 + 11u16 * 1u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 19240u16) / 1u16 % 16u16 * 1u16 + 12u16 * 1u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 19240u16) / 1u16 % 16u16 * 1u16 + 13u16 * 1u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 19240u16) / 1u16 % 16u16 * 1u16 + 14u16 * 1u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 19240u16) / 1u16 % 16u16 * 1u16 + 15u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BeeNest => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 19256u16) / 6u16 % 4u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 19256u16) / 6u16 % 4u16 * 6u16 + 1u16 * 6u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 19256u16) / 6u16 % 4u16 * 6u16 + 2u16 * 6u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 19256u16) / 6u16 % 4u16 * 6u16 + 3u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::HoneyLevel => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 19256u16) / 1u16 % 6u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 19256u16) / 1u16 % 6u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 19256u16) / 1u16 % 6u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 19256u16) / 1u16 % 6u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 19256u16) / 1u16 % 6u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 19256u16) / 1u16 % 6u16 * 1u16 + 5u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Beehive => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 19280u16) / 6u16 % 4u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 19280u16) / 6u16 % 4u16 * 6u16 + 1u16 * 6u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 19280u16) / 6u16 % 4u16 * 6u16 + 2u16 * 6u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 19280u16) / 6u16 % 4u16 * 6u16 + 3u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::HoneyLevel => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 19280u16) / 1u16 % 6u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 19280u16) / 1u16 % 6u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 19280u16) / 1u16 % 6u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 19280u16) / 1u16 % 6u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 19280u16) / 1u16 % 6u16 * 1u16 + 4u16 * 1u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 19280u16) / 1u16 % 6u16 * 1u16 + 5u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::RespawnAnchor => match name {
                PropName::Charges => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 19309u16) / 1u16 % 5u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 19309u16) / 1u16 % 5u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 19309u16) / 1u16 % 5u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 19309u16) / 1u16 % 5u16 * 1u16 + 3u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 19309u16) / 1u16 % 5u16 * 1u16 + 4u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BlackstoneStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 19320u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 19320u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 19320u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 19320u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 19320u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 19320u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 19320u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 19320u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 19320u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 19320u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 19320u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 19320u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 19320u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BlackstoneWall => match name {
                PropName::East => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 19400u16) / 108u16 % 3u16 * 108u16 + 0u16 * 108u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 19400u16) / 108u16 % 3u16 * 108u16 + 1u16 * 108u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 19400u16) / 108u16 % 3u16 * 108u16 + 2u16 * 108u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 19400u16) / 36u16 % 3u16 * 36u16 + 0u16 * 36u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 19400u16) / 36u16 % 3u16 * 36u16 + 1u16 * 36u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 19400u16) / 36u16 % 3u16 * 36u16 + 2u16 * 36u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 19400u16) / 12u16 % 3u16 * 12u16 + 0u16 * 12u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 19400u16) / 12u16 % 3u16 * 12u16 + 1u16 * 12u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 19400u16) / 12u16 % 3u16 * 12u16 + 2u16 * 12u16)
                    }
                    _ => self,
                },
                PropName::Up => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 19400u16) / 6u16 % 2u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 19400u16) / 6u16 % 2u16 * 6u16 + 1u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 19400u16) / 3u16 % 2u16 * 3u16 + 0u16 * 3u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 19400u16) / 3u16 % 2u16 * 3u16 + 1u16 * 3u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 19400u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 19400u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 19400u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BlackstoneSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 19724u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 19724u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 19724u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 19724u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 19724u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PolishedBlackstoneBrickSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 19734u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 19734u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 19734u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 19734u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 19734u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PolishedBlackstoneBrickStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 19740u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 19740u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 19740u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 19740u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 19740u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 19740u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 19740u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 19740u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 19740u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 19740u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 19740u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 19740u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 19740u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PolishedBlackstoneBrickWall => match name {
                PropName::East => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 19820u16) / 108u16 % 3u16 * 108u16 + 0u16 * 108u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 19820u16) / 108u16 % 3u16 * 108u16 + 1u16 * 108u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 19820u16) / 108u16 % 3u16 * 108u16 + 2u16 * 108u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 19820u16) / 36u16 % 3u16 * 36u16 + 0u16 * 36u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 19820u16) / 36u16 % 3u16 * 36u16 + 1u16 * 36u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 19820u16) / 36u16 % 3u16 * 36u16 + 2u16 * 36u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 19820u16) / 12u16 % 3u16 * 12u16 + 0u16 * 12u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 19820u16) / 12u16 % 3u16 * 12u16 + 1u16 * 12u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 19820u16) / 12u16 % 3u16 * 12u16 + 2u16 * 12u16)
                    }
                    _ => self,
                },
                PropName::Up => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 19820u16) / 6u16 % 2u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 19820u16) / 6u16 % 2u16 * 6u16 + 1u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 19820u16) / 3u16 % 2u16 * 3u16 + 0u16 * 3u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 19820u16) / 3u16 % 2u16 * 3u16 + 1u16 * 3u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 19820u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 19820u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 19820u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PolishedBlackstoneStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 20145u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 20145u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 20145u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 20145u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 20145u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 20145u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 20145u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 20145u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 20145u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 20145u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 20145u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20145u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20145u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PolishedBlackstoneSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 20225u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 20225u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 20225u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20225u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20225u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PolishedBlackstonePressurePlate => match name {
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20231u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20231u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PolishedBlackstoneButton => match name {
                PropName::Face => match val {
                    PropValue::Floor => {
                        Self(self.0 - (self.0 - 20233u16) / 8u16 % 3u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::Wall => {
                        Self(self.0 - (self.0 - 20233u16) / 8u16 % 3u16 * 8u16 + 1u16 * 8u16)
                    }
                    PropValue::Ceiling => {
                        Self(self.0 - (self.0 - 20233u16) / 8u16 % 3u16 * 8u16 + 2u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 20233u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 20233u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 20233u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 20233u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20233u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20233u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PolishedBlackstoneWall => match name {
                PropName::East => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 20257u16) / 108u16 % 3u16 * 108u16 + 0u16 * 108u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 20257u16) / 108u16 % 3u16 * 108u16 + 1u16 * 108u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 20257u16) / 108u16 % 3u16 * 108u16 + 2u16 * 108u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 20257u16) / 36u16 % 3u16 * 36u16 + 0u16 * 36u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 20257u16) / 36u16 % 3u16 * 36u16 + 1u16 * 36u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 20257u16) / 36u16 % 3u16 * 36u16 + 2u16 * 36u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 20257u16) / 12u16 % 3u16 * 12u16 + 0u16 * 12u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 20257u16) / 12u16 % 3u16 * 12u16 + 1u16 * 12u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 20257u16) / 12u16 % 3u16 * 12u16 + 2u16 * 12u16)
                    }
                    _ => self,
                },
                PropName::Up => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20257u16) / 6u16 % 2u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20257u16) / 6u16 % 2u16 * 6u16 + 1u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20257u16) / 3u16 % 2u16 * 3u16 + 0u16 * 3u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20257u16) / 3u16 % 2u16 * 3u16 + 1u16 * 3u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 20257u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 20257u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 20257u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Candle => match name {
                PropName::Candles => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 20584u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 20584u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 20584u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 20584u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20584u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20584u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20584u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20584u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WhiteCandle => match name {
                PropName::Candles => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 20600u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 20600u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 20600u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 20600u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20600u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20600u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20600u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20600u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::OrangeCandle => match name {
                PropName::Candles => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 20616u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 20616u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 20616u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 20616u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20616u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20616u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20616u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20616u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MagentaCandle => match name {
                PropName::Candles => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 20632u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 20632u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 20632u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 20632u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20632u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20632u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20632u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20632u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::LightBlueCandle => match name {
                PropName::Candles => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 20648u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 20648u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 20648u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 20648u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20648u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20648u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20648u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20648u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::YellowCandle => match name {
                PropName::Candles => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 20664u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 20664u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 20664u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 20664u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20664u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20664u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20664u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20664u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::LimeCandle => match name {
                PropName::Candles => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 20680u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 20680u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 20680u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 20680u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20680u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20680u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20680u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20680u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PinkCandle => match name {
                PropName::Candles => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 20696u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 20696u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 20696u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 20696u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20696u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20696u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20696u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20696u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::GrayCandle => match name {
                PropName::Candles => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 20712u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 20712u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 20712u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 20712u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20712u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20712u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20712u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20712u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::LightGrayCandle => match name {
                PropName::Candles => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 20728u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 20728u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 20728u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 20728u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20728u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20728u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20728u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20728u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CyanCandle => match name {
                PropName::Candles => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 20744u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 20744u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 20744u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 20744u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20744u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20744u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20744u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20744u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PurpleCandle => match name {
                PropName::Candles => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 20760u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 20760u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 20760u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 20760u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20760u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20760u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20760u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20760u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BlueCandle => match name {
                PropName::Candles => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 20776u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 20776u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 20776u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 20776u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20776u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20776u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20776u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20776u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BrownCandle => match name {
                PropName::Candles => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 20792u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 20792u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 20792u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 20792u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20792u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20792u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20792u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20792u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::GreenCandle => match name {
                PropName::Candles => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 20808u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 20808u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 20808u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 20808u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20808u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20808u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20808u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20808u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::RedCandle => match name {
                PropName::Candles => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 20824u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 20824u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 20824u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 20824u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20824u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20824u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20824u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20824u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BlackCandle => match name {
                PropName::Candles => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 20840u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 20840u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 20840u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 20840u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20840u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20840u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20840u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20840u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CandleCake => match name {
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20856u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20856u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WhiteCandleCake => match name {
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20858u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20858u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::OrangeCandleCake => match name {
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20860u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20860u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MagentaCandleCake => match name {
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20862u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20862u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::LightBlueCandleCake => match name {
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20864u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20864u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::YellowCandleCake => match name {
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20866u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20866u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::LimeCandleCake => match name {
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20868u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20868u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PinkCandleCake => match name {
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20870u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20870u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::GrayCandleCake => match name {
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20872u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20872u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::LightGrayCandleCake => match name {
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20874u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20874u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CyanCandleCake => match name {
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20876u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20876u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PurpleCandleCake => match name {
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20878u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20878u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BlueCandleCake => match name {
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20880u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20880u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BrownCandleCake => match name {
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20882u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20882u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::GreenCandleCake => match name {
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20884u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20884u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::RedCandleCake => match name {
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20886u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20886u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BlackCandleCake => match name {
                PropName::Lit => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20888u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20888u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::AmethystCluster => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 20892u16) / 2u16 % 6u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 20892u16) / 2u16 % 6u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 20892u16) / 2u16 % 6u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 20892u16) / 2u16 % 6u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 20892u16) / 2u16 % 6u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 20892u16) / 2u16 % 6u16 * 2u16 + 5u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20892u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20892u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::LargeAmethystBud => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 20904u16) / 2u16 % 6u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 20904u16) / 2u16 % 6u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 20904u16) / 2u16 % 6u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 20904u16) / 2u16 % 6u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 20904u16) / 2u16 % 6u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 20904u16) / 2u16 % 6u16 * 2u16 + 5u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20904u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20904u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::MediumAmethystBud => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 20916u16) / 2u16 % 6u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 20916u16) / 2u16 % 6u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 20916u16) / 2u16 % 6u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 20916u16) / 2u16 % 6u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 20916u16) / 2u16 % 6u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 20916u16) / 2u16 % 6u16 * 2u16 + 5u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20916u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20916u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SmallAmethystBud => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 20928u16) / 2u16 % 6u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 20928u16) / 2u16 % 6u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 20928u16) / 2u16 % 6u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 20928u16) / 2u16 % 6u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 20928u16) / 2u16 % 6u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 20928u16) / 2u16 % 6u16 * 2u16 + 5u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20928u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20928u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SculkSensor => match name {
                PropName::Power => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 20944u16) / 6u16 % 16u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 20944u16) / 6u16 % 16u16 * 6u16 + 1u16 * 6u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 20944u16) / 6u16 % 16u16 * 6u16 + 2u16 * 6u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 20944u16) / 6u16 % 16u16 * 6u16 + 3u16 * 6u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 20944u16) / 6u16 % 16u16 * 6u16 + 4u16 * 6u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 20944u16) / 6u16 % 16u16 * 6u16 + 5u16 * 6u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 20944u16) / 6u16 % 16u16 * 6u16 + 6u16 * 6u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 20944u16) / 6u16 % 16u16 * 6u16 + 7u16 * 6u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 20944u16) / 6u16 % 16u16 * 6u16 + 8u16 * 6u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 20944u16) / 6u16 % 16u16 * 6u16 + 9u16 * 6u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 20944u16) / 6u16 % 16u16 * 6u16 + 10u16 * 6u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 20944u16) / 6u16 % 16u16 * 6u16 + 11u16 * 6u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 20944u16) / 6u16 % 16u16 * 6u16 + 12u16 * 6u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 20944u16) / 6u16 % 16u16 * 6u16 + 13u16 * 6u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 20944u16) / 6u16 % 16u16 * 6u16 + 14u16 * 6u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 20944u16) / 6u16 % 16u16 * 6u16 + 15u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::SculkSensorPhase => match val {
                    PropValue::Inactive => {
                        Self(self.0 - (self.0 - 20944u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Active => {
                        Self(self.0 - (self.0 - 20944u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Cooldown => {
                        Self(self.0 - (self.0 - 20944u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 20944u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 20944u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CalibratedSculkSensor => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 21040u16) / 96u16 % 4u16 * 96u16 + 0u16 * 96u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 21040u16) / 96u16 % 4u16 * 96u16 + 1u16 * 96u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 21040u16) / 96u16 % 4u16 * 96u16 + 2u16 * 96u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 21040u16) / 96u16 % 4u16 * 96u16 + 3u16 * 96u16)
                    }
                    _ => self,
                },
                PropName::Power => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 21040u16) / 6u16 % 16u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 21040u16) / 6u16 % 16u16 * 6u16 + 1u16 * 6u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 21040u16) / 6u16 % 16u16 * 6u16 + 2u16 * 6u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 21040u16) / 6u16 % 16u16 * 6u16 + 3u16 * 6u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 21040u16) / 6u16 % 16u16 * 6u16 + 4u16 * 6u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 21040u16) / 6u16 % 16u16 * 6u16 + 5u16 * 6u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 21040u16) / 6u16 % 16u16 * 6u16 + 6u16 * 6u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 21040u16) / 6u16 % 16u16 * 6u16 + 7u16 * 6u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 21040u16) / 6u16 % 16u16 * 6u16 + 8u16 * 6u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 21040u16) / 6u16 % 16u16 * 6u16 + 9u16 * 6u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 21040u16) / 6u16 % 16u16 * 6u16 + 10u16 * 6u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 21040u16) / 6u16 % 16u16 * 6u16 + 11u16 * 6u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 21040u16) / 6u16 % 16u16 * 6u16 + 12u16 * 6u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 21040u16) / 6u16 % 16u16 * 6u16 + 13u16 * 6u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 21040u16) / 6u16 % 16u16 * 6u16 + 14u16 * 6u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 21040u16) / 6u16 % 16u16 * 6u16 + 15u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::SculkSensorPhase => match val {
                    PropValue::Inactive => {
                        Self(self.0 - (self.0 - 21040u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Active => {
                        Self(self.0 - (self.0 - 21040u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Cooldown => {
                        Self(self.0 - (self.0 - 21040u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 21040u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 21040u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SculkVein => match name {
                PropName::Down => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 21425u16) / 64u16 % 2u16 * 64u16 + 0u16 * 64u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 21425u16) / 64u16 % 2u16 * 64u16 + 1u16 * 64u16)
                    }
                    _ => self,
                },
                PropName::East => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 21425u16) / 32u16 % 2u16 * 32u16 + 0u16 * 32u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 21425u16) / 32u16 % 2u16 * 32u16 + 1u16 * 32u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 21425u16) / 16u16 % 2u16 * 16u16 + 0u16 * 16u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 21425u16) / 16u16 % 2u16 * 16u16 + 1u16 * 16u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 21425u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 21425u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Up => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 21425u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 21425u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 21425u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 21425u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 21425u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 21425u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SculkCatalyst => match name {
                PropName::Bloom => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 21553u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 21553u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SculkShrieker => match name {
                PropName::CanSummon => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 21555u16) / 4u16 % 2u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 21555u16) / 4u16 % 2u16 * 4u16 + 1u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Shrieking => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 21555u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 21555u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 21555u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 21555u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::OxidizedCutCopperStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 21573u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 21573u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 21573u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 21573u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 21573u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 21573u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 21573u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 21573u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 21573u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 21573u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 21573u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 21573u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 21573u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WeatheredCutCopperStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 21653u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 21653u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 21653u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 21653u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 21653u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 21653u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 21653u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 21653u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 21653u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 21653u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 21653u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 21653u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 21653u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::ExposedCutCopperStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 21733u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 21733u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 21733u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 21733u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 21733u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 21733u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 21733u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 21733u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 21733u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 21733u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 21733u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 21733u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 21733u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CutCopperStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 21813u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 21813u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 21813u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 21813u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 21813u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 21813u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 21813u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 21813u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 21813u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 21813u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 21813u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 21813u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 21813u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::OxidizedCutCopperSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 21893u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 21893u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 21893u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 21893u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 21893u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WeatheredCutCopperSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 21899u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 21899u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 21899u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 21899u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 21899u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::ExposedCutCopperSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 21905u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 21905u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 21905u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 21905u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 21905u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CutCopperSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 21911u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 21911u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 21911u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 21911u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 21911u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WaxedOxidizedCutCopperStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 21925u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 21925u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 21925u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 21925u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 21925u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 21925u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 21925u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 21925u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 21925u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 21925u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 21925u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 21925u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 21925u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WaxedWeatheredCutCopperStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 22005u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 22005u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 22005u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 22005u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 22005u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 22005u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 22005u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 22005u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 22005u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 22005u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 22005u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 22005u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 22005u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WaxedExposedCutCopperStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 22085u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 22085u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 22085u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 22085u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 22085u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 22085u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 22085u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 22085u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 22085u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 22085u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 22085u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 22085u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 22085u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WaxedCutCopperStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 22165u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 22165u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 22165u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 22165u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 22165u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 22165u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 22165u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 22165u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 22165u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 22165u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 22165u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 22165u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 22165u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WaxedOxidizedCutCopperSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 22245u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 22245u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 22245u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 22245u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 22245u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WaxedWeatheredCutCopperSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 22251u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 22251u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 22251u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 22251u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 22251u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WaxedExposedCutCopperSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 22257u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 22257u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 22257u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 22257u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 22257u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::WaxedCutCopperSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 22263u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 22263u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 22263u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 22263u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 22263u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::LightningRod => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 22269u16) / 4u16 % 6u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 22269u16) / 4u16 % 6u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 22269u16) / 4u16 % 6u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 22269u16) / 4u16 % 6u16 * 4u16 + 3u16 * 4u16)
                    }
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 22269u16) / 4u16 % 6u16 * 4u16 + 4u16 * 4u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 22269u16) / 4u16 % 6u16 * 4u16 + 5u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Powered => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 22269u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 22269u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 22269u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 22269u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PointedDripstone => match name {
                PropName::Thickness => match val {
                    PropValue::TipMerge => {
                        Self(self.0 - (self.0 - 22293u16) / 4u16 % 5u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::Tip => {
                        Self(self.0 - (self.0 - 22293u16) / 4u16 % 5u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::Frustum => {
                        Self(self.0 - (self.0 - 22293u16) / 4u16 % 5u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::Middle => {
                        Self(self.0 - (self.0 - 22293u16) / 4u16 % 5u16 * 4u16 + 3u16 * 4u16)
                    }
                    PropValue::Base => {
                        Self(self.0 - (self.0 - 22293u16) / 4u16 % 5u16 * 4u16 + 4u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::VerticalDirection => match val {
                    PropValue::Up => {
                        Self(self.0 - (self.0 - 22293u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Down => {
                        Self(self.0 - (self.0 - 22293u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 22293u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 22293u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CaveVines => match name {
                PropName::Age => match val {
                    PropValue::_0 => {
                        Self(self.0 - (self.0 - 22314u16) / 2u16 % 26u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 22314u16) / 2u16 % 26u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 22314u16) / 2u16 % 26u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 22314u16) / 2u16 % 26u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 22314u16) / 2u16 % 26u16 * 2u16 + 4u16 * 2u16)
                    }
                    PropValue::_5 => {
                        Self(self.0 - (self.0 - 22314u16) / 2u16 % 26u16 * 2u16 + 5u16 * 2u16)
                    }
                    PropValue::_6 => {
                        Self(self.0 - (self.0 - 22314u16) / 2u16 % 26u16 * 2u16 + 6u16 * 2u16)
                    }
                    PropValue::_7 => {
                        Self(self.0 - (self.0 - 22314u16) / 2u16 % 26u16 * 2u16 + 7u16 * 2u16)
                    }
                    PropValue::_8 => {
                        Self(self.0 - (self.0 - 22314u16) / 2u16 % 26u16 * 2u16 + 8u16 * 2u16)
                    }
                    PropValue::_9 => {
                        Self(self.0 - (self.0 - 22314u16) / 2u16 % 26u16 * 2u16 + 9u16 * 2u16)
                    }
                    PropValue::_10 => {
                        Self(self.0 - (self.0 - 22314u16) / 2u16 % 26u16 * 2u16 + 10u16 * 2u16)
                    }
                    PropValue::_11 => {
                        Self(self.0 - (self.0 - 22314u16) / 2u16 % 26u16 * 2u16 + 11u16 * 2u16)
                    }
                    PropValue::_12 => {
                        Self(self.0 - (self.0 - 22314u16) / 2u16 % 26u16 * 2u16 + 12u16 * 2u16)
                    }
                    PropValue::_13 => {
                        Self(self.0 - (self.0 - 22314u16) / 2u16 % 26u16 * 2u16 + 13u16 * 2u16)
                    }
                    PropValue::_14 => {
                        Self(self.0 - (self.0 - 22314u16) / 2u16 % 26u16 * 2u16 + 14u16 * 2u16)
                    }
                    PropValue::_15 => {
                        Self(self.0 - (self.0 - 22314u16) / 2u16 % 26u16 * 2u16 + 15u16 * 2u16)
                    }
                    PropValue::_16 => {
                        Self(self.0 - (self.0 - 22314u16) / 2u16 % 26u16 * 2u16 + 16u16 * 2u16)
                    }
                    PropValue::_17 => {
                        Self(self.0 - (self.0 - 22314u16) / 2u16 % 26u16 * 2u16 + 17u16 * 2u16)
                    }
                    PropValue::_18 => {
                        Self(self.0 - (self.0 - 22314u16) / 2u16 % 26u16 * 2u16 + 18u16 * 2u16)
                    }
                    PropValue::_19 => {
                        Self(self.0 - (self.0 - 22314u16) / 2u16 % 26u16 * 2u16 + 19u16 * 2u16)
                    }
                    PropValue::_20 => {
                        Self(self.0 - (self.0 - 22314u16) / 2u16 % 26u16 * 2u16 + 20u16 * 2u16)
                    }
                    PropValue::_21 => {
                        Self(self.0 - (self.0 - 22314u16) / 2u16 % 26u16 * 2u16 + 21u16 * 2u16)
                    }
                    PropValue::_22 => {
                        Self(self.0 - (self.0 - 22314u16) / 2u16 % 26u16 * 2u16 + 22u16 * 2u16)
                    }
                    PropValue::_23 => {
                        Self(self.0 - (self.0 - 22314u16) / 2u16 % 26u16 * 2u16 + 23u16 * 2u16)
                    }
                    PropValue::_24 => {
                        Self(self.0 - (self.0 - 22314u16) / 2u16 % 26u16 * 2u16 + 24u16 * 2u16)
                    }
                    PropValue::_25 => {
                        Self(self.0 - (self.0 - 22314u16) / 2u16 % 26u16 * 2u16 + 25u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Berries => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 22314u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 22314u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CaveVinesPlant => match name {
                PropName::Berries => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 22366u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 22366u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PinkPetals => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 22372u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 22372u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 22372u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 22372u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::FlowerAmount => match val {
                    PropValue::_1 => {
                        Self(self.0 - (self.0 - 22372u16) / 1u16 % 4u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::_2 => {
                        Self(self.0 - (self.0 - 22372u16) / 1u16 % 4u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::_3 => {
                        Self(self.0 - (self.0 - 22372u16) / 1u16 % 4u16 * 1u16 + 2u16 * 1u16)
                    }
                    PropValue::_4 => {
                        Self(self.0 - (self.0 - 22372u16) / 1u16 % 4u16 * 1u16 + 3u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BigDripleaf => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 22389u16) / 8u16 % 4u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 22389u16) / 8u16 % 4u16 * 8u16 + 1u16 * 8u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 22389u16) / 8u16 % 4u16 * 8u16 + 2u16 * 8u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 22389u16) / 8u16 % 4u16 * 8u16 + 3u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Tilt => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 22389u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Unstable => {
                        Self(self.0 - (self.0 - 22389u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Partial => {
                        Self(self.0 - (self.0 - 22389u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::Full => {
                        Self(self.0 - (self.0 - 22389u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 22389u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 22389u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::BigDripleafStem => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 22421u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 22421u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 22421u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 22421u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 22421u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 22421u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::SmallDripleaf => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 22429u16) / 4u16 % 4u16 * 4u16 + 0u16 * 4u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 22429u16) / 4u16 % 4u16 * 4u16 + 1u16 * 4u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 22429u16) / 4u16 % 4u16 * 4u16 + 2u16 * 4u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 22429u16) / 4u16 % 4u16 * 4u16 + 3u16 * 4u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Upper => {
                        Self(self.0 - (self.0 - 22429u16) / 2u16 % 2u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Lower => {
                        Self(self.0 - (self.0 - 22429u16) / 2u16 % 2u16 * 2u16 + 1u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 22429u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 22429u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::HangingRoots => match name {
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 22445u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 22445u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::Deepslate => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 22449u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 22449u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 22449u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CobbledDeepslateStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 22453u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 22453u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 22453u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 22453u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 22453u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 22453u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 22453u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 22453u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 22453u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 22453u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 22453u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 22453u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 22453u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CobbledDeepslateSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 22533u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 22533u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 22533u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 22533u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 22533u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::CobbledDeepslateWall => match name {
                PropName::East => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 22539u16) / 108u16 % 3u16 * 108u16 + 0u16 * 108u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 22539u16) / 108u16 % 3u16 * 108u16 + 1u16 * 108u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 22539u16) / 108u16 % 3u16 * 108u16 + 2u16 * 108u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 22539u16) / 36u16 % 3u16 * 36u16 + 0u16 * 36u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 22539u16) / 36u16 % 3u16 * 36u16 + 1u16 * 36u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 22539u16) / 36u16 % 3u16 * 36u16 + 2u16 * 36u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 22539u16) / 12u16 % 3u16 * 12u16 + 0u16 * 12u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 22539u16) / 12u16 % 3u16 * 12u16 + 1u16 * 12u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 22539u16) / 12u16 % 3u16 * 12u16 + 2u16 * 12u16)
                    }
                    _ => self,
                },
                PropName::Up => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 22539u16) / 6u16 % 2u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 22539u16) / 6u16 % 2u16 * 6u16 + 1u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 22539u16) / 3u16 % 2u16 * 3u16 + 0u16 * 3u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 22539u16) / 3u16 % 2u16 * 3u16 + 1u16 * 3u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 22539u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 22539u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 22539u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PolishedDeepslateStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 22864u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 22864u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 22864u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 22864u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 22864u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 22864u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 22864u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 22864u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 22864u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 22864u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 22864u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 22864u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 22864u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PolishedDeepslateSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 22944u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 22944u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 22944u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 22944u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 22944u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PolishedDeepslateWall => match name {
                PropName::East => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 22950u16) / 108u16 % 3u16 * 108u16 + 0u16 * 108u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 22950u16) / 108u16 % 3u16 * 108u16 + 1u16 * 108u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 22950u16) / 108u16 % 3u16 * 108u16 + 2u16 * 108u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 22950u16) / 36u16 % 3u16 * 36u16 + 0u16 * 36u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 22950u16) / 36u16 % 3u16 * 36u16 + 1u16 * 36u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 22950u16) / 36u16 % 3u16 * 36u16 + 2u16 * 36u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 22950u16) / 12u16 % 3u16 * 12u16 + 0u16 * 12u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 22950u16) / 12u16 % 3u16 * 12u16 + 1u16 * 12u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 22950u16) / 12u16 % 3u16 * 12u16 + 2u16 * 12u16)
                    }
                    _ => self,
                },
                PropName::Up => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 22950u16) / 6u16 % 2u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 22950u16) / 6u16 % 2u16 * 6u16 + 1u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 22950u16) / 3u16 % 2u16 * 3u16 + 0u16 * 3u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 22950u16) / 3u16 % 2u16 * 3u16 + 1u16 * 3u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 22950u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 22950u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 22950u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DeepslateTileStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 23275u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 23275u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 23275u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 23275u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 23275u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 23275u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 23275u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 23275u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 23275u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 23275u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 23275u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 23275u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 23275u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DeepslateTileSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 23355u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 23355u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 23355u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 23355u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 23355u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DeepslateTileWall => match name {
                PropName::East => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 23361u16) / 108u16 % 3u16 * 108u16 + 0u16 * 108u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 23361u16) / 108u16 % 3u16 * 108u16 + 1u16 * 108u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 23361u16) / 108u16 % 3u16 * 108u16 + 2u16 * 108u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 23361u16) / 36u16 % 3u16 * 36u16 + 0u16 * 36u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 23361u16) / 36u16 % 3u16 * 36u16 + 1u16 * 36u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 23361u16) / 36u16 % 3u16 * 36u16 + 2u16 * 36u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 23361u16) / 12u16 % 3u16 * 12u16 + 0u16 * 12u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 23361u16) / 12u16 % 3u16 * 12u16 + 1u16 * 12u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 23361u16) / 12u16 % 3u16 * 12u16 + 2u16 * 12u16)
                    }
                    _ => self,
                },
                PropName::Up => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 23361u16) / 6u16 % 2u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 23361u16) / 6u16 % 2u16 * 6u16 + 1u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 23361u16) / 3u16 % 2u16 * 3u16 + 0u16 * 3u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 23361u16) / 3u16 % 2u16 * 3u16 + 1u16 * 3u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 23361u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 23361u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 23361u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DeepslateBrickStairs => match name {
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 23686u16) / 20u16 % 4u16 * 20u16 + 0u16 * 20u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 23686u16) / 20u16 % 4u16 * 20u16 + 1u16 * 20u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 23686u16) / 20u16 % 4u16 * 20u16 + 2u16 * 20u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 23686u16) / 20u16 % 4u16 * 20u16 + 3u16 * 20u16)
                    }
                    _ => self,
                },
                PropName::Half => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 23686u16) / 10u16 % 2u16 * 10u16 + 0u16 * 10u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 23686u16) / 10u16 % 2u16 * 10u16 + 1u16 * 10u16)
                    }
                    _ => self,
                },
                PropName::Shape => match val {
                    PropValue::Straight => {
                        Self(self.0 - (self.0 - 23686u16) / 2u16 % 5u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::InnerLeft => {
                        Self(self.0 - (self.0 - 23686u16) / 2u16 % 5u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::InnerRight => {
                        Self(self.0 - (self.0 - 23686u16) / 2u16 % 5u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::OuterLeft => {
                        Self(self.0 - (self.0 - 23686u16) / 2u16 % 5u16 * 2u16 + 3u16 * 2u16)
                    }
                    PropValue::OuterRight => {
                        Self(self.0 - (self.0 - 23686u16) / 2u16 % 5u16 * 2u16 + 4u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 23686u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 23686u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DeepslateBrickSlab => match name {
                PropName::Type => match val {
                    PropValue::Top => {
                        Self(self.0 - (self.0 - 23766u16) / 2u16 % 3u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::Bottom => {
                        Self(self.0 - (self.0 - 23766u16) / 2u16 % 3u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::Double => {
                        Self(self.0 - (self.0 - 23766u16) / 2u16 % 3u16 * 2u16 + 2u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 23766u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 23766u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DeepslateBrickWall => match name {
                PropName::East => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 23772u16) / 108u16 % 3u16 * 108u16 + 0u16 * 108u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 23772u16) / 108u16 % 3u16 * 108u16 + 1u16 * 108u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 23772u16) / 108u16 % 3u16 * 108u16 + 2u16 * 108u16)
                    }
                    _ => self,
                },
                PropName::North => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 23772u16) / 36u16 % 3u16 * 36u16 + 0u16 * 36u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 23772u16) / 36u16 % 3u16 * 36u16 + 1u16 * 36u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 23772u16) / 36u16 % 3u16 * 36u16 + 2u16 * 36u16)
                    }
                    _ => self,
                },
                PropName::South => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 23772u16) / 12u16 % 3u16 * 12u16 + 0u16 * 12u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 23772u16) / 12u16 % 3u16 * 12u16 + 1u16 * 12u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 23772u16) / 12u16 % 3u16 * 12u16 + 2u16 * 12u16)
                    }
                    _ => self,
                },
                PropName::Up => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 23772u16) / 6u16 % 2u16 * 6u16 + 0u16 * 6u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 23772u16) / 6u16 % 2u16 * 6u16 + 1u16 * 6u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 23772u16) / 3u16 % 2u16 * 3u16 + 0u16 * 3u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 23772u16) / 3u16 % 2u16 * 3u16 + 1u16 * 3u16)
                    }
                    _ => self,
                },
                PropName::West => match val {
                    PropValue::None => {
                        Self(self.0 - (self.0 - 23772u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Low => {
                        Self(self.0 - (self.0 - 23772u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Tall => {
                        Self(self.0 - (self.0 - 23772u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::InfestedDeepslate => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 24099u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 24099u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 24099u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::OchreFroglight => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 24108u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 24108u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 24108u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::VerdantFroglight => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 24111u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 24111u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 24111u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::PearlescentFroglight => match name {
                PropName::Axis => match val {
                    PropValue::X => {
                        Self(self.0 - (self.0 - 24114u16) / 1u16 % 3u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::Y => {
                        Self(self.0 - (self.0 - 24114u16) / 1u16 % 3u16 * 1u16 + 1u16 * 1u16)
                    }
                    PropValue::Z => {
                        Self(self.0 - (self.0 - 24114u16) / 1u16 % 3u16 * 1u16 + 2u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            BlockKind::DecoratedPot => match name {
                PropName::Cracked => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 24119u16) / 8u16 % 2u16 * 8u16 + 0u16 * 8u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 24119u16) / 8u16 % 2u16 * 8u16 + 1u16 * 8u16)
                    }
                    _ => self,
                },
                PropName::Facing => match val {
                    PropValue::North => {
                        Self(self.0 - (self.0 - 24119u16) / 2u16 % 4u16 * 2u16 + 0u16 * 2u16)
                    }
                    PropValue::South => {
                        Self(self.0 - (self.0 - 24119u16) / 2u16 % 4u16 * 2u16 + 1u16 * 2u16)
                    }
                    PropValue::West => {
                        Self(self.0 - (self.0 - 24119u16) / 2u16 % 4u16 * 2u16 + 2u16 * 2u16)
                    }
                    PropValue::East => {
                        Self(self.0 - (self.0 - 24119u16) / 2u16 % 4u16 * 2u16 + 3u16 * 2u16)
                    }
                    _ => self,
                },
                PropName::Waterlogged => match val {
                    PropValue::True => {
                        Self(self.0 - (self.0 - 24119u16) / 1u16 % 2u16 * 1u16 + 0u16 * 1u16)
                    }
                    PropValue::False => {
                        Self(self.0 - (self.0 - 24119u16) / 1u16 % 2u16 * 1u16 + 1u16 * 1u16)
                    }
                    _ => self,
                },
                _ => self,
            },
            _ => self,
        }
    }
    #[doc = r" If this block is `air`, `cave_air` or `void_air`."]
    pub const fn is_air(self) -> bool {
        matches!(
            self,
            BlockState::AIR | BlockState::CAVE_AIR | BlockState::VOID_AIR
        )
    }
    #[doc = r" If this block is water or lava."]
    pub const fn is_liquid(self) -> bool {
        matches!(self.to_kind(), BlockKind::Water | BlockKind::Lava)
    }
    pub const fn is_opaque(self) -> bool {
        match self.0 {
            0u16 => false,
            25u16 => false,
            26u16 => false,
            27u16 => false,
            28u16 => false,
            29u16 => false,
            30u16 => false,
            31u16 => false,
            32u16 => false,
            33u16 => false,
            34u16 => false,
            35u16 => false,
            36u16 => false,
            37u16 => false,
            38u16 => false,
            39u16 => false,
            40u16 => false,
            41u16 => false,
            42u16 => false,
            43u16 => false,
            44u16 => false,
            45u16 => false,
            46u16 => false,
            47u16 => false,
            48u16 => false,
            49u16 => false,
            50u16 => false,
            51u16 => false,
            52u16 => false,
            53u16 => false,
            54u16 => false,
            55u16 => false,
            56u16 => false,
            57u16 => false,
            58u16 => false,
            59u16 => false,
            60u16 => false,
            61u16 => false,
            62u16 => false,
            63u16 => false,
            64u16 => false,
            65u16 => false,
            66u16 => false,
            67u16 => false,
            68u16 => false,
            69u16 => false,
            70u16 => false,
            71u16 => false,
            72u16 => false,
            73u16 => false,
            74u16 => false,
            75u16 => false,
            76u16 => false,
            77u16 => false,
            78u16 => false,
            80u16 => false,
            81u16 => false,
            82u16 => false,
            83u16 => false,
            84u16 => false,
            85u16 => false,
            86u16 => false,
            87u16 => false,
            88u16 => false,
            89u16 => false,
            90u16 => false,
            91u16 => false,
            92u16 => false,
            93u16 => false,
            94u16 => false,
            95u16 => false,
            96u16 => false,
            97u16 => false,
            98u16 => false,
            99u16 => false,
            100u16 => false,
            101u16 => false,
            102u16 => false,
            103u16 => false,
            104u16 => false,
            105u16 => false,
            106u16 => false,
            107u16 => false,
            108u16 => false,
            109u16 => false,
            110u16 => false,
            111u16 => false,
            154u16 => false,
            155u16 => false,
            237u16 => false,
            238u16 => false,
            239u16 => false,
            240u16 => false,
            241u16 => false,
            242u16 => false,
            243u16 => false,
            244u16 => false,
            245u16 => false,
            246u16 => false,
            247u16 => false,
            248u16 => false,
            249u16 => false,
            250u16 => false,
            251u16 => false,
            252u16 => false,
            253u16 => false,
            254u16 => false,
            255u16 => false,
            256u16 => false,
            257u16 => false,
            258u16 => false,
            259u16 => false,
            260u16 => false,
            261u16 => false,
            262u16 => false,
            263u16 => false,
            264u16 => false,
            265u16 => false,
            266u16 => false,
            267u16 => false,
            268u16 => false,
            269u16 => false,
            270u16 => false,
            271u16 => false,
            272u16 => false,
            273u16 => false,
            274u16 => false,
            275u16 => false,
            276u16 => false,
            277u16 => false,
            278u16 => false,
            279u16 => false,
            280u16 => false,
            281u16 => false,
            282u16 => false,
            283u16 => false,
            284u16 => false,
            285u16 => false,
            286u16 => false,
            287u16 => false,
            288u16 => false,
            289u16 => false,
            290u16 => false,
            291u16 => false,
            292u16 => false,
            293u16 => false,
            294u16 => false,
            295u16 => false,
            296u16 => false,
            297u16 => false,
            298u16 => false,
            299u16 => false,
            300u16 => false,
            301u16 => false,
            302u16 => false,
            303u16 => false,
            304u16 => false,
            305u16 => false,
            306u16 => false,
            307u16 => false,
            308u16 => false,
            309u16 => false,
            310u16 => false,
            311u16 => false,
            312u16 => false,
            313u16 => false,
            314u16 => false,
            315u16 => false,
            316u16 => false,
            317u16 => false,
            318u16 => false,
            319u16 => false,
            320u16 => false,
            321u16 => false,
            322u16 => false,
            323u16 => false,
            324u16 => false,
            325u16 => false,
            326u16 => false,
            327u16 => false,
            328u16 => false,
            329u16 => false,
            330u16 => false,
            331u16 => false,
            332u16 => false,
            333u16 => false,
            334u16 => false,
            335u16 => false,
            336u16 => false,
            337u16 => false,
            338u16 => false,
            339u16 => false,
            340u16 => false,
            341u16 => false,
            342u16 => false,
            343u16 => false,
            344u16 => false,
            345u16 => false,
            346u16 => false,
            347u16 => false,
            348u16 => false,
            349u16 => false,
            350u16 => false,
            351u16 => false,
            352u16 => false,
            353u16 => false,
            354u16 => false,
            355u16 => false,
            356u16 => false,
            357u16 => false,
            358u16 => false,
            359u16 => false,
            360u16 => false,
            361u16 => false,
            362u16 => false,
            363u16 => false,
            364u16 => false,
            365u16 => false,
            366u16 => false,
            367u16 => false,
            368u16 => false,
            369u16 => false,
            370u16 => false,
            371u16 => false,
            372u16 => false,
            373u16 => false,
            374u16 => false,
            375u16 => false,
            376u16 => false,
            377u16 => false,
            378u16 => false,
            379u16 => false,
            380u16 => false,
            381u16 => false,
            382u16 => false,
            383u16 => false,
            384u16 => false,
            385u16 => false,
            386u16 => false,
            387u16 => false,
            388u16 => false,
            389u16 => false,
            390u16 => false,
            391u16 => false,
            392u16 => false,
            393u16 => false,
            394u16 => false,
            395u16 => false,
            396u16 => false,
            397u16 => false,
            398u16 => false,
            399u16 => false,
            400u16 => false,
            401u16 => false,
            402u16 => false,
            403u16 => false,
            404u16 => false,
            405u16 => false,
            406u16 => false,
            407u16 => false,
            408u16 => false,
            409u16 => false,
            410u16 => false,
            411u16 => false,
            412u16 => false,
            413u16 => false,
            414u16 => false,
            415u16 => false,
            416u16 => false,
            417u16 => false,
            418u16 => false,
            419u16 => false,
            420u16 => false,
            421u16 => false,
            422u16 => false,
            423u16 => false,
            424u16 => false,
            425u16 => false,
            426u16 => false,
            427u16 => false,
            428u16 => false,
            429u16 => false,
            430u16 => false,
            431u16 => false,
            432u16 => false,
            433u16 => false,
            434u16 => false,
            435u16 => false,
            436u16 => false,
            437u16 => false,
            438u16 => false,
            439u16 => false,
            440u16 => false,
            441u16 => false,
            442u16 => false,
            443u16 => false,
            444u16 => false,
            445u16 => false,
            446u16 => false,
            447u16 => false,
            448u16 => false,
            449u16 => false,
            450u16 => false,
            451u16 => false,
            452u16 => false,
            453u16 => false,
            454u16 => false,
            455u16 => false,
            456u16 => false,
            457u16 => false,
            458u16 => false,
            459u16 => false,
            460u16 => false,
            461u16 => false,
            462u16 => false,
            463u16 => false,
            464u16 => false,
            465u16 => false,
            466u16 => false,
            467u16 => false,
            468u16 => false,
            469u16 => false,
            470u16 => false,
            471u16 => false,
            472u16 => false,
            473u16 => false,
            474u16 => false,
            475u16 => false,
            476u16 => false,
            477u16 => false,
            478u16 => false,
            479u16 => false,
            480u16 => false,
            481u16 => false,
            482u16 => false,
            483u16 => false,
            484u16 => false,
            485u16 => false,
            486u16 => false,
            487u16 => false,
            488u16 => false,
            489u16 => false,
            490u16 => false,
            491u16 => false,
            492u16 => false,
            493u16 => false,
            494u16 => false,
            495u16 => false,
            496u16 => false,
            497u16 => false,
            498u16 => false,
            499u16 => false,
            500u16 => false,
            501u16 => false,
            502u16 => false,
            503u16 => false,
            504u16 => false,
            505u16 => false,
            506u16 => false,
            507u16 => false,
            508u16 => false,
            509u16 => false,
            510u16 => false,
            511u16 => false,
            512u16 => false,
            513u16 => false,
            514u16 => false,
            515u16 => false,
            516u16 => false,
            519u16 => false,
            1688u16 => false,
            1689u16 => false,
            1690u16 => false,
            1691u16 => false,
            1692u16 => false,
            1693u16 => false,
            1694u16 => false,
            1695u16 => false,
            1696u16 => false,
            1697u16 => false,
            1698u16 => false,
            1699u16 => false,
            1700u16 => false,
            1701u16 => false,
            1702u16 => false,
            1703u16 => false,
            1704u16 => false,
            1705u16 => false,
            1706u16 => false,
            1707u16 => false,
            1708u16 => false,
            1709u16 => false,
            1710u16 => false,
            1711u16 => false,
            1712u16 => false,
            1713u16 => false,
            1714u16 => false,
            1715u16 => false,
            1716u16 => false,
            1717u16 => false,
            1718u16 => false,
            1719u16 => false,
            1720u16 => false,
            1721u16 => false,
            1722u16 => false,
            1723u16 => false,
            1724u16 => false,
            1725u16 => false,
            1726u16 => false,
            1727u16 => false,
            1728u16 => false,
            1729u16 => false,
            1730u16 => false,
            1731u16 => false,
            1732u16 => false,
            1733u16 => false,
            1734u16 => false,
            1735u16 => false,
            1736u16 => false,
            1737u16 => false,
            1738u16 => false,
            1739u16 => false,
            1740u16 => false,
            1741u16 => false,
            1742u16 => false,
            1743u16 => false,
            1744u16 => false,
            1745u16 => false,
            1746u16 => false,
            1747u16 => false,
            1748u16 => false,
            1749u16 => false,
            1750u16 => false,
            1751u16 => false,
            1752u16 => false,
            1753u16 => false,
            1754u16 => false,
            1755u16 => false,
            1756u16 => false,
            1757u16 => false,
            1758u16 => false,
            1759u16 => false,
            1760u16 => false,
            1761u16 => false,
            1762u16 => false,
            1763u16 => false,
            1764u16 => false,
            1765u16 => false,
            1766u16 => false,
            1767u16 => false,
            1768u16 => false,
            1769u16 => false,
            1770u16 => false,
            1771u16 => false,
            1772u16 => false,
            1773u16 => false,
            1774u16 => false,
            1775u16 => false,
            1776u16 => false,
            1777u16 => false,
            1778u16 => false,
            1779u16 => false,
            1780u16 => false,
            1781u16 => false,
            1782u16 => false,
            1783u16 => false,
            1784u16 => false,
            1785u16 => false,
            1786u16 => false,
            1787u16 => false,
            1788u16 => false,
            1789u16 => false,
            1790u16 => false,
            1791u16 => false,
            1792u16 => false,
            1793u16 => false,
            1794u16 => false,
            1795u16 => false,
            1796u16 => false,
            1797u16 => false,
            1798u16 => false,
            1799u16 => false,
            1800u16 => false,
            1801u16 => false,
            1802u16 => false,
            1803u16 => false,
            1804u16 => false,
            1805u16 => false,
            1806u16 => false,
            1807u16 => false,
            1808u16 => false,
            1809u16 => false,
            1810u16 => false,
            1811u16 => false,
            1812u16 => false,
            1813u16 => false,
            1814u16 => false,
            1815u16 => false,
            1816u16 => false,
            1817u16 => false,
            1818u16 => false,
            1819u16 => false,
            1820u16 => false,
            1821u16 => false,
            1822u16 => false,
            1823u16 => false,
            1824u16 => false,
            1825u16 => false,
            1826u16 => false,
            1827u16 => false,
            1828u16 => false,
            1829u16 => false,
            1830u16 => false,
            1831u16 => false,
            1832u16 => false,
            1833u16 => false,
            1834u16 => false,
            1835u16 => false,
            1836u16 => false,
            1837u16 => false,
            1838u16 => false,
            1839u16 => false,
            1840u16 => false,
            1841u16 => false,
            1842u16 => false,
            1843u16 => false,
            1844u16 => false,
            1845u16 => false,
            1846u16 => false,
            1847u16 => false,
            1848u16 => false,
            1849u16 => false,
            1850u16 => false,
            1851u16 => false,
            1852u16 => false,
            1853u16 => false,
            1854u16 => false,
            1855u16 => false,
            1856u16 => false,
            1857u16 => false,
            1858u16 => false,
            1859u16 => false,
            1860u16 => false,
            1861u16 => false,
            1862u16 => false,
            1863u16 => false,
            1864u16 => false,
            1865u16 => false,
            1866u16 => false,
            1867u16 => false,
            1868u16 => false,
            1869u16 => false,
            1870u16 => false,
            1871u16 => false,
            1872u16 => false,
            1873u16 => false,
            1874u16 => false,
            1875u16 => false,
            1876u16 => false,
            1877u16 => false,
            1878u16 => false,
            1879u16 => false,
            1880u16 => false,
            1881u16 => false,
            1882u16 => false,
            1883u16 => false,
            1884u16 => false,
            1885u16 => false,
            1886u16 => false,
            1887u16 => false,
            1888u16 => false,
            1889u16 => false,
            1890u16 => false,
            1891u16 => false,
            1892u16 => false,
            1893u16 => false,
            1894u16 => false,
            1895u16 => false,
            1896u16 => false,
            1897u16 => false,
            1898u16 => false,
            1899u16 => false,
            1900u16 => false,
            1901u16 => false,
            1902u16 => false,
            1903u16 => false,
            1904u16 => false,
            1905u16 => false,
            1906u16 => false,
            1907u16 => false,
            1908u16 => false,
            1909u16 => false,
            1910u16 => false,
            1911u16 => false,
            1912u16 => false,
            1913u16 => false,
            1914u16 => false,
            1915u16 => false,
            1916u16 => false,
            1917u16 => false,
            1918u16 => false,
            1919u16 => false,
            1920u16 => false,
            1921u16 => false,
            1922u16 => false,
            1923u16 => false,
            1924u16 => false,
            1925u16 => false,
            1926u16 => false,
            1927u16 => false,
            1928u16 => false,
            1929u16 => false,
            1930u16 => false,
            1931u16 => false,
            1932u16 => false,
            1933u16 => false,
            1934u16 => false,
            1935u16 => false,
            1936u16 => false,
            1937u16 => false,
            1938u16 => false,
            1939u16 => false,
            1940u16 => false,
            1941u16 => false,
            1942u16 => false,
            1943u16 => false,
            1944u16 => false,
            1945u16 => false,
            1946u16 => false,
            1947u16 => false,
            1948u16 => false,
            1949u16 => false,
            1950u16 => false,
            1951u16 => false,
            1952u16 => false,
            1953u16 => false,
            1954u16 => false,
            1955u16 => false,
            1956u16 => false,
            1957u16 => false,
            1958u16 => false,
            1959u16 => false,
            1960u16 => false,
            1961u16 => false,
            1962u16 => false,
            1963u16 => false,
            1964u16 => false,
            1965u16 => false,
            1966u16 => false,
            1967u16 => false,
            1968u16 => false,
            1969u16 => false,
            1970u16 => false,
            1971u16 => false,
            1972u16 => false,
            1973u16 => false,
            1974u16 => false,
            1975u16 => false,
            1976u16 => false,
            1977u16 => false,
            1978u16 => false,
            1979u16 => false,
            1980u16 => false,
            1981u16 => false,
            1982u16 => false,
            1983u16 => false,
            1984u16 => false,
            1985u16 => false,
            1986u16 => false,
            1987u16 => false,
            1988u16 => false,
            1989u16 => false,
            1990u16 => false,
            1991u16 => false,
            2004u16 => false,
            2005u16 => false,
            2006u16 => false,
            2007u16 => false,
            2008u16 => false,
            2009u16 => false,
            2010u16 => false,
            2063u16 => false,
            2064u16 => false,
            2065u16 => false,
            2066u16 => false,
            2067u16 => false,
            2068u16 => false,
            2069u16 => false,
            2070u16 => false,
            2071u16 => false,
            2072u16 => false,
            2073u16 => false,
            2074u16 => false,
            2075u16 => false,
            2076u16 => false,
            2077u16 => false,
            2078u16 => false,
            2079u16 => false,
            2080u16 => false,
            2081u16 => false,
            2082u16 => false,
            2083u16 => false,
            2084u16 => false,
            2085u16 => false,
            2086u16 => false,
            2087u16 => false,
            2088u16 => false,
            2089u16 => false,
            2090u16 => false,
            2355u16 => false,
            2356u16 => false,
            2357u16 => false,
            2358u16 => false,
            2359u16 => false,
            2360u16 => false,
            2361u16 => false,
            2362u16 => false,
            2363u16 => false,
            2364u16 => false,
            2365u16 => false,
            2366u16 => false,
            2367u16 => false,
            2368u16 => false,
            2369u16 => false,
            2370u16 => false,
            2371u16 => false,
            2372u16 => false,
            2373u16 => false,
            2374u16 => false,
            2375u16 => false,
            2376u16 => false,
            2377u16 => false,
            2378u16 => false,
            2379u16 => false,
            2380u16 => false,
            2381u16 => false,
            2382u16 => false,
            2383u16 => false,
            2384u16 => false,
            2385u16 => false,
            2386u16 => false,
            2387u16 => false,
            2388u16 => false,
            2389u16 => false,
            2390u16 => false,
            2391u16 => false,
            2392u16 => false,
            2393u16 => false,
            2394u16 => false,
            2395u16 => false,
            2396u16 => false,
            2397u16 => false,
            2398u16 => false,
            2399u16 => false,
            2400u16 => false,
            2401u16 => false,
            2402u16 => false,
            2403u16 => false,
            2404u16 => false,
            2405u16 => false,
            2406u16 => false,
            2407u16 => false,
            2408u16 => false,
            2409u16 => false,
            2410u16 => false,
            2411u16 => false,
            2412u16 => false,
            2413u16 => false,
            2414u16 => false,
            2415u16 => false,
            2416u16 => false,
            2417u16 => false,
            2418u16 => false,
            2419u16 => false,
            2420u16 => false,
            2421u16 => false,
            2422u16 => false,
            2423u16 => false,
            2424u16 => false,
            2425u16 => false,
            2426u16 => false,
            2427u16 => false,
            2428u16 => false,
            2429u16 => false,
            2430u16 => false,
            2431u16 => false,
            2432u16 => false,
            2433u16 => false,
            2434u16 => false,
            2435u16 => false,
            2436u16 => false,
            2437u16 => false,
            2438u16 => false,
            2439u16 => false,
            2440u16 => false,
            2441u16 => false,
            2442u16 => false,
            2443u16 => false,
            2444u16 => false,
            2445u16 => false,
            2446u16 => false,
            2447u16 => false,
            2448u16 => false,
            2449u16 => false,
            2450u16 => false,
            2451u16 => false,
            2452u16 => false,
            2453u16 => false,
            2454u16 => false,
            2455u16 => false,
            2456u16 => false,
            2457u16 => false,
            2458u16 => false,
            2459u16 => false,
            2460u16 => false,
            2461u16 => false,
            2462u16 => false,
            2463u16 => false,
            2464u16 => false,
            2465u16 => false,
            2466u16 => false,
            2467u16 => false,
            2468u16 => false,
            2469u16 => false,
            2470u16 => false,
            2471u16 => false,
            2472u16 => false,
            2473u16 => false,
            2474u16 => false,
            2475u16 => false,
            2476u16 => false,
            2477u16 => false,
            2478u16 => false,
            2479u16 => false,
            2480u16 => false,
            2481u16 => false,
            2482u16 => false,
            2483u16 => false,
            2484u16 => false,
            2485u16 => false,
            2486u16 => false,
            2487u16 => false,
            2488u16 => false,
            2489u16 => false,
            2490u16 => false,
            2491u16 => false,
            2492u16 => false,
            2493u16 => false,
            2494u16 => false,
            2495u16 => false,
            2496u16 => false,
            2497u16 => false,
            2498u16 => false,
            2499u16 => false,
            2500u16 => false,
            2501u16 => false,
            2502u16 => false,
            2503u16 => false,
            2504u16 => false,
            2505u16 => false,
            2506u16 => false,
            2507u16 => false,
            2508u16 => false,
            2509u16 => false,
            2510u16 => false,
            2511u16 => false,
            2512u16 => false,
            2513u16 => false,
            2514u16 => false,
            2515u16 => false,
            2516u16 => false,
            2517u16 => false,
            2518u16 => false,
            2519u16 => false,
            2520u16 => false,
            2521u16 => false,
            2522u16 => false,
            2523u16 => false,
            2524u16 => false,
            2525u16 => false,
            2526u16 => false,
            2527u16 => false,
            2528u16 => false,
            2529u16 => false,
            2530u16 => false,
            2531u16 => false,
            2532u16 => false,
            2533u16 => false,
            2534u16 => false,
            2535u16 => false,
            2536u16 => false,
            2537u16 => false,
            2538u16 => false,
            2539u16 => false,
            2540u16 => false,
            2541u16 => false,
            2542u16 => false,
            2543u16 => false,
            2544u16 => false,
            2545u16 => false,
            2546u16 => false,
            2547u16 => false,
            2548u16 => false,
            2549u16 => false,
            2550u16 => false,
            2551u16 => false,
            2552u16 => false,
            2553u16 => false,
            2554u16 => false,
            2555u16 => false,
            2556u16 => false,
            2557u16 => false,
            2558u16 => false,
            2559u16 => false,
            2560u16 => false,
            2561u16 => false,
            2562u16 => false,
            2563u16 => false,
            2564u16 => false,
            2565u16 => false,
            2566u16 => false,
            2567u16 => false,
            2568u16 => false,
            2569u16 => false,
            2570u16 => false,
            2571u16 => false,
            2572u16 => false,
            2573u16 => false,
            2574u16 => false,
            2575u16 => false,
            2576u16 => false,
            2577u16 => false,
            2578u16 => false,
            2579u16 => false,
            2580u16 => false,
            2581u16 => false,
            2582u16 => false,
            2583u16 => false,
            2584u16 => false,
            2585u16 => false,
            2586u16 => false,
            2587u16 => false,
            2588u16 => false,
            2589u16 => false,
            2590u16 => false,
            2591u16 => false,
            2592u16 => false,
            2593u16 => false,
            2594u16 => false,
            2595u16 => false,
            2596u16 => false,
            2597u16 => false,
            2598u16 => false,
            2599u16 => false,
            2600u16 => false,
            2601u16 => false,
            2602u16 => false,
            2603u16 => false,
            2604u16 => false,
            2605u16 => false,
            2606u16 => false,
            2607u16 => false,
            2608u16 => false,
            2609u16 => false,
            2610u16 => false,
            2611u16 => false,
            2612u16 => false,
            2613u16 => false,
            2614u16 => false,
            2615u16 => false,
            2616u16 => false,
            2617u16 => false,
            2618u16 => false,
            2619u16 => false,
            2620u16 => false,
            2621u16 => false,
            2622u16 => false,
            2623u16 => false,
            2624u16 => false,
            2625u16 => false,
            2626u16 => false,
            2627u16 => false,
            2628u16 => false,
            2629u16 => false,
            2630u16 => false,
            2631u16 => false,
            2632u16 => false,
            2633u16 => false,
            2634u16 => false,
            2635u16 => false,
            2636u16 => false,
            2637u16 => false,
            2638u16 => false,
            2639u16 => false,
            2640u16 => false,
            2641u16 => false,
            2642u16 => false,
            2643u16 => false,
            2644u16 => false,
            2645u16 => false,
            2646u16 => false,
            2647u16 => false,
            2648u16 => false,
            2649u16 => false,
            2650u16 => false,
            2651u16 => false,
            2652u16 => false,
            2653u16 => false,
            2654u16 => false,
            2655u16 => false,
            2656u16 => false,
            2657u16 => false,
            2658u16 => false,
            2659u16 => false,
            2660u16 => false,
            2661u16 => false,
            2662u16 => false,
            2663u16 => false,
            2664u16 => false,
            2665u16 => false,
            2666u16 => false,
            2667u16 => false,
            2668u16 => false,
            2669u16 => false,
            2670u16 => false,
            2671u16 => false,
            2672u16 => false,
            2673u16 => false,
            2674u16 => false,
            2675u16 => false,
            2676u16 => false,
            2677u16 => false,
            2678u16 => false,
            2679u16 => false,
            2680u16 => false,
            2681u16 => false,
            2682u16 => false,
            2683u16 => false,
            2684u16 => false,
            2685u16 => false,
            2686u16 => false,
            2687u16 => false,
            2688u16 => false,
            2689u16 => false,
            2690u16 => false,
            2691u16 => false,
            2692u16 => false,
            2693u16 => false,
            2694u16 => false,
            2695u16 => false,
            2696u16 => false,
            2697u16 => false,
            2698u16 => false,
            2699u16 => false,
            2700u16 => false,
            2701u16 => false,
            2702u16 => false,
            2703u16 => false,
            2704u16 => false,
            2705u16 => false,
            2706u16 => false,
            2707u16 => false,
            2708u16 => false,
            2709u16 => false,
            2710u16 => false,
            2711u16 => false,
            2712u16 => false,
            2713u16 => false,
            2714u16 => false,
            2715u16 => false,
            2716u16 => false,
            2717u16 => false,
            2718u16 => false,
            2719u16 => false,
            2720u16 => false,
            2721u16 => false,
            2722u16 => false,
            2723u16 => false,
            2724u16 => false,
            2725u16 => false,
            2726u16 => false,
            2727u16 => false,
            2728u16 => false,
            2729u16 => false,
            2730u16 => false,
            2731u16 => false,
            2732u16 => false,
            2733u16 => false,
            2734u16 => false,
            2735u16 => false,
            2736u16 => false,
            2737u16 => false,
            2738u16 => false,
            2739u16 => false,
            2740u16 => false,
            2741u16 => false,
            2742u16 => false,
            2743u16 => false,
            2744u16 => false,
            2745u16 => false,
            2746u16 => false,
            2747u16 => false,
            2748u16 => false,
            2749u16 => false,
            2750u16 => false,
            2751u16 => false,
            2752u16 => false,
            2753u16 => false,
            2754u16 => false,
            2755u16 => false,
            2756u16 => false,
            2757u16 => false,
            2758u16 => false,
            2759u16 => false,
            2760u16 => false,
            2761u16 => false,
            2762u16 => false,
            2763u16 => false,
            2764u16 => false,
            2765u16 => false,
            2766u16 => false,
            2767u16 => false,
            2768u16 => false,
            2769u16 => false,
            2770u16 => false,
            2771u16 => false,
            2772u16 => false,
            2773u16 => false,
            2774u16 => false,
            2775u16 => false,
            2776u16 => false,
            2777u16 => false,
            2778u16 => false,
            2779u16 => false,
            2780u16 => false,
            2781u16 => false,
            2782u16 => false,
            2783u16 => false,
            2784u16 => false,
            2785u16 => false,
            2786u16 => false,
            2787u16 => false,
            2788u16 => false,
            2789u16 => false,
            2790u16 => false,
            2791u16 => false,
            2792u16 => false,
            2793u16 => false,
            2794u16 => false,
            2795u16 => false,
            2796u16 => false,
            2797u16 => false,
            2798u16 => false,
            2799u16 => false,
            2800u16 => false,
            2801u16 => false,
            2802u16 => false,
            2803u16 => false,
            2804u16 => false,
            2805u16 => false,
            2806u16 => false,
            2807u16 => false,
            2808u16 => false,
            2809u16 => false,
            2810u16 => false,
            2811u16 => false,
            2812u16 => false,
            2813u16 => false,
            2814u16 => false,
            2815u16 => false,
            2816u16 => false,
            2817u16 => false,
            2818u16 => false,
            2819u16 => false,
            2820u16 => false,
            2821u16 => false,
            2822u16 => false,
            2823u16 => false,
            2824u16 => false,
            2825u16 => false,
            2826u16 => false,
            2827u16 => false,
            2828u16 => false,
            2829u16 => false,
            2830u16 => false,
            2831u16 => false,
            2832u16 => false,
            2833u16 => false,
            2834u16 => false,
            2835u16 => false,
            2836u16 => false,
            2837u16 => false,
            2838u16 => false,
            2839u16 => false,
            2840u16 => false,
            2841u16 => false,
            2842u16 => false,
            2843u16 => false,
            2844u16 => false,
            2845u16 => false,
            2846u16 => false,
            2847u16 => false,
            2848u16 => false,
            2849u16 => false,
            2850u16 => false,
            2851u16 => false,
            2852u16 => false,
            2853u16 => false,
            2854u16 => false,
            2855u16 => false,
            2856u16 => false,
            2857u16 => false,
            2858u16 => false,
            2859u16 => false,
            2860u16 => false,
            2861u16 => false,
            2862u16 => false,
            2863u16 => false,
            2864u16 => false,
            2865u16 => false,
            2866u16 => false,
            2867u16 => false,
            2868u16 => false,
            2869u16 => false,
            2870u16 => false,
            2871u16 => false,
            2872u16 => false,
            2873u16 => false,
            2978u16 => false,
            2979u16 => false,
            2980u16 => false,
            2981u16 => false,
            2982u16 => false,
            2983u16 => false,
            2984u16 => false,
            2985u16 => false,
            2986u16 => false,
            2987u16 => false,
            2988u16 => false,
            2989u16 => false,
            2990u16 => false,
            2991u16 => false,
            2992u16 => false,
            2993u16 => false,
            2994u16 => false,
            2995u16 => false,
            2996u16 => false,
            2997u16 => false,
            2998u16 => false,
            2999u16 => false,
            3000u16 => false,
            3001u16 => false,
            3002u16 => false,
            3003u16 => false,
            3004u16 => false,
            3005u16 => false,
            3006u16 => false,
            3007u16 => false,
            3008u16 => false,
            3009u16 => false,
            3010u16 => false,
            3011u16 => false,
            3012u16 => false,
            3013u16 => false,
            3014u16 => false,
            3015u16 => false,
            3016u16 => false,
            3017u16 => false,
            3018u16 => false,
            3019u16 => false,
            3020u16 => false,
            3021u16 => false,
            3022u16 => false,
            3023u16 => false,
            3024u16 => false,
            3025u16 => false,
            3026u16 => false,
            3027u16 => false,
            3028u16 => false,
            3029u16 => false,
            3030u16 => false,
            3031u16 => false,
            3032u16 => false,
            3033u16 => false,
            3034u16 => false,
            3035u16 => false,
            3036u16 => false,
            3037u16 => false,
            3038u16 => false,
            3039u16 => false,
            3040u16 => false,
            3041u16 => false,
            3042u16 => false,
            3043u16 => false,
            3044u16 => false,
            3045u16 => false,
            3046u16 => false,
            3047u16 => false,
            3048u16 => false,
            3049u16 => false,
            3050u16 => false,
            3051u16 => false,
            3052u16 => false,
            3053u16 => false,
            3054u16 => false,
            3055u16 => false,
            3056u16 => false,
            3057u16 => false,
            3058u16 => false,
            3059u16 => false,
            3060u16 => false,
            3061u16 => false,
            3062u16 => false,
            3063u16 => false,
            3064u16 => false,
            3065u16 => false,
            3066u16 => false,
            3067u16 => false,
            3068u16 => false,
            3069u16 => false,
            3070u16 => false,
            3071u16 => false,
            3072u16 => false,
            3073u16 => false,
            3074u16 => false,
            3075u16 => false,
            3076u16 => false,
            3077u16 => false,
            3078u16 => false,
            3079u16 => false,
            3080u16 => false,
            3081u16 => false,
            3082u16 => false,
            3083u16 => false,
            3084u16 => false,
            3085u16 => false,
            3086u16 => false,
            3087u16 => false,
            3088u16 => false,
            3089u16 => false,
            3090u16 => false,
            3091u16 => false,
            3092u16 => false,
            3093u16 => false,
            3094u16 => false,
            3095u16 => false,
            3096u16 => false,
            3097u16 => false,
            3098u16 => false,
            3099u16 => false,
            3100u16 => false,
            3101u16 => false,
            3102u16 => false,
            3103u16 => false,
            3104u16 => false,
            3105u16 => false,
            3106u16 => false,
            3107u16 => false,
            3108u16 => false,
            3109u16 => false,
            3110u16 => false,
            3111u16 => false,
            3112u16 => false,
            3113u16 => false,
            3114u16 => false,
            3115u16 => false,
            3116u16 => false,
            3117u16 => false,
            3118u16 => false,
            3119u16 => false,
            3120u16 => false,
            3121u16 => false,
            3122u16 => false,
            3123u16 => false,
            3124u16 => false,
            3125u16 => false,
            3126u16 => false,
            3127u16 => false,
            3128u16 => false,
            3129u16 => false,
            3130u16 => false,
            3131u16 => false,
            3132u16 => false,
            3133u16 => false,
            3134u16 => false,
            3135u16 => false,
            3136u16 => false,
            3137u16 => false,
            3138u16 => false,
            3139u16 => false,
            3140u16 => false,
            3141u16 => false,
            3142u16 => false,
            3143u16 => false,
            3144u16 => false,
            3145u16 => false,
            3146u16 => false,
            3147u16 => false,
            3148u16 => false,
            3149u16 => false,
            3150u16 => false,
            3151u16 => false,
            3152u16 => false,
            3153u16 => false,
            3154u16 => false,
            3155u16 => false,
            3156u16 => false,
            3157u16 => false,
            3158u16 => false,
            3159u16 => false,
            3160u16 => false,
            3161u16 => false,
            3162u16 => false,
            3163u16 => false,
            3164u16 => false,
            3165u16 => false,
            3166u16 => false,
            3167u16 => false,
            3168u16 => false,
            3169u16 => false,
            3170u16 => false,
            3171u16 => false,
            3172u16 => false,
            3173u16 => false,
            3174u16 => false,
            3175u16 => false,
            3176u16 => false,
            3177u16 => false,
            3178u16 => false,
            3179u16 => false,
            3180u16 => false,
            3181u16 => false,
            3182u16 => false,
            3183u16 => false,
            3184u16 => false,
            3185u16 => false,
            3186u16 => false,
            3187u16 => false,
            3188u16 => false,
            3189u16 => false,
            3190u16 => false,
            3191u16 => false,
            3192u16 => false,
            3193u16 => false,
            3194u16 => false,
            3195u16 => false,
            3196u16 => false,
            3197u16 => false,
            3198u16 => false,
            3199u16 => false,
            3200u16 => false,
            3201u16 => false,
            3202u16 => false,
            3203u16 => false,
            3204u16 => false,
            3205u16 => false,
            3206u16 => false,
            3207u16 => false,
            3208u16 => false,
            3209u16 => false,
            3210u16 => false,
            3211u16 => false,
            3212u16 => false,
            3213u16 => false,
            3214u16 => false,
            3215u16 => false,
            3216u16 => false,
            3217u16 => false,
            3218u16 => false,
            3219u16 => false,
            3220u16 => false,
            3221u16 => false,
            3222u16 => false,
            3223u16 => false,
            3224u16 => false,
            3225u16 => false,
            3226u16 => false,
            3227u16 => false,
            3228u16 => false,
            3229u16 => false,
            3230u16 => false,
            3231u16 => false,
            3232u16 => false,
            3233u16 => false,
            3234u16 => false,
            3235u16 => false,
            3236u16 => false,
            3237u16 => false,
            3238u16 => false,
            3239u16 => false,
            3240u16 => false,
            3241u16 => false,
            3242u16 => false,
            3243u16 => false,
            3244u16 => false,
            3245u16 => false,
            3246u16 => false,
            3247u16 => false,
            3248u16 => false,
            3249u16 => false,
            3250u16 => false,
            3251u16 => false,
            3252u16 => false,
            3253u16 => false,
            3254u16 => false,
            3255u16 => false,
            3256u16 => false,
            3257u16 => false,
            3258u16 => false,
            3259u16 => false,
            3260u16 => false,
            3261u16 => false,
            3262u16 => false,
            3263u16 => false,
            3264u16 => false,
            3265u16 => false,
            3266u16 => false,
            3267u16 => false,
            3268u16 => false,
            3269u16 => false,
            3270u16 => false,
            3271u16 => false,
            3272u16 => false,
            3273u16 => false,
            3274u16 => false,
            3275u16 => false,
            3276u16 => false,
            3277u16 => false,
            3278u16 => false,
            3279u16 => false,
            3280u16 => false,
            3281u16 => false,
            3282u16 => false,
            3283u16 => false,
            3284u16 => false,
            3285u16 => false,
            3286u16 => false,
            3287u16 => false,
            3288u16 => false,
            3289u16 => false,
            3290u16 => false,
            3291u16 => false,
            3292u16 => false,
            3293u16 => false,
            3294u16 => false,
            3295u16 => false,
            3296u16 => false,
            3297u16 => false,
            3298u16 => false,
            3299u16 => false,
            3300u16 => false,
            3301u16 => false,
            3302u16 => false,
            3303u16 => false,
            3304u16 => false,
            3305u16 => false,
            3306u16 => false,
            3307u16 => false,
            3308u16 => false,
            3309u16 => false,
            3310u16 => false,
            3311u16 => false,
            3312u16 => false,
            3313u16 => false,
            3314u16 => false,
            3315u16 => false,
            3316u16 => false,
            3317u16 => false,
            3318u16 => false,
            3319u16 => false,
            3320u16 => false,
            3321u16 => false,
            3322u16 => false,
            3323u16 => false,
            3324u16 => false,
            3325u16 => false,
            3326u16 => false,
            3327u16 => false,
            3328u16 => false,
            3329u16 => false,
            3330u16 => false,
            3331u16 => false,
            3332u16 => false,
            3333u16 => false,
            3334u16 => false,
            3335u16 => false,
            3336u16 => false,
            3337u16 => false,
            3338u16 => false,
            3339u16 => false,
            3340u16 => false,
            3341u16 => false,
            3342u16 => false,
            3343u16 => false,
            3344u16 => false,
            3345u16 => false,
            3346u16 => false,
            3347u16 => false,
            3348u16 => false,
            3349u16 => false,
            3350u16 => false,
            3351u16 => false,
            3352u16 => false,
            3353u16 => false,
            3354u16 => false,
            3355u16 => false,
            3356u16 => false,
            3357u16 => false,
            3358u16 => false,
            3359u16 => false,
            3360u16 => false,
            3361u16 => false,
            3362u16 => false,
            3363u16 => false,
            3364u16 => false,
            3365u16 => false,
            3366u16 => false,
            3367u16 => false,
            3368u16 => false,
            3369u16 => false,
            3370u16 => false,
            3371u16 => false,
            3372u16 => false,
            3373u16 => false,
            3374u16 => false,
            3375u16 => false,
            3376u16 => false,
            3377u16 => false,
            3378u16 => false,
            3379u16 => false,
            3380u16 => false,
            3381u16 => false,
            3382u16 => false,
            3383u16 => false,
            3384u16 => false,
            3385u16 => false,
            3386u16 => false,
            3387u16 => false,
            3388u16 => false,
            3389u16 => false,
            3390u16 => false,
            3391u16 => false,
            3392u16 => false,
            3393u16 => false,
            3394u16 => false,
            3395u16 => false,
            3396u16 => false,
            3397u16 => false,
            3398u16 => false,
            3399u16 => false,
            3400u16 => false,
            3401u16 => false,
            3402u16 => false,
            3403u16 => false,
            3404u16 => false,
            3405u16 => false,
            3406u16 => false,
            3407u16 => false,
            3408u16 => false,
            3409u16 => false,
            3410u16 => false,
            3411u16 => false,
            3412u16 => false,
            3413u16 => false,
            3414u16 => false,
            3415u16 => false,
            3416u16 => false,
            3417u16 => false,
            3418u16 => false,
            3419u16 => false,
            3420u16 => false,
            3421u16 => false,
            3422u16 => false,
            3423u16 => false,
            3424u16 => false,
            3425u16 => false,
            3426u16 => false,
            3427u16 => false,
            3428u16 => false,
            3429u16 => false,
            3430u16 => false,
            3431u16 => false,
            3432u16 => false,
            3433u16 => false,
            3434u16 => false,
            3435u16 => false,
            3436u16 => false,
            3437u16 => false,
            3438u16 => false,
            3439u16 => false,
            3440u16 => false,
            3441u16 => false,
            3442u16 => false,
            3443u16 => false,
            3444u16 => false,
            3445u16 => false,
            3446u16 => false,
            3447u16 => false,
            3448u16 => false,
            3449u16 => false,
            3450u16 => false,
            3451u16 => false,
            3452u16 => false,
            3453u16 => false,
            3454u16 => false,
            3455u16 => false,
            3456u16 => false,
            3457u16 => false,
            3458u16 => false,
            3459u16 => false,
            3460u16 => false,
            3461u16 => false,
            3462u16 => false,
            3463u16 => false,
            3464u16 => false,
            3465u16 => false,
            3466u16 => false,
            3467u16 => false,
            3468u16 => false,
            3469u16 => false,
            3470u16 => false,
            3471u16 => false,
            3472u16 => false,
            3473u16 => false,
            3474u16 => false,
            3475u16 => false,
            3476u16 => false,
            3477u16 => false,
            3478u16 => false,
            3479u16 => false,
            3480u16 => false,
            3481u16 => false,
            3482u16 => false,
            3483u16 => false,
            3484u16 => false,
            3485u16 => false,
            3486u16 => false,
            3487u16 => false,
            3488u16 => false,
            3489u16 => false,
            3490u16 => false,
            3491u16 => false,
            3492u16 => false,
            3493u16 => false,
            3494u16 => false,
            3495u16 => false,
            3496u16 => false,
            3497u16 => false,
            3498u16 => false,
            3499u16 => false,
            3500u16 => false,
            3501u16 => false,
            3502u16 => false,
            3503u16 => false,
            3504u16 => false,
            3505u16 => false,
            3506u16 => false,
            3507u16 => false,
            3508u16 => false,
            3509u16 => false,
            3510u16 => false,
            3511u16 => false,
            3512u16 => false,
            3513u16 => false,
            3514u16 => false,
            3515u16 => false,
            3516u16 => false,
            3517u16 => false,
            3518u16 => false,
            3519u16 => false,
            3520u16 => false,
            3521u16 => false,
            3522u16 => false,
            3523u16 => false,
            3524u16 => false,
            3525u16 => false,
            3526u16 => false,
            3527u16 => false,
            3528u16 => false,
            3529u16 => false,
            3530u16 => false,
            3531u16 => false,
            3532u16 => false,
            3533u16 => false,
            3534u16 => false,
            3535u16 => false,
            3536u16 => false,
            3537u16 => false,
            3538u16 => false,
            3539u16 => false,
            3540u16 => false,
            3541u16 => false,
            3542u16 => false,
            3543u16 => false,
            3544u16 => false,
            3545u16 => false,
            3546u16 => false,
            3547u16 => false,
            3548u16 => false,
            3549u16 => false,
            3550u16 => false,
            3551u16 => false,
            3552u16 => false,
            3553u16 => false,
            3554u16 => false,
            3555u16 => false,
            3556u16 => false,
            3557u16 => false,
            3558u16 => false,
            3559u16 => false,
            3560u16 => false,
            3561u16 => false,
            3562u16 => false,
            3563u16 => false,
            3564u16 => false,
            3565u16 => false,
            3566u16 => false,
            3567u16 => false,
            3568u16 => false,
            3569u16 => false,
            3570u16 => false,
            3571u16 => false,
            3572u16 => false,
            3573u16 => false,
            3574u16 => false,
            3575u16 => false,
            3576u16 => false,
            3577u16 => false,
            3578u16 => false,
            3579u16 => false,
            3580u16 => false,
            3581u16 => false,
            3582u16 => false,
            3583u16 => false,
            3584u16 => false,
            3585u16 => false,
            3586u16 => false,
            3587u16 => false,
            3588u16 => false,
            3589u16 => false,
            3590u16 => false,
            3591u16 => false,
            3592u16 => false,
            3593u16 => false,
            3594u16 => false,
            3595u16 => false,
            3596u16 => false,
            3597u16 => false,
            3598u16 => false,
            3599u16 => false,
            3600u16 => false,
            3601u16 => false,
            3602u16 => false,
            3603u16 => false,
            3604u16 => false,
            3605u16 => false,
            3606u16 => false,
            3607u16 => false,
            3608u16 => false,
            3609u16 => false,
            3610u16 => false,
            3611u16 => false,
            3612u16 => false,
            3613u16 => false,
            3614u16 => false,
            3615u16 => false,
            3616u16 => false,
            3617u16 => false,
            3618u16 => false,
            3619u16 => false,
            3620u16 => false,
            3621u16 => false,
            3622u16 => false,
            3623u16 => false,
            3624u16 => false,
            3625u16 => false,
            3626u16 => false,
            3627u16 => false,
            3628u16 => false,
            3629u16 => false,
            3630u16 => false,
            3631u16 => false,
            3632u16 => false,
            3633u16 => false,
            3634u16 => false,
            3635u16 => false,
            3636u16 => false,
            3637u16 => false,
            3638u16 => false,
            3639u16 => false,
            3640u16 => false,
            3641u16 => false,
            3642u16 => false,
            3643u16 => false,
            3644u16 => false,
            3645u16 => false,
            3646u16 => false,
            3647u16 => false,
            3648u16 => false,
            3649u16 => false,
            3650u16 => false,
            3651u16 => false,
            3652u16 => false,
            3653u16 => false,
            3654u16 => false,
            3655u16 => false,
            3656u16 => false,
            3657u16 => false,
            3658u16 => false,
            3659u16 => false,
            3660u16 => false,
            3661u16 => false,
            3662u16 => false,
            3663u16 => false,
            3664u16 => false,
            3665u16 => false,
            3666u16 => false,
            3667u16 => false,
            3668u16 => false,
            3669u16 => false,
            3670u16 => false,
            3671u16 => false,
            3672u16 => false,
            3673u16 => false,
            3674u16 => false,
            3675u16 => false,
            3676u16 => false,
            3677u16 => false,
            3678u16 => false,
            3679u16 => false,
            3680u16 => false,
            3681u16 => false,
            3682u16 => false,
            3683u16 => false,
            3684u16 => false,
            3685u16 => false,
            3686u16 => false,
            3687u16 => false,
            3688u16 => false,
            3689u16 => false,
            3690u16 => false,
            3691u16 => false,
            3692u16 => false,
            3693u16 => false,
            3694u16 => false,
            3695u16 => false,
            3696u16 => false,
            3697u16 => false,
            3698u16 => false,
            3699u16 => false,
            3700u16 => false,
            3701u16 => false,
            3702u16 => false,
            3703u16 => false,
            3704u16 => false,
            3705u16 => false,
            3706u16 => false,
            3707u16 => false,
            3708u16 => false,
            3709u16 => false,
            3710u16 => false,
            3711u16 => false,
            3712u16 => false,
            3713u16 => false,
            3714u16 => false,
            3715u16 => false,
            3716u16 => false,
            3717u16 => false,
            3718u16 => false,
            3719u16 => false,
            3720u16 => false,
            3721u16 => false,
            3722u16 => false,
            3723u16 => false,
            3724u16 => false,
            3725u16 => false,
            3726u16 => false,
            3727u16 => false,
            3728u16 => false,
            3729u16 => false,
            3730u16 => false,
            3731u16 => false,
            3732u16 => false,
            3733u16 => false,
            3734u16 => false,
            3735u16 => false,
            3736u16 => false,
            3737u16 => false,
            3738u16 => false,
            3739u16 => false,
            3740u16 => false,
            3741u16 => false,
            3742u16 => false,
            3743u16 => false,
            3744u16 => false,
            3745u16 => false,
            3746u16 => false,
            3747u16 => false,
            3748u16 => false,
            3749u16 => false,
            3750u16 => false,
            3751u16 => false,
            3752u16 => false,
            3753u16 => false,
            3754u16 => false,
            3755u16 => false,
            3756u16 => false,
            3757u16 => false,
            3758u16 => false,
            3759u16 => false,
            3760u16 => false,
            3761u16 => false,
            3762u16 => false,
            3763u16 => false,
            3764u16 => false,
            3765u16 => false,
            3766u16 => false,
            3767u16 => false,
            3768u16 => false,
            3769u16 => false,
            3770u16 => false,
            3771u16 => false,
            3772u16 => false,
            3773u16 => false,
            3774u16 => false,
            3775u16 => false,
            3776u16 => false,
            3777u16 => false,
            3778u16 => false,
            3779u16 => false,
            3780u16 => false,
            3781u16 => false,
            3782u16 => false,
            3783u16 => false,
            3784u16 => false,
            3785u16 => false,
            3786u16 => false,
            3787u16 => false,
            3788u16 => false,
            3789u16 => false,
            3790u16 => false,
            3791u16 => false,
            3792u16 => false,
            3793u16 => false,
            3794u16 => false,
            3795u16 => false,
            3796u16 => false,
            3797u16 => false,
            3798u16 => false,
            3799u16 => false,
            3800u16 => false,
            3801u16 => false,
            3802u16 => false,
            3803u16 => false,
            3804u16 => false,
            3805u16 => false,
            3806u16 => false,
            3807u16 => false,
            3808u16 => false,
            3809u16 => false,
            3810u16 => false,
            3811u16 => false,
            3812u16 => false,
            3813u16 => false,
            3814u16 => false,
            3815u16 => false,
            3816u16 => false,
            3817u16 => false,
            3818u16 => false,
            3819u16 => false,
            3820u16 => false,
            3821u16 => false,
            3822u16 => false,
            3823u16 => false,
            3824u16 => false,
            3825u16 => false,
            3826u16 => false,
            3827u16 => false,
            3828u16 => false,
            3829u16 => false,
            3830u16 => false,
            3831u16 => false,
            3832u16 => false,
            3833u16 => false,
            3834u16 => false,
            3835u16 => false,
            3836u16 => false,
            3837u16 => false,
            3838u16 => false,
            3839u16 => false,
            3840u16 => false,
            3841u16 => false,
            3842u16 => false,
            3843u16 => false,
            3844u16 => false,
            3845u16 => false,
            3846u16 => false,
            3847u16 => false,
            3848u16 => false,
            3849u16 => false,
            3850u16 => false,
            3851u16 => false,
            3852u16 => false,
            3853u16 => false,
            3854u16 => false,
            3855u16 => false,
            3856u16 => false,
            3857u16 => false,
            3858u16 => false,
            3859u16 => false,
            3860u16 => false,
            3861u16 => false,
            3862u16 => false,
            3863u16 => false,
            3864u16 => false,
            3865u16 => false,
            3866u16 => false,
            3867u16 => false,
            3868u16 => false,
            3869u16 => false,
            3870u16 => false,
            3871u16 => false,
            3872u16 => false,
            3873u16 => false,
            3874u16 => false,
            3875u16 => false,
            3876u16 => false,
            3877u16 => false,
            3878u16 => false,
            3879u16 => false,
            3880u16 => false,
            3881u16 => false,
            3882u16 => false,
            3883u16 => false,
            3884u16 => false,
            3885u16 => false,
            3886u16 => false,
            3887u16 => false,
            3888u16 => false,
            3889u16 => false,
            3890u16 => false,
            3891u16 => false,
            3892u16 => false,
            3893u16 => false,
            3894u16 => false,
            3895u16 => false,
            3896u16 => false,
            3897u16 => false,
            3898u16 => false,
            3899u16 => false,
            3900u16 => false,
            3901u16 => false,
            3902u16 => false,
            3903u16 => false,
            3904u16 => false,
            3905u16 => false,
            3906u16 => false,
            3907u16 => false,
            3908u16 => false,
            3909u16 => false,
            3910u16 => false,
            3911u16 => false,
            3912u16 => false,
            3913u16 => false,
            3914u16 => false,
            3915u16 => false,
            3916u16 => false,
            3917u16 => false,
            3918u16 => false,
            3919u16 => false,
            3920u16 => false,
            3921u16 => false,
            3922u16 => false,
            3923u16 => false,
            3924u16 => false,
            3925u16 => false,
            3926u16 => false,
            3927u16 => false,
            3928u16 => false,
            3929u16 => false,
            3930u16 => false,
            3931u16 => false,
            3932u16 => false,
            3933u16 => false,
            3934u16 => false,
            3935u16 => false,
            3936u16 => false,
            3937u16 => false,
            3938u16 => false,
            3939u16 => false,
            3940u16 => false,
            3941u16 => false,
            3942u16 => false,
            3943u16 => false,
            3944u16 => false,
            3945u16 => false,
            3946u16 => false,
            3947u16 => false,
            3948u16 => false,
            3949u16 => false,
            3950u16 => false,
            3951u16 => false,
            3952u16 => false,
            3953u16 => false,
            3954u16 => false,
            3955u16 => false,
            3956u16 => false,
            3957u16 => false,
            3958u16 => false,
            3959u16 => false,
            3960u16 => false,
            3961u16 => false,
            3962u16 => false,
            3963u16 => false,
            3964u16 => false,
            3965u16 => false,
            3966u16 => false,
            3967u16 => false,
            3968u16 => false,
            3969u16 => false,
            3970u16 => false,
            3971u16 => false,
            3972u16 => false,
            3973u16 => false,
            3974u16 => false,
            3975u16 => false,
            3976u16 => false,
            3977u16 => false,
            3978u16 => false,
            3979u16 => false,
            3980u16 => false,
            3981u16 => false,
            3982u16 => false,
            3983u16 => false,
            3984u16 => false,
            3985u16 => false,
            3986u16 => false,
            3987u16 => false,
            3988u16 => false,
            3989u16 => false,
            3990u16 => false,
            3991u16 => false,
            3992u16 => false,
            3993u16 => false,
            3994u16 => false,
            3995u16 => false,
            3996u16 => false,
            3997u16 => false,
            3998u16 => false,
            3999u16 => false,
            4000u16 => false,
            4001u16 => false,
            4002u16 => false,
            4003u16 => false,
            4004u16 => false,
            4005u16 => false,
            4006u16 => false,
            4007u16 => false,
            4008u16 => false,
            4009u16 => false,
            4010u16 => false,
            4011u16 => false,
            4012u16 => false,
            4013u16 => false,
            4014u16 => false,
            4015u16 => false,
            4016u16 => false,
            4017u16 => false,
            4018u16 => false,
            4019u16 => false,
            4020u16 => false,
            4021u16 => false,
            4022u16 => false,
            4023u16 => false,
            4024u16 => false,
            4025u16 => false,
            4026u16 => false,
            4027u16 => false,
            4028u16 => false,
            4029u16 => false,
            4030u16 => false,
            4031u16 => false,
            4032u16 => false,
            4033u16 => false,
            4034u16 => false,
            4035u16 => false,
            4036u16 => false,
            4037u16 => false,
            4038u16 => false,
            4039u16 => false,
            4040u16 => false,
            4041u16 => false,
            4042u16 => false,
            4043u16 => false,
            4044u16 => false,
            4045u16 => false,
            4046u16 => false,
            4047u16 => false,
            4048u16 => false,
            4049u16 => false,
            4050u16 => false,
            4051u16 => false,
            4052u16 => false,
            4053u16 => false,
            4054u16 => false,
            4055u16 => false,
            4056u16 => false,
            4057u16 => false,
            4058u16 => false,
            4059u16 => false,
            4060u16 => false,
            4061u16 => false,
            4062u16 => false,
            4063u16 => false,
            4064u16 => false,
            4065u16 => false,
            4066u16 => false,
            4067u16 => false,
            4068u16 => false,
            4069u16 => false,
            4070u16 => false,
            4071u16 => false,
            4072u16 => false,
            4073u16 => false,
            4074u16 => false,
            4075u16 => false,
            4076u16 => false,
            4077u16 => false,
            4078u16 => false,
            4079u16 => false,
            4080u16 => false,
            4081u16 => false,
            4082u16 => false,
            4083u16 => false,
            4084u16 => false,
            4085u16 => false,
            4086u16 => false,
            4087u16 => false,
            4088u16 => false,
            4089u16 => false,
            4090u16 => false,
            4091u16 => false,
            4092u16 => false,
            4093u16 => false,
            4094u16 => false,
            4095u16 => false,
            4096u16 => false,
            4097u16 => false,
            4098u16 => false,
            4099u16 => false,
            4100u16 => false,
            4101u16 => false,
            4102u16 => false,
            4103u16 => false,
            4104u16 => false,
            4105u16 => false,
            4106u16 => false,
            4107u16 => false,
            4108u16 => false,
            4109u16 => false,
            4110u16 => false,
            4111u16 => false,
            4112u16 => false,
            4113u16 => false,
            4114u16 => false,
            4115u16 => false,
            4116u16 => false,
            4117u16 => false,
            4118u16 => false,
            4119u16 => false,
            4120u16 => false,
            4121u16 => false,
            4122u16 => false,
            4123u16 => false,
            4124u16 => false,
            4125u16 => false,
            4126u16 => false,
            4127u16 => false,
            4128u16 => false,
            4129u16 => false,
            4130u16 => false,
            4131u16 => false,
            4132u16 => false,
            4133u16 => false,
            4134u16 => false,
            4135u16 => false,
            4136u16 => false,
            4137u16 => false,
            4138u16 => false,
            4139u16 => false,
            4140u16 => false,
            4141u16 => false,
            4142u16 => false,
            4143u16 => false,
            4144u16 => false,
            4145u16 => false,
            4146u16 => false,
            4147u16 => false,
            4148u16 => false,
            4149u16 => false,
            4150u16 => false,
            4151u16 => false,
            4152u16 => false,
            4153u16 => false,
            4154u16 => false,
            4155u16 => false,
            4156u16 => false,
            4157u16 => false,
            4158u16 => false,
            4159u16 => false,
            4160u16 => false,
            4161u16 => false,
            4162u16 => false,
            4163u16 => false,
            4164u16 => false,
            4165u16 => false,
            4166u16 => false,
            4167u16 => false,
            4168u16 => false,
            4169u16 => false,
            4170u16 => false,
            4171u16 => false,
            4172u16 => false,
            4173u16 => false,
            4174u16 => false,
            4175u16 => false,
            4176u16 => false,
            4177u16 => false,
            4178u16 => false,
            4179u16 => false,
            4180u16 => false,
            4181u16 => false,
            4182u16 => false,
            4183u16 => false,
            4184u16 => false,
            4185u16 => false,
            4186u16 => false,
            4187u16 => false,
            4188u16 => false,
            4189u16 => false,
            4190u16 => false,
            4191u16 => false,
            4192u16 => false,
            4193u16 => false,
            4194u16 => false,
            4195u16 => false,
            4196u16 => false,
            4197u16 => false,
            4198u16 => false,
            4199u16 => false,
            4200u16 => false,
            4201u16 => false,
            4202u16 => false,
            4203u16 => false,
            4204u16 => false,
            4205u16 => false,
            4206u16 => false,
            4207u16 => false,
            4208u16 => false,
            4209u16 => false,
            4210u16 => false,
            4211u16 => false,
            4212u16 => false,
            4213u16 => false,
            4214u16 => false,
            4215u16 => false,
            4216u16 => false,
            4217u16 => false,
            4218u16 => false,
            4219u16 => false,
            4220u16 => false,
            4221u16 => false,
            4222u16 => false,
            4223u16 => false,
            4224u16 => false,
            4225u16 => false,
            4226u16 => false,
            4227u16 => false,
            4228u16 => false,
            4229u16 => false,
            4230u16 => false,
            4231u16 => false,
            4232u16 => false,
            4233u16 => false,
            4234u16 => false,
            4235u16 => false,
            4236u16 => false,
            4237u16 => false,
            4238u16 => false,
            4239u16 => false,
            4240u16 => false,
            4241u16 => false,
            4242u16 => false,
            4243u16 => false,
            4244u16 => false,
            4245u16 => false,
            4246u16 => false,
            4247u16 => false,
            4248u16 => false,
            4249u16 => false,
            4250u16 => false,
            4251u16 => false,
            4252u16 => false,
            4253u16 => false,
            4254u16 => false,
            4255u16 => false,
            4256u16 => false,
            4257u16 => false,
            4258u16 => false,
            4259u16 => false,
            4260u16 => false,
            4261u16 => false,
            4262u16 => false,
            4263u16 => false,
            4264u16 => false,
            4265u16 => false,
            4266u16 => false,
            4267u16 => false,
            4268u16 => false,
            4269u16 => false,
            4270u16 => false,
            4271u16 => false,
            4272u16 => false,
            4273u16 => false,
            4278u16 => false,
            4279u16 => false,
            4280u16 => false,
            4281u16 => false,
            4282u16 => false,
            4283u16 => false,
            4284u16 => false,
            4285u16 => false,
            4302u16 => false,
            4303u16 => false,
            4304u16 => false,
            4305u16 => false,
            4306u16 => false,
            4307u16 => false,
            4308u16 => false,
            4309u16 => false,
            4310u16 => false,
            4311u16 => false,
            4312u16 => false,
            4313u16 => false,
            4314u16 => false,
            4315u16 => false,
            4316u16 => false,
            4317u16 => false,
            4318u16 => false,
            4319u16 => false,
            4320u16 => false,
            4321u16 => false,
            4322u16 => false,
            4323u16 => false,
            4324u16 => false,
            4325u16 => false,
            4326u16 => false,
            4327u16 => false,
            4328u16 => false,
            4329u16 => false,
            4330u16 => false,
            4331u16 => false,
            4332u16 => false,
            4333u16 => false,
            4334u16 => false,
            4335u16 => false,
            4336u16 => false,
            4337u16 => false,
            4338u16 => false,
            4339u16 => false,
            4340u16 => false,
            4341u16 => false,
            4342u16 => false,
            4343u16 => false,
            4344u16 => false,
            4345u16 => false,
            4346u16 => false,
            4347u16 => false,
            4348u16 => false,
            4349u16 => false,
            4350u16 => false,
            4351u16 => false,
            4352u16 => false,
            4353u16 => false,
            4354u16 => false,
            4355u16 => false,
            4356u16 => false,
            4357u16 => false,
            4358u16 => false,
            4359u16 => false,
            4360u16 => false,
            4361u16 => false,
            4362u16 => false,
            4363u16 => false,
            4364u16 => false,
            4365u16 => false,
            4366u16 => false,
            4367u16 => false,
            4368u16 => false,
            4369u16 => false,
            4370u16 => false,
            4371u16 => false,
            4372u16 => false,
            4373u16 => false,
            4374u16 => false,
            4375u16 => false,
            4376u16 => false,
            4377u16 => false,
            4378u16 => false,
            4379u16 => false,
            4380u16 => false,
            4381u16 => false,
            4382u16 => false,
            4383u16 => false,
            4384u16 => false,
            4385u16 => false,
            4386u16 => false,
            4387u16 => false,
            4388u16 => false,
            4389u16 => false,
            4390u16 => false,
            4391u16 => false,
            4392u16 => false,
            4393u16 => false,
            4394u16 => false,
            4395u16 => false,
            4396u16 => false,
            4397u16 => false,
            4398u16 => false,
            4399u16 => false,
            4400u16 => false,
            4401u16 => false,
            4402u16 => false,
            4403u16 => false,
            4404u16 => false,
            4405u16 => false,
            4406u16 => false,
            4407u16 => false,
            4408u16 => false,
            4409u16 => false,
            4410u16 => false,
            4411u16 => false,
            4412u16 => false,
            4413u16 => false,
            4414u16 => false,
            4415u16 => false,
            4416u16 => false,
            4417u16 => false,
            4418u16 => false,
            4419u16 => false,
            4420u16 => false,
            4421u16 => false,
            4422u16 => false,
            4423u16 => false,
            4424u16 => false,
            4425u16 => false,
            4426u16 => false,
            4427u16 => false,
            4428u16 => false,
            4429u16 => false,
            4430u16 => false,
            4431u16 => false,
            4432u16 => false,
            4433u16 => false,
            4434u16 => false,
            4435u16 => false,
            4436u16 => false,
            4437u16 => false,
            4438u16 => false,
            4439u16 => false,
            4440u16 => false,
            4441u16 => false,
            4442u16 => false,
            4443u16 => false,
            4444u16 => false,
            4445u16 => false,
            4446u16 => false,
            4447u16 => false,
            4448u16 => false,
            4449u16 => false,
            4450u16 => false,
            4451u16 => false,
            4452u16 => false,
            4453u16 => false,
            4454u16 => false,
            4455u16 => false,
            4456u16 => false,
            4457u16 => false,
            4458u16 => false,
            4459u16 => false,
            4460u16 => false,
            4461u16 => false,
            4462u16 => false,
            4463u16 => false,
            4464u16 => false,
            4465u16 => false,
            4466u16 => false,
            4467u16 => false,
            4468u16 => false,
            4469u16 => false,
            4470u16 => false,
            4471u16 => false,
            4472u16 => false,
            4473u16 => false,
            4474u16 => false,
            4475u16 => false,
            4476u16 => false,
            4477u16 => false,
            4478u16 => false,
            4479u16 => false,
            4480u16 => false,
            4481u16 => false,
            4482u16 => false,
            4483u16 => false,
            4484u16 => false,
            4485u16 => false,
            4486u16 => false,
            4487u16 => false,
            4488u16 => false,
            4489u16 => false,
            4490u16 => false,
            4491u16 => false,
            4492u16 => false,
            4493u16 => false,
            4494u16 => false,
            4495u16 => false,
            4496u16 => false,
            4497u16 => false,
            4498u16 => false,
            4499u16 => false,
            4500u16 => false,
            4501u16 => false,
            4502u16 => false,
            4503u16 => false,
            4504u16 => false,
            4505u16 => false,
            4506u16 => false,
            4507u16 => false,
            4508u16 => false,
            4509u16 => false,
            4510u16 => false,
            4511u16 => false,
            4512u16 => false,
            4513u16 => false,
            4514u16 => false,
            4515u16 => false,
            4516u16 => false,
            4517u16 => false,
            4518u16 => false,
            4519u16 => false,
            4520u16 => false,
            4521u16 => false,
            4522u16 => false,
            4523u16 => false,
            4524u16 => false,
            4525u16 => false,
            4526u16 => false,
            4527u16 => false,
            4528u16 => false,
            4529u16 => false,
            4530u16 => false,
            4531u16 => false,
            4532u16 => false,
            4533u16 => false,
            4534u16 => false,
            4535u16 => false,
            4536u16 => false,
            4537u16 => false,
            4538u16 => false,
            4539u16 => false,
            4540u16 => false,
            4541u16 => false,
            4542u16 => false,
            4543u16 => false,
            4544u16 => false,
            4545u16 => false,
            4546u16 => false,
            4547u16 => false,
            4548u16 => false,
            4549u16 => false,
            4550u16 => false,
            4551u16 => false,
            4552u16 => false,
            4553u16 => false,
            4554u16 => false,
            4555u16 => false,
            4556u16 => false,
            4557u16 => false,
            4558u16 => false,
            4559u16 => false,
            4560u16 => false,
            4561u16 => false,
            4562u16 => false,
            4563u16 => false,
            4564u16 => false,
            4565u16 => false,
            4566u16 => false,
            4567u16 => false,
            4568u16 => false,
            4569u16 => false,
            4570u16 => false,
            4571u16 => false,
            4572u16 => false,
            4573u16 => false,
            4574u16 => false,
            4575u16 => false,
            4576u16 => false,
            4577u16 => false,
            4578u16 => false,
            4579u16 => false,
            4580u16 => false,
            4581u16 => false,
            4582u16 => false,
            4583u16 => false,
            4584u16 => false,
            4585u16 => false,
            4586u16 => false,
            4587u16 => false,
            4588u16 => false,
            4589u16 => false,
            4590u16 => false,
            4591u16 => false,
            4592u16 => false,
            4593u16 => false,
            4594u16 => false,
            4595u16 => false,
            4596u16 => false,
            4597u16 => false,
            4598u16 => false,
            4599u16 => false,
            4600u16 => false,
            4601u16 => false,
            4602u16 => false,
            4603u16 => false,
            4604u16 => false,
            4605u16 => false,
            4606u16 => false,
            4607u16 => false,
            4608u16 => false,
            4609u16 => false,
            4610u16 => false,
            4611u16 => false,
            4612u16 => false,
            4613u16 => false,
            4614u16 => false,
            4615u16 => false,
            4616u16 => false,
            4617u16 => false,
            4618u16 => false,
            4619u16 => false,
            4620u16 => false,
            4621u16 => false,
            4622u16 => false,
            4623u16 => false,
            4624u16 => false,
            4625u16 => false,
            4626u16 => false,
            4627u16 => false,
            4628u16 => false,
            4629u16 => false,
            4630u16 => false,
            4631u16 => false,
            4632u16 => false,
            4633u16 => false,
            4634u16 => false,
            4635u16 => false,
            4636u16 => false,
            4637u16 => false,
            4638u16 => false,
            4639u16 => false,
            4640u16 => false,
            4641u16 => false,
            4642u16 => false,
            4643u16 => false,
            4644u16 => false,
            4645u16 => false,
            4646u16 => false,
            4647u16 => false,
            4648u16 => false,
            4649u16 => false,
            4650u16 => false,
            4651u16 => false,
            4652u16 => false,
            4653u16 => false,
            4654u16 => false,
            4655u16 => false,
            4656u16 => false,
            4657u16 => false,
            4658u16 => false,
            4659u16 => false,
            4660u16 => false,
            4661u16 => false,
            4662u16 => false,
            4663u16 => false,
            4664u16 => false,
            4665u16 => false,
            4666u16 => false,
            4667u16 => false,
            4668u16 => false,
            4669u16 => false,
            4670u16 => false,
            4671u16 => false,
            4672u16 => false,
            4673u16 => false,
            4674u16 => false,
            4675u16 => false,
            4676u16 => false,
            4677u16 => false,
            4678u16 => false,
            4679u16 => false,
            4680u16 => false,
            4681u16 => false,
            4762u16 => false,
            4763u16 => false,
            4764u16 => false,
            4765u16 => false,
            4766u16 => false,
            4767u16 => false,
            4768u16 => false,
            4769u16 => false,
            4770u16 => false,
            4771u16 => false,
            4772u16 => false,
            4773u16 => false,
            4774u16 => false,
            4775u16 => false,
            4776u16 => false,
            4777u16 => false,
            4778u16 => false,
            4779u16 => false,
            4780u16 => false,
            4781u16 => false,
            4782u16 => false,
            4783u16 => false,
            4784u16 => false,
            4785u16 => false,
            4786u16 => false,
            4787u16 => false,
            4788u16 => false,
            4789u16 => false,
            4790u16 => false,
            4791u16 => false,
            4792u16 => false,
            4793u16 => false,
            4794u16 => false,
            4795u16 => false,
            4796u16 => false,
            4797u16 => false,
            4798u16 => false,
            4799u16 => false,
            4800u16 => false,
            4801u16 => false,
            4802u16 => false,
            4803u16 => false,
            4804u16 => false,
            4805u16 => false,
            4806u16 => false,
            4807u16 => false,
            4808u16 => false,
            4809u16 => false,
            4810u16 => false,
            4811u16 => false,
            4812u16 => false,
            4813u16 => false,
            4814u16 => false,
            4815u16 => false,
            4816u16 => false,
            4817u16 => false,
            4818u16 => false,
            4819u16 => false,
            4820u16 => false,
            4821u16 => false,
            4822u16 => false,
            4823u16 => false,
            4824u16 => false,
            4825u16 => false,
            4826u16 => false,
            4827u16 => false,
            4828u16 => false,
            4829u16 => false,
            4830u16 => false,
            4831u16 => false,
            4832u16 => false,
            4833u16 => false,
            4834u16 => false,
            4835u16 => false,
            4836u16 => false,
            4837u16 => false,
            4838u16 => false,
            4839u16 => false,
            4840u16 => false,
            4841u16 => false,
            4842u16 => false,
            4843u16 => false,
            4844u16 => false,
            4845u16 => false,
            4846u16 => false,
            4847u16 => false,
            4848u16 => false,
            4849u16 => false,
            4850u16 => false,
            4851u16 => false,
            4852u16 => false,
            4853u16 => false,
            4854u16 => false,
            4855u16 => false,
            4856u16 => false,
            4857u16 => false,
            4858u16 => false,
            4859u16 => false,
            4860u16 => false,
            4861u16 => false,
            4862u16 => false,
            4863u16 => false,
            4864u16 => false,
            4865u16 => false,
            4866u16 => false,
            4867u16 => false,
            4868u16 => false,
            4869u16 => false,
            4870u16 => false,
            4871u16 => false,
            4872u16 => false,
            4873u16 => false,
            4874u16 => false,
            4875u16 => false,
            4876u16 => false,
            4877u16 => false,
            4878u16 => false,
            4879u16 => false,
            4880u16 => false,
            4881u16 => false,
            4882u16 => false,
            4883u16 => false,
            4884u16 => false,
            4885u16 => false,
            4886u16 => false,
            4887u16 => false,
            4888u16 => false,
            4889u16 => false,
            4890u16 => false,
            4891u16 => false,
            4892u16 => false,
            4893u16 => false,
            4894u16 => false,
            4895u16 => false,
            4896u16 => false,
            4897u16 => false,
            4898u16 => false,
            4899u16 => false,
            4900u16 => false,
            4901u16 => false,
            4902u16 => false,
            4903u16 => false,
            4904u16 => false,
            4905u16 => false,
            4906u16 => false,
            4907u16 => false,
            4908u16 => false,
            4909u16 => false,
            4910u16 => false,
            4911u16 => false,
            4912u16 => false,
            4913u16 => false,
            4914u16 => false,
            4915u16 => false,
            4916u16 => false,
            4917u16 => false,
            4918u16 => false,
            4919u16 => false,
            4920u16 => false,
            4921u16 => false,
            4922u16 => false,
            4923u16 => false,
            4924u16 => false,
            4925u16 => false,
            4926u16 => false,
            4927u16 => false,
            4928u16 => false,
            4929u16 => false,
            4930u16 => false,
            4931u16 => false,
            4932u16 => false,
            4933u16 => false,
            4934u16 => false,
            4935u16 => false,
            4936u16 => false,
            4937u16 => false,
            4938u16 => false,
            4939u16 => false,
            4940u16 => false,
            4941u16 => false,
            4942u16 => false,
            4943u16 => false,
            4944u16 => false,
            4945u16 => false,
            4946u16 => false,
            4947u16 => false,
            4948u16 => false,
            4949u16 => false,
            4950u16 => false,
            4951u16 => false,
            4952u16 => false,
            4953u16 => false,
            4954u16 => false,
            4955u16 => false,
            4956u16 => false,
            4957u16 => false,
            4958u16 => false,
            4959u16 => false,
            4960u16 => false,
            4961u16 => false,
            4962u16 => false,
            4963u16 => false,
            4964u16 => false,
            4965u16 => false,
            4966u16 => false,
            4967u16 => false,
            4968u16 => false,
            4969u16 => false,
            4970u16 => false,
            4971u16 => false,
            4972u16 => false,
            4973u16 => false,
            4974u16 => false,
            4975u16 => false,
            4976u16 => false,
            4977u16 => false,
            4978u16 => false,
            4979u16 => false,
            4980u16 => false,
            4981u16 => false,
            4982u16 => false,
            4983u16 => false,
            4984u16 => false,
            4985u16 => false,
            4986u16 => false,
            4987u16 => false,
            4988u16 => false,
            4989u16 => false,
            4990u16 => false,
            4991u16 => false,
            4992u16 => false,
            4993u16 => false,
            4994u16 => false,
            4995u16 => false,
            4996u16 => false,
            4997u16 => false,
            4998u16 => false,
            4999u16 => false,
            5000u16 => false,
            5001u16 => false,
            5002u16 => false,
            5003u16 => false,
            5004u16 => false,
            5005u16 => false,
            5006u16 => false,
            5007u16 => false,
            5008u16 => false,
            5009u16 => false,
            5010u16 => false,
            5011u16 => false,
            5012u16 => false,
            5013u16 => false,
            5014u16 => false,
            5015u16 => false,
            5016u16 => false,
            5017u16 => false,
            5018u16 => false,
            5019u16 => false,
            5020u16 => false,
            5021u16 => false,
            5022u16 => false,
            5023u16 => false,
            5024u16 => false,
            5025u16 => false,
            5026u16 => false,
            5027u16 => false,
            5028u16 => false,
            5029u16 => false,
            5030u16 => false,
            5031u16 => false,
            5032u16 => false,
            5033u16 => false,
            5034u16 => false,
            5035u16 => false,
            5036u16 => false,
            5037u16 => false,
            5038u16 => false,
            5039u16 => false,
            5040u16 => false,
            5041u16 => false,
            5042u16 => false,
            5043u16 => false,
            5044u16 => false,
            5045u16 => false,
            5046u16 => false,
            5047u16 => false,
            5048u16 => false,
            5049u16 => false,
            5050u16 => false,
            5051u16 => false,
            5052u16 => false,
            5053u16 => false,
            5054u16 => false,
            5055u16 => false,
            5056u16 => false,
            5057u16 => false,
            5058u16 => false,
            5059u16 => false,
            5060u16 => false,
            5061u16 => false,
            5062u16 => false,
            5063u16 => false,
            5064u16 => false,
            5065u16 => false,
            5066u16 => false,
            5067u16 => false,
            5068u16 => false,
            5069u16 => false,
            5070u16 => false,
            5071u16 => false,
            5072u16 => false,
            5073u16 => false,
            5074u16 => false,
            5075u16 => false,
            5076u16 => false,
            5077u16 => false,
            5078u16 => false,
            5079u16 => false,
            5080u16 => false,
            5081u16 => false,
            5082u16 => false,
            5083u16 => false,
            5084u16 => false,
            5085u16 => false,
            5086u16 => false,
            5087u16 => false,
            5088u16 => false,
            5089u16 => false,
            5090u16 => false,
            5091u16 => false,
            5092u16 => false,
            5093u16 => false,
            5094u16 => false,
            5095u16 => false,
            5096u16 => false,
            5097u16 => false,
            5098u16 => false,
            5099u16 => false,
            5100u16 => false,
            5101u16 => false,
            5102u16 => false,
            5103u16 => false,
            5104u16 => false,
            5105u16 => false,
            5106u16 => false,
            5107u16 => false,
            5108u16 => false,
            5109u16 => false,
            5110u16 => false,
            5111u16 => false,
            5112u16 => false,
            5113u16 => false,
            5114u16 => false,
            5115u16 => false,
            5116u16 => false,
            5117u16 => false,
            5118u16 => false,
            5119u16 => false,
            5120u16 => false,
            5121u16 => false,
            5122u16 => false,
            5123u16 => false,
            5124u16 => false,
            5125u16 => false,
            5126u16 => false,
            5127u16 => false,
            5128u16 => false,
            5129u16 => false,
            5130u16 => false,
            5131u16 => false,
            5132u16 => false,
            5133u16 => false,
            5134u16 => false,
            5135u16 => false,
            5136u16 => false,
            5137u16 => false,
            5138u16 => false,
            5139u16 => false,
            5140u16 => false,
            5141u16 => false,
            5142u16 => false,
            5143u16 => false,
            5144u16 => false,
            5145u16 => false,
            5146u16 => false,
            5147u16 => false,
            5148u16 => false,
            5149u16 => false,
            5150u16 => false,
            5151u16 => false,
            5152u16 => false,
            5153u16 => false,
            5154u16 => false,
            5155u16 => false,
            5156u16 => false,
            5157u16 => false,
            5158u16 => false,
            5159u16 => false,
            5160u16 => false,
            5161u16 => false,
            5162u16 => false,
            5163u16 => false,
            5164u16 => false,
            5165u16 => false,
            5166u16 => false,
            5167u16 => false,
            5168u16 => false,
            5169u16 => false,
            5170u16 => false,
            5171u16 => false,
            5172u16 => false,
            5173u16 => false,
            5174u16 => false,
            5175u16 => false,
            5176u16 => false,
            5177u16 => false,
            5178u16 => false,
            5179u16 => false,
            5180u16 => false,
            5181u16 => false,
            5182u16 => false,
            5183u16 => false,
            5184u16 => false,
            5185u16 => false,
            5186u16 => false,
            5187u16 => false,
            5188u16 => false,
            5189u16 => false,
            5190u16 => false,
            5191u16 => false,
            5192u16 => false,
            5193u16 => false,
            5194u16 => false,
            5195u16 => false,
            5196u16 => false,
            5197u16 => false,
            5198u16 => false,
            5199u16 => false,
            5200u16 => false,
            5201u16 => false,
            5202u16 => false,
            5203u16 => false,
            5204u16 => false,
            5205u16 => false,
            5206u16 => false,
            5207u16 => false,
            5208u16 => false,
            5209u16 => false,
            5210u16 => false,
            5211u16 => false,
            5212u16 => false,
            5213u16 => false,
            5214u16 => false,
            5215u16 => false,
            5216u16 => false,
            5217u16 => false,
            5218u16 => false,
            5219u16 => false,
            5220u16 => false,
            5221u16 => false,
            5222u16 => false,
            5223u16 => false,
            5224u16 => false,
            5225u16 => false,
            5226u16 => false,
            5227u16 => false,
            5228u16 => false,
            5229u16 => false,
            5230u16 => false,
            5231u16 => false,
            5232u16 => false,
            5233u16 => false,
            5234u16 => false,
            5235u16 => false,
            5236u16 => false,
            5237u16 => false,
            5238u16 => false,
            5239u16 => false,
            5240u16 => false,
            5241u16 => false,
            5242u16 => false,
            5243u16 => false,
            5244u16 => false,
            5245u16 => false,
            5246u16 => false,
            5247u16 => false,
            5248u16 => false,
            5249u16 => false,
            5250u16 => false,
            5251u16 => false,
            5252u16 => false,
            5253u16 => false,
            5254u16 => false,
            5255u16 => false,
            5256u16 => false,
            5257u16 => false,
            5258u16 => false,
            5259u16 => false,
            5260u16 => false,
            5261u16 => false,
            5262u16 => false,
            5263u16 => false,
            5264u16 => false,
            5265u16 => false,
            5266u16 => false,
            5267u16 => false,
            5268u16 => false,
            5269u16 => false,
            5270u16 => false,
            5271u16 => false,
            5272u16 => false,
            5273u16 => false,
            5274u16 => false,
            5275u16 => false,
            5276u16 => false,
            5277u16 => false,
            5278u16 => false,
            5279u16 => false,
            5280u16 => false,
            5281u16 => false,
            5282u16 => false,
            5283u16 => false,
            5284u16 => false,
            5285u16 => false,
            5286u16 => false,
            5287u16 => false,
            5288u16 => false,
            5289u16 => false,
            5290u16 => false,
            5291u16 => false,
            5292u16 => false,
            5293u16 => false,
            5294u16 => false,
            5295u16 => false,
            5296u16 => false,
            5297u16 => false,
            5298u16 => false,
            5299u16 => false,
            5300u16 => false,
            5301u16 => false,
            5302u16 => false,
            5303u16 => false,
            5304u16 => false,
            5305u16 => false,
            5306u16 => false,
            5307u16 => false,
            5308u16 => false,
            5309u16 => false,
            5310u16 => false,
            5311u16 => false,
            5312u16 => false,
            5313u16 => false,
            5314u16 => false,
            5315u16 => false,
            5316u16 => false,
            5317u16 => false,
            5318u16 => false,
            5319u16 => false,
            5320u16 => false,
            5321u16 => false,
            5322u16 => false,
            5323u16 => false,
            5324u16 => false,
            5325u16 => false,
            5326u16 => false,
            5327u16 => false,
            5328u16 => false,
            5329u16 => false,
            5330u16 => false,
            5331u16 => false,
            5332u16 => false,
            5333u16 => false,
            5334u16 => false,
            5335u16 => false,
            5336u16 => false,
            5337u16 => false,
            5338u16 => false,
            5339u16 => false,
            5340u16 => false,
            5341u16 => false,
            5342u16 => false,
            5343u16 => false,
            5344u16 => false,
            5345u16 => false,
            5346u16 => false,
            5347u16 => false,
            5348u16 => false,
            5349u16 => false,
            5350u16 => false,
            5351u16 => false,
            5352u16 => false,
            5353u16 => false,
            5354u16 => false,
            5355u16 => false,
            5356u16 => false,
            5357u16 => false,
            5358u16 => false,
            5359u16 => false,
            5360u16 => false,
            5361u16 => false,
            5362u16 => false,
            5363u16 => false,
            5364u16 => false,
            5365u16 => false,
            5366u16 => false,
            5367u16 => false,
            5368u16 => false,
            5369u16 => false,
            5370u16 => false,
            5371u16 => false,
            5372u16 => false,
            5373u16 => false,
            5374u16 => false,
            5375u16 => false,
            5376u16 => false,
            5377u16 => false,
            5378u16 => false,
            5379u16 => false,
            5380u16 => false,
            5381u16 => false,
            5382u16 => false,
            5383u16 => false,
            5384u16 => false,
            5385u16 => false,
            5386u16 => false,
            5387u16 => false,
            5388u16 => false,
            5389u16 => false,
            5390u16 => false,
            5391u16 => false,
            5392u16 => false,
            5393u16 => false,
            5394u16 => false,
            5395u16 => false,
            5396u16 => false,
            5397u16 => false,
            5398u16 => false,
            5399u16 => false,
            5400u16 => false,
            5401u16 => false,
            5402u16 => false,
            5403u16 => false,
            5404u16 => false,
            5405u16 => false,
            5406u16 => false,
            5407u16 => false,
            5408u16 => false,
            5409u16 => false,
            5410u16 => false,
            5411u16 => false,
            5412u16 => false,
            5413u16 => false,
            5414u16 => false,
            5415u16 => false,
            5416u16 => false,
            5417u16 => false,
            5418u16 => false,
            5419u16 => false,
            5420u16 => false,
            5421u16 => false,
            5422u16 => false,
            5423u16 => false,
            5424u16 => false,
            5425u16 => false,
            5426u16 => false,
            5427u16 => false,
            5428u16 => false,
            5429u16 => false,
            5430u16 => false,
            5431u16 => false,
            5432u16 => false,
            5433u16 => false,
            5434u16 => false,
            5435u16 => false,
            5436u16 => false,
            5437u16 => false,
            5438u16 => false,
            5439u16 => false,
            5440u16 => false,
            5441u16 => false,
            5442u16 => false,
            5443u16 => false,
            5444u16 => false,
            5445u16 => false,
            5446u16 => false,
            5447u16 => false,
            5448u16 => false,
            5449u16 => false,
            5450u16 => false,
            5451u16 => false,
            5452u16 => false,
            5453u16 => false,
            5454u16 => false,
            5455u16 => false,
            5456u16 => false,
            5457u16 => false,
            5458u16 => false,
            5459u16 => false,
            5460u16 => false,
            5461u16 => false,
            5462u16 => false,
            5463u16 => false,
            5464u16 => false,
            5465u16 => false,
            5466u16 => false,
            5467u16 => false,
            5468u16 => false,
            5469u16 => false,
            5470u16 => false,
            5471u16 => false,
            5472u16 => false,
            5473u16 => false,
            5474u16 => false,
            5475u16 => false,
            5476u16 => false,
            5477u16 => false,
            5478u16 => false,
            5479u16 => false,
            5480u16 => false,
            5481u16 => false,
            5482u16 => false,
            5483u16 => false,
            5484u16 => false,
            5485u16 => false,
            5486u16 => false,
            5487u16 => false,
            5488u16 => false,
            5489u16 => false,
            5490u16 => false,
            5491u16 => false,
            5492u16 => false,
            5493u16 => false,
            5494u16 => false,
            5495u16 => false,
            5496u16 => false,
            5497u16 => false,
            5498u16 => false,
            5499u16 => false,
            5500u16 => false,
            5501u16 => false,
            5502u16 => false,
            5503u16 => false,
            5504u16 => false,
            5505u16 => false,
            5506u16 => false,
            5507u16 => false,
            5508u16 => false,
            5509u16 => false,
            5510u16 => false,
            5511u16 => false,
            5512u16 => false,
            5513u16 => false,
            5514u16 => false,
            5515u16 => false,
            5516u16 => false,
            5517u16 => false,
            5518u16 => false,
            5519u16 => false,
            5520u16 => false,
            5521u16 => false,
            5522u16 => false,
            5523u16 => false,
            5524u16 => false,
            5525u16 => false,
            5526u16 => false,
            5527u16 => false,
            5528u16 => false,
            5529u16 => false,
            5530u16 => false,
            5531u16 => false,
            5532u16 => false,
            5533u16 => false,
            5534u16 => false,
            5535u16 => false,
            5536u16 => false,
            5537u16 => false,
            5538u16 => false,
            5539u16 => false,
            5540u16 => false,
            5541u16 => false,
            5542u16 => false,
            5543u16 => false,
            5544u16 => false,
            5545u16 => false,
            5546u16 => false,
            5547u16 => false,
            5548u16 => false,
            5549u16 => false,
            5550u16 => false,
            5551u16 => false,
            5552u16 => false,
            5553u16 => false,
            5554u16 => false,
            5555u16 => false,
            5556u16 => false,
            5557u16 => false,
            5558u16 => false,
            5559u16 => false,
            5560u16 => false,
            5561u16 => false,
            5562u16 => false,
            5563u16 => false,
            5564u16 => false,
            5565u16 => false,
            5566u16 => false,
            5567u16 => false,
            5568u16 => false,
            5569u16 => false,
            5570u16 => false,
            5571u16 => false,
            5572u16 => false,
            5573u16 => false,
            5574u16 => false,
            5575u16 => false,
            5576u16 => false,
            5577u16 => false,
            5578u16 => false,
            5579u16 => false,
            5580u16 => false,
            5581u16 => false,
            5582u16 => false,
            5583u16 => false,
            5584u16 => false,
            5585u16 => false,
            5586u16 => false,
            5587u16 => false,
            5588u16 => false,
            5589u16 => false,
            5590u16 => false,
            5591u16 => false,
            5592u16 => false,
            5593u16 => false,
            5594u16 => false,
            5595u16 => false,
            5596u16 => false,
            5597u16 => false,
            5598u16 => false,
            5599u16 => false,
            5600u16 => false,
            5601u16 => false,
            5602u16 => false,
            5603u16 => false,
            5604u16 => false,
            5605u16 => false,
            5606u16 => false,
            5607u16 => false,
            5608u16 => false,
            5609u16 => false,
            5610u16 => false,
            5611u16 => false,
            5612u16 => false,
            5613u16 => false,
            5614u16 => false,
            5615u16 => false,
            5616u16 => false,
            5617u16 => false,
            5618u16 => false,
            5619u16 => false,
            5620u16 => false,
            5621u16 => false,
            5622u16 => false,
            5623u16 => false,
            5624u16 => false,
            5625u16 => false,
            5626u16 => false,
            5627u16 => false,
            5628u16 => false,
            5629u16 => false,
            5630u16 => false,
            5631u16 => false,
            5632u16 => false,
            5633u16 => false,
            5634u16 => false,
            5635u16 => false,
            5636u16 => false,
            5637u16 => false,
            5638u16 => false,
            5639u16 => false,
            5640u16 => false,
            5641u16 => false,
            5642u16 => false,
            5643u16 => false,
            5644u16 => false,
            5645u16 => false,
            5646u16 => false,
            5647u16 => false,
            5648u16 => false,
            5649u16 => false,
            5650u16 => false,
            5651u16 => false,
            5652u16 => false,
            5653u16 => false,
            5654u16 => false,
            5655u16 => false,
            5656u16 => false,
            5657u16 => false,
            5658u16 => false,
            5659u16 => false,
            5660u16 => false,
            5661u16 => false,
            5662u16 => false,
            5663u16 => false,
            5664u16 => false,
            5665u16 => false,
            5666u16 => false,
            5667u16 => false,
            5668u16 => false,
            5669u16 => false,
            5670u16 => false,
            5671u16 => false,
            5672u16 => false,
            5673u16 => false,
            5674u16 => false,
            5675u16 => false,
            5676u16 => false,
            5677u16 => false,
            5678u16 => false,
            5679u16 => false,
            5680u16 => false,
            5681u16 => false,
            5682u16 => false,
            5683u16 => false,
            5684u16 => false,
            5685u16 => false,
            5686u16 => false,
            5687u16 => false,
            5688u16 => false,
            5689u16 => false,
            5690u16 => false,
            5691u16 => false,
            5692u16 => false,
            5693u16 => false,
            5694u16 => false,
            5695u16 => false,
            5696u16 => false,
            5697u16 => false,
            5698u16 => false,
            5699u16 => false,
            5700u16 => false,
            5701u16 => false,
            5702u16 => false,
            5703u16 => false,
            5704u16 => false,
            5705u16 => false,
            5706u16 => false,
            5707u16 => false,
            5708u16 => false,
            5709u16 => false,
            5710u16 => false,
            5711u16 => false,
            5712u16 => false,
            5713u16 => false,
            5714u16 => false,
            5715u16 => false,
            5716u16 => false,
            5717u16 => false,
            5718u16 => false,
            5719u16 => false,
            5720u16 => false,
            5721u16 => false,
            5722u16 => false,
            5723u16 => false,
            5724u16 => false,
            5725u16 => false,
            5726u16 => false,
            5727u16 => false,
            5728u16 => false,
            5729u16 => false,
            5730u16 => false,
            5731u16 => false,
            5732u16 => false,
            5733u16 => false,
            5738u16 => false,
            5739u16 => false,
            5740u16 => false,
            5741u16 => false,
            5742u16 => false,
            5743u16 => false,
            5744u16 => false,
            5745u16 => false,
            5746u16 => false,
            5747u16 => false,
            5748u16 => false,
            5749u16 => false,
            5750u16 => false,
            5751u16 => false,
            5752u16 => false,
            5753u16 => false,
            5754u16 => false,
            5755u16 => false,
            5756u16 => false,
            5757u16 => false,
            5758u16 => false,
            5759u16 => false,
            5760u16 => false,
            5761u16 => false,
            5762u16 => false,
            5763u16 => false,
            5764u16 => false,
            5765u16 => false,
            5766u16 => false,
            5767u16 => false,
            5768u16 => false,
            5769u16 => false,
            5770u16 => false,
            5771u16 => false,
            5780u16 => false,
            5799u16 => false,
            5800u16 => false,
            5801u16 => false,
            5802u16 => false,
            5803u16 => false,
            5804u16 => false,
            5805u16 => false,
            5806u16 => false,
            5807u16 => false,
            5808u16 => false,
            5809u16 => false,
            5810u16 => false,
            5811u16 => false,
            5812u16 => false,
            5813u16 => false,
            5814u16 => false,
            5859u16 => false,
            5860u16 => false,
            5861u16 => false,
            5862u16 => false,
            5863u16 => false,
            5865u16 => false,
            5866u16 => false,
            5946u16 => false,
            5947u16 => false,
            5948u16 => false,
            5949u16 => false,
            5950u16 => false,
            5951u16 => false,
            5952u16 => false,
            5953u16 => false,
            5954u16 => false,
            5955u16 => false,
            5956u16 => false,
            5957u16 => false,
            5958u16 => false,
            5959u16 => false,
            5960u16 => false,
            5961u16 => false,
            5962u16 => false,
            5963u16 => false,
            5964u16 => false,
            5965u16 => false,
            5966u16 => false,
            5967u16 => false,
            5968u16 => false,
            5969u16 => false,
            5970u16 => false,
            5971u16 => false,
            5972u16 => false,
            5973u16 => false,
            5974u16 => false,
            5975u16 => false,
            5976u16 => false,
            5977u16 => false,
            5978u16 => false,
            5979u16 => false,
            5980u16 => false,
            5981u16 => false,
            5982u16 => false,
            5983u16 => false,
            5984u16 => false,
            5985u16 => false,
            5986u16 => false,
            5987u16 => false,
            5988u16 => false,
            5989u16 => false,
            5990u16 => false,
            5991u16 => false,
            5992u16 => false,
            5993u16 => false,
            5994u16 => false,
            5995u16 => false,
            5996u16 => false,
            5997u16 => false,
            5998u16 => false,
            5999u16 => false,
            6000u16 => false,
            6001u16 => false,
            6002u16 => false,
            6003u16 => false,
            6004u16 => false,
            6005u16 => false,
            6006u16 => false,
            6007u16 => false,
            6008u16 => false,
            6009u16 => false,
            6010u16 => false,
            6011u16 => false,
            6012u16 => false,
            6013u16 => false,
            6014u16 => false,
            6015u16 => false,
            6016u16 => false,
            6017u16 => false,
            6018u16 => false,
            6019u16 => false,
            6020u16 => false,
            6021u16 => false,
            6022u16 => false,
            6023u16 => false,
            6024u16 => false,
            6025u16 => false,
            6026u16 => false,
            6027u16 => false,
            6028u16 => false,
            6029u16 => false,
            6030u16 => false,
            6031u16 => false,
            6032u16 => false,
            6033u16 => false,
            6034u16 => false,
            6035u16 => false,
            6036u16 => false,
            6037u16 => false,
            6038u16 => false,
            6039u16 => false,
            6040u16 => false,
            6041u16 => false,
            6042u16 => false,
            6043u16 => false,
            6044u16 => false,
            6045u16 => false,
            6046u16 => false,
            6047u16 => false,
            6048u16 => false,
            6049u16 => false,
            6050u16 => false,
            6051u16 => false,
            6052u16 => false,
            6053u16 => false,
            6054u16 => false,
            6055u16 => false,
            6056u16 => false,
            6057u16 => false,
            6058u16 => false,
            6059u16 => false,
            6060u16 => false,
            6061u16 => false,
            6062u16 => false,
            6063u16 => false,
            6064u16 => false,
            6065u16 => false,
            6066u16 => false,
            6067u16 => false,
            6068u16 => false,
            6069u16 => false,
            6070u16 => false,
            6071u16 => false,
            6072u16 => false,
            6073u16 => false,
            6074u16 => false,
            6075u16 => false,
            6076u16 => false,
            6077u16 => false,
            6078u16 => false,
            6079u16 => false,
            6080u16 => false,
            6081u16 => false,
            6082u16 => false,
            6083u16 => false,
            6084u16 => false,
            6085u16 => false,
            6086u16 => false,
            6087u16 => false,
            6088u16 => false,
            6089u16 => false,
            6090u16 => false,
            6091u16 => false,
            6092u16 => false,
            6093u16 => false,
            6094u16 => false,
            6095u16 => false,
            6096u16 => false,
            6097u16 => false,
            6098u16 => false,
            6099u16 => false,
            6100u16 => false,
            6101u16 => false,
            6102u16 => false,
            6103u16 => false,
            6104u16 => false,
            6105u16 => false,
            6106u16 => false,
            6107u16 => false,
            6108u16 => false,
            6109u16 => false,
            6110u16 => false,
            6111u16 => false,
            6112u16 => false,
            6113u16 => false,
            6114u16 => false,
            6115u16 => false,
            6116u16 => false,
            6117u16 => false,
            6118u16 => false,
            6119u16 => false,
            6120u16 => false,
            6121u16 => false,
            6122u16 => false,
            6123u16 => false,
            6124u16 => false,
            6125u16 => false,
            6126u16 => false,
            6127u16 => false,
            6128u16 => false,
            6129u16 => false,
            6130u16 => false,
            6131u16 => false,
            6132u16 => false,
            6133u16 => false,
            6134u16 => false,
            6135u16 => false,
            6136u16 => false,
            6137u16 => false,
            6138u16 => false,
            6139u16 => false,
            6140u16 => false,
            6141u16 => false,
            6142u16 => false,
            6143u16 => false,
            6144u16 => false,
            6145u16 => false,
            6146u16 => false,
            6147u16 => false,
            6148u16 => false,
            6149u16 => false,
            6150u16 => false,
            6151u16 => false,
            6152u16 => false,
            6153u16 => false,
            6154u16 => false,
            6155u16 => false,
            6156u16 => false,
            6157u16 => false,
            6158u16 => false,
            6159u16 => false,
            6160u16 => false,
            6161u16 => false,
            6162u16 => false,
            6163u16 => false,
            6164u16 => false,
            6165u16 => false,
            6166u16 => false,
            6167u16 => false,
            6168u16 => false,
            6169u16 => false,
            6170u16 => false,
            6171u16 => false,
            6172u16 => false,
            6173u16 => false,
            6174u16 => false,
            6175u16 => false,
            6176u16 => false,
            6177u16 => false,
            6178u16 => false,
            6179u16 => false,
            6180u16 => false,
            6181u16 => false,
            6182u16 => false,
            6183u16 => false,
            6184u16 => false,
            6185u16 => false,
            6186u16 => false,
            6187u16 => false,
            6188u16 => false,
            6189u16 => false,
            6190u16 => false,
            6191u16 => false,
            6192u16 => false,
            6193u16 => false,
            6194u16 => false,
            6195u16 => false,
            6196u16 => false,
            6197u16 => false,
            6198u16 => false,
            6199u16 => false,
            6200u16 => false,
            6201u16 => false,
            6202u16 => false,
            6203u16 => false,
            6204u16 => false,
            6205u16 => false,
            6206u16 => false,
            6207u16 => false,
            6208u16 => false,
            6209u16 => false,
            6210u16 => false,
            6211u16 => false,
            6212u16 => false,
            6213u16 => false,
            6214u16 => false,
            6215u16 => false,
            6216u16 => false,
            6217u16 => false,
            6218u16 => false,
            6219u16 => false,
            6220u16 => false,
            6221u16 => false,
            6222u16 => false,
            6223u16 => false,
            6224u16 => false,
            6225u16 => false,
            6226u16 => false,
            6227u16 => false,
            6228u16 => false,
            6229u16 => false,
            6230u16 => false,
            6231u16 => false,
            6232u16 => false,
            6233u16 => false,
            6234u16 => false,
            6235u16 => false,
            6236u16 => false,
            6237u16 => false,
            6238u16 => false,
            6239u16 => false,
            6240u16 => false,
            6241u16 => false,
            6242u16 => false,
            6243u16 => false,
            6244u16 => false,
            6245u16 => false,
            6246u16 => false,
            6247u16 => false,
            6248u16 => false,
            6249u16 => false,
            6250u16 => false,
            6251u16 => false,
            6252u16 => false,
            6253u16 => false,
            6254u16 => false,
            6255u16 => false,
            6256u16 => false,
            6257u16 => false,
            6258u16 => false,
            6259u16 => false,
            6260u16 => false,
            6261u16 => false,
            6262u16 => false,
            6263u16 => false,
            6264u16 => false,
            6265u16 => false,
            6266u16 => false,
            6267u16 => false,
            6268u16 => false,
            6269u16 => false,
            6270u16 => false,
            6271u16 => false,
            6272u16 => false,
            6273u16 => false,
            6274u16 => false,
            6275u16 => false,
            6276u16 => false,
            6277u16 => false,
            6278u16 => false,
            6279u16 => false,
            6280u16 => false,
            6281u16 => false,
            6282u16 => false,
            6283u16 => false,
            6284u16 => false,
            6285u16 => false,
            6286u16 => false,
            6287u16 => false,
            6288u16 => false,
            6289u16 => false,
            6290u16 => false,
            6291u16 => false,
            6292u16 => false,
            6293u16 => false,
            6294u16 => false,
            6295u16 => false,
            6296u16 => false,
            6297u16 => false,
            6298u16 => false,
            6299u16 => false,
            6300u16 => false,
            6301u16 => false,
            6302u16 => false,
            6303u16 => false,
            6304u16 => false,
            6305u16 => false,
            6306u16 => false,
            6307u16 => false,
            6308u16 => false,
            6309u16 => false,
            6310u16 => false,
            6311u16 => false,
            6312u16 => false,
            6313u16 => false,
            6314u16 => false,
            6315u16 => false,
            6316u16 => false,
            6317u16 => false,
            6318u16 => false,
            6319u16 => false,
            6320u16 => false,
            6321u16 => false,
            6322u16 => false,
            6323u16 => false,
            6324u16 => false,
            6325u16 => false,
            6326u16 => false,
            6327u16 => false,
            6328u16 => false,
            6329u16 => false,
            6330u16 => false,
            6331u16 => false,
            6332u16 => false,
            6333u16 => false,
            6334u16 => false,
            6335u16 => false,
            6336u16 => false,
            6337u16 => false,
            6338u16 => false,
            6339u16 => false,
            6340u16 => false,
            6341u16 => false,
            6342u16 => false,
            6343u16 => false,
            6344u16 => false,
            6345u16 => false,
            6346u16 => false,
            6347u16 => false,
            6348u16 => false,
            6349u16 => false,
            6350u16 => false,
            6351u16 => false,
            6352u16 => false,
            6353u16 => false,
            6354u16 => false,
            6355u16 => false,
            6356u16 => false,
            6357u16 => false,
            6358u16 => false,
            6359u16 => false,
            6360u16 => false,
            6361u16 => false,
            6362u16 => false,
            6363u16 => false,
            6364u16 => false,
            6365u16 => false,
            6366u16 => false,
            6367u16 => false,
            6368u16 => false,
            6369u16 => false,
            6370u16 => false,
            6371u16 => false,
            6372u16 => false,
            6373u16 => false,
            6374u16 => false,
            6375u16 => false,
            6376u16 => false,
            6377u16 => false,
            6378u16 => false,
            6379u16 => false,
            6380u16 => false,
            6381u16 => false,
            6382u16 => false,
            6383u16 => false,
            6384u16 => false,
            6385u16 => false,
            6386u16 => false,
            6387u16 => false,
            6388u16 => false,
            6389u16 => false,
            6390u16 => false,
            6391u16 => false,
            6392u16 => false,
            6393u16 => false,
            6394u16 => false,
            6395u16 => false,
            6396u16 => false,
            6397u16 => false,
            6398u16 => false,
            6399u16 => false,
            6400u16 => false,
            6401u16 => false,
            6402u16 => false,
            6403u16 => false,
            6404u16 => false,
            6405u16 => false,
            6406u16 => false,
            6407u16 => false,
            6408u16 => false,
            6409u16 => false,
            6410u16 => false,
            6411u16 => false,
            6412u16 => false,
            6413u16 => false,
            6414u16 => false,
            6415u16 => false,
            6416u16 => false,
            6417u16 => false,
            6418u16 => false,
            6419u16 => false,
            6420u16 => false,
            6421u16 => false,
            6422u16 => false,
            6423u16 => false,
            6424u16 => false,
            6425u16 => false,
            6426u16 => false,
            6427u16 => false,
            6428u16 => false,
            6429u16 => false,
            6430u16 => false,
            6431u16 => false,
            6432u16 => false,
            6433u16 => false,
            6434u16 => false,
            6435u16 => false,
            6436u16 => false,
            6437u16 => false,
            6438u16 => false,
            6439u16 => false,
            6440u16 => false,
            6441u16 => false,
            6442u16 => false,
            6443u16 => false,
            6444u16 => false,
            6445u16 => false,
            6446u16 => false,
            6447u16 => false,
            6448u16 => false,
            6449u16 => false,
            6450u16 => false,
            6451u16 => false,
            6452u16 => false,
            6453u16 => false,
            6454u16 => false,
            6455u16 => false,
            6456u16 => false,
            6457u16 => false,
            6458u16 => false,
            6459u16 => false,
            6460u16 => false,
            6461u16 => false,
            6462u16 => false,
            6463u16 => false,
            6464u16 => false,
            6465u16 => false,
            6466u16 => false,
            6467u16 => false,
            6468u16 => false,
            6469u16 => false,
            6470u16 => false,
            6471u16 => false,
            6472u16 => false,
            6473u16 => false,
            6474u16 => false,
            6475u16 => false,
            6476u16 => false,
            6477u16 => false,
            6478u16 => false,
            6479u16 => false,
            6480u16 => false,
            6481u16 => false,
            6482u16 => false,
            6483u16 => false,
            6484u16 => false,
            6485u16 => false,
            6486u16 => false,
            6487u16 => false,
            6488u16 => false,
            6489u16 => false,
            6490u16 => false,
            6491u16 => false,
            6492u16 => false,
            6493u16 => false,
            6494u16 => false,
            6495u16 => false,
            6496u16 => false,
            6497u16 => false,
            6498u16 => false,
            6499u16 => false,
            6500u16 => false,
            6501u16 => false,
            6502u16 => false,
            6503u16 => false,
            6504u16 => false,
            6505u16 => false,
            6506u16 => false,
            6507u16 => false,
            6508u16 => false,
            6509u16 => false,
            6510u16 => false,
            6511u16 => false,
            6512u16 => false,
            6513u16 => false,
            6514u16 => false,
            6515u16 => false,
            6516u16 => false,
            6517u16 => false,
            6518u16 => false,
            6519u16 => false,
            6520u16 => false,
            6521u16 => false,
            6522u16 => false,
            6523u16 => false,
            6524u16 => false,
            6525u16 => false,
            6526u16 => false,
            6527u16 => false,
            6528u16 => false,
            6529u16 => false,
            6530u16 => false,
            6531u16 => false,
            6532u16 => false,
            6533u16 => false,
            6534u16 => false,
            6535u16 => false,
            6536u16 => false,
            6537u16 => false,
            6742u16 => false,
            6743u16 => false,
            6744u16 => false,
            6745u16 => false,
            6746u16 => false,
            6747u16 => false,
            6748u16 => false,
            6749u16 => false,
            6750u16 => false,
            6751u16 => false,
            6752u16 => false,
            6753u16 => false,
            6754u16 => false,
            6755u16 => false,
            6756u16 => false,
            6757u16 => false,
            6758u16 => false,
            6759u16 => false,
            6760u16 => false,
            6761u16 => false,
            6762u16 => false,
            6763u16 => false,
            6764u16 => false,
            6765u16 => false,
            6766u16 => false,
            6767u16 => false,
            6768u16 => false,
            6769u16 => false,
            6770u16 => false,
            6771u16 => false,
            6772u16 => false,
            6773u16 => false,
            6774u16 => false,
            6775u16 => false,
            6776u16 => false,
            6777u16 => false,
            6778u16 => false,
            6779u16 => false,
            6780u16 => false,
            6781u16 => false,
            6782u16 => false,
            6783u16 => false,
            6784u16 => false,
            6785u16 => false,
            6786u16 => false,
            6787u16 => false,
            6788u16 => false,
            6789u16 => false,
            6790u16 => false,
            6791u16 => false,
            6792u16 => false,
            6793u16 => false,
            6794u16 => false,
            6795u16 => false,
            6796u16 => false,
            6797u16 => false,
            6798u16 => false,
            6799u16 => false,
            6800u16 => false,
            6801u16 => false,
            6802u16 => false,
            6803u16 => false,
            6804u16 => false,
            6805u16 => false,
            6806u16 => false,
            6807u16 => false,
            6808u16 => false,
            6809u16 => false,
            6810u16 => false,
            6811u16 => false,
            6813u16 => false,
            6814u16 => false,
            6815u16 => false,
            6816u16 => false,
            6817u16 => false,
            6818u16 => false,
            6819u16 => false,
            6820u16 => false,
            6821u16 => false,
            6822u16 => false,
            6823u16 => false,
            6824u16 => false,
            6825u16 => false,
            6826u16 => false,
            6827u16 => false,
            6828u16 => false,
            6829u16 => false,
            6830u16 => false,
            6831u16 => false,
            6832u16 => false,
            6833u16 => false,
            6834u16 => false,
            6835u16 => false,
            6836u16 => false,
            6837u16 => false,
            6838u16 => false,
            6839u16 => false,
            6840u16 => false,
            6841u16 => false,
            6842u16 => false,
            6843u16 => false,
            6844u16 => false,
            6845u16 => false,
            6846u16 => false,
            6847u16 => false,
            6848u16 => false,
            6849u16 => false,
            6850u16 => false,
            6851u16 => false,
            6852u16 => false,
            6853u16 => false,
            6854u16 => false,
            6855u16 => false,
            6856u16 => false,
            6857u16 => false,
            6858u16 => false,
            6859u16 => false,
            6860u16 => false,
            6861u16 => false,
            6862u16 => false,
            6863u16 => false,
            6864u16 => false,
            6865u16 => false,
            6866u16 => false,
            6867u16 => false,
            6868u16 => false,
            6869u16 => false,
            6870u16 => false,
            6871u16 => false,
            6872u16 => false,
            6873u16 => false,
            6874u16 => false,
            6875u16 => false,
            6876u16 => false,
            6877u16 => false,
            6878u16 => false,
            6879u16 => false,
            6880u16 => false,
            6881u16 => false,
            6882u16 => false,
            6883u16 => false,
            6884u16 => false,
            6885u16 => false,
            6886u16 => false,
            6887u16 => false,
            6888u16 => false,
            6889u16 => false,
            6890u16 => false,
            6891u16 => false,
            6892u16 => false,
            6893u16 => false,
            6894u16 => false,
            6895u16 => false,
            6896u16 => false,
            6897u16 => false,
            6898u16 => false,
            6899u16 => false,
            6900u16 => false,
            6901u16 => false,
            6902u16 => false,
            6903u16 => false,
            6904u16 => false,
            6905u16 => false,
            6906u16 => false,
            6907u16 => false,
            6908u16 => false,
            6909u16 => false,
            6910u16 => false,
            6911u16 => false,
            6912u16 => false,
            6913u16 => false,
            6914u16 => false,
            6915u16 => false,
            6916u16 => false,
            6917u16 => false,
            6918u16 => false,
            6919u16 => false,
            6920u16 => false,
            6921u16 => false,
            6922u16 => false,
            6923u16 => false,
            6924u16 => false,
            6925u16 => false,
            6926u16 => false,
            6927u16 => false,
            6928u16 => false,
            6929u16 => false,
            6930u16 => false,
            6931u16 => false,
            6932u16 => false,
            6933u16 => false,
            6934u16 => false,
            6935u16 => false,
            6936u16 => false,
            6937u16 => false,
            6938u16 => false,
            6939u16 => false,
            6940u16 => false,
            6941u16 => false,
            6942u16 => false,
            6943u16 => false,
            6944u16 => false,
            6945u16 => false,
            6946u16 => false,
            6947u16 => false,
            6948u16 => false,
            6949u16 => false,
            6950u16 => false,
            6951u16 => false,
            6952u16 => false,
            6953u16 => false,
            6954u16 => false,
            6955u16 => false,
            6956u16 => false,
            6957u16 => false,
            6958u16 => false,
            6959u16 => false,
            6960u16 => false,
            6961u16 => false,
            6962u16 => false,
            6963u16 => false,
            6964u16 => false,
            6965u16 => false,
            6966u16 => false,
            6967u16 => false,
            6968u16 => false,
            6969u16 => false,
            6970u16 => false,
            6971u16 => false,
            6972u16 => false,
            6973u16 => false,
            6974u16 => false,
            6975u16 => false,
            6976u16 => false,
            6977u16 => false,
            6978u16 => false,
            6979u16 => false,
            6980u16 => false,
            6981u16 => false,
            6982u16 => false,
            6983u16 => false,
            6984u16 => false,
            6985u16 => false,
            6986u16 => false,
            6987u16 => false,
            6988u16 => false,
            6989u16 => false,
            6990u16 => false,
            6991u16 => false,
            6992u16 => false,
            6993u16 => false,
            6994u16 => false,
            6995u16 => false,
            6996u16 => false,
            7271u16 => false,
            7385u16 => false,
            7386u16 => false,
            7387u16 => false,
            7388u16 => false,
            7390u16 => false,
            7391u16 => false,
            7392u16 => false,
            7393u16 => false,
            7394u16 => false,
            7395u16 => false,
            7396u16 => false,
            7397u16 => false,
            7398u16 => false,
            7399u16 => false,
            7400u16 => false,
            7401u16 => false,
            7402u16 => false,
            7403u16 => false,
            7404u16 => false,
            7405u16 => false,
            7406u16 => false,
            7416u16 => false,
            7419u16 => false,
            7420u16 => false,
            7421u16 => false,
            7422u16 => false,
            7423u16 => false,
            7424u16 => false,
            7425u16 => false,
            7426u16 => false,
            7427u16 => false,
            7428u16 => false,
            7429u16 => false,
            7430u16 => false,
            7521u16 => false,
            7522u16 => false,
            7523u16 => false,
            7524u16 => false,
            7525u16 => false,
            7526u16 => false,
            7527u16 => false,
            7528u16 => false,
            7529u16 => false,
            7530u16 => false,
            7531u16 => false,
            7532u16 => false,
            7533u16 => false,
            7534u16 => false,
            7535u16 => false,
            7536u16 => false,
            7537u16 => false,
            7538u16 => false,
            7539u16 => false,
            7540u16 => false,
            7541u16 => false,
            7542u16 => false,
            7543u16 => false,
            7544u16 => false,
            7545u16 => false,
            7546u16 => false,
            7547u16 => false,
            7548u16 => false,
            7549u16 => false,
            7550u16 => false,
            7551u16 => false,
            7552u16 => false,
            7553u16 => false,
            7554u16 => false,
            7555u16 => false,
            7556u16 => false,
            7557u16 => false,
            7558u16 => false,
            7559u16 => false,
            7560u16 => false,
            7561u16 => false,
            7562u16 => false,
            7563u16 => false,
            7564u16 => false,
            7565u16 => false,
            7566u16 => false,
            7567u16 => false,
            7568u16 => false,
            7569u16 => false,
            7570u16 => false,
            7571u16 => false,
            7572u16 => false,
            7573u16 => false,
            7574u16 => false,
            7575u16 => false,
            7576u16 => false,
            7577u16 => false,
            7578u16 => false,
            7579u16 => false,
            7580u16 => false,
            7581u16 => false,
            7582u16 => false,
            7583u16 => false,
            7584u16 => false,
            7585u16 => false,
            7586u16 => false,
            7587u16 => false,
            7588u16 => false,
            7589u16 => false,
            7590u16 => false,
            7591u16 => false,
            7592u16 => false,
            7593u16 => false,
            7594u16 => false,
            7595u16 => false,
            7596u16 => false,
            7597u16 => false,
            7598u16 => false,
            7599u16 => false,
            7600u16 => false,
            7601u16 => false,
            7602u16 => false,
            7603u16 => false,
            7604u16 => false,
            7605u16 => false,
            7606u16 => false,
            7607u16 => false,
            7608u16 => false,
            7609u16 => false,
            7610u16 => false,
            7611u16 => false,
            7612u16 => false,
            7613u16 => false,
            7614u16 => false,
            7615u16 => false,
            7616u16 => false,
            7617u16 => false,
            7618u16 => false,
            7619u16 => false,
            7620u16 => false,
            7621u16 => false,
            7622u16 => false,
            7623u16 => false,
            7624u16 => false,
            7625u16 => false,
            7626u16 => false,
            7627u16 => false,
            7628u16 => false,
            7629u16 => false,
            7630u16 => false,
            7631u16 => false,
            7632u16 => false,
            7633u16 => false,
            7634u16 => false,
            7635u16 => false,
            7636u16 => false,
            7637u16 => false,
            7638u16 => false,
            7639u16 => false,
            7640u16 => false,
            7641u16 => false,
            7642u16 => false,
            7643u16 => false,
            7644u16 => false,
            7645u16 => false,
            7646u16 => false,
            7647u16 => false,
            7648u16 => false,
            7649u16 => false,
            7650u16 => false,
            7651u16 => false,
            7652u16 => false,
            7653u16 => false,
            7654u16 => false,
            7655u16 => false,
            7656u16 => false,
            7657u16 => false,
            7658u16 => false,
            7659u16 => false,
            7660u16 => false,
            7661u16 => false,
            7662u16 => false,
            7663u16 => false,
            7664u16 => false,
            7918u16 => false,
            8567u16 => false,
            8568u16 => false,
            8569u16 => false,
            8570u16 => false,
            8571u16 => false,
            8572u16 => false,
            8573u16 => false,
            8574u16 => false,
            8575u16 => false,
            8576u16 => false,
            8577u16 => false,
            8578u16 => false,
            8579u16 => false,
            8580u16 => false,
            8581u16 => false,
            8582u16 => false,
            8583u16 => false,
            8584u16 => false,
            8585u16 => false,
            8586u16 => false,
            8587u16 => false,
            8588u16 => false,
            8589u16 => false,
            8590u16 => false,
            8591u16 => false,
            8592u16 => false,
            8593u16 => false,
            8594u16 => false,
            8595u16 => false,
            8596u16 => false,
            8597u16 => false,
            8598u16 => false,
            8599u16 => false,
            8600u16 => false,
            8601u16 => false,
            8602u16 => false,
            8603u16 => false,
            8604u16 => false,
            8605u16 => false,
            8606u16 => false,
            8607u16 => false,
            8608u16 => false,
            8609u16 => false,
            8610u16 => false,
            8611u16 => false,
            8612u16 => false,
            8613u16 => false,
            8614u16 => false,
            8615u16 => false,
            8616u16 => false,
            8617u16 => false,
            8618u16 => false,
            8619u16 => false,
            8620u16 => false,
            8621u16 => false,
            8622u16 => false,
            8623u16 => false,
            8624u16 => false,
            8625u16 => false,
            8626u16 => false,
            8627u16 => false,
            8628u16 => false,
            8629u16 => false,
            8630u16 => false,
            8631u16 => false,
            8632u16 => false,
            8633u16 => false,
            8634u16 => false,
            8635u16 => false,
            8636u16 => false,
            8637u16 => false,
            8638u16 => false,
            8639u16 => false,
            8640u16 => false,
            8641u16 => false,
            8642u16 => false,
            8643u16 => false,
            8644u16 => false,
            8645u16 => false,
            8646u16 => false,
            8647u16 => false,
            8648u16 => false,
            8649u16 => false,
            8650u16 => false,
            8651u16 => false,
            8652u16 => false,
            8653u16 => false,
            8654u16 => false,
            8655u16 => false,
            8656u16 => false,
            8657u16 => false,
            8658u16 => false,
            8659u16 => false,
            8660u16 => false,
            8661u16 => false,
            8662u16 => false,
            8663u16 => false,
            8664u16 => false,
            8665u16 => false,
            8666u16 => false,
            8667u16 => false,
            8668u16 => false,
            8669u16 => false,
            8670u16 => false,
            8671u16 => false,
            8672u16 => false,
            8673u16 => false,
            8674u16 => false,
            8675u16 => false,
            8676u16 => false,
            8677u16 => false,
            8678u16 => false,
            8679u16 => false,
            8680u16 => false,
            8681u16 => false,
            8682u16 => false,
            8683u16 => false,
            8684u16 => false,
            8685u16 => false,
            8686u16 => false,
            8687u16 => false,
            8688u16 => false,
            8689u16 => false,
            8690u16 => false,
            8691u16 => false,
            8692u16 => false,
            8693u16 => false,
            8694u16 => false,
            8695u16 => false,
            8696u16 => false,
            8697u16 => false,
            8698u16 => false,
            8699u16 => false,
            8700u16 => false,
            8701u16 => false,
            8702u16 => false,
            8703u16 => false,
            8704u16 => false,
            8705u16 => false,
            8706u16 => false,
            8707u16 => false,
            8708u16 => false,
            8709u16 => false,
            8710u16 => false,
            8711u16 => false,
            8712u16 => false,
            8713u16 => false,
            8714u16 => false,
            8715u16 => false,
            8716u16 => false,
            8717u16 => false,
            8718u16 => false,
            8719u16 => false,
            8720u16 => false,
            8721u16 => false,
            8722u16 => false,
            8723u16 => false,
            8724u16 => false,
            8725u16 => false,
            8726u16 => false,
            8727u16 => false,
            8728u16 => false,
            8729u16 => false,
            8730u16 => false,
            8731u16 => false,
            8732u16 => false,
            8733u16 => false,
            8734u16 => false,
            8735u16 => false,
            8736u16 => false,
            8737u16 => false,
            8738u16 => false,
            8739u16 => false,
            8740u16 => false,
            8741u16 => false,
            8742u16 => false,
            8743u16 => false,
            8744u16 => false,
            8745u16 => false,
            8746u16 => false,
            8747u16 => false,
            8748u16 => false,
            8749u16 => false,
            8750u16 => false,
            8751u16 => false,
            8752u16 => false,
            8753u16 => false,
            8754u16 => false,
            8755u16 => false,
            8756u16 => false,
            8757u16 => false,
            8758u16 => false,
            8759u16 => false,
            8760u16 => false,
            8761u16 => false,
            8762u16 => false,
            8763u16 => false,
            8764u16 => false,
            8765u16 => false,
            8766u16 => false,
            8767u16 => false,
            8768u16 => false,
            8769u16 => false,
            8770u16 => false,
            8771u16 => false,
            8772u16 => false,
            8773u16 => false,
            8774u16 => false,
            8775u16 => false,
            8776u16 => false,
            8777u16 => false,
            8778u16 => false,
            8779u16 => false,
            8780u16 => false,
            8781u16 => false,
            8782u16 => false,
            8783u16 => false,
            8784u16 => false,
            8785u16 => false,
            8786u16 => false,
            8787u16 => false,
            8788u16 => false,
            8789u16 => false,
            8790u16 => false,
            8791u16 => false,
            8792u16 => false,
            8793u16 => false,
            8794u16 => false,
            8795u16 => false,
            8796u16 => false,
            8797u16 => false,
            8798u16 => false,
            8799u16 => false,
            8800u16 => false,
            8801u16 => false,
            8802u16 => false,
            8803u16 => false,
            8804u16 => false,
            8805u16 => false,
            8806u16 => false,
            8807u16 => false,
            8808u16 => false,
            8809u16 => false,
            8810u16 => false,
            8811u16 => false,
            8812u16 => false,
            8813u16 => false,
            8814u16 => false,
            8815u16 => false,
            8816u16 => false,
            8817u16 => false,
            8818u16 => false,
            8819u16 => false,
            8820u16 => false,
            8821u16 => false,
            8822u16 => false,
            8823u16 => false,
            8824u16 => false,
            8825u16 => false,
            8826u16 => false,
            9003u16 => false,
            9004u16 => false,
            9005u16 => false,
            9006u16 => false,
            9007u16 => false,
            9008u16 => false,
            9009u16 => false,
            9010u16 => false,
            9011u16 => false,
            9012u16 => false,
            9013u16 => false,
            9014u16 => false,
            9015u16 => false,
            9016u16 => false,
            9017u16 => false,
            9018u16 => false,
            9019u16 => false,
            9020u16 => false,
            9021u16 => false,
            9022u16 => false,
            9023u16 => false,
            9024u16 => false,
            9025u16 => false,
            9026u16 => false,
            9027u16 => false,
            9028u16 => false,
            9029u16 => false,
            9030u16 => false,
            9031u16 => false,
            9032u16 => false,
            9033u16 => false,
            9034u16 => false,
            9085u16 => false,
            9086u16 => false,
            9087u16 => false,
            9088u16 => false,
            9089u16 => false,
            9090u16 => false,
            9091u16 => false,
            9092u16 => false,
            9093u16 => false,
            9094u16 => false,
            9180u16 => false,
            9181u16 => false,
            9182u16 => false,
            9183u16 => false,
            9184u16 => false,
            9185u16 => false,
            9186u16 => false,
            9187u16 => false,
            9188u16 => false,
            9189u16 => false,
            9190u16 => false,
            9191u16 => false,
            9192u16 => false,
            9193u16 => false,
            9194u16 => false,
            9195u16 => false,
            9196u16 => false,
            9197u16 => false,
            9198u16 => false,
            9199u16 => false,
            9200u16 => false,
            9201u16 => false,
            9202u16 => false,
            9203u16 => false,
            9232u16 => false,
            9233u16 => false,
            9234u16 => false,
            9235u16 => false,
            9236u16 => false,
            9237u16 => false,
            9238u16 => false,
            9239u16 => false,
            9240u16 => false,
            9241u16 => false,
            9242u16 => false,
            9243u16 => false,
            9244u16 => false,
            9245u16 => false,
            9246u16 => false,
            9247u16 => false,
            9248u16 => false,
            9249u16 => false,
            9250u16 => false,
            9251u16 => false,
            9252u16 => false,
            9253u16 => false,
            9254u16 => false,
            9255u16 => false,
            9256u16 => false,
            9257u16 => false,
            9258u16 => false,
            9259u16 => false,
            9260u16 => false,
            9261u16 => false,
            9262u16 => false,
            9263u16 => false,
            9264u16 => false,
            9265u16 => false,
            9266u16 => false,
            9267u16 => false,
            9268u16 => false,
            9269u16 => false,
            9270u16 => false,
            9271u16 => false,
            9272u16 => false,
            9273u16 => false,
            9274u16 => false,
            9275u16 => false,
            9276u16 => false,
            9277u16 => false,
            9278u16 => false,
            9279u16 => false,
            9280u16 => false,
            9281u16 => false,
            9282u16 => false,
            9283u16 => false,
            9284u16 => false,
            9285u16 => false,
            9286u16 => false,
            9287u16 => false,
            9288u16 => false,
            9289u16 => false,
            9290u16 => false,
            9291u16 => false,
            9292u16 => false,
            9293u16 => false,
            9294u16 => false,
            9295u16 => false,
            9296u16 => false,
            9297u16 => false,
            9298u16 => false,
            9299u16 => false,
            9300u16 => false,
            9301u16 => false,
            9302u16 => false,
            9303u16 => false,
            9304u16 => false,
            9305u16 => false,
            9306u16 => false,
            9307u16 => false,
            9308u16 => false,
            9309u16 => false,
            9310u16 => false,
            9311u16 => false,
            9312u16 => false,
            9313u16 => false,
            9314u16 => false,
            9315u16 => false,
            9316u16 => false,
            9317u16 => false,
            9318u16 => false,
            9319u16 => false,
            9320u16 => false,
            9321u16 => false,
            9322u16 => false,
            9323u16 => false,
            9324u16 => false,
            9325u16 => false,
            9326u16 => false,
            9327u16 => false,
            9328u16 => false,
            9329u16 => false,
            9330u16 => false,
            9331u16 => false,
            9332u16 => false,
            9333u16 => false,
            9334u16 => false,
            9335u16 => false,
            9336u16 => false,
            9337u16 => false,
            9338u16 => false,
            9339u16 => false,
            9340u16 => false,
            9341u16 => false,
            9342u16 => false,
            9343u16 => false,
            9344u16 => false,
            9345u16 => false,
            9346u16 => false,
            9347u16 => false,
            9348u16 => false,
            9349u16 => false,
            9350u16 => false,
            9351u16 => false,
            9352u16 => false,
            9353u16 => false,
            9354u16 => false,
            9355u16 => false,
            9356u16 => false,
            9357u16 => false,
            9358u16 => false,
            9359u16 => false,
            9360u16 => false,
            9361u16 => false,
            9362u16 => false,
            9363u16 => false,
            9364u16 => false,
            9365u16 => false,
            9366u16 => false,
            9367u16 => false,
            9368u16 => false,
            9369u16 => false,
            9370u16 => false,
            9371u16 => false,
            9372u16 => false,
            9373u16 => false,
            9374u16 => false,
            9375u16 => false,
            9376u16 => false,
            9377u16 => false,
            9378u16 => false,
            9379u16 => false,
            9380u16 => false,
            9381u16 => false,
            9382u16 => false,
            9383u16 => false,
            9384u16 => false,
            9385u16 => false,
            9386u16 => false,
            9387u16 => false,
            9388u16 => false,
            9389u16 => false,
            9390u16 => false,
            9391u16 => false,
            9392u16 => false,
            9393u16 => false,
            9394u16 => false,
            9395u16 => false,
            9396u16 => false,
            9397u16 => false,
            9398u16 => false,
            9399u16 => false,
            9400u16 => false,
            9401u16 => false,
            9402u16 => false,
            9403u16 => false,
            9404u16 => false,
            9405u16 => false,
            9406u16 => false,
            9407u16 => false,
            9408u16 => false,
            9409u16 => false,
            9410u16 => false,
            9411u16 => false,
            9412u16 => false,
            9413u16 => false,
            9414u16 => false,
            9415u16 => false,
            9416u16 => false,
            9417u16 => false,
            9418u16 => false,
            9419u16 => false,
            9420u16 => false,
            9421u16 => false,
            9422u16 => false,
            9423u16 => false,
            9424u16 => false,
            9425u16 => false,
            9426u16 => false,
            9427u16 => false,
            9428u16 => false,
            9429u16 => false,
            9430u16 => false,
            9431u16 => false,
            9432u16 => false,
            9433u16 => false,
            9434u16 => false,
            9435u16 => false,
            9436u16 => false,
            9437u16 => false,
            9438u16 => false,
            9439u16 => false,
            9440u16 => false,
            9441u16 => false,
            9442u16 => false,
            9443u16 => false,
            9444u16 => false,
            9445u16 => false,
            9446u16 => false,
            9447u16 => false,
            9448u16 => false,
            9449u16 => false,
            9450u16 => false,
            9451u16 => false,
            9452u16 => false,
            9453u16 => false,
            9454u16 => false,
            9455u16 => false,
            9456u16 => false,
            9457u16 => false,
            9458u16 => false,
            9459u16 => false,
            9460u16 => false,
            9461u16 => false,
            9462u16 => false,
            9463u16 => false,
            9464u16 => false,
            9465u16 => false,
            9466u16 => false,
            9467u16 => false,
            9468u16 => false,
            9469u16 => false,
            9470u16 => false,
            9471u16 => false,
            9472u16 => false,
            9473u16 => false,
            9474u16 => false,
            9475u16 => false,
            9476u16 => false,
            9477u16 => false,
            9478u16 => false,
            9479u16 => false,
            9480u16 => false,
            9481u16 => false,
            9482u16 => false,
            9483u16 => false,
            9484u16 => false,
            9485u16 => false,
            9486u16 => false,
            9487u16 => false,
            9488u16 => false,
            9489u16 => false,
            9490u16 => false,
            9491u16 => false,
            9492u16 => false,
            9493u16 => false,
            9494u16 => false,
            9495u16 => false,
            9496u16 => false,
            9497u16 => false,
            9498u16 => false,
            9499u16 => false,
            9500u16 => false,
            9501u16 => false,
            9502u16 => false,
            9503u16 => false,
            9504u16 => false,
            9505u16 => false,
            9506u16 => false,
            9507u16 => false,
            9508u16 => false,
            9509u16 => false,
            9510u16 => false,
            9511u16 => false,
            9512u16 => false,
            9513u16 => false,
            9514u16 => false,
            9515u16 => false,
            9516u16 => false,
            9517u16 => false,
            9518u16 => false,
            9519u16 => false,
            9520u16 => false,
            9521u16 => false,
            9522u16 => false,
            9523u16 => false,
            9524u16 => false,
            9525u16 => false,
            9526u16 => false,
            9527u16 => false,
            9528u16 => false,
            9529u16 => false,
            9530u16 => false,
            9531u16 => false,
            9532u16 => false,
            9533u16 => false,
            9534u16 => false,
            9535u16 => false,
            9536u16 => false,
            9537u16 => false,
            9538u16 => false,
            9539u16 => false,
            9540u16 => false,
            9541u16 => false,
            9542u16 => false,
            9543u16 => false,
            9544u16 => false,
            9545u16 => false,
            9546u16 => false,
            9547u16 => false,
            9548u16 => false,
            9549u16 => false,
            9550u16 => false,
            9551u16 => false,
            9552u16 => false,
            9553u16 => false,
            9554u16 => false,
            9555u16 => false,
            9556u16 => false,
            9557u16 => false,
            9558u16 => false,
            9559u16 => false,
            9560u16 => false,
            9561u16 => false,
            9562u16 => false,
            9563u16 => false,
            9564u16 => false,
            9565u16 => false,
            9566u16 => false,
            9567u16 => false,
            9568u16 => false,
            9569u16 => false,
            9570u16 => false,
            9571u16 => false,
            9572u16 => false,
            9573u16 => false,
            9574u16 => false,
            9575u16 => false,
            9576u16 => false,
            9577u16 => false,
            9578u16 => false,
            9579u16 => false,
            9580u16 => false,
            9581u16 => false,
            9582u16 => false,
            9583u16 => false,
            9584u16 => false,
            9585u16 => false,
            9586u16 => false,
            9587u16 => false,
            9588u16 => false,
            9589u16 => false,
            9590u16 => false,
            9591u16 => false,
            9592u16 => false,
            9593u16 => false,
            9594u16 => false,
            9595u16 => false,
            9596u16 => false,
            9597u16 => false,
            9598u16 => false,
            9599u16 => false,
            9600u16 => false,
            9601u16 => false,
            9602u16 => false,
            9603u16 => false,
            9604u16 => false,
            9605u16 => false,
            9606u16 => false,
            9607u16 => false,
            9608u16 => false,
            9609u16 => false,
            9610u16 => false,
            9611u16 => false,
            9612u16 => false,
            9613u16 => false,
            9614u16 => false,
            9615u16 => false,
            9616u16 => false,
            9617u16 => false,
            9618u16 => false,
            9619u16 => false,
            9620u16 => false,
            9621u16 => false,
            9622u16 => false,
            9623u16 => false,
            9624u16 => false,
            9625u16 => false,
            9626u16 => false,
            9627u16 => false,
            9628u16 => false,
            9629u16 => false,
            9630u16 => false,
            9631u16 => false,
            9632u16 => false,
            9633u16 => false,
            9634u16 => false,
            9635u16 => false,
            9636u16 => false,
            9637u16 => false,
            9638u16 => false,
            9639u16 => false,
            9640u16 => false,
            9641u16 => false,
            9642u16 => false,
            9643u16 => false,
            9644u16 => false,
            9645u16 => false,
            9646u16 => false,
            9647u16 => false,
            9648u16 => false,
            9649u16 => false,
            9650u16 => false,
            9651u16 => false,
            9652u16 => false,
            9653u16 => false,
            9654u16 => false,
            9655u16 => false,
            9656u16 => false,
            9657u16 => false,
            9658u16 => false,
            9659u16 => false,
            9660u16 => false,
            9661u16 => false,
            9662u16 => false,
            9663u16 => false,
            9664u16 => false,
            9665u16 => false,
            9666u16 => false,
            9667u16 => false,
            9668u16 => false,
            9669u16 => false,
            9670u16 => false,
            9671u16 => false,
            9672u16 => false,
            9673u16 => false,
            9674u16 => false,
            9675u16 => false,
            9676u16 => false,
            9677u16 => false,
            9678u16 => false,
            9679u16 => false,
            9680u16 => false,
            9681u16 => false,
            9682u16 => false,
            9683u16 => false,
            9684u16 => false,
            9685u16 => false,
            9686u16 => false,
            9687u16 => false,
            9688u16 => false,
            9689u16 => false,
            9690u16 => false,
            9691u16 => false,
            9692u16 => false,
            9693u16 => false,
            9694u16 => false,
            9695u16 => false,
            9696u16 => false,
            9697u16 => false,
            9698u16 => false,
            9699u16 => false,
            9700u16 => false,
            9701u16 => false,
            9702u16 => false,
            9703u16 => false,
            9704u16 => false,
            9705u16 => false,
            9706u16 => false,
            9707u16 => false,
            9708u16 => false,
            9709u16 => false,
            9710u16 => false,
            9711u16 => false,
            9712u16 => false,
            9713u16 => false,
            9714u16 => false,
            9715u16 => false,
            9716u16 => false,
            9717u16 => false,
            9718u16 => false,
            9719u16 => false,
            9720u16 => false,
            9721u16 => false,
            9722u16 => false,
            9723u16 => false,
            9724u16 => false,
            9725u16 => false,
            9726u16 => false,
            9727u16 => false,
            9728u16 => false,
            9729u16 => false,
            9730u16 => false,
            9731u16 => false,
            9732u16 => false,
            9733u16 => false,
            9734u16 => false,
            9735u16 => false,
            9736u16 => false,
            9737u16 => false,
            9738u16 => false,
            9739u16 => false,
            9740u16 => false,
            9741u16 => false,
            9742u16 => false,
            9743u16 => false,
            10224u16 => false,
            10225u16 => false,
            10226u16 => false,
            10227u16 => false,
            10228u16 => false,
            10229u16 => false,
            10230u16 => false,
            10231u16 => false,
            10232u16 => false,
            10233u16 => false,
            10234u16 => false,
            10235u16 => false,
            10236u16 => false,
            10237u16 => false,
            10238u16 => false,
            10239u16 => false,
            10240u16 => false,
            10241u16 => false,
            10242u16 => false,
            10243u16 => false,
            10244u16 => false,
            10245u16 => false,
            10246u16 => false,
            10247u16 => false,
            10248u16 => false,
            10249u16 => false,
            10250u16 => false,
            10251u16 => false,
            10252u16 => false,
            10253u16 => false,
            10254u16 => false,
            10255u16 => false,
            10256u16 => false,
            10257u16 => false,
            10258u16 => false,
            10259u16 => false,
            10260u16 => false,
            10261u16 => false,
            10262u16 => false,
            10263u16 => false,
            10264u16 => false,
            10265u16 => false,
            10266u16 => false,
            10267u16 => false,
            10268u16 => false,
            10269u16 => false,
            10270u16 => false,
            10271u16 => false,
            10272u16 => false,
            10273u16 => false,
            10274u16 => false,
            10275u16 => false,
            10276u16 => false,
            10277u16 => false,
            10278u16 => false,
            10279u16 => false,
            10280u16 => false,
            10281u16 => false,
            10282u16 => false,
            10283u16 => false,
            10284u16 => false,
            10285u16 => false,
            10286u16 => false,
            10287u16 => false,
            10288u16 => false,
            10289u16 => false,
            10290u16 => false,
            10291u16 => false,
            10292u16 => false,
            10293u16 => false,
            10294u16 => false,
            10295u16 => false,
            10296u16 => false,
            10297u16 => false,
            10298u16 => false,
            10299u16 => false,
            10300u16 => false,
            10301u16 => false,
            10302u16 => false,
            10303u16 => false,
            10304u16 => false,
            10305u16 => false,
            10306u16 => false,
            10307u16 => false,
            10308u16 => false,
            10309u16 => false,
            10310u16 => false,
            10311u16 => false,
            10312u16 => false,
            10313u16 => false,
            10314u16 => false,
            10315u16 => false,
            10316u16 => false,
            10317u16 => false,
            10318u16 => false,
            10319u16 => false,
            10320u16 => false,
            10321u16 => false,
            10606u16 => false,
            10607u16 => false,
            10608u16 => false,
            10609u16 => false,
            10610u16 => false,
            10611u16 => false,
            10612u16 => false,
            10613u16 => false,
            10614u16 => false,
            10615u16 => false,
            10616u16 => false,
            10617u16 => false,
            10618u16 => false,
            10619u16 => false,
            10620u16 => false,
            10621u16 => false,
            10622u16 => false,
            10623u16 => false,
            10624u16 => false,
            10625u16 => false,
            10626u16 => false,
            10627u16 => false,
            10628u16 => false,
            10629u16 => false,
            10630u16 => false,
            10631u16 => false,
            10632u16 => false,
            10633u16 => false,
            10634u16 => false,
            10635u16 => false,
            10636u16 => false,
            10637u16 => false,
            10638u16 => false,
            10639u16 => false,
            10640u16 => false,
            10641u16 => false,
            10642u16 => false,
            10643u16 => false,
            10644u16 => false,
            10645u16 => false,
            10646u16 => false,
            10647u16 => false,
            10648u16 => false,
            10649u16 => false,
            10650u16 => false,
            10651u16 => false,
            10652u16 => false,
            10653u16 => false,
            10654u16 => false,
            10655u16 => false,
            10656u16 => false,
            10657u16 => false,
            10658u16 => false,
            10659u16 => false,
            10660u16 => false,
            10661u16 => false,
            10662u16 => false,
            10663u16 => false,
            10664u16 => false,
            10665u16 => false,
            10666u16 => false,
            10667u16 => false,
            10668u16 => false,
            10669u16 => false,
            10670u16 => false,
            10671u16 => false,
            10672u16 => false,
            10673u16 => false,
            10674u16 => false,
            10675u16 => false,
            10676u16 => false,
            10677u16 => false,
            10678u16 => false,
            10679u16 => false,
            10680u16 => false,
            10681u16 => false,
            10682u16 => false,
            10683u16 => false,
            10684u16 => false,
            10685u16 => false,
            10686u16 => false,
            10687u16 => false,
            10688u16 => false,
            10689u16 => false,
            10690u16 => false,
            10691u16 => false,
            10692u16 => false,
            10693u16 => false,
            10694u16 => false,
            10695u16 => false,
            10696u16 => false,
            10697u16 => false,
            10698u16 => false,
            10699u16 => false,
            10700u16 => false,
            10701u16 => false,
            10702u16 => false,
            10703u16 => false,
            10704u16 => false,
            10705u16 => false,
            10706u16 => false,
            10707u16 => false,
            10708u16 => false,
            10709u16 => false,
            10710u16 => false,
            10711u16 => false,
            10712u16 => false,
            10713u16 => false,
            10714u16 => false,
            10715u16 => false,
            10716u16 => false,
            10717u16 => false,
            10718u16 => false,
            10719u16 => false,
            10720u16 => false,
            10721u16 => false,
            10722u16 => false,
            10723u16 => false,
            10724u16 => false,
            10725u16 => false,
            10726u16 => false,
            10727u16 => false,
            10728u16 => false,
            10729u16 => false,
            10730u16 => false,
            10731u16 => false,
            10732u16 => false,
            10733u16 => false,
            10734u16 => false,
            10735u16 => false,
            10736u16 => false,
            10737u16 => false,
            10738u16 => false,
            10739u16 => false,
            10740u16 => false,
            10741u16 => false,
            10742u16 => false,
            10743u16 => false,
            10744u16 => false,
            10745u16 => false,
            10746u16 => false,
            10747u16 => false,
            10748u16 => false,
            10749u16 => false,
            10750u16 => false,
            10751u16 => false,
            10752u16 => false,
            10753u16 => false,
            10754u16 => false,
            10755u16 => false,
            10756u16 => false,
            10757u16 => false,
            10758u16 => false,
            10759u16 => false,
            10760u16 => false,
            10761u16 => false,
            10762u16 => false,
            10763u16 => false,
            10764u16 => false,
            10765u16 => false,
            10766u16 => false,
            10767u16 => false,
            10768u16 => false,
            10769u16 => false,
            10770u16 => false,
            10771u16 => false,
            10772u16 => false,
            10773u16 => false,
            10774u16 => false,
            10775u16 => false,
            10776u16 => false,
            10777u16 => false,
            10778u16 => false,
            10779u16 => false,
            10780u16 => false,
            10781u16 => false,
            10782u16 => false,
            10783u16 => false,
            10784u16 => false,
            10785u16 => false,
            10786u16 => false,
            10787u16 => false,
            10788u16 => false,
            10789u16 => false,
            10790u16 => false,
            10791u16 => false,
            10792u16 => false,
            10793u16 => false,
            10794u16 => false,
            10795u16 => false,
            10796u16 => false,
            10797u16 => false,
            10798u16 => false,
            10799u16 => false,
            10800u16 => false,
            10801u16 => false,
            10802u16 => false,
            10803u16 => false,
            10804u16 => false,
            10805u16 => false,
            10806u16 => false,
            10807u16 => false,
            10808u16 => false,
            10809u16 => false,
            10810u16 => false,
            10811u16 => false,
            10812u16 => false,
            10813u16 => false,
            10814u16 => false,
            10815u16 => false,
            10816u16 => false,
            10817u16 => false,
            10818u16 => false,
            10819u16 => false,
            10820u16 => false,
            10821u16 => false,
            10822u16 => false,
            10823u16 => false,
            10824u16 => false,
            10825u16 => false,
            10826u16 => false,
            10827u16 => false,
            10828u16 => false,
            10829u16 => false,
            10830u16 => false,
            10831u16 => false,
            10832u16 => false,
            10833u16 => false,
            10834u16 => false,
            10835u16 => false,
            10836u16 => false,
            10837u16 => false,
            10838u16 => false,
            10839u16 => false,
            10840u16 => false,
            10841u16 => false,
            10842u16 => false,
            10843u16 => false,
            10844u16 => false,
            10845u16 => false,
            10846u16 => false,
            10847u16 => false,
            10848u16 => false,
            10849u16 => false,
            10850u16 => false,
            10851u16 => false,
            10852u16 => false,
            10853u16 => false,
            10854u16 => false,
            10855u16 => false,
            10856u16 => false,
            10857u16 => false,
            10858u16 => false,
            10859u16 => false,
            10860u16 => false,
            10861u16 => false,
            10862u16 => false,
            10863u16 => false,
            10864u16 => false,
            10865u16 => false,
            10866u16 => false,
            10867u16 => false,
            10868u16 => false,
            10869u16 => false,
            10870u16 => false,
            10871u16 => false,
            10872u16 => false,
            10873u16 => false,
            10874u16 => false,
            10875u16 => false,
            10876u16 => false,
            10877u16 => false,
            10878u16 => false,
            10879u16 => false,
            10880u16 => false,
            10881u16 => false,
            10882u16 => false,
            10883u16 => false,
            10884u16 => false,
            10885u16 => false,
            10886u16 => false,
            10887u16 => false,
            10888u16 => false,
            10889u16 => false,
            10890u16 => false,
            10891u16 => false,
            10892u16 => false,
            10893u16 => false,
            10894u16 => false,
            10895u16 => false,
            10896u16 => false,
            10897u16 => false,
            10898u16 => false,
            10899u16 => false,
            10900u16 => false,
            10901u16 => false,
            10902u16 => false,
            10903u16 => false,
            10904u16 => false,
            10905u16 => false,
            10906u16 => false,
            10907u16 => false,
            10908u16 => false,
            10909u16 => false,
            10910u16 => false,
            10911u16 => false,
            10912u16 => false,
            10913u16 => false,
            10914u16 => false,
            10915u16 => false,
            10916u16 => false,
            10917u16 => false,
            10918u16 => false,
            10919u16 => false,
            10920u16 => false,
            10921u16 => false,
            10922u16 => false,
            10923u16 => false,
            10924u16 => false,
            10925u16 => false,
            10926u16 => false,
            10927u16 => false,
            10928u16 => false,
            10929u16 => false,
            10930u16 => false,
            10931u16 => false,
            10932u16 => false,
            10933u16 => false,
            10934u16 => false,
            10935u16 => false,
            10936u16 => false,
            10937u16 => false,
            11681u16 => false,
            11682u16 => false,
            11683u16 => false,
            11684u16 => false,
            11685u16 => false,
            11686u16 => false,
            11687u16 => false,
            11688u16 => false,
            11689u16 => false,
            11690u16 => false,
            11691u16 => false,
            11692u16 => false,
            11693u16 => false,
            11694u16 => false,
            11695u16 => false,
            11696u16 => false,
            11697u16 => false,
            11698u16 => false,
            11699u16 => false,
            11700u16 => false,
            11701u16 => false,
            11702u16 => false,
            11703u16 => false,
            11704u16 => false,
            11705u16 => false,
            11706u16 => false,
            11707u16 => false,
            11708u16 => false,
            11709u16 => false,
            11710u16 => false,
            11711u16 => false,
            11712u16 => false,
            11713u16 => false,
            11714u16 => false,
            11715u16 => false,
            11716u16 => false,
            11717u16 => false,
            11718u16 => false,
            11719u16 => false,
            11720u16 => false,
            11721u16 => false,
            11722u16 => false,
            11723u16 => false,
            11724u16 => false,
            11725u16 => false,
            11726u16 => false,
            11727u16 => false,
            11728u16 => false,
            11729u16 => false,
            11730u16 => false,
            11731u16 => false,
            11732u16 => false,
            11733u16 => false,
            11734u16 => false,
            11735u16 => false,
            11736u16 => false,
            11737u16 => false,
            11738u16 => false,
            11739u16 => false,
            11740u16 => false,
            11741u16 => false,
            11742u16 => false,
            11743u16 => false,
            11744u16 => false,
            11745u16 => false,
            11746u16 => false,
            11747u16 => false,
            11748u16 => false,
            11749u16 => false,
            11750u16 => false,
            11751u16 => false,
            11752u16 => false,
            11753u16 => false,
            11754u16 => false,
            11755u16 => false,
            11756u16 => false,
            11757u16 => false,
            11758u16 => false,
            11759u16 => false,
            11760u16 => false,
            11761u16 => false,
            11762u16 => false,
            11763u16 => false,
            11764u16 => false,
            11765u16 => false,
            11766u16 => false,
            11767u16 => false,
            11768u16 => false,
            11769u16 => false,
            11770u16 => false,
            11771u16 => false,
            11772u16 => false,
            11773u16 => false,
            11774u16 => false,
            11775u16 => false,
            11776u16 => false,
            11777u16 => false,
            11778u16 => false,
            11779u16 => false,
            11780u16 => false,
            11781u16 => false,
            11782u16 => false,
            11783u16 => false,
            11784u16 => false,
            11785u16 => false,
            11786u16 => false,
            11787u16 => false,
            11788u16 => false,
            11789u16 => false,
            11790u16 => false,
            11791u16 => false,
            11792u16 => false,
            11793u16 => false,
            11794u16 => false,
            11795u16 => false,
            11796u16 => false,
            11797u16 => false,
            11798u16 => false,
            11799u16 => false,
            11800u16 => false,
            11801u16 => false,
            11802u16 => false,
            11803u16 => false,
            11804u16 => false,
            11805u16 => false,
            11806u16 => false,
            11807u16 => false,
            11808u16 => false,
            11809u16 => false,
            11810u16 => false,
            11811u16 => false,
            11812u16 => false,
            11813u16 => false,
            11814u16 => false,
            11815u16 => false,
            11816u16 => false,
            11817u16 => false,
            11818u16 => false,
            11819u16 => false,
            11820u16 => false,
            11821u16 => false,
            11822u16 => false,
            11823u16 => false,
            11824u16 => false,
            11825u16 => false,
            11826u16 => false,
            11827u16 => false,
            11828u16 => false,
            11829u16 => false,
            11830u16 => false,
            11831u16 => false,
            11832u16 => false,
            11833u16 => false,
            11834u16 => false,
            11835u16 => false,
            11836u16 => false,
            11837u16 => false,
            11838u16 => false,
            11839u16 => false,
            11840u16 => false,
            11841u16 => false,
            11842u16 => false,
            11843u16 => false,
            11844u16 => false,
            11845u16 => false,
            11846u16 => false,
            11847u16 => false,
            11848u16 => false,
            11849u16 => false,
            11850u16 => false,
            11851u16 => false,
            11852u16 => false,
            11853u16 => false,
            11854u16 => false,
            11855u16 => false,
            11856u16 => false,
            11857u16 => false,
            11858u16 => false,
            11859u16 => false,
            11860u16 => false,
            11861u16 => false,
            11862u16 => false,
            11863u16 => false,
            11864u16 => false,
            11865u16 => false,
            11866u16 => false,
            11867u16 => false,
            11868u16 => false,
            11869u16 => false,
            11870u16 => false,
            11871u16 => false,
            11872u16 => false,
            11873u16 => false,
            11874u16 => false,
            11875u16 => false,
            11876u16 => false,
            11877u16 => false,
            11878u16 => false,
            11879u16 => false,
            11880u16 => false,
            11881u16 => false,
            11882u16 => false,
            11883u16 => false,
            11884u16 => false,
            11885u16 => false,
            11886u16 => false,
            11887u16 => false,
            11888u16 => false,
            11889u16 => false,
            11890u16 => false,
            11891u16 => false,
            11892u16 => false,
            11893u16 => false,
            11894u16 => false,
            11895u16 => false,
            11896u16 => false,
            11897u16 => false,
            11898u16 => false,
            11899u16 => false,
            11900u16 => false,
            11901u16 => false,
            11902u16 => false,
            11903u16 => false,
            11904u16 => false,
            11905u16 => false,
            11906u16 => false,
            11907u16 => false,
            11908u16 => false,
            11909u16 => false,
            11910u16 => false,
            11911u16 => false,
            11912u16 => false,
            11913u16 => false,
            11914u16 => false,
            11915u16 => false,
            11916u16 => false,
            11917u16 => false,
            11918u16 => false,
            11919u16 => false,
            11920u16 => false,
            11921u16 => false,
            11922u16 => false,
            11923u16 => false,
            11924u16 => false,
            11925u16 => false,
            11926u16 => false,
            11927u16 => false,
            11928u16 => false,
            11929u16 => false,
            11930u16 => false,
            11931u16 => false,
            11932u16 => false,
            11933u16 => false,
            11934u16 => false,
            11935u16 => false,
            11936u16 => false,
            11937u16 => false,
            11938u16 => false,
            11939u16 => false,
            11940u16 => false,
            11941u16 => false,
            11942u16 => false,
            11943u16 => false,
            11944u16 => false,
            11945u16 => false,
            11946u16 => false,
            11947u16 => false,
            11948u16 => false,
            11949u16 => false,
            11950u16 => false,
            11951u16 => false,
            11952u16 => false,
            11953u16 => false,
            11954u16 => false,
            11955u16 => false,
            11956u16 => false,
            11957u16 => false,
            11958u16 => false,
            11959u16 => false,
            11960u16 => false,
            11961u16 => false,
            11962u16 => false,
            11963u16 => false,
            11964u16 => false,
            11965u16 => false,
            11966u16 => false,
            11967u16 => false,
            11968u16 => false,
            11969u16 => false,
            11970u16 => false,
            11971u16 => false,
            11972u16 => false,
            11973u16 => false,
            11974u16 => false,
            11975u16 => false,
            11976u16 => false,
            11977u16 => false,
            11978u16 => false,
            11979u16 => false,
            11980u16 => false,
            11981u16 => false,
            11982u16 => false,
            11983u16 => false,
            11984u16 => false,
            11985u16 => false,
            11986u16 => false,
            11987u16 => false,
            11988u16 => false,
            11989u16 => false,
            11990u16 => false,
            11991u16 => false,
            11992u16 => false,
            11993u16 => false,
            11994u16 => false,
            11995u16 => false,
            11996u16 => false,
            11997u16 => false,
            11998u16 => false,
            11999u16 => false,
            12000u16 => false,
            12001u16 => false,
            12002u16 => false,
            12003u16 => false,
            12004u16 => false,
            12005u16 => false,
            12006u16 => false,
            12007u16 => false,
            12008u16 => false,
            12009u16 => false,
            12010u16 => false,
            12011u16 => false,
            12012u16 => false,
            12013u16 => false,
            12014u16 => false,
            12015u16 => false,
            12016u16 => false,
            12017u16 => false,
            12018u16 => false,
            12019u16 => false,
            12020u16 => false,
            12021u16 => false,
            12022u16 => false,
            12023u16 => false,
            12024u16 => false,
            12025u16 => false,
            12026u16 => false,
            12027u16 => false,
            12028u16 => false,
            12029u16 => false,
            12030u16 => false,
            12031u16 => false,
            12032u16 => false,
            12033u16 => false,
            12034u16 => false,
            12035u16 => false,
            12036u16 => false,
            12037u16 => false,
            12038u16 => false,
            12039u16 => false,
            12040u16 => false,
            12041u16 => false,
            12042u16 => false,
            12043u16 => false,
            12044u16 => false,
            12045u16 => false,
            12046u16 => false,
            12047u16 => false,
            12048u16 => false,
            12049u16 => false,
            12050u16 => false,
            12051u16 => false,
            12052u16 => false,
            12053u16 => false,
            12054u16 => false,
            12055u16 => false,
            12056u16 => false,
            12057u16 => false,
            12058u16 => false,
            12059u16 => false,
            12060u16 => false,
            12061u16 => false,
            12062u16 => false,
            12063u16 => false,
            12064u16 => false,
            12065u16 => false,
            12066u16 => false,
            12067u16 => false,
            12068u16 => false,
            12069u16 => false,
            12070u16 => false,
            12071u16 => false,
            12072u16 => false,
            12073u16 => false,
            12074u16 => false,
            12075u16 => false,
            12076u16 => false,
            12077u16 => false,
            12078u16 => false,
            12079u16 => false,
            12080u16 => false,
            12081u16 => false,
            12082u16 => false,
            12083u16 => false,
            12084u16 => false,
            12085u16 => false,
            12086u16 => false,
            12087u16 => false,
            12088u16 => false,
            12089u16 => false,
            12090u16 => false,
            12091u16 => false,
            12092u16 => false,
            12093u16 => false,
            12094u16 => false,
            12095u16 => false,
            12096u16 => false,
            12097u16 => false,
            12098u16 => false,
            12099u16 => false,
            12100u16 => false,
            12101u16 => false,
            12102u16 => false,
            12103u16 => false,
            12104u16 => false,
            12105u16 => false,
            12106u16 => false,
            12107u16 => false,
            12108u16 => false,
            12109u16 => false,
            12110u16 => false,
            12111u16 => false,
            12112u16 => false,
            12113u16 => false,
            12114u16 => false,
            12115u16 => false,
            12116u16 => false,
            12117u16 => false,
            12118u16 => false,
            12119u16 => false,
            12120u16 => false,
            12121u16 => false,
            12122u16 => false,
            12123u16 => false,
            12124u16 => false,
            12125u16 => false,
            12126u16 => false,
            12127u16 => false,
            12128u16 => false,
            12129u16 => false,
            12130u16 => false,
            12131u16 => false,
            12132u16 => false,
            12133u16 => false,
            12134u16 => false,
            12135u16 => false,
            12136u16 => false,
            12137u16 => false,
            12138u16 => false,
            12139u16 => false,
            12140u16 => false,
            12141u16 => false,
            12142u16 => false,
            12143u16 => false,
            12144u16 => false,
            12145u16 => false,
            12146u16 => false,
            12147u16 => false,
            12148u16 => false,
            12149u16 => false,
            12150u16 => false,
            12151u16 => false,
            12152u16 => false,
            12153u16 => false,
            12154u16 => false,
            12155u16 => false,
            12156u16 => false,
            12157u16 => false,
            12158u16 => false,
            12159u16 => false,
            12160u16 => false,
            12161u16 => false,
            12162u16 => false,
            12163u16 => false,
            12164u16 => false,
            12165u16 => false,
            12166u16 => false,
            12167u16 => false,
            12168u16 => false,
            12169u16 => false,
            12170u16 => false,
            12171u16 => false,
            12172u16 => false,
            12173u16 => false,
            12174u16 => false,
            12175u16 => false,
            12176u16 => false,
            12177u16 => false,
            12178u16 => false,
            12179u16 => false,
            12180u16 => false,
            12181u16 => false,
            12182u16 => false,
            12183u16 => false,
            12184u16 => false,
            12185u16 => false,
            12186u16 => false,
            12187u16 => false,
            12188u16 => false,
            12189u16 => false,
            12190u16 => false,
            12191u16 => false,
            12192u16 => false,
            12193u16 => false,
            12194u16 => false,
            12195u16 => false,
            12196u16 => false,
            12197u16 => false,
            12198u16 => false,
            12199u16 => false,
            12200u16 => false,
            12201u16 => false,
            12202u16 => false,
            12203u16 => false,
            12204u16 => false,
            12205u16 => false,
            12206u16 => false,
            12207u16 => false,
            12208u16 => false,
            12209u16 => false,
            12210u16 => false,
            12211u16 => false,
            12212u16 => false,
            12213u16 => false,
            12214u16 => false,
            12215u16 => false,
            12216u16 => false,
            12217u16 => false,
            12218u16 => false,
            12219u16 => false,
            12220u16 => false,
            12221u16 => false,
            12222u16 => false,
            12223u16 => false,
            12224u16 => false,
            12225u16 => false,
            12226u16 => false,
            12227u16 => false,
            12228u16 => false,
            12229u16 => false,
            12230u16 => false,
            12231u16 => false,
            12232u16 => false,
            12233u16 => false,
            12234u16 => false,
            12235u16 => false,
            12236u16 => false,
            12237u16 => false,
            12238u16 => false,
            12239u16 => false,
            12240u16 => false,
            12241u16 => false,
            12242u16 => false,
            12243u16 => false,
            12244u16 => false,
            12245u16 => false,
            12246u16 => false,
            12247u16 => false,
            12248u16 => false,
            12249u16 => false,
            12250u16 => false,
            12251u16 => false,
            12252u16 => false,
            12253u16 => false,
            12254u16 => false,
            12255u16 => false,
            12256u16 => false,
            12257u16 => false,
            12258u16 => false,
            12259u16 => false,
            12260u16 => false,
            12261u16 => false,
            12262u16 => false,
            12263u16 => false,
            12264u16 => false,
            12265u16 => false,
            12266u16 => false,
            12267u16 => false,
            12268u16 => false,
            12354u16 => false,
            12355u16 => false,
            12356u16 => false,
            12357u16 => false,
            12358u16 => false,
            12359u16 => false,
            12360u16 => false,
            12361u16 => false,
            12362u16 => false,
            12363u16 => false,
            12364u16 => false,
            12365u16 => false,
            12366u16 => false,
            12367u16 => false,
            12368u16 => false,
            12369u16 => false,
            12370u16 => false,
            12371u16 => false,
            12373u16 => false,
            12398u16 => false,
            12399u16 => false,
            12400u16 => false,
            12401u16 => false,
            12408u16 => false,
            12421u16 => false,
            12422u16 => false,
            12423u16 => false,
            12424u16 => false,
            12425u16 => false,
            12426u16 => false,
            12427u16 => false,
            12428u16 => false,
            12429u16 => false,
            12430u16 => false,
            12431u16 => false,
            12432u16 => false,
            12433u16 => false,
            12434u16 => false,
            12435u16 => false,
            12436u16 => false,
            12437u16 => false,
            12438u16 => false,
            12439u16 => false,
            12440u16 => false,
            12441u16 => false,
            12442u16 => false,
            12443u16 => false,
            12444u16 => false,
            12445u16 => false,
            12446u16 => false,
            12447u16 => false,
            12448u16 => false,
            12449u16 => false,
            12450u16 => false,
            12451u16 => false,
            12452u16 => false,
            12453u16 => false,
            12454u16 => false,
            12455u16 => false,
            12456u16 => false,
            12457u16 => false,
            12458u16 => false,
            12459u16 => false,
            12460u16 => false,
            12461u16 => false,
            12462u16 => false,
            12463u16 => false,
            12464u16 => false,
            12465u16 => false,
            12466u16 => false,
            12467u16 => false,
            12468u16 => false,
            12469u16 => false,
            12470u16 => false,
            12471u16 => false,
            12472u16 => false,
            12473u16 => false,
            12474u16 => false,
            12475u16 => false,
            12476u16 => false,
            12477u16 => false,
            12478u16 => false,
            12479u16 => false,
            12480u16 => false,
            12481u16 => false,
            12482u16 => false,
            12483u16 => false,
            12484u16 => false,
            12485u16 => false,
            12486u16 => false,
            12487u16 => false,
            12488u16 => false,
            12489u16 => false,
            12490u16 => false,
            12491u16 => false,
            12492u16 => false,
            12493u16 => false,
            12494u16 => false,
            12495u16 => false,
            12496u16 => false,
            12497u16 => false,
            12498u16 => false,
            12499u16 => false,
            12500u16 => false,
            12501u16 => false,
            12502u16 => false,
            12503u16 => false,
            12504u16 => false,
            12505u16 => false,
            12506u16 => false,
            12507u16 => false,
            12508u16 => false,
            12509u16 => false,
            12510u16 => false,
            12511u16 => false,
            12512u16 => false,
            12513u16 => false,
            12514u16 => false,
            12515u16 => false,
            12516u16 => false,
            12517u16 => false,
            12518u16 => false,
            12519u16 => false,
            12520u16 => false,
            12521u16 => false,
            12522u16 => false,
            12619u16 => false,
            12620u16 => false,
            12621u16 => false,
            12622u16 => false,
            12623u16 => false,
            12624u16 => false,
            12625u16 => false,
            12626u16 => false,
            12627u16 => false,
            12628u16 => false,
            12629u16 => false,
            12630u16 => false,
            12631u16 => false,
            12632u16 => false,
            12633u16 => false,
            12634u16 => false,
            12635u16 => false,
            12636u16 => false,
            12637u16 => false,
            12638u16 => false,
            12639u16 => false,
            12640u16 => false,
            12641u16 => false,
            12642u16 => false,
            12643u16 => false,
            12644u16 => false,
            12645u16 => false,
            12647u16 => false,
            12648u16 => false,
            12649u16 => false,
            12650u16 => false,
            12651u16 => false,
            12652u16 => false,
            12653u16 => false,
            12654u16 => false,
            12655u16 => false,
            12656u16 => false,
            12657u16 => false,
            12658u16 => false,
            12659u16 => false,
            12660u16 => false,
            12661u16 => false,
            12672u16 => false,
            12673u16 => false,
            12674u16 => false,
            12675u16 => false,
            12676u16 => false,
            12677u16 => false,
            12678u16 => false,
            12679u16 => false,
            12680u16 => false,
            12681u16 => false,
            12682u16 => false,
            12683u16 => false,
            12684u16 => false,
            12685u16 => false,
            12686u16 => false,
            12687u16 => false,
            12688u16 => false,
            12689u16 => false,
            12690u16 => false,
            12691u16 => false,
            12692u16 => false,
            12693u16 => false,
            12694u16 => false,
            12695u16 => false,
            12696u16 => false,
            12697u16 => false,
            12698u16 => false,
            12699u16 => false,
            12700u16 => false,
            12701u16 => false,
            12702u16 => false,
            12703u16 => false,
            12704u16 => false,
            12705u16 => false,
            12706u16 => false,
            12707u16 => false,
            12708u16 => false,
            12709u16 => false,
            12710u16 => false,
            12711u16 => false,
            12712u16 => false,
            12713u16 => false,
            12714u16 => false,
            12715u16 => false,
            12716u16 => false,
            12717u16 => false,
            12718u16 => false,
            12719u16 => false,
            12720u16 => false,
            12721u16 => false,
            12722u16 => false,
            12723u16 => false,
            12724u16 => false,
            12725u16 => false,
            12726u16 => false,
            12727u16 => false,
            12728u16 => false,
            12729u16 => false,
            12730u16 => false,
            12731u16 => false,
            12732u16 => false,
            12733u16 => false,
            12734u16 => false,
            12735u16 => false,
            12736u16 => false,
            12737u16 => false,
            12738u16 => false,
            12739u16 => false,
            12740u16 => false,
            12741u16 => false,
            12742u16 => false,
            12743u16 => false,
            12744u16 => false,
            12745u16 => false,
            12746u16 => false,
            12747u16 => false,
            12748u16 => false,
            12749u16 => false,
            12750u16 => false,
            12751u16 => false,
            12752u16 => false,
            12753u16 => false,
            12754u16 => false,
            12755u16 => false,
            12756u16 => false,
            12757u16 => false,
            12758u16 => false,
            12759u16 => false,
            12760u16 => false,
            12761u16 => false,
            12762u16 => false,
            12763u16 => false,
            12764u16 => false,
            12765u16 => false,
            12766u16 => false,
            12767u16 => false,
            12768u16 => false,
            12769u16 => false,
            12770u16 => false,
            12771u16 => false,
            12772u16 => false,
            12773u16 => false,
            12774u16 => false,
            12775u16 => false,
            12776u16 => false,
            12777u16 => false,
            12778u16 => false,
            12779u16 => false,
            12780u16 => false,
            12781u16 => false,
            12782u16 => false,
            12783u16 => false,
            12784u16 => false,
            12785u16 => false,
            12786u16 => false,
            12787u16 => false,
            12788u16 => false,
            12789u16 => false,
            12790u16 => false,
            12791u16 => false,
            12792u16 => false,
            12793u16 => false,
            12794u16 => false,
            12795u16 => false,
            12796u16 => false,
            12797u16 => false,
            12798u16 => false,
            12799u16 => false,
            12801u16 => false,
            12802u16 => false,
            12803u16 => false,
            12804u16 => false,
            12805u16 => false,
            12806u16 => false,
            12807u16 => false,
            12808u16 => false,
            12809u16 => false,
            12810u16 => false,
            12811u16 => false,
            12812u16 => false,
            12813u16 => false,
            12814u16 => false,
            12815u16 => false,
            12816u16 => false,
            12817u16 => false,
            12818u16 => false,
            12819u16 => false,
            12820u16 => false,
            18231u16 => false,
            18232u16 => false,
            18233u16 => false,
            18234u16 => false,
            18235u16 => false,
            18236u16 => false,
            18237u16 => false,
            18238u16 => false,
            18239u16 => false,
            18240u16 => false,
            18241u16 => false,
            18242u16 => false,
            18243u16 => false,
            18244u16 => false,
            18245u16 => false,
            18246u16 => false,
            18247u16 => false,
            18248u16 => false,
            18249u16 => false,
            18250u16 => false,
            18251u16 => false,
            18252u16 => false,
            18253u16 => false,
            18254u16 => false,
            18255u16 => false,
            18256u16 => false,
            18257u16 => false,
            18258u16 => false,
            18259u16 => false,
            18260u16 => false,
            18261u16 => false,
            18262u16 => false,
            18362u16 => false,
            18363u16 => false,
            18364u16 => false,
            18365u16 => false,
            18366u16 => false,
            18367u16 => false,
            18368u16 => false,
            18369u16 => false,
            18370u16 => false,
            18371u16 => false,
            18372u16 => false,
            18373u16 => false,
            18374u16 => false,
            18375u16 => false,
            18376u16 => false,
            18377u16 => false,
            18378u16 => false,
            18379u16 => false,
            18380u16 => false,
            18381u16 => false,
            18382u16 => false,
            18383u16 => false,
            18384u16 => false,
            18385u16 => false,
            18386u16 => false,
            18387u16 => false,
            18388u16 => false,
            18389u16 => false,
            18390u16 => false,
            18391u16 => false,
            18392u16 => false,
            18393u16 => false,
            18394u16 => false,
            18395u16 => false,
            18396u16 => false,
            18397u16 => false,
            18398u16 => false,
            18399u16 => false,
            18400u16 => false,
            18401u16 => false,
            18402u16 => false,
            18403u16 => false,
            18404u16 => false,
            18405u16 => false,
            18406u16 => false,
            18407u16 => false,
            18408u16 => false,
            18409u16 => false,
            18410u16 => false,
            18411u16 => false,
            18412u16 => false,
            18413u16 => false,
            18414u16 => false,
            18415u16 => false,
            18416u16 => false,
            18417u16 => false,
            18418u16 => false,
            18419u16 => false,
            18420u16 => false,
            18421u16 => false,
            18422u16 => false,
            18423u16 => false,
            18424u16 => false,
            18425u16 => false,
            18426u16 => false,
            18427u16 => false,
            18428u16 => false,
            18429u16 => false,
            18430u16 => false,
            18431u16 => false,
            18432u16 => false,
            18433u16 => false,
            18434u16 => false,
            18435u16 => false,
            18436u16 => false,
            18437u16 => false,
            18451u16 => false,
            18453u16 => false,
            18454u16 => false,
            18468u16 => false,
            18470u16 => false,
            18471u16 => false,
            18472u16 => false,
            18473u16 => false,
            18474u16 => false,
            18475u16 => false,
            18476u16 => false,
            18477u16 => false,
            18478u16 => false,
            18479u16 => false,
            18480u16 => false,
            18481u16 => false,
            18482u16 => false,
            18483u16 => false,
            18484u16 => false,
            18485u16 => false,
            18486u16 => false,
            18487u16 => false,
            18488u16 => false,
            18489u16 => false,
            18490u16 => false,
            18491u16 => false,
            18492u16 => false,
            18493u16 => false,
            18494u16 => false,
            18495u16 => false,
            18496u16 => false,
            18497u16 => false,
            18498u16 => false,
            18499u16 => false,
            18500u16 => false,
            18501u16 => false,
            18502u16 => false,
            18503u16 => false,
            18504u16 => false,
            18505u16 => false,
            18506u16 => false,
            18507u16 => false,
            18508u16 => false,
            18509u16 => false,
            18510u16 => false,
            18511u16 => false,
            18512u16 => false,
            18513u16 => false,
            18514u16 => false,
            18515u16 => false,
            18516u16 => false,
            18517u16 => false,
            18518u16 => false,
            18519u16 => false,
            18520u16 => false,
            18521u16 => false,
            18522u16 => false,
            18523u16 => false,
            18524u16 => false,
            18539u16 => false,
            18540u16 => false,
            18541u16 => false,
            18542u16 => false,
            18607u16 => false,
            18608u16 => false,
            18609u16 => false,
            18610u16 => false,
            18611u16 => false,
            18612u16 => false,
            18613u16 => false,
            18614u16 => false,
            18615u16 => false,
            18616u16 => false,
            18617u16 => false,
            18618u16 => false,
            18619u16 => false,
            18620u16 => false,
            18621u16 => false,
            18622u16 => false,
            18623u16 => false,
            18624u16 => false,
            18625u16 => false,
            18626u16 => false,
            18627u16 => false,
            18628u16 => false,
            18629u16 => false,
            18630u16 => false,
            18631u16 => false,
            18632u16 => false,
            18633u16 => false,
            18634u16 => false,
            18635u16 => false,
            18636u16 => false,
            18637u16 => false,
            18638u16 => false,
            18639u16 => false,
            18640u16 => false,
            18641u16 => false,
            18642u16 => false,
            18643u16 => false,
            18644u16 => false,
            18645u16 => false,
            18646u16 => false,
            18647u16 => false,
            18648u16 => false,
            18649u16 => false,
            18650u16 => false,
            18651u16 => false,
            18652u16 => false,
            18653u16 => false,
            18654u16 => false,
            18655u16 => false,
            18656u16 => false,
            18657u16 => false,
            18658u16 => false,
            18659u16 => false,
            18660u16 => false,
            18661u16 => false,
            18662u16 => false,
            18663u16 => false,
            18664u16 => false,
            18665u16 => false,
            18666u16 => false,
            18667u16 => false,
            18668u16 => false,
            18669u16 => false,
            18670u16 => false,
            18671u16 => false,
            18672u16 => false,
            18673u16 => false,
            18674u16 => false,
            18675u16 => false,
            18676u16 => false,
            18677u16 => false,
            18678u16 => false,
            18679u16 => false,
            18680u16 => false,
            18681u16 => false,
            18682u16 => false,
            18683u16 => false,
            18684u16 => false,
            18685u16 => false,
            18686u16 => false,
            18687u16 => false,
            18688u16 => false,
            18689u16 => false,
            18690u16 => false,
            18691u16 => false,
            18692u16 => false,
            18693u16 => false,
            18694u16 => false,
            18695u16 => false,
            18696u16 => false,
            18697u16 => false,
            18698u16 => false,
            18699u16 => false,
            18700u16 => false,
            18701u16 => false,
            18702u16 => false,
            18703u16 => false,
            18704u16 => false,
            18705u16 => false,
            18706u16 => false,
            18707u16 => false,
            18708u16 => false,
            18709u16 => false,
            18710u16 => false,
            18711u16 => false,
            18712u16 => false,
            18713u16 => false,
            18714u16 => false,
            18715u16 => false,
            18716u16 => false,
            18717u16 => false,
            18718u16 => false,
            18719u16 => false,
            18720u16 => false,
            18721u16 => false,
            18722u16 => false,
            18723u16 => false,
            18724u16 => false,
            18725u16 => false,
            18726u16 => false,
            18727u16 => false,
            18728u16 => false,
            18729u16 => false,
            18730u16 => false,
            18731u16 => false,
            18732u16 => false,
            18733u16 => false,
            18734u16 => false,
            18959u16 => false,
            18960u16 => false,
            18961u16 => false,
            18962u16 => false,
            18963u16 => false,
            18964u16 => false,
            18965u16 => false,
            18966u16 => false,
            18967u16 => false,
            18968u16 => false,
            18969u16 => false,
            18970u16 => false,
            18971u16 => false,
            18972u16 => false,
            18973u16 => false,
            18974u16 => false,
            18975u16 => false,
            18976u16 => false,
            18977u16 => false,
            18978u16 => false,
            18979u16 => false,
            18980u16 => false,
            18981u16 => false,
            18982u16 => false,
            18983u16 => false,
            18984u16 => false,
            18985u16 => false,
            18986u16 => false,
            18987u16 => false,
            18988u16 => false,
            18989u16 => false,
            18990u16 => false,
            18991u16 => false,
            18992u16 => false,
            18993u16 => false,
            18994u16 => false,
            18995u16 => false,
            18996u16 => false,
            18997u16 => false,
            18998u16 => false,
            18999u16 => false,
            19000u16 => false,
            19001u16 => false,
            19002u16 => false,
            19003u16 => false,
            19004u16 => false,
            19005u16 => false,
            19006u16 => false,
            19007u16 => false,
            19008u16 => false,
            19009u16 => false,
            19010u16 => false,
            19011u16 => false,
            19012u16 => false,
            19013u16 => false,
            19014u16 => false,
            19015u16 => false,
            19016u16 => false,
            19017u16 => false,
            19018u16 => false,
            19019u16 => false,
            19020u16 => false,
            19021u16 => false,
            19022u16 => false,
            19023u16 => false,
            19024u16 => false,
            19025u16 => false,
            19026u16 => false,
            19027u16 => false,
            19028u16 => false,
            19029u16 => false,
            19030u16 => false,
            19031u16 => false,
            19032u16 => false,
            19033u16 => false,
            19034u16 => false,
            19035u16 => false,
            19036u16 => false,
            19037u16 => false,
            19038u16 => false,
            19039u16 => false,
            19040u16 => false,
            19041u16 => false,
            19042u16 => false,
            19043u16 => false,
            19044u16 => false,
            19045u16 => false,
            19046u16 => false,
            19047u16 => false,
            19048u16 => false,
            19049u16 => false,
            19050u16 => false,
            19051u16 => false,
            19052u16 => false,
            19053u16 => false,
            19054u16 => false,
            19055u16 => false,
            19056u16 => false,
            19057u16 => false,
            19058u16 => false,
            19059u16 => false,
            19060u16 => false,
            19061u16 => false,
            19062u16 => false,
            19063u16 => false,
            19064u16 => false,
            19065u16 => false,
            19066u16 => false,
            19067u16 => false,
            19068u16 => false,
            19069u16 => false,
            19070u16 => false,
            19071u16 => false,
            19072u16 => false,
            19073u16 => false,
            19074u16 => false,
            19075u16 => false,
            19076u16 => false,
            19077u16 => false,
            19078u16 => false,
            19079u16 => false,
            19080u16 => false,
            19081u16 => false,
            19082u16 => false,
            19083u16 => false,
            19084u16 => false,
            19085u16 => false,
            19086u16 => false,
            19087u16 => false,
            19088u16 => false,
            19089u16 => false,
            19090u16 => false,
            19091u16 => false,
            19092u16 => false,
            19093u16 => false,
            19094u16 => false,
            19095u16 => false,
            19096u16 => false,
            19097u16 => false,
            19098u16 => false,
            19099u16 => false,
            19100u16 => false,
            19101u16 => false,
            19102u16 => false,
            19103u16 => false,
            19104u16 => false,
            19105u16 => false,
            19106u16 => false,
            19107u16 => false,
            19108u16 => false,
            19109u16 => false,
            19110u16 => false,
            19111u16 => false,
            19112u16 => false,
            19113u16 => false,
            19114u16 => false,
            19115u16 => false,
            19116u16 => false,
            19117u16 => false,
            19118u16 => false,
            19119u16 => false,
            19120u16 => false,
            19121u16 => false,
            19122u16 => false,
            19123u16 => false,
            19124u16 => false,
            19125u16 => false,
            19126u16 => false,
            19127u16 => false,
            19128u16 => false,
            19129u16 => false,
            19130u16 => false,
            19131u16 => false,
            19132u16 => false,
            19133u16 => false,
            19134u16 => false,
            19135u16 => false,
            19136u16 => false,
            19137u16 => false,
            19138u16 => false,
            19139u16 => false,
            19140u16 => false,
            19141u16 => false,
            19142u16 => false,
            19143u16 => false,
            19144u16 => false,
            19145u16 => false,
            19146u16 => false,
            19147u16 => false,
            19148u16 => false,
            19149u16 => false,
            19150u16 => false,
            19151u16 => false,
            19152u16 => false,
            19153u16 => false,
            19154u16 => false,
            19155u16 => false,
            19156u16 => false,
            19157u16 => false,
            19158u16 => false,
            19159u16 => false,
            19160u16 => false,
            19161u16 => false,
            19162u16 => false,
            19163u16 => false,
            19164u16 => false,
            19165u16 => false,
            19166u16 => false,
            19167u16 => false,
            19168u16 => false,
            19169u16 => false,
            19170u16 => false,
            19171u16 => false,
            19172u16 => false,
            19173u16 => false,
            19174u16 => false,
            19175u16 => false,
            19176u16 => false,
            19177u16 => false,
            19178u16 => false,
            19179u16 => false,
            19180u16 => false,
            19181u16 => false,
            19182u16 => false,
            19183u16 => false,
            19184u16 => false,
            19185u16 => false,
            19186u16 => false,
            19187u16 => false,
            19188u16 => false,
            19189u16 => false,
            19190u16 => false,
            19191u16 => false,
            19192u16 => false,
            19193u16 => false,
            19194u16 => false,
            19195u16 => false,
            19196u16 => false,
            19197u16 => false,
            19198u16 => false,
            19199u16 => false,
            19200u16 => false,
            19201u16 => false,
            19202u16 => false,
            19203u16 => false,
            19204u16 => false,
            19205u16 => false,
            19206u16 => false,
            19207u16 => false,
            19208u16 => false,
            19209u16 => false,
            19210u16 => false,
            19211u16 => false,
            19212u16 => false,
            19213u16 => false,
            19214u16 => false,
            19304u16 => false,
            19314u16 => false,
            19315u16 => false,
            19316u16 => false,
            19317u16 => false,
            20231u16 => false,
            20232u16 => false,
            20233u16 => false,
            20234u16 => false,
            20235u16 => false,
            20236u16 => false,
            20237u16 => false,
            20238u16 => false,
            20239u16 => false,
            20240u16 => false,
            20241u16 => false,
            20242u16 => false,
            20243u16 => false,
            20244u16 => false,
            20245u16 => false,
            20246u16 => false,
            20247u16 => false,
            20248u16 => false,
            20249u16 => false,
            20250u16 => false,
            20251u16 => false,
            20252u16 => false,
            20253u16 => false,
            20254u16 => false,
            20255u16 => false,
            20256u16 => false,
            20584u16 => false,
            20585u16 => false,
            20586u16 => false,
            20587u16 => false,
            20588u16 => false,
            20589u16 => false,
            20590u16 => false,
            20591u16 => false,
            20592u16 => false,
            20593u16 => false,
            20594u16 => false,
            20595u16 => false,
            20596u16 => false,
            20597u16 => false,
            20598u16 => false,
            20599u16 => false,
            20600u16 => false,
            20601u16 => false,
            20602u16 => false,
            20603u16 => false,
            20604u16 => false,
            20605u16 => false,
            20606u16 => false,
            20607u16 => false,
            20608u16 => false,
            20609u16 => false,
            20610u16 => false,
            20611u16 => false,
            20612u16 => false,
            20613u16 => false,
            20614u16 => false,
            20615u16 => false,
            20616u16 => false,
            20617u16 => false,
            20618u16 => false,
            20619u16 => false,
            20620u16 => false,
            20621u16 => false,
            20622u16 => false,
            20623u16 => false,
            20624u16 => false,
            20625u16 => false,
            20626u16 => false,
            20627u16 => false,
            20628u16 => false,
            20629u16 => false,
            20630u16 => false,
            20631u16 => false,
            20632u16 => false,
            20633u16 => false,
            20634u16 => false,
            20635u16 => false,
            20636u16 => false,
            20637u16 => false,
            20638u16 => false,
            20639u16 => false,
            20640u16 => false,
            20641u16 => false,
            20642u16 => false,
            20643u16 => false,
            20644u16 => false,
            20645u16 => false,
            20646u16 => false,
            20647u16 => false,
            20648u16 => false,
            20649u16 => false,
            20650u16 => false,
            20651u16 => false,
            20652u16 => false,
            20653u16 => false,
            20654u16 => false,
            20655u16 => false,
            20656u16 => false,
            20657u16 => false,
            20658u16 => false,
            20659u16 => false,
            20660u16 => false,
            20661u16 => false,
            20662u16 => false,
            20663u16 => false,
            20664u16 => false,
            20665u16 => false,
            20666u16 => false,
            20667u16 => false,
            20668u16 => false,
            20669u16 => false,
            20670u16 => false,
            20671u16 => false,
            20672u16 => false,
            20673u16 => false,
            20674u16 => false,
            20675u16 => false,
            20676u16 => false,
            20677u16 => false,
            20678u16 => false,
            20679u16 => false,
            20680u16 => false,
            20681u16 => false,
            20682u16 => false,
            20683u16 => false,
            20684u16 => false,
            20685u16 => false,
            20686u16 => false,
            20687u16 => false,
            20688u16 => false,
            20689u16 => false,
            20690u16 => false,
            20691u16 => false,
            20692u16 => false,
            20693u16 => false,
            20694u16 => false,
            20695u16 => false,
            20696u16 => false,
            20697u16 => false,
            20698u16 => false,
            20699u16 => false,
            20700u16 => false,
            20701u16 => false,
            20702u16 => false,
            20703u16 => false,
            20704u16 => false,
            20705u16 => false,
            20706u16 => false,
            20707u16 => false,
            20708u16 => false,
            20709u16 => false,
            20710u16 => false,
            20711u16 => false,
            20712u16 => false,
            20713u16 => false,
            20714u16 => false,
            20715u16 => false,
            20716u16 => false,
            20717u16 => false,
            20718u16 => false,
            20719u16 => false,
            20720u16 => false,
            20721u16 => false,
            20722u16 => false,
            20723u16 => false,
            20724u16 => false,
            20725u16 => false,
            20726u16 => false,
            20727u16 => false,
            20728u16 => false,
            20729u16 => false,
            20730u16 => false,
            20731u16 => false,
            20732u16 => false,
            20733u16 => false,
            20734u16 => false,
            20735u16 => false,
            20736u16 => false,
            20737u16 => false,
            20738u16 => false,
            20739u16 => false,
            20740u16 => false,
            20741u16 => false,
            20742u16 => false,
            20743u16 => false,
            20744u16 => false,
            20745u16 => false,
            20746u16 => false,
            20747u16 => false,
            20748u16 => false,
            20749u16 => false,
            20750u16 => false,
            20751u16 => false,
            20752u16 => false,
            20753u16 => false,
            20754u16 => false,
            20755u16 => false,
            20756u16 => false,
            20757u16 => false,
            20758u16 => false,
            20759u16 => false,
            20760u16 => false,
            20761u16 => false,
            20762u16 => false,
            20763u16 => false,
            20764u16 => false,
            20765u16 => false,
            20766u16 => false,
            20767u16 => false,
            20768u16 => false,
            20769u16 => false,
            20770u16 => false,
            20771u16 => false,
            20772u16 => false,
            20773u16 => false,
            20774u16 => false,
            20775u16 => false,
            20776u16 => false,
            20777u16 => false,
            20778u16 => false,
            20779u16 => false,
            20780u16 => false,
            20781u16 => false,
            20782u16 => false,
            20783u16 => false,
            20784u16 => false,
            20785u16 => false,
            20786u16 => false,
            20787u16 => false,
            20788u16 => false,
            20789u16 => false,
            20790u16 => false,
            20791u16 => false,
            20792u16 => false,
            20793u16 => false,
            20794u16 => false,
            20795u16 => false,
            20796u16 => false,
            20797u16 => false,
            20798u16 => false,
            20799u16 => false,
            20800u16 => false,
            20801u16 => false,
            20802u16 => false,
            20803u16 => false,
            20804u16 => false,
            20805u16 => false,
            20806u16 => false,
            20807u16 => false,
            20808u16 => false,
            20809u16 => false,
            20810u16 => false,
            20811u16 => false,
            20812u16 => false,
            20813u16 => false,
            20814u16 => false,
            20815u16 => false,
            20816u16 => false,
            20817u16 => false,
            20818u16 => false,
            20819u16 => false,
            20820u16 => false,
            20821u16 => false,
            20822u16 => false,
            20823u16 => false,
            20824u16 => false,
            20825u16 => false,
            20826u16 => false,
            20827u16 => false,
            20828u16 => false,
            20829u16 => false,
            20830u16 => false,
            20831u16 => false,
            20832u16 => false,
            20833u16 => false,
            20834u16 => false,
            20835u16 => false,
            20836u16 => false,
            20837u16 => false,
            20838u16 => false,
            20839u16 => false,
            20840u16 => false,
            20841u16 => false,
            20842u16 => false,
            20843u16 => false,
            20844u16 => false,
            20845u16 => false,
            20846u16 => false,
            20847u16 => false,
            20848u16 => false,
            20849u16 => false,
            20850u16 => false,
            20851u16 => false,
            20852u16 => false,
            20853u16 => false,
            20854u16 => false,
            20855u16 => false,
            20892u16 => false,
            20893u16 => false,
            20894u16 => false,
            20895u16 => false,
            20896u16 => false,
            20897u16 => false,
            20898u16 => false,
            20899u16 => false,
            20900u16 => false,
            20901u16 => false,
            20902u16 => false,
            20903u16 => false,
            20904u16 => false,
            20905u16 => false,
            20906u16 => false,
            20907u16 => false,
            20908u16 => false,
            20909u16 => false,
            20910u16 => false,
            20911u16 => false,
            20912u16 => false,
            20913u16 => false,
            20914u16 => false,
            20915u16 => false,
            20916u16 => false,
            20917u16 => false,
            20918u16 => false,
            20919u16 => false,
            20920u16 => false,
            20921u16 => false,
            20922u16 => false,
            20923u16 => false,
            20924u16 => false,
            20925u16 => false,
            20926u16 => false,
            20927u16 => false,
            20928u16 => false,
            20929u16 => false,
            20930u16 => false,
            20931u16 => false,
            20932u16 => false,
            20933u16 => false,
            20934u16 => false,
            20935u16 => false,
            20936u16 => false,
            20937u16 => false,
            20938u16 => false,
            20939u16 => false,
            20942u16 => false,
            21425u16 => false,
            21426u16 => false,
            21427u16 => false,
            21428u16 => false,
            21429u16 => false,
            21430u16 => false,
            21431u16 => false,
            21432u16 => false,
            21433u16 => false,
            21434u16 => false,
            21435u16 => false,
            21436u16 => false,
            21437u16 => false,
            21438u16 => false,
            21439u16 => false,
            21440u16 => false,
            21441u16 => false,
            21442u16 => false,
            21443u16 => false,
            21444u16 => false,
            21445u16 => false,
            21446u16 => false,
            21447u16 => false,
            21448u16 => false,
            21449u16 => false,
            21450u16 => false,
            21451u16 => false,
            21452u16 => false,
            21453u16 => false,
            21454u16 => false,
            21455u16 => false,
            21456u16 => false,
            21457u16 => false,
            21458u16 => false,
            21459u16 => false,
            21460u16 => false,
            21461u16 => false,
            21462u16 => false,
            21463u16 => false,
            21464u16 => false,
            21465u16 => false,
            21466u16 => false,
            21467u16 => false,
            21468u16 => false,
            21469u16 => false,
            21470u16 => false,
            21471u16 => false,
            21472u16 => false,
            21473u16 => false,
            21474u16 => false,
            21475u16 => false,
            21476u16 => false,
            21477u16 => false,
            21478u16 => false,
            21479u16 => false,
            21480u16 => false,
            21481u16 => false,
            21482u16 => false,
            21483u16 => false,
            21484u16 => false,
            21485u16 => false,
            21486u16 => false,
            21487u16 => false,
            21488u16 => false,
            21489u16 => false,
            21490u16 => false,
            21491u16 => false,
            21492u16 => false,
            21493u16 => false,
            21494u16 => false,
            21495u16 => false,
            21496u16 => false,
            21497u16 => false,
            21498u16 => false,
            21499u16 => false,
            21500u16 => false,
            21501u16 => false,
            21502u16 => false,
            21503u16 => false,
            21504u16 => false,
            21505u16 => false,
            21506u16 => false,
            21507u16 => false,
            21508u16 => false,
            21509u16 => false,
            21510u16 => false,
            21511u16 => false,
            21512u16 => false,
            21513u16 => false,
            21514u16 => false,
            21515u16 => false,
            21516u16 => false,
            21517u16 => false,
            21518u16 => false,
            21519u16 => false,
            21520u16 => false,
            21521u16 => false,
            21522u16 => false,
            21523u16 => false,
            21524u16 => false,
            21525u16 => false,
            21526u16 => false,
            21527u16 => false,
            21528u16 => false,
            21529u16 => false,
            21530u16 => false,
            21531u16 => false,
            21532u16 => false,
            21533u16 => false,
            21534u16 => false,
            21535u16 => false,
            21536u16 => false,
            21537u16 => false,
            21538u16 => false,
            21539u16 => false,
            21540u16 => false,
            21541u16 => false,
            21542u16 => false,
            21543u16 => false,
            21544u16 => false,
            21545u16 => false,
            21546u16 => false,
            21547u16 => false,
            21548u16 => false,
            21549u16 => false,
            21550u16 => false,
            21551u16 => false,
            21552u16 => false,
            22269u16 => false,
            22270u16 => false,
            22271u16 => false,
            22272u16 => false,
            22273u16 => false,
            22274u16 => false,
            22275u16 => false,
            22276u16 => false,
            22277u16 => false,
            22278u16 => false,
            22279u16 => false,
            22280u16 => false,
            22281u16 => false,
            22282u16 => false,
            22283u16 => false,
            22284u16 => false,
            22285u16 => false,
            22286u16 => false,
            22287u16 => false,
            22288u16 => false,
            22289u16 => false,
            22290u16 => false,
            22291u16 => false,
            22292u16 => false,
            22293u16 => false,
            22294u16 => false,
            22295u16 => false,
            22296u16 => false,
            22297u16 => false,
            22298u16 => false,
            22299u16 => false,
            22300u16 => false,
            22301u16 => false,
            22302u16 => false,
            22303u16 => false,
            22304u16 => false,
            22305u16 => false,
            22306u16 => false,
            22307u16 => false,
            22308u16 => false,
            22309u16 => false,
            22310u16 => false,
            22311u16 => false,
            22312u16 => false,
            22314u16 => false,
            22315u16 => false,
            22316u16 => false,
            22317u16 => false,
            22318u16 => false,
            22319u16 => false,
            22320u16 => false,
            22321u16 => false,
            22322u16 => false,
            22323u16 => false,
            22324u16 => false,
            22325u16 => false,
            22326u16 => false,
            22327u16 => false,
            22328u16 => false,
            22329u16 => false,
            22330u16 => false,
            22331u16 => false,
            22332u16 => false,
            22333u16 => false,
            22334u16 => false,
            22335u16 => false,
            22336u16 => false,
            22337u16 => false,
            22338u16 => false,
            22339u16 => false,
            22340u16 => false,
            22341u16 => false,
            22342u16 => false,
            22343u16 => false,
            22344u16 => false,
            22345u16 => false,
            22346u16 => false,
            22347u16 => false,
            22348u16 => false,
            22349u16 => false,
            22350u16 => false,
            22351u16 => false,
            22352u16 => false,
            22353u16 => false,
            22354u16 => false,
            22355u16 => false,
            22356u16 => false,
            22357u16 => false,
            22358u16 => false,
            22359u16 => false,
            22360u16 => false,
            22361u16 => false,
            22362u16 => false,
            22363u16 => false,
            22364u16 => false,
            22365u16 => false,
            22366u16 => false,
            22367u16 => false,
            22368u16 => false,
            22369u16 => false,
            22370u16 => false,
            22372u16 => false,
            22373u16 => false,
            22374u16 => false,
            22375u16 => false,
            22376u16 => false,
            22377u16 => false,
            22378u16 => false,
            22379u16 => false,
            22380u16 => false,
            22381u16 => false,
            22382u16 => false,
            22383u16 => false,
            22384u16 => false,
            22385u16 => false,
            22386u16 => false,
            22387u16 => false,
            22421u16 => false,
            22422u16 => false,
            22423u16 => false,
            22424u16 => false,
            22425u16 => false,
            22426u16 => false,
            22427u16 => false,
            22428u16 => false,
            22429u16 => false,
            22430u16 => false,
            22431u16 => false,
            22432u16 => false,
            22433u16 => false,
            22434u16 => false,
            22435u16 => false,
            22436u16 => false,
            22437u16 => false,
            22438u16 => false,
            22439u16 => false,
            22440u16 => false,
            22441u16 => false,
            22442u16 => false,
            22443u16 => false,
            22444u16 => false,
            22445u16 => false,
            22446u16 => false,
            24106u16 => false,
            24107u16 => false,
            24117u16 => false,
            24119u16 => false,
            24120u16 => false,
            24121u16 => false,
            24122u16 => false,
            24123u16 => false,
            24124u16 => false,
            24125u16 => false,
            24126u16 => false,
            24127u16 => false,
            24128u16 => false,
            24129u16 => false,
            24130u16 => false,
            24131u16 => false,
            24132u16 => false,
            24133u16 => false,
            24134u16 => false,
            _ => true,
        }
    }
    pub const fn is_replaceable(self) -> bool {
        match self.0 {
            0u16 => true,
            80u16 => true,
            81u16 => true,
            82u16 => true,
            83u16 => true,
            84u16 => true,
            85u16 => true,
            86u16 => true,
            87u16 => true,
            88u16 => true,
            89u16 => true,
            90u16 => true,
            91u16 => true,
            92u16 => true,
            93u16 => true,
            94u16 => true,
            95u16 => true,
            96u16 => true,
            97u16 => true,
            98u16 => true,
            99u16 => true,
            100u16 => true,
            101u16 => true,
            102u16 => true,
            103u16 => true,
            104u16 => true,
            105u16 => true,
            106u16 => true,
            107u16 => true,
            108u16 => true,
            109u16 => true,
            110u16 => true,
            111u16 => true,
            2005u16 => true,
            2006u16 => true,
            2007u16 => true,
            2008u16 => true,
            2009u16 => true,
            2010u16 => true,
            2360u16 => true,
            2361u16 => true,
            2362u16 => true,
            2363u16 => true,
            2364u16 => true,
            2365u16 => true,
            2366u16 => true,
            2367u16 => true,
            2368u16 => true,
            2369u16 => true,
            2370u16 => true,
            2371u16 => true,
            2372u16 => true,
            2373u16 => true,
            2374u16 => true,
            2375u16 => true,
            2376u16 => true,
            2377u16 => true,
            2378u16 => true,
            2379u16 => true,
            2380u16 => true,
            2381u16 => true,
            2382u16 => true,
            2383u16 => true,
            2384u16 => true,
            2385u16 => true,
            2386u16 => true,
            2387u16 => true,
            2388u16 => true,
            2389u16 => true,
            2390u16 => true,
            2391u16 => true,
            2392u16 => true,
            2393u16 => true,
            2394u16 => true,
            2395u16 => true,
            2396u16 => true,
            2397u16 => true,
            2398u16 => true,
            2399u16 => true,
            2400u16 => true,
            2401u16 => true,
            2402u16 => true,
            2403u16 => true,
            2404u16 => true,
            2405u16 => true,
            2406u16 => true,
            2407u16 => true,
            2408u16 => true,
            2409u16 => true,
            2410u16 => true,
            2411u16 => true,
            2412u16 => true,
            2413u16 => true,
            2414u16 => true,
            2415u16 => true,
            2416u16 => true,
            2417u16 => true,
            2418u16 => true,
            2419u16 => true,
            2420u16 => true,
            2421u16 => true,
            2422u16 => true,
            2423u16 => true,
            2424u16 => true,
            2425u16 => true,
            2426u16 => true,
            2427u16 => true,
            2428u16 => true,
            2429u16 => true,
            2430u16 => true,
            2431u16 => true,
            2432u16 => true,
            2433u16 => true,
            2434u16 => true,
            2435u16 => true,
            2436u16 => true,
            2437u16 => true,
            2438u16 => true,
            2439u16 => true,
            2440u16 => true,
            2441u16 => true,
            2442u16 => true,
            2443u16 => true,
            2444u16 => true,
            2445u16 => true,
            2446u16 => true,
            2447u16 => true,
            2448u16 => true,
            2449u16 => true,
            2450u16 => true,
            2451u16 => true,
            2452u16 => true,
            2453u16 => true,
            2454u16 => true,
            2455u16 => true,
            2456u16 => true,
            2457u16 => true,
            2458u16 => true,
            2459u16 => true,
            2460u16 => true,
            2461u16 => true,
            2462u16 => true,
            2463u16 => true,
            2464u16 => true,
            2465u16 => true,
            2466u16 => true,
            2467u16 => true,
            2468u16 => true,
            2469u16 => true,
            2470u16 => true,
            2471u16 => true,
            2472u16 => true,
            2473u16 => true,
            2474u16 => true,
            2475u16 => true,
            2476u16 => true,
            2477u16 => true,
            2478u16 => true,
            2479u16 => true,
            2480u16 => true,
            2481u16 => true,
            2482u16 => true,
            2483u16 => true,
            2484u16 => true,
            2485u16 => true,
            2486u16 => true,
            2487u16 => true,
            2488u16 => true,
            2489u16 => true,
            2490u16 => true,
            2491u16 => true,
            2492u16 => true,
            2493u16 => true,
            2494u16 => true,
            2495u16 => true,
            2496u16 => true,
            2497u16 => true,
            2498u16 => true,
            2499u16 => true,
            2500u16 => true,
            2501u16 => true,
            2502u16 => true,
            2503u16 => true,
            2504u16 => true,
            2505u16 => true,
            2506u16 => true,
            2507u16 => true,
            2508u16 => true,
            2509u16 => true,
            2510u16 => true,
            2511u16 => true,
            2512u16 => true,
            2513u16 => true,
            2514u16 => true,
            2515u16 => true,
            2516u16 => true,
            2517u16 => true,
            2518u16 => true,
            2519u16 => true,
            2520u16 => true,
            2521u16 => true,
            2522u16 => true,
            2523u16 => true,
            2524u16 => true,
            2525u16 => true,
            2526u16 => true,
            2527u16 => true,
            2528u16 => true,
            2529u16 => true,
            2530u16 => true,
            2531u16 => true,
            2532u16 => true,
            2533u16 => true,
            2534u16 => true,
            2535u16 => true,
            2536u16 => true,
            2537u16 => true,
            2538u16 => true,
            2539u16 => true,
            2540u16 => true,
            2541u16 => true,
            2542u16 => true,
            2543u16 => true,
            2544u16 => true,
            2545u16 => true,
            2546u16 => true,
            2547u16 => true,
            2548u16 => true,
            2549u16 => true,
            2550u16 => true,
            2551u16 => true,
            2552u16 => true,
            2553u16 => true,
            2554u16 => true,
            2555u16 => true,
            2556u16 => true,
            2557u16 => true,
            2558u16 => true,
            2559u16 => true,
            2560u16 => true,
            2561u16 => true,
            2562u16 => true,
            2563u16 => true,
            2564u16 => true,
            2565u16 => true,
            2566u16 => true,
            2567u16 => true,
            2568u16 => true,
            2569u16 => true,
            2570u16 => true,
            2571u16 => true,
            2572u16 => true,
            2573u16 => true,
            2574u16 => true,
            2575u16 => true,
            2576u16 => true,
            2577u16 => true,
            2578u16 => true,
            2579u16 => true,
            2580u16 => true,
            2581u16 => true,
            2582u16 => true,
            2583u16 => true,
            2584u16 => true,
            2585u16 => true,
            2586u16 => true,
            2587u16 => true,
            2588u16 => true,
            2589u16 => true,
            2590u16 => true,
            2591u16 => true,
            2592u16 => true,
            2593u16 => true,
            2594u16 => true,
            2595u16 => true,
            2596u16 => true,
            2597u16 => true,
            2598u16 => true,
            2599u16 => true,
            2600u16 => true,
            2601u16 => true,
            2602u16 => true,
            2603u16 => true,
            2604u16 => true,
            2605u16 => true,
            2606u16 => true,
            2607u16 => true,
            2608u16 => true,
            2609u16 => true,
            2610u16 => true,
            2611u16 => true,
            2612u16 => true,
            2613u16 => true,
            2614u16 => true,
            2615u16 => true,
            2616u16 => true,
            2617u16 => true,
            2618u16 => true,
            2619u16 => true,
            2620u16 => true,
            2621u16 => true,
            2622u16 => true,
            2623u16 => true,
            2624u16 => true,
            2625u16 => true,
            2626u16 => true,
            2627u16 => true,
            2628u16 => true,
            2629u16 => true,
            2630u16 => true,
            2631u16 => true,
            2632u16 => true,
            2633u16 => true,
            2634u16 => true,
            2635u16 => true,
            2636u16 => true,
            2637u16 => true,
            2638u16 => true,
            2639u16 => true,
            2640u16 => true,
            2641u16 => true,
            2642u16 => true,
            2643u16 => true,
            2644u16 => true,
            2645u16 => true,
            2646u16 => true,
            2647u16 => true,
            2648u16 => true,
            2649u16 => true,
            2650u16 => true,
            2651u16 => true,
            2652u16 => true,
            2653u16 => true,
            2654u16 => true,
            2655u16 => true,
            2656u16 => true,
            2657u16 => true,
            2658u16 => true,
            2659u16 => true,
            2660u16 => true,
            2661u16 => true,
            2662u16 => true,
            2663u16 => true,
            2664u16 => true,
            2665u16 => true,
            2666u16 => true,
            2667u16 => true,
            2668u16 => true,
            2669u16 => true,
            2670u16 => true,
            2671u16 => true,
            2672u16 => true,
            2673u16 => true,
            2674u16 => true,
            2675u16 => true,
            2676u16 => true,
            2677u16 => true,
            2678u16 => true,
            2679u16 => true,
            2680u16 => true,
            2681u16 => true,
            2682u16 => true,
            2683u16 => true,
            2684u16 => true,
            2685u16 => true,
            2686u16 => true,
            2687u16 => true,
            2688u16 => true,
            2689u16 => true,
            2690u16 => true,
            2691u16 => true,
            2692u16 => true,
            2693u16 => true,
            2694u16 => true,
            2695u16 => true,
            2696u16 => true,
            2697u16 => true,
            2698u16 => true,
            2699u16 => true,
            2700u16 => true,
            2701u16 => true,
            2702u16 => true,
            2703u16 => true,
            2704u16 => true,
            2705u16 => true,
            2706u16 => true,
            2707u16 => true,
            2708u16 => true,
            2709u16 => true,
            2710u16 => true,
            2711u16 => true,
            2712u16 => true,
            2713u16 => true,
            2714u16 => true,
            2715u16 => true,
            2716u16 => true,
            2717u16 => true,
            2718u16 => true,
            2719u16 => true,
            2720u16 => true,
            2721u16 => true,
            2722u16 => true,
            2723u16 => true,
            2724u16 => true,
            2725u16 => true,
            2726u16 => true,
            2727u16 => true,
            2728u16 => true,
            2729u16 => true,
            2730u16 => true,
            2731u16 => true,
            2732u16 => true,
            2733u16 => true,
            2734u16 => true,
            2735u16 => true,
            2736u16 => true,
            2737u16 => true,
            2738u16 => true,
            2739u16 => true,
            2740u16 => true,
            2741u16 => true,
            2742u16 => true,
            2743u16 => true,
            2744u16 => true,
            2745u16 => true,
            2746u16 => true,
            2747u16 => true,
            2748u16 => true,
            2749u16 => true,
            2750u16 => true,
            2751u16 => true,
            2752u16 => true,
            2753u16 => true,
            2754u16 => true,
            2755u16 => true,
            2756u16 => true,
            2757u16 => true,
            2758u16 => true,
            2759u16 => true,
            2760u16 => true,
            2761u16 => true,
            2762u16 => true,
            2763u16 => true,
            2764u16 => true,
            2765u16 => true,
            2766u16 => true,
            2767u16 => true,
            2768u16 => true,
            2769u16 => true,
            2770u16 => true,
            2771u16 => true,
            2772u16 => true,
            2773u16 => true,
            2774u16 => true,
            2775u16 => true,
            2776u16 => true,
            2777u16 => true,
            2778u16 => true,
            2779u16 => true,
            2780u16 => true,
            2781u16 => true,
            2782u16 => true,
            2783u16 => true,
            2784u16 => true,
            2785u16 => true,
            2786u16 => true,
            2787u16 => true,
            2788u16 => true,
            2789u16 => true,
            2790u16 => true,
            2791u16 => true,
            2792u16 => true,
            2793u16 => true,
            2794u16 => true,
            2795u16 => true,
            2796u16 => true,
            2797u16 => true,
            2798u16 => true,
            2799u16 => true,
            2800u16 => true,
            2801u16 => true,
            2802u16 => true,
            2803u16 => true,
            2804u16 => true,
            2805u16 => true,
            2806u16 => true,
            2807u16 => true,
            2808u16 => true,
            2809u16 => true,
            2810u16 => true,
            2811u16 => true,
            2812u16 => true,
            2813u16 => true,
            2814u16 => true,
            2815u16 => true,
            2816u16 => true,
            2817u16 => true,
            2818u16 => true,
            2819u16 => true,
            2820u16 => true,
            2821u16 => true,
            2822u16 => true,
            2823u16 => true,
            2824u16 => true,
            2825u16 => true,
            2826u16 => true,
            2827u16 => true,
            2828u16 => true,
            2829u16 => true,
            2830u16 => true,
            2831u16 => true,
            2832u16 => true,
            2833u16 => true,
            2834u16 => true,
            2835u16 => true,
            2836u16 => true,
            2837u16 => true,
            2838u16 => true,
            2839u16 => true,
            2840u16 => true,
            2841u16 => true,
            2842u16 => true,
            2843u16 => true,
            2844u16 => true,
            2845u16 => true,
            2846u16 => true,
            2847u16 => true,
            2848u16 => true,
            2849u16 => true,
            2850u16 => true,
            2851u16 => true,
            2852u16 => true,
            2853u16 => true,
            2854u16 => true,
            2855u16 => true,
            2856u16 => true,
            2857u16 => true,
            2858u16 => true,
            2859u16 => true,
            2860u16 => true,
            2861u16 => true,
            2862u16 => true,
            2863u16 => true,
            2864u16 => true,
            2865u16 => true,
            2866u16 => true,
            2867u16 => true,
            2868u16 => true,
            2869u16 => true,
            2870u16 => true,
            2871u16 => true,
            2872u16 => true,
            5772u16 => true,
            5773u16 => true,
            5774u16 => true,
            5775u16 => true,
            5776u16 => true,
            5777u16 => true,
            5778u16 => true,
            5779u16 => true,
            6837u16 => true,
            6838u16 => true,
            6839u16 => true,
            6840u16 => true,
            6841u16 => true,
            6842u16 => true,
            6843u16 => true,
            6844u16 => true,
            6845u16 => true,
            6846u16 => true,
            6847u16 => true,
            6848u16 => true,
            6849u16 => true,
            6850u16 => true,
            6851u16 => true,
            6852u16 => true,
            6853u16 => true,
            6854u16 => true,
            6855u16 => true,
            6856u16 => true,
            6857u16 => true,
            6858u16 => true,
            6859u16 => true,
            6860u16 => true,
            6861u16 => true,
            6862u16 => true,
            6863u16 => true,
            6864u16 => true,
            6865u16 => true,
            6866u16 => true,
            6867u16 => true,
            6868u16 => true,
            6869u16 => true,
            6870u16 => true,
            6871u16 => true,
            6872u16 => true,
            6873u16 => true,
            6874u16 => true,
            6875u16 => true,
            6876u16 => true,
            6877u16 => true,
            6878u16 => true,
            6879u16 => true,
            6880u16 => true,
            6881u16 => true,
            6882u16 => true,
            6883u16 => true,
            6884u16 => true,
            6885u16 => true,
            6886u16 => true,
            6887u16 => true,
            6888u16 => true,
            6889u16 => true,
            6890u16 => true,
            6891u16 => true,
            6892u16 => true,
            6893u16 => true,
            6894u16 => true,
            6895u16 => true,
            6896u16 => true,
            6897u16 => true,
            6898u16 => true,
            6899u16 => true,
            6900u16 => true,
            6901u16 => true,
            6902u16 => true,
            6903u16 => true,
            6904u16 => true,
            6905u16 => true,
            6906u16 => true,
            6907u16 => true,
            6908u16 => true,
            6909u16 => true,
            6910u16 => true,
            6911u16 => true,
            6912u16 => true,
            6913u16 => true,
            6914u16 => true,
            6915u16 => true,
            6916u16 => true,
            6917u16 => true,
            6918u16 => true,
            6919u16 => true,
            6920u16 => true,
            6921u16 => true,
            6922u16 => true,
            6923u16 => true,
            6924u16 => true,
            6925u16 => true,
            6926u16 => true,
            6927u16 => true,
            6928u16 => true,
            6929u16 => true,
            6930u16 => true,
            6931u16 => true,
            6932u16 => true,
            6933u16 => true,
            6934u16 => true,
            6935u16 => true,
            6936u16 => true,
            6937u16 => true,
            6938u16 => true,
            6939u16 => true,
            6940u16 => true,
            6941u16 => true,
            6942u16 => true,
            6943u16 => true,
            6944u16 => true,
            6945u16 => true,
            6946u16 => true,
            6947u16 => true,
            6948u16 => true,
            6949u16 => true,
            6950u16 => true,
            6951u16 => true,
            6952u16 => true,
            6953u16 => true,
            6954u16 => true,
            6955u16 => true,
            6956u16 => true,
            6957u16 => true,
            6958u16 => true,
            6959u16 => true,
            6960u16 => true,
            6961u16 => true,
            6962u16 => true,
            6963u16 => true,
            6964u16 => true,
            6965u16 => true,
            6966u16 => true,
            6967u16 => true,
            6968u16 => true,
            6969u16 => true,
            6970u16 => true,
            6971u16 => true,
            6972u16 => true,
            6973u16 => true,
            6974u16 => true,
            6975u16 => true,
            6976u16 => true,
            6977u16 => true,
            6978u16 => true,
            6979u16 => true,
            6980u16 => true,
            6981u16 => true,
            6982u16 => true,
            6983u16 => true,
            6984u16 => true,
            6985u16 => true,
            6986u16 => true,
            6987u16 => true,
            6988u16 => true,
            6989u16 => true,
            6990u16 => true,
            6991u16 => true,
            6992u16 => true,
            6993u16 => true,
            6994u16 => true,
            6995u16 => true,
            6996u16 => true,
            10226u16 => true,
            10227u16 => true,
            10228u16 => true,
            10229u16 => true,
            10230u16 => true,
            10231u16 => true,
            10232u16 => true,
            10233u16 => true,
            10234u16 => true,
            10235u16 => true,
            10236u16 => true,
            10237u16 => true,
            10238u16 => true,
            10239u16 => true,
            10240u16 => true,
            10241u16 => true,
            10242u16 => true,
            10243u16 => true,
            10244u16 => true,
            10245u16 => true,
            10246u16 => true,
            10247u16 => true,
            10248u16 => true,
            10249u16 => true,
            10250u16 => true,
            10251u16 => true,
            10252u16 => true,
            10253u16 => true,
            10254u16 => true,
            10255u16 => true,
            10256u16 => true,
            10257u16 => true,
            10614u16 => true,
            10615u16 => true,
            10616u16 => true,
            10617u16 => true,
            12408u16 => true,
            12817u16 => true,
            12818u16 => true,
            12819u16 => true,
            12820u16 => true,
            18453u16 => true,
            18454u16 => true,
            18524u16 => true,
            22445u16 => true,
            22446u16 => true,
            _ => false,
        }
    }
    const SHAPES: [Aabb; 344usize] = [
        Aabb::new_unchecked(DVec3::new(0f64, 0f64, 0f64), DVec3::new(1f64, 1f64, 1f64)),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0f64),
            DVec3::new(0.1875f64, 0.5625f64, 0.1875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.8125f64, 0f64, 0f64),
            DVec3::new(1f64, 0.5625f64, 0.1875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.1875f64, 0.1875f64),
            DVec3::new(1f64, 0.5625f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0.1875f64, 0f64),
            DVec3::new(0.8125f64, 0.5625f64, 0.1875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0.8125f64),
            DVec3::new(0.1875f64, 0.5625f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.8125f64, 0f64, 0.8125f64),
            DVec3::new(1f64, 0.5625f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.1875f64, 0f64),
            DVec3::new(1f64, 0.5625f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0.1875f64, 0.8125f64),
            DVec3::new(0.8125f64, 0.5625f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.1875f64, 0.1875f64),
            DVec3::new(1f64, 0.5625f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0.1875f64, 0f64),
            DVec3::new(1f64, 0.5625f64, 0.1875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0.1875f64, 0.8125f64),
            DVec3::new(1f64, 0.5625f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.1875f64, 0f64),
            DVec3::new(0.8125f64, 0.5625f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.8125f64, 0.1875f64, 0.1875f64),
            DVec3::new(1f64, 0.5625f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0.25f64),
            DVec3::new(1f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0f64),
            DVec3::new(0.75f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0f64),
            DVec3::new(1f64, 1f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0f64, 0f64),
            DVec3::new(1f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0f64),
            DVec3::new(1f64, 0.75f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.25f64, 0f64),
            DVec3::new(1f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0f64),
            DVec3::new(1f64, 1f64, 0.25f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0.375f64, 0.25f64),
            DVec3::new(0.625f64, 0.625f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0.375f64, 0.25f64),
            DVec3::new(0.625f64, 0.625f64, 1.25f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.75f64, 0f64, 0f64),
            DVec3::new(1f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.375f64, 0.375f64),
            DVec3::new(0.75f64, 0.625f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(-0.25f64, 0.375f64, 0.375f64),
            DVec3::new(0.75f64, 0.625f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0.75f64),
            DVec3::new(1f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0.375f64, 0f64),
            DVec3::new(0.625f64, 0.625f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0.375f64, -0.25f64),
            DVec3::new(0.625f64, 0.625f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0f64),
            DVec3::new(0.25f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0.375f64, 0.375f64),
            DVec3::new(1f64, 0.625f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0.375f64, 0.375f64),
            DVec3::new(1.25f64, 0.625f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0f64, 0.375f64),
            DVec3::new(0.625f64, 1f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.75f64, 0f64),
            DVec3::new(0.375f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0.75f64, 0f64),
            DVec3::new(1f64, 1f64, 0.375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0.75f64, 0.625f64),
            DVec3::new(1f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.625f64, 0.75f64, 0.375f64),
            DVec3::new(1f64, 1f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, -0.25f64, 0.375f64),
            DVec3::new(0.625f64, 1f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0f64),
            DVec3::new(1f64, 0.25f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0.25f64, 0.375f64),
            DVec3::new(0.625f64, 1f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0.25f64, 0.375f64),
            DVec3::new(0.625f64, 1.25f64, 0.625f64),
        ),
        Aabb::new_unchecked(DVec3::new(0f64, 0f64, 0f64), DVec3::new(1f64, 1f64, 0.5f64)),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.5f64, 0.5f64),
            DVec3::new(1f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(DVec3::new(0f64, 0f64, 0f64), DVec3::new(0.5f64, 1f64, 1f64)),
        Aabb::new_unchecked(
            DVec3::new(0.5f64, 0f64, 0f64),
            DVec3::new(1f64, 1f64, 0.5f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.5f64, 0.5f64, 0.5f64),
            DVec3::new(1f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.5f64, 0f64, 0.5f64),
            DVec3::new(1f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.5f64, 0.5f64),
            DVec3::new(0.5f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0f64),
            DVec3::new(0.5f64, 1f64, 0.5f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.5f64, 0.5f64, 0f64),
            DVec3::new(1f64, 1f64, 0.5f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.5f64, 0f64),
            DVec3::new(0.5f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(DVec3::new(0f64, 0f64, 0f64), DVec3::new(1f64, 0.5f64, 1f64)),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.5f64, 0f64),
            DVec3::new(1f64, 1f64, 0.5f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.5f64, 0f64),
            DVec3::new(0.5f64, 1f64, 0.5f64),
        ),
        Aabb::new_unchecked(DVec3::new(0f64, 0f64, 0.5f64), DVec3::new(1f64, 1f64, 1f64)),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0.5f64),
            DVec3::new(0.5f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.5f64, 0.5f64, 0f64),
            DVec3::new(1f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(DVec3::new(0.5f64, 0f64, 0f64), DVec3::new(1f64, 1f64, 1f64)),
        Aabb::new_unchecked(
            DVec3::new(0.0625f64, 0f64, 0.0625f64),
            DVec3::new(0.9375f64, 0.875f64, 0.9375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.0625f64, 0f64, 0.0625f64),
            DVec3::new(1f64, 0.875f64, 0.9375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0.0625f64),
            DVec3::new(0.9375f64, 0.875f64, 0.9375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.0625f64, 0f64, 0f64),
            DVec3::new(0.9375f64, 0.875f64, 0.9375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.0625f64, 0f64, 0.0625f64),
            DVec3::new(0.9375f64, 0.875f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0f64),
            DVec3::new(1f64, 0.9375f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0f64),
            DVec3::new(0.1875f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0.8125f64),
            DVec3::new(1f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.8125f64, 0f64, 0f64),
            DVec3::new(1f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0f64),
            DVec3::new(1f64, 1f64, 0.1875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.875f64, 0.375f64),
            DVec3::new(1f64, 1f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0.875f64, 0f64),
            DVec3::new(0.625f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0f64),
            DVec3::new(1f64, 0.125f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0f64),
            DVec3::new(1f64, 0.375f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0f64),
            DVec3::new(1f64, 0.625f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0f64),
            DVec3::new(1f64, 0.875f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.0625f64, 0f64, 0.0625f64),
            DVec3::new(0.9375f64, 0.9375f64, 0.9375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0.375f64),
            DVec3::new(1f64, 1.5f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0f64, 0f64),
            DVec3::new(0.625f64, 1.5f64, 0.375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0f64, 0.625f64),
            DVec3::new(0.625f64, 1.5f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0f64, 0f64),
            DVec3::new(0.625f64, 1.5f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.625f64, 0f64, 0.375f64),
            DVec3::new(1f64, 1.5f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0f64, 0f64),
            DVec3::new(0.625f64, 1.5f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0f64, 0.375f64),
            DVec3::new(0.625f64, 1.5f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0f64, 0.375f64),
            DVec3::new(1f64, 1.5f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0.375f64),
            DVec3::new(0.625f64, 1.5f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0f64, 0.375f64),
            DVec3::new(0.625f64, 1.5f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.0625f64, 0f64, 0.0625f64),
            DVec3::new(0.9375f64, 0.5f64, 0.9375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0f64, 0.0625f64),
            DVec3::new(0.9375f64, 0.5f64, 0.9375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.3125f64, 0f64, 0.0625f64),
            DVec3::new(0.9375f64, 0.5f64, 0.9375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.4375f64, 0f64, 0.0625f64),
            DVec3::new(0.9375f64, 0.5f64, 0.9375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.5625f64, 0f64, 0.0625f64),
            DVec3::new(0.9375f64, 0.5f64, 0.9375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.6875f64, 0f64, 0.0625f64),
            DVec3::new(0.9375f64, 0.5f64, 0.9375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.8125f64, 0f64, 0.0625f64),
            DVec3::new(0.9375f64, 0.5f64, 0.9375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.8125f64, 0f64),
            DVec3::new(1f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0f64),
            DVec3::new(1f64, 0.1875f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0.4375f64),
            DVec3::new(1f64, 1f64, 0.5625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.4375f64, 0f64, 0f64),
            DVec3::new(0.5625f64, 1f64, 0.4375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.4375f64, 0f64, 0.5625f64),
            DVec3::new(0.5625f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.4375f64, 0f64, 0f64),
            DVec3::new(0.5625f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.5625f64, 0f64, 0.4375f64),
            DVec3::new(1f64, 1f64, 0.5625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.4375f64, 0f64, 0f64),
            DVec3::new(0.5625f64, 1f64, 0.5625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.4375f64, 0f64, 0.4375f64),
            DVec3::new(0.5625f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.4375f64, 0f64, 0.4375f64),
            DVec3::new(1f64, 1f64, 0.5625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0.4375f64),
            DVec3::new(0.5625f64, 1f64, 0.5625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.4375f64, 0f64, 0.4375f64),
            DVec3::new(0.5625f64, 1f64, 0.5625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.40625f64, 0.40625f64),
            DVec3::new(1f64, 0.59375f64, 0.59375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.40625f64, 0f64, 0.40625f64),
            DVec3::new(0.59375f64, 1f64, 0.59375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.40625f64, 0.40625f64, 0f64),
            DVec3::new(0.59375f64, 0.59375f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.0625f64, 0f64, 0.0625f64),
            DVec3::new(0.9375f64, 0.09375f64, 0.9375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.0625f64, 0f64, 0.0625f64),
            DVec3::new(0.9375f64, 0.125f64, 0.9375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.4375f64, 0.125f64, 0.4375f64),
            DVec3::new(0.5625f64, 0.875f64, 0.5625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0f64),
            DVec3::new(0.125f64, 1f64, 0.25f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0.75f64),
            DVec3::new(0.125f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.125f64, 0f64, 0f64),
            DVec3::new(0.25f64, 1f64, 0.125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.125f64, 0f64, 0.875f64),
            DVec3::new(0.25f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.75f64, 0f64, 0f64),
            DVec3::new(1f64, 1f64, 0.125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.75f64, 0f64, 0.875f64),
            DVec3::new(1f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.875f64, 0f64, 0.125f64),
            DVec3::new(1f64, 1f64, 0.25f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.875f64, 0f64, 0.75f64),
            DVec3::new(1f64, 1f64, 0.875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.1875f64, 0.25f64),
            DVec3::new(1f64, 0.25f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.125f64, 0.1875f64, 0.125f64),
            DVec3::new(0.875f64, 0.25f64, 0.25f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.125f64, 0.1875f64, 0.75f64),
            DVec3::new(0.875f64, 0.25f64, 0.875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0.1875f64, 0f64),
            DVec3::new(0.75f64, 1f64, 0.125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0.1875f64, 0.875f64),
            DVec3::new(0.75f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.25f64, 0.25f64),
            DVec3::new(0.125f64, 1f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.875f64, 0.25f64, 0.25f64),
            DVec3::new(1f64, 1f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0f64),
            DVec3::new(1f64, 0.8125f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0.8125f64, 0.25f64),
            DVec3::new(0.75f64, 1f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.0625f64, 0f64, 0.0625f64),
            DVec3::new(0.9375f64, 1f64, 0.9375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0.4375f64, 0.0625f64),
            DVec3::new(0.625f64, 0.75f64, 0.3125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0.4375f64, 0.6875f64),
            DVec3::new(0.625f64, 0.75f64, 0.9375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.0625f64, 0.4375f64, 0.375f64),
            DVec3::new(0.3125f64, 0.75f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.6875f64, 0.4375f64, 0.375f64),
            DVec3::new(0.9375f64, 0.75f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.3125f64, 0.3125f64, 0.0625f64),
            DVec3::new(0.6875f64, 0.75f64, 0.4375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.3125f64, 0.3125f64, 0.5625f64),
            DVec3::new(0.6875f64, 0.75f64, 0.9375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.0625f64, 0.3125f64, 0.3125f64),
            DVec3::new(0.4375f64, 0.75f64, 0.6875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.5625f64, 0.3125f64, 0.3125f64),
            DVec3::new(0.9375f64, 0.75f64, 0.6875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0.1875f64, 0.0625f64),
            DVec3::new(0.75f64, 0.75f64, 0.5625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0.1875f64, 0.4375f64),
            DVec3::new(0.75f64, 0.75f64, 0.9375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.0625f64, 0.1875f64, 0.25f64),
            DVec3::new(0.5625f64, 0.75f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.4375f64, 0.1875f64, 0.25f64),
            DVec3::new(0.9375f64, 0.75f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0f64, 0.25f64),
            DVec3::new(0.75f64, 1.5f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0.3125f64),
            DVec3::new(0.75f64, 1.5f64, 0.6875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0f64, 0.25f64),
            DVec3::new(0.75f64, 1.5f64, 0.3125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0f64, 0.6875f64),
            DVec3::new(0.75f64, 1.5f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0.3125f64),
            DVec3::new(0.6875f64, 1.5f64, 0.6875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.3125f64, 0f64, 0.75f64),
            DVec3::new(0.6875f64, 1.5f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.3125f64, 0f64, 0.3125f64),
            DVec3::new(0.6875f64, 1.5f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.3125f64, 0f64, 0.6875f64),
            DVec3::new(0.6875f64, 1.5f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.3125f64, 0f64, 0f64),
            DVec3::new(0.6875f64, 1.5f64, 0.25f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.3125f64, 0f64, 0f64),
            DVec3::new(0.6875f64, 1.5f64, 0.6875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.3125f64, 0f64, 0f64),
            DVec3::new(0.6875f64, 1.5f64, 0.3125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.3125f64, 0f64, 0f64),
            DVec3::new(0.6875f64, 1.5f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.75f64, 0f64, 0.3125f64),
            DVec3::new(1f64, 1.5f64, 0.6875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0.3125f64),
            DVec3::new(1f64, 1.5f64, 0.6875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.3125f64, 0f64, 0.3125f64),
            DVec3::new(1f64, 1.5f64, 0.6875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.6875f64, 0f64, 0.3125f64),
            DVec3::new(1f64, 1.5f64, 0.6875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.3125f64, 0f64, 0.3125f64),
            DVec3::new(0.6875f64, 0.375f64, 0.6875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0f64, 0.25f64),
            DVec3::new(0.75f64, 0.5f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0.25f64, 0.5f64),
            DVec3::new(0.75f64, 0.75f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0.25f64, 0f64),
            DVec3::new(0.75f64, 0.75f64, 0.5f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.5f64, 0.25f64, 0.25f64),
            DVec3::new(1f64, 0.75f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.25f64, 0.25f64),
            DVec3::new(0.5f64, 0.75f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0f64, 0.1875f64),
            DVec3::new(0.8125f64, 0.5f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0.25f64, 0.5f64),
            DVec3::new(0.8125f64, 0.75f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0.25f64, 0f64),
            DVec3::new(0.8125f64, 0.75f64, 0.5f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.5f64, 0.25f64, 0.1875f64),
            DVec3::new(1f64, 0.75f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.25f64, 0.1875f64),
            DVec3::new(0.5f64, 0.75f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.125f64, 0f64, 0.125f64),
            DVec3::new(0.875f64, 0.25f64, 0.875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0.25f64, 0.1875f64),
            DVec3::new(0.75f64, 0.3125f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0.3125f64, 0.25f64),
            DVec3::new(0.625f64, 1f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0.625f64, 0f64),
            DVec3::new(0.375f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0.625f64, 0f64),
            DVec3::new(0.8125f64, 1f64, 0.25f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0.625f64, 0.75f64),
            DVec3::new(0.8125f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.625f64, 0.625f64, 0.25f64),
            DVec3::new(0.8125f64, 1f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0.25f64, 0.25f64),
            DVec3::new(0.8125f64, 0.3125f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0.3125f64, 0.375f64),
            DVec3::new(0.75f64, 1f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.625f64, 0.1875f64),
            DVec3::new(0.25f64, 1f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0.625f64, 0.1875f64),
            DVec3::new(1f64, 1f64, 0.375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0.625f64, 0.625f64),
            DVec3::new(1f64, 1f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.75f64, 0.625f64, 0.375f64),
            DVec3::new(1f64, 1f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0f64, 0.375f64),
            DVec3::new(0.625f64, 0.6875f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0.25f64, 0.25f64),
            DVec3::new(0.375f64, 0.6875f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0.25f64, 0.25f64),
            DVec3::new(0.75f64, 0.6875f64, 0.375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0.25f64, 0.625f64),
            DVec3::new(0.75f64, 0.6875f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.625f64, 0.25f64, 0.375f64),
            DVec3::new(0.75f64, 0.6875f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.625f64, 0f64),
            DVec3::new(0.25f64, 0.6875f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0.625f64, 0f64),
            DVec3::new(1f64, 0.6875f64, 0.25f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0.625f64, 0.75f64),
            DVec3::new(1f64, 0.6875f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.75f64, 0.625f64, 0.25f64),
            DVec3::new(1f64, 0.6875f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.6875f64, 0f64),
            DVec3::new(0.125f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.125f64, 0.6875f64, 0f64),
            DVec3::new(1f64, 1f64, 0.125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.125f64, 0.6875f64, 0.875f64),
            DVec3::new(1f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.875f64, 0.6875f64, 0.125f64),
            DVec3::new(1f64, 1f64, 0.875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0.25f64, 0.25f64),
            DVec3::new(0.75f64, 0.6875f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0.25f64, 0f64),
            DVec3::new(0.625f64, 0.5f64, 0.25f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0.25f64, 0.75f64),
            DVec3::new(0.625f64, 0.5f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.25f64, 0.375f64),
            DVec3::new(0.75f64, 0.5f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0.25f64, 0.25f64),
            DVec3::new(0.75f64, 0.6875f64, 0.375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0.25f64, 0.625f64),
            DVec3::new(0.75f64, 0.6875f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0.5f64, 0.375f64),
            DVec3::new(0.75f64, 0.6875f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.75f64, 0.25f64, 0.375f64),
            DVec3::new(1f64, 0.5f64, 0.625f64),
        ),
        Aabb::new_unchecked(DVec3::new(0f64, 0.5f64, 0f64), DVec3::new(1f64, 1f64, 1f64)),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0f64),
            DVec3::new(1f64, 0.0625f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0.375f64, 0f64),
            DVec3::new(0.625f64, 0.625f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.375f64, 0.375f64),
            DVec3::new(1f64, 0.625f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0f64, 0.1875f64),
            DVec3::new(0.8125f64, 1f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.1875f64, 0.1875f64),
            DVec3::new(0.1875f64, 0.8125f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0.1875f64, 0f64),
            DVec3::new(0.8125f64, 0.8125f64, 0.1875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0.1875f64, 0.8125f64),
            DVec3::new(0.8125f64, 0.8125f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.8125f64, 0.1875f64, 0.1875f64),
            DVec3::new(1f64, 0.8125f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0f64, 0.1875f64),
            DVec3::new(0.8125f64, 0.8125f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.1875f64, 0.1875f64),
            DVec3::new(1f64, 0.8125f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0.8125f64, 0.1875f64),
            DVec3::new(0.8125f64, 1f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0.1875f64, 0f64),
            DVec3::new(0.8125f64, 0.8125f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0.1875f64, 0f64),
            DVec3::new(0.8125f64, 0.8125f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0.1875f64, 0.1875f64),
            DVec3::new(0.8125f64, 0.8125f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0.1875f64, 0.1875f64),
            DVec3::new(1f64, 0.8125f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.1875f64, 0.1875f64),
            DVec3::new(0.8125f64, 0.8125f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0.1875f64, 0.1875f64),
            DVec3::new(0.8125f64, 1f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0.1875f64, 0.1875f64),
            DVec3::new(0.8125f64, 0.8125f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.3125f64, -0.0625f64, 0.3125f64),
            DVec3::new(0.6875f64, 0.1875f64, 0.6875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, -0.0625f64, 0.1875f64),
            DVec3::new(0.8125f64, 0.3125f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0f64, 0.1875f64),
            DVec3::new(0.75f64, 0.4375f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.0625f64, 0f64, 0.0625f64),
            DVec3::new(0.9375f64, 0.4375f64, 0.9375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.0625f64, 0f64, 0.125f64),
            DVec3::new(0.9375f64, 1f64, 0.875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0f64, 0.375f64),
            DVec3::new(0.625f64, 0.375f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0f64, 0.1875f64),
            DVec3::new(0.8125f64, 0.375f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.125f64, 0f64, 0.125f64),
            DVec3::new(0.875f64, 0.375f64, 0.875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.125f64, 0f64, 0.125f64),
            DVec3::new(0.875f64, 0.4375f64, 0.875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.3125f64, 0.3125f64, 0.3125f64),
            DVec3::new(0.6875f64, 0.6875f64, 0.6875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.15625f64, 0f64, 0.15625f64),
            DVec3::new(0.34375f64, 1f64, 0.34375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0f64),
            DVec3::new(0.125f64, 1f64, 0.125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0.875f64),
            DVec3::new(0.125f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.875f64, 0f64, 0f64),
            DVec3::new(1f64, 1f64, 0.125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.875f64, 0f64, 0.875f64),
            DVec3::new(1f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.875f64, 0.125f64),
            DVec3::new(1f64, 1f64, 0.875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.125f64, 0.875f64, 0f64),
            DVec3::new(0.875f64, 1f64, 0.125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.125f64, 0.875f64, 0.875f64),
            DVec3::new(0.875f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.125f64, 0f64, 0.375f64),
            DVec3::new(0.25f64, 0.8125f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.75f64, 0f64, 0.375f64),
            DVec3::new(0.875f64, 0.8125f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0.25f64, 0.125f64),
            DVec3::new(0.75f64, 1f64, 0.875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.125f64, 0.4375f64, 0.3125f64),
            DVec3::new(0.25f64, 0.8125f64, 0.375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.125f64, 0.4375f64, 0.625f64),
            DVec3::new(0.25f64, 0.8125f64, 0.6875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.75f64, 0.4375f64, 0.3125f64),
            DVec3::new(0.875f64, 0.8125f64, 0.375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.75f64, 0.4375f64, 0.625f64),
            DVec3::new(0.875f64, 0.8125f64, 0.6875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0f64, 0.125f64),
            DVec3::new(0.625f64, 0.8125f64, 0.25f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0f64, 0.75f64),
            DVec3::new(0.625f64, 0.8125f64, 0.875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.125f64, 0.25f64, 0.25f64),
            DVec3::new(0.875f64, 1f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.3125f64, 0.4375f64, 0.125f64),
            DVec3::new(0.375f64, 0.8125f64, 0.25f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.3125f64, 0.4375f64, 0.75f64),
            DVec3::new(0.375f64, 0.8125f64, 0.875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.625f64, 0.4375f64, 0.125f64),
            DVec3::new(0.6875f64, 0.8125f64, 0.25f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.625f64, 0.4375f64, 0.75f64),
            DVec3::new(0.6875f64, 0.8125f64, 0.875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0.125f64, 0f64),
            DVec3::new(0.75f64, 0.875f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.125f64, 0.3125f64, 0.1875f64),
            DVec3::new(0.25f64, 0.6875f64, 0.5625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.75f64, 0.3125f64, 0.1875f64),
            DVec3::new(0.875f64, 0.6875f64, 0.5625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.125f64, 0.375f64, 0.5625f64),
            DVec3::new(0.25f64, 0.625f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.75f64, 0.375f64, 0.5625f64),
            DVec3::new(0.875f64, 0.625f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0.125f64, 0.25f64),
            DVec3::new(0.75f64, 0.875f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.125f64, 0.3125f64, 0.4375f64),
            DVec3::new(0.25f64, 0.6875f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.75f64, 0.3125f64, 0.4375f64),
            DVec3::new(0.875f64, 0.6875f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.125f64, 0.375f64, 0f64),
            DVec3::new(0.25f64, 0.625f64, 0.4375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.75f64, 0.375f64, 0f64),
            DVec3::new(0.875f64, 0.625f64, 0.4375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.125f64, 0.25f64),
            DVec3::new(0.75f64, 0.875f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0.3125f64, 0.125f64),
            DVec3::new(0.5625f64, 0.6875f64, 0.25f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0.3125f64, 0.75f64),
            DVec3::new(0.5625f64, 0.6875f64, 0.875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.5625f64, 0.375f64, 0.125f64),
            DVec3::new(1f64, 0.625f64, 0.25f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.5625f64, 0.375f64, 0.75f64),
            DVec3::new(1f64, 0.625f64, 0.875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0.125f64, 0.25f64),
            DVec3::new(1f64, 0.875f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.4375f64, 0.3125f64, 0.125f64),
            DVec3::new(0.8125f64, 0.6875f64, 0.25f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.4375f64, 0.3125f64, 0.75f64),
            DVec3::new(0.8125f64, 0.6875f64, 0.875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.375f64, 0.125f64),
            DVec3::new(0.4375f64, 0.625f64, 0.25f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.375f64, 0.75f64),
            DVec3::new(0.4375f64, 0.625f64, 0.875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0f64, 0.125f64),
            DVec3::new(0.75f64, 0.75f64, 0.875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.125f64, 0.1875f64, 0.3125f64),
            DVec3::new(0.25f64, 0.5625f64, 0.6875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.75f64, 0.1875f64, 0.3125f64),
            DVec3::new(0.875f64, 0.5625f64, 0.6875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.125f64, 0.5625f64, 0.375f64),
            DVec3::new(0.25f64, 1f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.75f64, 0.5625f64, 0.375f64),
            DVec3::new(0.875f64, 1f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.125f64, 0f64, 0.25f64),
            DVec3::new(0.875f64, 0.75f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.3125f64, 0.1875f64, 0.125f64),
            DVec3::new(0.6875f64, 0.5625f64, 0.25f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.3125f64, 0.1875f64, 0.75f64),
            DVec3::new(0.6875f64, 0.5625f64, 0.875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0.5625f64, 0.125f64),
            DVec3::new(0.625f64, 1f64, 0.25f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0.5625f64, 0.75f64),
            DVec3::new(0.625f64, 1f64, 0.875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0.125f64, 0.25f64),
            DVec3::new(0.75f64, 0.875f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0f64),
            DVec3::new(1f64, 0.5625f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0.25f64),
            DVec3::new(1f64, 1f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0f64, 0f64),
            DVec3::new(0.75f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0.25f64, 0.25f64),
            DVec3::new(0.75f64, 0.375f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.3125f64, 0.375f64, 0.3125f64),
            DVec3::new(0.6875f64, 0.8125f64, 0.6875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.4375f64, 0.8125f64, 0.4375f64),
            DVec3::new(0.5625f64, 1f64, 0.5625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.4375f64, 0.8125f64, 0f64),
            DVec3::new(0.5625f64, 0.9375f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.4375f64, 0.8125f64, 0.1875f64),
            DVec3::new(0.5625f64, 0.9375f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.8125f64, 0.4375f64),
            DVec3::new(0.8125f64, 0.9375f64, 0.5625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0.8125f64, 0.4375f64),
            DVec3::new(1f64, 0.9375f64, 0.5625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.4375f64, 0.8125f64, 0f64),
            DVec3::new(0.5625f64, 0.9375f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.8125f64, 0.4375f64),
            DVec3::new(1f64, 0.9375f64, 0.5625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.3125f64, 0.0625f64, 0.3125f64),
            DVec3::new(0.6875f64, 0.5f64, 0.6875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0.5f64, 0.375f64),
            DVec3::new(0.625f64, 0.625f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.3125f64, 0f64, 0.3125f64),
            DVec3::new(0.6875f64, 0.4375f64, 0.6875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0.4375f64, 0.375f64),
            DVec3::new(0.625f64, 0.5625f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0f64),
            DVec3::new(1f64, 0.4375f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.125f64, 0f64),
            DVec3::new(0.125f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.125f64, 0.125f64, 0f64),
            DVec3::new(1f64, 1f64, 0.125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.125f64, 0.125f64, 0.875f64),
            DVec3::new(1f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.875f64, 0.125f64, 0.125f64),
            DVec3::new(1f64, 1f64, 0.875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.4375f64, 0f64, 0.4375f64),
            DVec3::new(0.5625f64, 0.375f64, 0.5625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.3125f64, 0f64, 0.375f64),
            DVec3::new(0.6875f64, 0.375f64, 0.5625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.3125f64, 0f64, 0.375f64),
            DVec3::new(0.625f64, 0.375f64, 0.6875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.3125f64, 0f64, 0.3125f64),
            DVec3::new(0.6875f64, 0.375f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.4375f64, 0.5f64, 0.4375f64),
            DVec3::new(0.5625f64, 0.875f64, 0.5625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0.1875f64, 0.5625f64),
            DVec3::new(0.8125f64, 0.8125f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.1875f64, 0.1875f64),
            DVec3::new(0.4375f64, 0.8125f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0.1875f64, 0f64),
            DVec3::new(0.8125f64, 0.8125f64, 0.4375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.5625f64, 0.1875f64, 0.1875f64),
            DVec3::new(1f64, 0.8125f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0f64, 0.1875f64),
            DVec3::new(0.8125f64, 0.4375f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0.5625f64, 0.1875f64),
            DVec3::new(0.8125f64, 1f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0.1875f64, 0.6875f64),
            DVec3::new(0.8125f64, 0.8125f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.1875f64, 0.1875f64),
            DVec3::new(0.3125f64, 0.8125f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0.1875f64, 0f64),
            DVec3::new(0.8125f64, 0.8125f64, 0.3125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.6875f64, 0.1875f64, 0.1875f64),
            DVec3::new(1f64, 0.8125f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0f64, 0.1875f64),
            DVec3::new(0.8125f64, 0.3125f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0.6875f64, 0.1875f64),
            DVec3::new(0.8125f64, 1f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0.1875f64, 0.75f64),
            DVec3::new(0.8125f64, 0.8125f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.1875f64, 0.1875f64),
            DVec3::new(0.25f64, 0.8125f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0.1875f64, 0f64),
            DVec3::new(0.8125f64, 0.8125f64, 0.25f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.75f64, 0.1875f64, 0.1875f64),
            DVec3::new(1f64, 0.8125f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0f64, 0.1875f64),
            DVec3::new(0.8125f64, 0.25f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0.75f64, 0.1875f64),
            DVec3::new(0.8125f64, 1f64, 0.8125f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0.25f64, 0.8125f64),
            DVec3::new(0.75f64, 0.75f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.25f64, 0.25f64),
            DVec3::new(0.1875f64, 0.75f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0.25f64, 0f64),
            DVec3::new(0.75f64, 0.75f64, 0.1875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.8125f64, 0.25f64, 0.25f64),
            DVec3::new(1f64, 0.75f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.25f64, 0f64, 0.25f64),
            DVec3::new(0.75f64, 0.1875f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0f64, 0.1875f64),
            DVec3::new(0.5625f64, 1f64, 0.5625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0f64, 0.1875f64),
            DVec3::new(0.5625f64, 0.6875f64, 0.5625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.1875f64, 0.3125f64, 0.1875f64),
            DVec3::new(0.5625f64, 1f64, 0.5625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.125f64, 0f64, 0.125f64),
            DVec3::new(0.625f64, 1f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.0625f64, 0f64, 0.0625f64),
            DVec3::new(0.6875f64, 1f64, 0.6875f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0f64, 0f64),
            DVec3::new(0.75f64, 1f64, 0.75f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.5f64, 0f64),
            DVec3::new(0.375f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0.5f64, 0f64),
            DVec3::new(1f64, 1f64, 0.375f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.375f64, 0.5f64, 0.625f64),
            DVec3::new(1f64, 1f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0.625f64, 0.5f64, 0.375f64),
            DVec3::new(1f64, 1f64, 0.625f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.6875f64, 0f64),
            DVec3::new(1f64, 0.9375f64, 1f64),
        ),
        Aabb::new_unchecked(
            DVec3::new(0f64, 0.6875f64, 0f64),
            DVec3::new(1f64, 0.8125f64, 1f64),
        ),
    ];
    pub fn collision_shapes(self) -> impl ExactSizeIterator<Item = Aabb> + FusedIterator + Clone {
        let shape_idxs: &'static [u16] = match self.0 {
            0u16 => &[],
            1u16 => &[0u16],
            2u16 => &[0u16],
            3u16 => &[0u16],
            4u16 => &[0u16],
            5u16 => &[0u16],
            6u16 => &[0u16],
            7u16 => &[0u16],
            8u16 => &[0u16],
            9u16 => &[0u16],
            10u16 => &[0u16],
            11u16 => &[0u16],
            12u16 => &[0u16],
            13u16 => &[0u16],
            14u16 => &[0u16],
            15u16 => &[0u16],
            16u16 => &[0u16],
            17u16 => &[0u16],
            18u16 => &[0u16],
            19u16 => &[0u16],
            20u16 => &[0u16],
            21u16 => &[0u16],
            22u16 => &[0u16],
            23u16 => &[0u16],
            24u16 => &[0u16],
            25u16 => &[],
            26u16 => &[],
            27u16 => &[],
            28u16 => &[],
            29u16 => &[],
            30u16 => &[],
            31u16 => &[],
            32u16 => &[],
            33u16 => &[],
            34u16 => &[],
            35u16 => &[],
            36u16 => &[],
            37u16 => &[],
            38u16 => &[],
            39u16 => &[],
            40u16 => &[],
            41u16 => &[],
            42u16 => &[],
            43u16 => &[],
            44u16 => &[],
            45u16 => &[],
            46u16 => &[],
            47u16 => &[],
            48u16 => &[],
            49u16 => &[],
            50u16 => &[],
            51u16 => &[],
            52u16 => &[],
            53u16 => &[],
            54u16 => &[],
            55u16 => &[],
            56u16 => &[],
            57u16 => &[],
            58u16 => &[],
            59u16 => &[],
            60u16 => &[],
            61u16 => &[],
            62u16 => &[],
            63u16 => &[],
            64u16 => &[],
            65u16 => &[],
            66u16 => &[],
            67u16 => &[],
            68u16 => &[],
            69u16 => &[],
            70u16 => &[],
            71u16 => &[],
            72u16 => &[],
            73u16 => &[],
            74u16 => &[],
            75u16 => &[],
            76u16 => &[],
            77u16 => &[],
            78u16 => &[],
            79u16 => &[0u16],
            80u16 => &[],
            81u16 => &[],
            82u16 => &[],
            83u16 => &[],
            84u16 => &[],
            85u16 => &[],
            86u16 => &[],
            87u16 => &[],
            88u16 => &[],
            89u16 => &[],
            90u16 => &[],
            91u16 => &[],
            92u16 => &[],
            93u16 => &[],
            94u16 => &[],
            95u16 => &[],
            96u16 => &[],
            97u16 => &[],
            98u16 => &[],
            99u16 => &[],
            100u16 => &[],
            101u16 => &[],
            102u16 => &[],
            103u16 => &[],
            104u16 => &[],
            105u16 => &[],
            106u16 => &[],
            107u16 => &[],
            108u16 => &[],
            109u16 => &[],
            110u16 => &[],
            111u16 => &[],
            112u16 => &[0u16],
            113u16 => &[0u16],
            114u16 => &[0u16],
            115u16 => &[0u16],
            116u16 => &[0u16],
            117u16 => &[0u16],
            118u16 => &[0u16],
            119u16 => &[0u16],
            120u16 => &[0u16],
            121u16 => &[0u16],
            122u16 => &[0u16],
            123u16 => &[0u16],
            124u16 => &[0u16],
            125u16 => &[0u16],
            126u16 => &[0u16],
            127u16 => &[0u16],
            128u16 => &[0u16],
            129u16 => &[0u16],
            130u16 => &[0u16],
            131u16 => &[0u16],
            132u16 => &[0u16],
            133u16 => &[0u16],
            134u16 => &[0u16],
            135u16 => &[0u16],
            136u16 => &[0u16],
            137u16 => &[0u16],
            138u16 => &[0u16],
            139u16 => &[0u16],
            140u16 => &[0u16],
            141u16 => &[0u16],
            142u16 => &[0u16],
            143u16 => &[0u16],
            144u16 => &[0u16],
            145u16 => &[0u16],
            146u16 => &[0u16],
            147u16 => &[0u16],
            148u16 => &[0u16],
            149u16 => &[0u16],
            150u16 => &[0u16],
            151u16 => &[0u16],
            152u16 => &[0u16],
            153u16 => &[0u16],
            154u16 => &[0u16],
            155u16 => &[0u16],
            156u16 => &[0u16],
            157u16 => &[0u16],
            158u16 => &[0u16],
            159u16 => &[0u16],
            160u16 => &[0u16],
            161u16 => &[0u16],
            162u16 => &[0u16],
            163u16 => &[0u16],
            164u16 => &[0u16],
            165u16 => &[0u16],
            166u16 => &[0u16],
            167u16 => &[0u16],
            168u16 => &[0u16],
            169u16 => &[0u16],
            170u16 => &[0u16],
            171u16 => &[0u16],
            172u16 => &[0u16],
            173u16 => &[0u16],
            174u16 => &[0u16],
            175u16 => &[0u16],
            176u16 => &[0u16],
            177u16 => &[0u16],
            178u16 => &[0u16],
            179u16 => &[0u16],
            180u16 => &[0u16],
            181u16 => &[0u16],
            182u16 => &[0u16],
            183u16 => &[0u16],
            184u16 => &[0u16],
            185u16 => &[0u16],
            186u16 => &[0u16],
            187u16 => &[0u16],
            188u16 => &[0u16],
            189u16 => &[0u16],
            190u16 => &[0u16],
            191u16 => &[0u16],
            192u16 => &[0u16],
            193u16 => &[0u16],
            194u16 => &[0u16],
            195u16 => &[0u16],
            196u16 => &[0u16],
            197u16 => &[0u16],
            198u16 => &[0u16],
            199u16 => &[0u16],
            200u16 => &[0u16],
            201u16 => &[0u16],
            202u16 => &[0u16],
            203u16 => &[0u16],
            204u16 => &[0u16],
            205u16 => &[0u16],
            206u16 => &[0u16],
            207u16 => &[0u16],
            208u16 => &[0u16],
            209u16 => &[0u16],
            210u16 => &[0u16],
            211u16 => &[0u16],
            212u16 => &[0u16],
            213u16 => &[0u16],
            214u16 => &[0u16],
            215u16 => &[0u16],
            216u16 => &[0u16],
            217u16 => &[0u16],
            218u16 => &[0u16],
            219u16 => &[0u16],
            220u16 => &[0u16],
            221u16 => &[0u16],
            222u16 => &[0u16],
            223u16 => &[0u16],
            224u16 => &[0u16],
            225u16 => &[0u16],
            226u16 => &[0u16],
            227u16 => &[0u16],
            228u16 => &[0u16],
            229u16 => &[0u16],
            230u16 => &[0u16],
            231u16 => &[0u16],
            232u16 => &[0u16],
            233u16 => &[0u16],
            234u16 => &[0u16],
            235u16 => &[0u16],
            236u16 => &[0u16],
            237u16 => &[0u16],
            238u16 => &[0u16],
            239u16 => &[0u16],
            240u16 => &[0u16],
            241u16 => &[0u16],
            242u16 => &[0u16],
            243u16 => &[0u16],
            244u16 => &[0u16],
            245u16 => &[0u16],
            246u16 => &[0u16],
            247u16 => &[0u16],
            248u16 => &[0u16],
            249u16 => &[0u16],
            250u16 => &[0u16],
            251u16 => &[0u16],
            252u16 => &[0u16],
            253u16 => &[0u16],
            254u16 => &[0u16],
            255u16 => &[0u16],
            256u16 => &[0u16],
            257u16 => &[0u16],
            258u16 => &[0u16],
            259u16 => &[0u16],
            260u16 => &[0u16],
            261u16 => &[0u16],
            262u16 => &[0u16],
            263u16 => &[0u16],
            264u16 => &[0u16],
            265u16 => &[0u16],
            266u16 => &[0u16],
            267u16 => &[0u16],
            268u16 => &[0u16],
            269u16 => &[0u16],
            270u16 => &[0u16],
            271u16 => &[0u16],
            272u16 => &[0u16],
            273u16 => &[0u16],
            274u16 => &[0u16],
            275u16 => &[0u16],
            276u16 => &[0u16],
            277u16 => &[0u16],
            278u16 => &[0u16],
            279u16 => &[0u16],
            280u16 => &[0u16],
            281u16 => &[0u16],
            282u16 => &[0u16],
            283u16 => &[0u16],
            284u16 => &[0u16],
            285u16 => &[0u16],
            286u16 => &[0u16],
            287u16 => &[0u16],
            288u16 => &[0u16],
            289u16 => &[0u16],
            290u16 => &[0u16],
            291u16 => &[0u16],
            292u16 => &[0u16],
            293u16 => &[0u16],
            294u16 => &[0u16],
            295u16 => &[0u16],
            296u16 => &[0u16],
            297u16 => &[0u16],
            298u16 => &[0u16],
            299u16 => &[0u16],
            300u16 => &[0u16],
            301u16 => &[0u16],
            302u16 => &[0u16],
            303u16 => &[0u16],
            304u16 => &[0u16],
            305u16 => &[0u16],
            306u16 => &[0u16],
            307u16 => &[0u16],
            308u16 => &[0u16],
            309u16 => &[0u16],
            310u16 => &[0u16],
            311u16 => &[0u16],
            312u16 => &[0u16],
            313u16 => &[0u16],
            314u16 => &[0u16],
            315u16 => &[0u16],
            316u16 => &[0u16],
            317u16 => &[0u16],
            318u16 => &[0u16],
            319u16 => &[0u16],
            320u16 => &[0u16],
            321u16 => &[0u16],
            322u16 => &[0u16],
            323u16 => &[0u16],
            324u16 => &[0u16],
            325u16 => &[0u16],
            326u16 => &[0u16],
            327u16 => &[0u16],
            328u16 => &[0u16],
            329u16 => &[0u16],
            330u16 => &[0u16],
            331u16 => &[0u16],
            332u16 => &[0u16],
            333u16 => &[0u16],
            334u16 => &[0u16],
            335u16 => &[0u16],
            336u16 => &[0u16],
            337u16 => &[0u16],
            338u16 => &[0u16],
            339u16 => &[0u16],
            340u16 => &[0u16],
            341u16 => &[0u16],
            342u16 => &[0u16],
            343u16 => &[0u16],
            344u16 => &[0u16],
            345u16 => &[0u16],
            346u16 => &[0u16],
            347u16 => &[0u16],
            348u16 => &[0u16],
            349u16 => &[0u16],
            350u16 => &[0u16],
            351u16 => &[0u16],
            352u16 => &[0u16],
            353u16 => &[0u16],
            354u16 => &[0u16],
            355u16 => &[0u16],
            356u16 => &[0u16],
            357u16 => &[0u16],
            358u16 => &[0u16],
            359u16 => &[0u16],
            360u16 => &[0u16],
            361u16 => &[0u16],
            362u16 => &[0u16],
            363u16 => &[0u16],
            364u16 => &[0u16],
            365u16 => &[0u16],
            366u16 => &[0u16],
            367u16 => &[0u16],
            368u16 => &[0u16],
            369u16 => &[0u16],
            370u16 => &[0u16],
            371u16 => &[0u16],
            372u16 => &[0u16],
            373u16 => &[0u16],
            374u16 => &[0u16],
            375u16 => &[0u16],
            376u16 => &[0u16],
            377u16 => &[0u16],
            378u16 => &[0u16],
            379u16 => &[0u16],
            380u16 => &[0u16],
            381u16 => &[0u16],
            382u16 => &[0u16],
            383u16 => &[0u16],
            384u16 => &[0u16],
            385u16 => &[0u16],
            386u16 => &[0u16],
            387u16 => &[0u16],
            388u16 => &[0u16],
            389u16 => &[0u16],
            390u16 => &[0u16],
            391u16 => &[0u16],
            392u16 => &[0u16],
            393u16 => &[0u16],
            394u16 => &[0u16],
            395u16 => &[0u16],
            396u16 => &[0u16],
            397u16 => &[0u16],
            398u16 => &[0u16],
            399u16 => &[0u16],
            400u16 => &[0u16],
            401u16 => &[0u16],
            402u16 => &[0u16],
            403u16 => &[0u16],
            404u16 => &[0u16],
            405u16 => &[0u16],
            406u16 => &[0u16],
            407u16 => &[0u16],
            408u16 => &[0u16],
            409u16 => &[0u16],
            410u16 => &[0u16],
            411u16 => &[0u16],
            412u16 => &[0u16],
            413u16 => &[0u16],
            414u16 => &[0u16],
            415u16 => &[0u16],
            416u16 => &[0u16],
            417u16 => &[0u16],
            418u16 => &[0u16],
            419u16 => &[0u16],
            420u16 => &[0u16],
            421u16 => &[0u16],
            422u16 => &[0u16],
            423u16 => &[0u16],
            424u16 => &[0u16],
            425u16 => &[0u16],
            426u16 => &[0u16],
            427u16 => &[0u16],
            428u16 => &[0u16],
            429u16 => &[0u16],
            430u16 => &[0u16],
            431u16 => &[0u16],
            432u16 => &[0u16],
            433u16 => &[0u16],
            434u16 => &[0u16],
            435u16 => &[0u16],
            436u16 => &[0u16],
            437u16 => &[0u16],
            438u16 => &[0u16],
            439u16 => &[0u16],
            440u16 => &[0u16],
            441u16 => &[0u16],
            442u16 => &[0u16],
            443u16 => &[0u16],
            444u16 => &[0u16],
            445u16 => &[0u16],
            446u16 => &[0u16],
            447u16 => &[0u16],
            448u16 => &[0u16],
            449u16 => &[0u16],
            450u16 => &[0u16],
            451u16 => &[0u16],
            452u16 => &[0u16],
            453u16 => &[0u16],
            454u16 => &[0u16],
            455u16 => &[0u16],
            456u16 => &[0u16],
            457u16 => &[0u16],
            458u16 => &[0u16],
            459u16 => &[0u16],
            460u16 => &[0u16],
            461u16 => &[0u16],
            462u16 => &[0u16],
            463u16 => &[0u16],
            464u16 => &[0u16],
            465u16 => &[0u16],
            466u16 => &[0u16],
            467u16 => &[0u16],
            468u16 => &[0u16],
            469u16 => &[0u16],
            470u16 => &[0u16],
            471u16 => &[0u16],
            472u16 => &[0u16],
            473u16 => &[0u16],
            474u16 => &[0u16],
            475u16 => &[0u16],
            476u16 => &[0u16],
            477u16 => &[0u16],
            478u16 => &[0u16],
            479u16 => &[0u16],
            480u16 => &[0u16],
            481u16 => &[0u16],
            482u16 => &[0u16],
            483u16 => &[0u16],
            484u16 => &[0u16],
            485u16 => &[0u16],
            486u16 => &[0u16],
            487u16 => &[0u16],
            488u16 => &[0u16],
            489u16 => &[0u16],
            490u16 => &[0u16],
            491u16 => &[0u16],
            492u16 => &[0u16],
            493u16 => &[0u16],
            494u16 => &[0u16],
            495u16 => &[0u16],
            496u16 => &[0u16],
            497u16 => &[0u16],
            498u16 => &[0u16],
            499u16 => &[0u16],
            500u16 => &[0u16],
            501u16 => &[0u16],
            502u16 => &[0u16],
            503u16 => &[0u16],
            504u16 => &[0u16],
            505u16 => &[0u16],
            506u16 => &[0u16],
            507u16 => &[0u16],
            508u16 => &[0u16],
            509u16 => &[0u16],
            510u16 => &[0u16],
            511u16 => &[0u16],
            512u16 => &[0u16],
            513u16 => &[0u16],
            514u16 => &[0u16],
            515u16 => &[0u16],
            516u16 => &[0u16],
            517u16 => &[0u16],
            518u16 => &[0u16],
            519u16 => &[0u16],
            520u16 => &[0u16],
            521u16 => &[0u16],
            522u16 => &[0u16],
            523u16 => &[0u16],
            524u16 => &[0u16],
            525u16 => &[0u16],
            526u16 => &[0u16],
            527u16 => &[0u16],
            528u16 => &[0u16],
            529u16 => &[0u16],
            530u16 => &[0u16],
            531u16 => &[0u16],
            532u16 => &[0u16],
            533u16 => &[0u16],
            534u16 => &[0u16],
            535u16 => &[0u16],
            536u16 => &[0u16],
            537u16 => &[0u16],
            538u16 => &[0u16],
            539u16 => &[0u16],
            540u16 => &[0u16],
            541u16 => &[0u16],
            542u16 => &[0u16],
            543u16 => &[0u16],
            544u16 => &[0u16],
            545u16 => &[0u16],
            546u16 => &[0u16],
            547u16 => &[0u16],
            548u16 => &[0u16],
            549u16 => &[0u16],
            550u16 => &[0u16],
            551u16 => &[0u16],
            552u16 => &[0u16],
            553u16 => &[0u16],
            554u16 => &[0u16],
            555u16 => &[0u16],
            556u16 => &[0u16],
            557u16 => &[0u16],
            558u16 => &[0u16],
            559u16 => &[0u16],
            560u16 => &[0u16],
            561u16 => &[0u16],
            562u16 => &[0u16],
            563u16 => &[0u16],
            564u16 => &[0u16],
            565u16 => &[0u16],
            566u16 => &[0u16],
            567u16 => &[0u16],
            568u16 => &[0u16],
            569u16 => &[0u16],
            570u16 => &[0u16],
            571u16 => &[0u16],
            572u16 => &[0u16],
            573u16 => &[0u16],
            574u16 => &[0u16],
            575u16 => &[0u16],
            576u16 => &[0u16],
            577u16 => &[0u16],
            578u16 => &[0u16],
            579u16 => &[0u16],
            580u16 => &[0u16],
            581u16 => &[0u16],
            582u16 => &[0u16],
            583u16 => &[0u16],
            584u16 => &[0u16],
            585u16 => &[0u16],
            586u16 => &[0u16],
            587u16 => &[0u16],
            588u16 => &[0u16],
            589u16 => &[0u16],
            590u16 => &[0u16],
            591u16 => &[0u16],
            592u16 => &[0u16],
            593u16 => &[0u16],
            594u16 => &[0u16],
            595u16 => &[0u16],
            596u16 => &[0u16],
            597u16 => &[0u16],
            598u16 => &[0u16],
            599u16 => &[0u16],
            600u16 => &[0u16],
            601u16 => &[0u16],
            602u16 => &[0u16],
            603u16 => &[0u16],
            604u16 => &[0u16],
            605u16 => &[0u16],
            606u16 => &[0u16],
            607u16 => &[0u16],
            608u16 => &[0u16],
            609u16 => &[0u16],
            610u16 => &[0u16],
            611u16 => &[0u16],
            612u16 => &[0u16],
            613u16 => &[0u16],
            614u16 => &[0u16],
            615u16 => &[0u16],
            616u16 => &[0u16],
            617u16 => &[0u16],
            618u16 => &[0u16],
            619u16 => &[0u16],
            620u16 => &[0u16],
            621u16 => &[0u16],
            622u16 => &[0u16],
            623u16 => &[0u16],
            624u16 => &[0u16],
            625u16 => &[0u16],
            626u16 => &[0u16],
            627u16 => &[0u16],
            628u16 => &[0u16],
            629u16 => &[0u16],
            630u16 => &[0u16],
            631u16 => &[0u16],
            632u16 => &[0u16],
            633u16 => &[0u16],
            634u16 => &[0u16],
            635u16 => &[0u16],
            636u16 => &[0u16],
            637u16 => &[0u16],
            638u16 => &[0u16],
            639u16 => &[0u16],
            640u16 => &[0u16],
            641u16 => &[0u16],
            642u16 => &[0u16],
            643u16 => &[0u16],
            644u16 => &[0u16],
            645u16 => &[0u16],
            646u16 => &[0u16],
            647u16 => &[0u16],
            648u16 => &[0u16],
            649u16 => &[0u16],
            650u16 => &[0u16],
            651u16 => &[0u16],
            652u16 => &[0u16],
            653u16 => &[0u16],
            654u16 => &[0u16],
            655u16 => &[0u16],
            656u16 => &[0u16],
            657u16 => &[0u16],
            658u16 => &[0u16],
            659u16 => &[0u16],
            660u16 => &[0u16],
            661u16 => &[0u16],
            662u16 => &[0u16],
            663u16 => &[0u16],
            664u16 => &[0u16],
            665u16 => &[0u16],
            666u16 => &[0u16],
            667u16 => &[0u16],
            668u16 => &[0u16],
            669u16 => &[0u16],
            670u16 => &[0u16],
            671u16 => &[0u16],
            672u16 => &[0u16],
            673u16 => &[0u16],
            674u16 => &[0u16],
            675u16 => &[0u16],
            676u16 => &[0u16],
            677u16 => &[0u16],
            678u16 => &[0u16],
            679u16 => &[0u16],
            680u16 => &[0u16],
            681u16 => &[0u16],
            682u16 => &[0u16],
            683u16 => &[0u16],
            684u16 => &[0u16],
            685u16 => &[0u16],
            686u16 => &[0u16],
            687u16 => &[0u16],
            688u16 => &[0u16],
            689u16 => &[0u16],
            690u16 => &[0u16],
            691u16 => &[0u16],
            692u16 => &[0u16],
            693u16 => &[0u16],
            694u16 => &[0u16],
            695u16 => &[0u16],
            696u16 => &[0u16],
            697u16 => &[0u16],
            698u16 => &[0u16],
            699u16 => &[0u16],
            700u16 => &[0u16],
            701u16 => &[0u16],
            702u16 => &[0u16],
            703u16 => &[0u16],
            704u16 => &[0u16],
            705u16 => &[0u16],
            706u16 => &[0u16],
            707u16 => &[0u16],
            708u16 => &[0u16],
            709u16 => &[0u16],
            710u16 => &[0u16],
            711u16 => &[0u16],
            712u16 => &[0u16],
            713u16 => &[0u16],
            714u16 => &[0u16],
            715u16 => &[0u16],
            716u16 => &[0u16],
            717u16 => &[0u16],
            718u16 => &[0u16],
            719u16 => &[0u16],
            720u16 => &[0u16],
            721u16 => &[0u16],
            722u16 => &[0u16],
            723u16 => &[0u16],
            724u16 => &[0u16],
            725u16 => &[0u16],
            726u16 => &[0u16],
            727u16 => &[0u16],
            728u16 => &[0u16],
            729u16 => &[0u16],
            730u16 => &[0u16],
            731u16 => &[0u16],
            732u16 => &[0u16],
            733u16 => &[0u16],
            734u16 => &[0u16],
            735u16 => &[0u16],
            736u16 => &[0u16],
            737u16 => &[0u16],
            738u16 => &[0u16],
            739u16 => &[0u16],
            740u16 => &[0u16],
            741u16 => &[0u16],
            742u16 => &[0u16],
            743u16 => &[0u16],
            744u16 => &[0u16],
            745u16 => &[0u16],
            746u16 => &[0u16],
            747u16 => &[0u16],
            748u16 => &[0u16],
            749u16 => &[0u16],
            750u16 => &[0u16],
            751u16 => &[0u16],
            752u16 => &[0u16],
            753u16 => &[0u16],
            754u16 => &[0u16],
            755u16 => &[0u16],
            756u16 => &[0u16],
            757u16 => &[0u16],
            758u16 => &[0u16],
            759u16 => &[0u16],
            760u16 => &[0u16],
            761u16 => &[0u16],
            762u16 => &[0u16],
            763u16 => &[0u16],
            764u16 => &[0u16],
            765u16 => &[0u16],
            766u16 => &[0u16],
            767u16 => &[0u16],
            768u16 => &[0u16],
            769u16 => &[0u16],
            770u16 => &[0u16],
            771u16 => &[0u16],
            772u16 => &[0u16],
            773u16 => &[0u16],
            774u16 => &[0u16],
            775u16 => &[0u16],
            776u16 => &[0u16],
            777u16 => &[0u16],
            778u16 => &[0u16],
            779u16 => &[0u16],
            780u16 => &[0u16],
            781u16 => &[0u16],
            782u16 => &[0u16],
            783u16 => &[0u16],
            784u16 => &[0u16],
            785u16 => &[0u16],
            786u16 => &[0u16],
            787u16 => &[0u16],
            788u16 => &[0u16],
            789u16 => &[0u16],
            790u16 => &[0u16],
            791u16 => &[0u16],
            792u16 => &[0u16],
            793u16 => &[0u16],
            794u16 => &[0u16],
            795u16 => &[0u16],
            796u16 => &[0u16],
            797u16 => &[0u16],
            798u16 => &[0u16],
            799u16 => &[0u16],
            800u16 => &[0u16],
            801u16 => &[0u16],
            802u16 => &[0u16],
            803u16 => &[0u16],
            804u16 => &[0u16],
            805u16 => &[0u16],
            806u16 => &[0u16],
            807u16 => &[0u16],
            808u16 => &[0u16],
            809u16 => &[0u16],
            810u16 => &[0u16],
            811u16 => &[0u16],
            812u16 => &[0u16],
            813u16 => &[0u16],
            814u16 => &[0u16],
            815u16 => &[0u16],
            816u16 => &[0u16],
            817u16 => &[0u16],
            818u16 => &[0u16],
            819u16 => &[0u16],
            820u16 => &[0u16],
            821u16 => &[0u16],
            822u16 => &[0u16],
            823u16 => &[0u16],
            824u16 => &[0u16],
            825u16 => &[0u16],
            826u16 => &[0u16],
            827u16 => &[0u16],
            828u16 => &[0u16],
            829u16 => &[0u16],
            830u16 => &[0u16],
            831u16 => &[0u16],
            832u16 => &[0u16],
            833u16 => &[0u16],
            834u16 => &[0u16],
            835u16 => &[0u16],
            836u16 => &[0u16],
            837u16 => &[0u16],
            838u16 => &[0u16],
            839u16 => &[0u16],
            840u16 => &[0u16],
            841u16 => &[0u16],
            842u16 => &[0u16],
            843u16 => &[0u16],
            844u16 => &[0u16],
            845u16 => &[0u16],
            846u16 => &[0u16],
            847u16 => &[0u16],
            848u16 => &[0u16],
            849u16 => &[0u16],
            850u16 => &[0u16],
            851u16 => &[0u16],
            852u16 => &[0u16],
            853u16 => &[0u16],
            854u16 => &[0u16],
            855u16 => &[0u16],
            856u16 => &[0u16],
            857u16 => &[0u16],
            858u16 => &[0u16],
            859u16 => &[0u16],
            860u16 => &[0u16],
            861u16 => &[0u16],
            862u16 => &[0u16],
            863u16 => &[0u16],
            864u16 => &[0u16],
            865u16 => &[0u16],
            866u16 => &[0u16],
            867u16 => &[0u16],
            868u16 => &[0u16],
            869u16 => &[0u16],
            870u16 => &[0u16],
            871u16 => &[0u16],
            872u16 => &[0u16],
            873u16 => &[0u16],
            874u16 => &[0u16],
            875u16 => &[0u16],
            876u16 => &[0u16],
            877u16 => &[0u16],
            878u16 => &[0u16],
            879u16 => &[0u16],
            880u16 => &[0u16],
            881u16 => &[0u16],
            882u16 => &[0u16],
            883u16 => &[0u16],
            884u16 => &[0u16],
            885u16 => &[0u16],
            886u16 => &[0u16],
            887u16 => &[0u16],
            888u16 => &[0u16],
            889u16 => &[0u16],
            890u16 => &[0u16],
            891u16 => &[0u16],
            892u16 => &[0u16],
            893u16 => &[0u16],
            894u16 => &[0u16],
            895u16 => &[0u16],
            896u16 => &[0u16],
            897u16 => &[0u16],
            898u16 => &[0u16],
            899u16 => &[0u16],
            900u16 => &[0u16],
            901u16 => &[0u16],
            902u16 => &[0u16],
            903u16 => &[0u16],
            904u16 => &[0u16],
            905u16 => &[0u16],
            906u16 => &[0u16],
            907u16 => &[0u16],
            908u16 => &[0u16],
            909u16 => &[0u16],
            910u16 => &[0u16],
            911u16 => &[0u16],
            912u16 => &[0u16],
            913u16 => &[0u16],
            914u16 => &[0u16],
            915u16 => &[0u16],
            916u16 => &[0u16],
            917u16 => &[0u16],
            918u16 => &[0u16],
            919u16 => &[0u16],
            920u16 => &[0u16],
            921u16 => &[0u16],
            922u16 => &[0u16],
            923u16 => &[0u16],
            924u16 => &[0u16],
            925u16 => &[0u16],
            926u16 => &[0u16],
            927u16 => &[0u16],
            928u16 => &[0u16],
            929u16 => &[0u16],
            930u16 => &[0u16],
            931u16 => &[0u16],
            932u16 => &[0u16],
            933u16 => &[0u16],
            934u16 => &[0u16],
            935u16 => &[0u16],
            936u16 => &[0u16],
            937u16 => &[0u16],
            938u16 => &[0u16],
            939u16 => &[0u16],
            940u16 => &[0u16],
            941u16 => &[0u16],
            942u16 => &[0u16],
            943u16 => &[0u16],
            944u16 => &[0u16],
            945u16 => &[0u16],
            946u16 => &[0u16],
            947u16 => &[0u16],
            948u16 => &[0u16],
            949u16 => &[0u16],
            950u16 => &[0u16],
            951u16 => &[0u16],
            952u16 => &[0u16],
            953u16 => &[0u16],
            954u16 => &[0u16],
            955u16 => &[0u16],
            956u16 => &[0u16],
            957u16 => &[0u16],
            958u16 => &[0u16],
            959u16 => &[0u16],
            960u16 => &[0u16],
            961u16 => &[0u16],
            962u16 => &[0u16],
            963u16 => &[0u16],
            964u16 => &[0u16],
            965u16 => &[0u16],
            966u16 => &[0u16],
            967u16 => &[0u16],
            968u16 => &[0u16],
            969u16 => &[0u16],
            970u16 => &[0u16],
            971u16 => &[0u16],
            972u16 => &[0u16],
            973u16 => &[0u16],
            974u16 => &[0u16],
            975u16 => &[0u16],
            976u16 => &[0u16],
            977u16 => &[0u16],
            978u16 => &[0u16],
            979u16 => &[0u16],
            980u16 => &[0u16],
            981u16 => &[0u16],
            982u16 => &[0u16],
            983u16 => &[0u16],
            984u16 => &[0u16],
            985u16 => &[0u16],
            986u16 => &[0u16],
            987u16 => &[0u16],
            988u16 => &[0u16],
            989u16 => &[0u16],
            990u16 => &[0u16],
            991u16 => &[0u16],
            992u16 => &[0u16],
            993u16 => &[0u16],
            994u16 => &[0u16],
            995u16 => &[0u16],
            996u16 => &[0u16],
            997u16 => &[0u16],
            998u16 => &[0u16],
            999u16 => &[0u16],
            1000u16 => &[0u16],
            1001u16 => &[0u16],
            1002u16 => &[0u16],
            1003u16 => &[0u16],
            1004u16 => &[0u16],
            1005u16 => &[0u16],
            1006u16 => &[0u16],
            1007u16 => &[0u16],
            1008u16 => &[0u16],
            1009u16 => &[0u16],
            1010u16 => &[0u16],
            1011u16 => &[0u16],
            1012u16 => &[0u16],
            1013u16 => &[0u16],
            1014u16 => &[0u16],
            1015u16 => &[0u16],
            1016u16 => &[0u16],
            1017u16 => &[0u16],
            1018u16 => &[0u16],
            1019u16 => &[0u16],
            1020u16 => &[0u16],
            1021u16 => &[0u16],
            1022u16 => &[0u16],
            1023u16 => &[0u16],
            1024u16 => &[0u16],
            1025u16 => &[0u16],
            1026u16 => &[0u16],
            1027u16 => &[0u16],
            1028u16 => &[0u16],
            1029u16 => &[0u16],
            1030u16 => &[0u16],
            1031u16 => &[0u16],
            1032u16 => &[0u16],
            1033u16 => &[0u16],
            1034u16 => &[0u16],
            1035u16 => &[0u16],
            1036u16 => &[0u16],
            1037u16 => &[0u16],
            1038u16 => &[0u16],
            1039u16 => &[0u16],
            1040u16 => &[0u16],
            1041u16 => &[0u16],
            1042u16 => &[0u16],
            1043u16 => &[0u16],
            1044u16 => &[0u16],
            1045u16 => &[0u16],
            1046u16 => &[0u16],
            1047u16 => &[0u16],
            1048u16 => &[0u16],
            1049u16 => &[0u16],
            1050u16 => &[0u16],
            1051u16 => &[0u16],
            1052u16 => &[0u16],
            1053u16 => &[0u16],
            1054u16 => &[0u16],
            1055u16 => &[0u16],
            1056u16 => &[0u16],
            1057u16 => &[0u16],
            1058u16 => &[0u16],
            1059u16 => &[0u16],
            1060u16 => &[0u16],
            1061u16 => &[0u16],
            1062u16 => &[0u16],
            1063u16 => &[0u16],
            1064u16 => &[0u16],
            1065u16 => &[0u16],
            1066u16 => &[0u16],
            1067u16 => &[0u16],
            1068u16 => &[0u16],
            1069u16 => &[0u16],
            1070u16 => &[0u16],
            1071u16 => &[0u16],
            1072u16 => &[0u16],
            1073u16 => &[0u16],
            1074u16 => &[0u16],
            1075u16 => &[0u16],
            1076u16 => &[0u16],
            1077u16 => &[0u16],
            1078u16 => &[0u16],
            1079u16 => &[0u16],
            1080u16 => &[0u16],
            1081u16 => &[0u16],
            1082u16 => &[0u16],
            1083u16 => &[0u16],
            1084u16 => &[0u16],
            1085u16 => &[0u16],
            1086u16 => &[0u16],
            1087u16 => &[0u16],
            1088u16 => &[0u16],
            1089u16 => &[0u16],
            1090u16 => &[0u16],
            1091u16 => &[0u16],
            1092u16 => &[0u16],
            1093u16 => &[0u16],
            1094u16 => &[0u16],
            1095u16 => &[0u16],
            1096u16 => &[0u16],
            1097u16 => &[0u16],
            1098u16 => &[0u16],
            1099u16 => &[0u16],
            1100u16 => &[0u16],
            1101u16 => &[0u16],
            1102u16 => &[0u16],
            1103u16 => &[0u16],
            1104u16 => &[0u16],
            1105u16 => &[0u16],
            1106u16 => &[0u16],
            1107u16 => &[0u16],
            1108u16 => &[0u16],
            1109u16 => &[0u16],
            1110u16 => &[0u16],
            1111u16 => &[0u16],
            1112u16 => &[0u16],
            1113u16 => &[0u16],
            1114u16 => &[0u16],
            1115u16 => &[0u16],
            1116u16 => &[0u16],
            1117u16 => &[0u16],
            1118u16 => &[0u16],
            1119u16 => &[0u16],
            1120u16 => &[0u16],
            1121u16 => &[0u16],
            1122u16 => &[0u16],
            1123u16 => &[0u16],
            1124u16 => &[0u16],
            1125u16 => &[0u16],
            1126u16 => &[0u16],
            1127u16 => &[0u16],
            1128u16 => &[0u16],
            1129u16 => &[0u16],
            1130u16 => &[0u16],
            1131u16 => &[0u16],
            1132u16 => &[0u16],
            1133u16 => &[0u16],
            1134u16 => &[0u16],
            1135u16 => &[0u16],
            1136u16 => &[0u16],
            1137u16 => &[0u16],
            1138u16 => &[0u16],
            1139u16 => &[0u16],
            1140u16 => &[0u16],
            1141u16 => &[0u16],
            1142u16 => &[0u16],
            1143u16 => &[0u16],
            1144u16 => &[0u16],
            1145u16 => &[0u16],
            1146u16 => &[0u16],
            1147u16 => &[0u16],
            1148u16 => &[0u16],
            1149u16 => &[0u16],
            1150u16 => &[0u16],
            1151u16 => &[0u16],
            1152u16 => &[0u16],
            1153u16 => &[0u16],
            1154u16 => &[0u16],
            1155u16 => &[0u16],
            1156u16 => &[0u16],
            1157u16 => &[0u16],
            1158u16 => &[0u16],
            1159u16 => &[0u16],
            1160u16 => &[0u16],
            1161u16 => &[0u16],
            1162u16 => &[0u16],
            1163u16 => &[0u16],
            1164u16 => &[0u16],
            1165u16 => &[0u16],
            1166u16 => &[0u16],
            1167u16 => &[0u16],
            1168u16 => &[0u16],
            1169u16 => &[0u16],
            1170u16 => &[0u16],
            1171u16 => &[0u16],
            1172u16 => &[0u16],
            1173u16 => &[0u16],
            1174u16 => &[0u16],
            1175u16 => &[0u16],
            1176u16 => &[0u16],
            1177u16 => &[0u16],
            1178u16 => &[0u16],
            1179u16 => &[0u16],
            1180u16 => &[0u16],
            1181u16 => &[0u16],
            1182u16 => &[0u16],
            1183u16 => &[0u16],
            1184u16 => &[0u16],
            1185u16 => &[0u16],
            1186u16 => &[0u16],
            1187u16 => &[0u16],
            1188u16 => &[0u16],
            1189u16 => &[0u16],
            1190u16 => &[0u16],
            1191u16 => &[0u16],
            1192u16 => &[0u16],
            1193u16 => &[0u16],
            1194u16 => &[0u16],
            1195u16 => &[0u16],
            1196u16 => &[0u16],
            1197u16 => &[0u16],
            1198u16 => &[0u16],
            1199u16 => &[0u16],
            1200u16 => &[0u16],
            1201u16 => &[0u16],
            1202u16 => &[0u16],
            1203u16 => &[0u16],
            1204u16 => &[0u16],
            1205u16 => &[0u16],
            1206u16 => &[0u16],
            1207u16 => &[0u16],
            1208u16 => &[0u16],
            1209u16 => &[0u16],
            1210u16 => &[0u16],
            1211u16 => &[0u16],
            1212u16 => &[0u16],
            1213u16 => &[0u16],
            1214u16 => &[0u16],
            1215u16 => &[0u16],
            1216u16 => &[0u16],
            1217u16 => &[0u16],
            1218u16 => &[0u16],
            1219u16 => &[0u16],
            1220u16 => &[0u16],
            1221u16 => &[0u16],
            1222u16 => &[0u16],
            1223u16 => &[0u16],
            1224u16 => &[0u16],
            1225u16 => &[0u16],
            1226u16 => &[0u16],
            1227u16 => &[0u16],
            1228u16 => &[0u16],
            1229u16 => &[0u16],
            1230u16 => &[0u16],
            1231u16 => &[0u16],
            1232u16 => &[0u16],
            1233u16 => &[0u16],
            1234u16 => &[0u16],
            1235u16 => &[0u16],
            1236u16 => &[0u16],
            1237u16 => &[0u16],
            1238u16 => &[0u16],
            1239u16 => &[0u16],
            1240u16 => &[0u16],
            1241u16 => &[0u16],
            1242u16 => &[0u16],
            1243u16 => &[0u16],
            1244u16 => &[0u16],
            1245u16 => &[0u16],
            1246u16 => &[0u16],
            1247u16 => &[0u16],
            1248u16 => &[0u16],
            1249u16 => &[0u16],
            1250u16 => &[0u16],
            1251u16 => &[0u16],
            1252u16 => &[0u16],
            1253u16 => &[0u16],
            1254u16 => &[0u16],
            1255u16 => &[0u16],
            1256u16 => &[0u16],
            1257u16 => &[0u16],
            1258u16 => &[0u16],
            1259u16 => &[0u16],
            1260u16 => &[0u16],
            1261u16 => &[0u16],
            1262u16 => &[0u16],
            1263u16 => &[0u16],
            1264u16 => &[0u16],
            1265u16 => &[0u16],
            1266u16 => &[0u16],
            1267u16 => &[0u16],
            1268u16 => &[0u16],
            1269u16 => &[0u16],
            1270u16 => &[0u16],
            1271u16 => &[0u16],
            1272u16 => &[0u16],
            1273u16 => &[0u16],
            1274u16 => &[0u16],
            1275u16 => &[0u16],
            1276u16 => &[0u16],
            1277u16 => &[0u16],
            1278u16 => &[0u16],
            1279u16 => &[0u16],
            1280u16 => &[0u16],
            1281u16 => &[0u16],
            1282u16 => &[0u16],
            1283u16 => &[0u16],
            1284u16 => &[0u16],
            1285u16 => &[0u16],
            1286u16 => &[0u16],
            1287u16 => &[0u16],
            1288u16 => &[0u16],
            1289u16 => &[0u16],
            1290u16 => &[0u16],
            1291u16 => &[0u16],
            1292u16 => &[0u16],
            1293u16 => &[0u16],
            1294u16 => &[0u16],
            1295u16 => &[0u16],
            1296u16 => &[0u16],
            1297u16 => &[0u16],
            1298u16 => &[0u16],
            1299u16 => &[0u16],
            1300u16 => &[0u16],
            1301u16 => &[0u16],
            1302u16 => &[0u16],
            1303u16 => &[0u16],
            1304u16 => &[0u16],
            1305u16 => &[0u16],
            1306u16 => &[0u16],
            1307u16 => &[0u16],
            1308u16 => &[0u16],
            1309u16 => &[0u16],
            1310u16 => &[0u16],
            1311u16 => &[0u16],
            1312u16 => &[0u16],
            1313u16 => &[0u16],
            1314u16 => &[0u16],
            1315u16 => &[0u16],
            1316u16 => &[0u16],
            1317u16 => &[0u16],
            1318u16 => &[0u16],
            1319u16 => &[0u16],
            1320u16 => &[0u16],
            1321u16 => &[0u16],
            1322u16 => &[0u16],
            1323u16 => &[0u16],
            1324u16 => &[0u16],
            1325u16 => &[0u16],
            1326u16 => &[0u16],
            1327u16 => &[0u16],
            1328u16 => &[0u16],
            1329u16 => &[0u16],
            1330u16 => &[0u16],
            1331u16 => &[0u16],
            1332u16 => &[0u16],
            1333u16 => &[0u16],
            1334u16 => &[0u16],
            1335u16 => &[0u16],
            1336u16 => &[0u16],
            1337u16 => &[0u16],
            1338u16 => &[0u16],
            1339u16 => &[0u16],
            1340u16 => &[0u16],
            1341u16 => &[0u16],
            1342u16 => &[0u16],
            1343u16 => &[0u16],
            1344u16 => &[0u16],
            1345u16 => &[0u16],
            1346u16 => &[0u16],
            1347u16 => &[0u16],
            1348u16 => &[0u16],
            1349u16 => &[0u16],
            1350u16 => &[0u16],
            1351u16 => &[0u16],
            1352u16 => &[0u16],
            1353u16 => &[0u16],
            1354u16 => &[0u16],
            1355u16 => &[0u16],
            1356u16 => &[0u16],
            1357u16 => &[0u16],
            1358u16 => &[0u16],
            1359u16 => &[0u16],
            1360u16 => &[0u16],
            1361u16 => &[0u16],
            1362u16 => &[0u16],
            1363u16 => &[0u16],
            1364u16 => &[0u16],
            1365u16 => &[0u16],
            1366u16 => &[0u16],
            1367u16 => &[0u16],
            1368u16 => &[0u16],
            1369u16 => &[0u16],
            1370u16 => &[0u16],
            1371u16 => &[0u16],
            1372u16 => &[0u16],
            1373u16 => &[0u16],
            1374u16 => &[0u16],
            1375u16 => &[0u16],
            1376u16 => &[0u16],
            1377u16 => &[0u16],
            1378u16 => &[0u16],
            1379u16 => &[0u16],
            1380u16 => &[0u16],
            1381u16 => &[0u16],
            1382u16 => &[0u16],
            1383u16 => &[0u16],
            1384u16 => &[0u16],
            1385u16 => &[0u16],
            1386u16 => &[0u16],
            1387u16 => &[0u16],
            1388u16 => &[0u16],
            1389u16 => &[0u16],
            1390u16 => &[0u16],
            1391u16 => &[0u16],
            1392u16 => &[0u16],
            1393u16 => &[0u16],
            1394u16 => &[0u16],
            1395u16 => &[0u16],
            1396u16 => &[0u16],
            1397u16 => &[0u16],
            1398u16 => &[0u16],
            1399u16 => &[0u16],
            1400u16 => &[0u16],
            1401u16 => &[0u16],
            1402u16 => &[0u16],
            1403u16 => &[0u16],
            1404u16 => &[0u16],
            1405u16 => &[0u16],
            1406u16 => &[0u16],
            1407u16 => &[0u16],
            1408u16 => &[0u16],
            1409u16 => &[0u16],
            1410u16 => &[0u16],
            1411u16 => &[0u16],
            1412u16 => &[0u16],
            1413u16 => &[0u16],
            1414u16 => &[0u16],
            1415u16 => &[0u16],
            1416u16 => &[0u16],
            1417u16 => &[0u16],
            1418u16 => &[0u16],
            1419u16 => &[0u16],
            1420u16 => &[0u16],
            1421u16 => &[0u16],
            1422u16 => &[0u16],
            1423u16 => &[0u16],
            1424u16 => &[0u16],
            1425u16 => &[0u16],
            1426u16 => &[0u16],
            1427u16 => &[0u16],
            1428u16 => &[0u16],
            1429u16 => &[0u16],
            1430u16 => &[0u16],
            1431u16 => &[0u16],
            1432u16 => &[0u16],
            1433u16 => &[0u16],
            1434u16 => &[0u16],
            1435u16 => &[0u16],
            1436u16 => &[0u16],
            1437u16 => &[0u16],
            1438u16 => &[0u16],
            1439u16 => &[0u16],
            1440u16 => &[0u16],
            1441u16 => &[0u16],
            1442u16 => &[0u16],
            1443u16 => &[0u16],
            1444u16 => &[0u16],
            1445u16 => &[0u16],
            1446u16 => &[0u16],
            1447u16 => &[0u16],
            1448u16 => &[0u16],
            1449u16 => &[0u16],
            1450u16 => &[0u16],
            1451u16 => &[0u16],
            1452u16 => &[0u16],
            1453u16 => &[0u16],
            1454u16 => &[0u16],
            1455u16 => &[0u16],
            1456u16 => &[0u16],
            1457u16 => &[0u16],
            1458u16 => &[0u16],
            1459u16 => &[0u16],
            1460u16 => &[0u16],
            1461u16 => &[0u16],
            1462u16 => &[0u16],
            1463u16 => &[0u16],
            1464u16 => &[0u16],
            1465u16 => &[0u16],
            1466u16 => &[0u16],
            1467u16 => &[0u16],
            1468u16 => &[0u16],
            1469u16 => &[0u16],
            1470u16 => &[0u16],
            1471u16 => &[0u16],
            1472u16 => &[0u16],
            1473u16 => &[0u16],
            1474u16 => &[0u16],
            1475u16 => &[0u16],
            1476u16 => &[0u16],
            1477u16 => &[0u16],
            1478u16 => &[0u16],
            1479u16 => &[0u16],
            1480u16 => &[0u16],
            1481u16 => &[0u16],
            1482u16 => &[0u16],
            1483u16 => &[0u16],
            1484u16 => &[0u16],
            1485u16 => &[0u16],
            1486u16 => &[0u16],
            1487u16 => &[0u16],
            1488u16 => &[0u16],
            1489u16 => &[0u16],
            1490u16 => &[0u16],
            1491u16 => &[0u16],
            1492u16 => &[0u16],
            1493u16 => &[0u16],
            1494u16 => &[0u16],
            1495u16 => &[0u16],
            1496u16 => &[0u16],
            1497u16 => &[0u16],
            1498u16 => &[0u16],
            1499u16 => &[0u16],
            1500u16 => &[0u16],
            1501u16 => &[0u16],
            1502u16 => &[0u16],
            1503u16 => &[0u16],
            1504u16 => &[0u16],
            1505u16 => &[0u16],
            1506u16 => &[0u16],
            1507u16 => &[0u16],
            1508u16 => &[0u16],
            1509u16 => &[0u16],
            1510u16 => &[0u16],
            1511u16 => &[0u16],
            1512u16 => &[0u16],
            1513u16 => &[0u16],
            1514u16 => &[0u16],
            1515u16 => &[0u16],
            1516u16 => &[0u16],
            1517u16 => &[0u16],
            1518u16 => &[0u16],
            1519u16 => &[0u16],
            1520u16 => &[0u16],
            1521u16 => &[0u16],
            1522u16 => &[0u16],
            1523u16 => &[0u16],
            1524u16 => &[0u16],
            1525u16 => &[0u16],
            1526u16 => &[0u16],
            1527u16 => &[0u16],
            1528u16 => &[0u16],
            1529u16 => &[0u16],
            1530u16 => &[0u16],
            1531u16 => &[0u16],
            1532u16 => &[0u16],
            1533u16 => &[0u16],
            1534u16 => &[0u16],
            1535u16 => &[0u16],
            1536u16 => &[0u16],
            1537u16 => &[0u16],
            1538u16 => &[0u16],
            1539u16 => &[0u16],
            1540u16 => &[0u16],
            1541u16 => &[0u16],
            1542u16 => &[0u16],
            1543u16 => &[0u16],
            1544u16 => &[0u16],
            1545u16 => &[0u16],
            1546u16 => &[0u16],
            1547u16 => &[0u16],
            1548u16 => &[0u16],
            1549u16 => &[0u16],
            1550u16 => &[0u16],
            1551u16 => &[0u16],
            1552u16 => &[0u16],
            1553u16 => &[0u16],
            1554u16 => &[0u16],
            1555u16 => &[0u16],
            1556u16 => &[0u16],
            1557u16 => &[0u16],
            1558u16 => &[0u16],
            1559u16 => &[0u16],
            1560u16 => &[0u16],
            1561u16 => &[0u16],
            1562u16 => &[0u16],
            1563u16 => &[0u16],
            1564u16 => &[0u16],
            1565u16 => &[0u16],
            1566u16 => &[0u16],
            1567u16 => &[0u16],
            1568u16 => &[0u16],
            1569u16 => &[0u16],
            1570u16 => &[0u16],
            1571u16 => &[0u16],
            1572u16 => &[0u16],
            1573u16 => &[0u16],
            1574u16 => &[0u16],
            1575u16 => &[0u16],
            1576u16 => &[0u16],
            1577u16 => &[0u16],
            1578u16 => &[0u16],
            1579u16 => &[0u16],
            1580u16 => &[0u16],
            1581u16 => &[0u16],
            1582u16 => &[0u16],
            1583u16 => &[0u16],
            1584u16 => &[0u16],
            1585u16 => &[0u16],
            1586u16 => &[0u16],
            1587u16 => &[0u16],
            1588u16 => &[0u16],
            1589u16 => &[0u16],
            1590u16 => &[0u16],
            1591u16 => &[0u16],
            1592u16 => &[0u16],
            1593u16 => &[0u16],
            1594u16 => &[0u16],
            1595u16 => &[0u16],
            1596u16 => &[0u16],
            1597u16 => &[0u16],
            1598u16 => &[0u16],
            1599u16 => &[0u16],
            1600u16 => &[0u16],
            1601u16 => &[0u16],
            1602u16 => &[0u16],
            1603u16 => &[0u16],
            1604u16 => &[0u16],
            1605u16 => &[0u16],
            1606u16 => &[0u16],
            1607u16 => &[0u16],
            1608u16 => &[0u16],
            1609u16 => &[0u16],
            1610u16 => &[0u16],
            1611u16 => &[0u16],
            1612u16 => &[0u16],
            1613u16 => &[0u16],
            1614u16 => &[0u16],
            1615u16 => &[0u16],
            1616u16 => &[0u16],
            1617u16 => &[0u16],
            1618u16 => &[0u16],
            1619u16 => &[0u16],
            1620u16 => &[0u16],
            1621u16 => &[0u16],
            1622u16 => &[0u16],
            1623u16 => &[0u16],
            1624u16 => &[0u16],
            1625u16 => &[0u16],
            1626u16 => &[0u16],
            1627u16 => &[0u16],
            1628u16 => &[0u16],
            1629u16 => &[0u16],
            1630u16 => &[0u16],
            1631u16 => &[0u16],
            1632u16 => &[0u16],
            1633u16 => &[0u16],
            1634u16 => &[0u16],
            1635u16 => &[0u16],
            1636u16 => &[0u16],
            1637u16 => &[0u16],
            1638u16 => &[0u16],
            1639u16 => &[0u16],
            1640u16 => &[0u16],
            1641u16 => &[0u16],
            1642u16 => &[0u16],
            1643u16 => &[0u16],
            1644u16 => &[0u16],
            1645u16 => &[0u16],
            1646u16 => &[0u16],
            1647u16 => &[0u16],
            1648u16 => &[0u16],
            1649u16 => &[0u16],
            1650u16 => &[0u16],
            1651u16 => &[0u16],
            1652u16 => &[0u16],
            1653u16 => &[0u16],
            1654u16 => &[0u16],
            1655u16 => &[0u16],
            1656u16 => &[0u16],
            1657u16 => &[0u16],
            1658u16 => &[0u16],
            1659u16 => &[0u16],
            1660u16 => &[0u16],
            1661u16 => &[0u16],
            1662u16 => &[0u16],
            1663u16 => &[0u16],
            1664u16 => &[0u16],
            1665u16 => &[0u16],
            1666u16 => &[0u16],
            1667u16 => &[0u16],
            1668u16 => &[0u16],
            1669u16 => &[0u16],
            1670u16 => &[0u16],
            1671u16 => &[0u16],
            1672u16 => &[0u16],
            1673u16 => &[0u16],
            1674u16 => &[0u16],
            1675u16 => &[0u16],
            1676u16 => &[0u16],
            1677u16 => &[0u16],
            1678u16 => &[0u16],
            1679u16 => &[0u16],
            1680u16 => &[0u16],
            1681u16 => &[0u16],
            1682u16 => &[0u16],
            1683u16 => &[0u16],
            1684u16 => &[0u16],
            1685u16 => &[0u16],
            1686u16 => &[0u16],
            1687u16 => &[0u16],
            1688u16 => &[1u16, 2u16, 3u16, 4u16],
            1689u16 => &[5u16, 6u16, 7u16, 8u16],
            1690u16 => &[1u16, 2u16, 3u16, 4u16],
            1691u16 => &[5u16, 6u16, 7u16, 8u16],
            1692u16 => &[5u16, 6u16, 7u16, 8u16],
            1693u16 => &[1u16, 2u16, 3u16, 4u16],
            1694u16 => &[5u16, 6u16, 7u16, 8u16],
            1695u16 => &[1u16, 2u16, 3u16, 4u16],
            1696u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1697u16 => &[2u16, 6u16, 12u16, 13u16],
            1698u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1699u16 => &[2u16, 6u16, 12u16, 13u16],
            1700u16 => &[2u16, 6u16, 12u16, 13u16],
            1701u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1702u16 => &[2u16, 6u16, 12u16, 13u16],
            1703u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1704u16 => &[1u16, 2u16, 3u16, 4u16],
            1705u16 => &[5u16, 6u16, 7u16, 8u16],
            1706u16 => &[1u16, 2u16, 3u16, 4u16],
            1707u16 => &[5u16, 6u16, 7u16, 8u16],
            1708u16 => &[5u16, 6u16, 7u16, 8u16],
            1709u16 => &[1u16, 2u16, 3u16, 4u16],
            1710u16 => &[5u16, 6u16, 7u16, 8u16],
            1711u16 => &[1u16, 2u16, 3u16, 4u16],
            1712u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1713u16 => &[2u16, 6u16, 12u16, 13u16],
            1714u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1715u16 => &[2u16, 6u16, 12u16, 13u16],
            1716u16 => &[2u16, 6u16, 12u16, 13u16],
            1717u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1718u16 => &[2u16, 6u16, 12u16, 13u16],
            1719u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1720u16 => &[1u16, 2u16, 3u16, 4u16],
            1721u16 => &[5u16, 6u16, 7u16, 8u16],
            1722u16 => &[1u16, 2u16, 3u16, 4u16],
            1723u16 => &[5u16, 6u16, 7u16, 8u16],
            1724u16 => &[5u16, 6u16, 7u16, 8u16],
            1725u16 => &[1u16, 2u16, 3u16, 4u16],
            1726u16 => &[5u16, 6u16, 7u16, 8u16],
            1727u16 => &[1u16, 2u16, 3u16, 4u16],
            1728u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1729u16 => &[2u16, 6u16, 12u16, 13u16],
            1730u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1731u16 => &[2u16, 6u16, 12u16, 13u16],
            1732u16 => &[2u16, 6u16, 12u16, 13u16],
            1733u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1734u16 => &[2u16, 6u16, 12u16, 13u16],
            1735u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1736u16 => &[1u16, 2u16, 3u16, 4u16],
            1737u16 => &[5u16, 6u16, 7u16, 8u16],
            1738u16 => &[1u16, 2u16, 3u16, 4u16],
            1739u16 => &[5u16, 6u16, 7u16, 8u16],
            1740u16 => &[5u16, 6u16, 7u16, 8u16],
            1741u16 => &[1u16, 2u16, 3u16, 4u16],
            1742u16 => &[5u16, 6u16, 7u16, 8u16],
            1743u16 => &[1u16, 2u16, 3u16, 4u16],
            1744u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1745u16 => &[2u16, 6u16, 12u16, 13u16],
            1746u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1747u16 => &[2u16, 6u16, 12u16, 13u16],
            1748u16 => &[2u16, 6u16, 12u16, 13u16],
            1749u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1750u16 => &[2u16, 6u16, 12u16, 13u16],
            1751u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1752u16 => &[1u16, 2u16, 3u16, 4u16],
            1753u16 => &[5u16, 6u16, 7u16, 8u16],
            1754u16 => &[1u16, 2u16, 3u16, 4u16],
            1755u16 => &[5u16, 6u16, 7u16, 8u16],
            1756u16 => &[5u16, 6u16, 7u16, 8u16],
            1757u16 => &[1u16, 2u16, 3u16, 4u16],
            1758u16 => &[5u16, 6u16, 7u16, 8u16],
            1759u16 => &[1u16, 2u16, 3u16, 4u16],
            1760u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1761u16 => &[2u16, 6u16, 12u16, 13u16],
            1762u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1763u16 => &[2u16, 6u16, 12u16, 13u16],
            1764u16 => &[2u16, 6u16, 12u16, 13u16],
            1765u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1766u16 => &[2u16, 6u16, 12u16, 13u16],
            1767u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1768u16 => &[1u16, 2u16, 3u16, 4u16],
            1769u16 => &[5u16, 6u16, 7u16, 8u16],
            1770u16 => &[1u16, 2u16, 3u16, 4u16],
            1771u16 => &[5u16, 6u16, 7u16, 8u16],
            1772u16 => &[5u16, 6u16, 7u16, 8u16],
            1773u16 => &[1u16, 2u16, 3u16, 4u16],
            1774u16 => &[5u16, 6u16, 7u16, 8u16],
            1775u16 => &[1u16, 2u16, 3u16, 4u16],
            1776u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1777u16 => &[2u16, 6u16, 12u16, 13u16],
            1778u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1779u16 => &[2u16, 6u16, 12u16, 13u16],
            1780u16 => &[2u16, 6u16, 12u16, 13u16],
            1781u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1782u16 => &[2u16, 6u16, 12u16, 13u16],
            1783u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1784u16 => &[1u16, 2u16, 3u16, 4u16],
            1785u16 => &[5u16, 6u16, 7u16, 8u16],
            1786u16 => &[1u16, 2u16, 3u16, 4u16],
            1787u16 => &[5u16, 6u16, 7u16, 8u16],
            1788u16 => &[5u16, 6u16, 7u16, 8u16],
            1789u16 => &[1u16, 2u16, 3u16, 4u16],
            1790u16 => &[5u16, 6u16, 7u16, 8u16],
            1791u16 => &[1u16, 2u16, 3u16, 4u16],
            1792u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1793u16 => &[2u16, 6u16, 12u16, 13u16],
            1794u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1795u16 => &[2u16, 6u16, 12u16, 13u16],
            1796u16 => &[2u16, 6u16, 12u16, 13u16],
            1797u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1798u16 => &[2u16, 6u16, 12u16, 13u16],
            1799u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1800u16 => &[1u16, 2u16, 3u16, 4u16],
            1801u16 => &[5u16, 6u16, 7u16, 8u16],
            1802u16 => &[1u16, 2u16, 3u16, 4u16],
            1803u16 => &[5u16, 6u16, 7u16, 8u16],
            1804u16 => &[5u16, 6u16, 7u16, 8u16],
            1805u16 => &[1u16, 2u16, 3u16, 4u16],
            1806u16 => &[5u16, 6u16, 7u16, 8u16],
            1807u16 => &[1u16, 2u16, 3u16, 4u16],
            1808u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1809u16 => &[2u16, 6u16, 12u16, 13u16],
            1810u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1811u16 => &[2u16, 6u16, 12u16, 13u16],
            1812u16 => &[2u16, 6u16, 12u16, 13u16],
            1813u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1814u16 => &[2u16, 6u16, 12u16, 13u16],
            1815u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1816u16 => &[1u16, 2u16, 3u16, 4u16],
            1817u16 => &[5u16, 6u16, 7u16, 8u16],
            1818u16 => &[1u16, 2u16, 3u16, 4u16],
            1819u16 => &[5u16, 6u16, 7u16, 8u16],
            1820u16 => &[5u16, 6u16, 7u16, 8u16],
            1821u16 => &[1u16, 2u16, 3u16, 4u16],
            1822u16 => &[5u16, 6u16, 7u16, 8u16],
            1823u16 => &[1u16, 2u16, 3u16, 4u16],
            1824u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1825u16 => &[2u16, 6u16, 12u16, 13u16],
            1826u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1827u16 => &[2u16, 6u16, 12u16, 13u16],
            1828u16 => &[2u16, 6u16, 12u16, 13u16],
            1829u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1830u16 => &[2u16, 6u16, 12u16, 13u16],
            1831u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1832u16 => &[1u16, 2u16, 3u16, 4u16],
            1833u16 => &[5u16, 6u16, 7u16, 8u16],
            1834u16 => &[1u16, 2u16, 3u16, 4u16],
            1835u16 => &[5u16, 6u16, 7u16, 8u16],
            1836u16 => &[5u16, 6u16, 7u16, 8u16],
            1837u16 => &[1u16, 2u16, 3u16, 4u16],
            1838u16 => &[5u16, 6u16, 7u16, 8u16],
            1839u16 => &[1u16, 2u16, 3u16, 4u16],
            1840u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1841u16 => &[2u16, 6u16, 12u16, 13u16],
            1842u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1843u16 => &[2u16, 6u16, 12u16, 13u16],
            1844u16 => &[2u16, 6u16, 12u16, 13u16],
            1845u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1846u16 => &[2u16, 6u16, 12u16, 13u16],
            1847u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1848u16 => &[1u16, 2u16, 3u16, 4u16],
            1849u16 => &[5u16, 6u16, 7u16, 8u16],
            1850u16 => &[1u16, 2u16, 3u16, 4u16],
            1851u16 => &[5u16, 6u16, 7u16, 8u16],
            1852u16 => &[5u16, 6u16, 7u16, 8u16],
            1853u16 => &[1u16, 2u16, 3u16, 4u16],
            1854u16 => &[5u16, 6u16, 7u16, 8u16],
            1855u16 => &[1u16, 2u16, 3u16, 4u16],
            1856u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1857u16 => &[2u16, 6u16, 12u16, 13u16],
            1858u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1859u16 => &[2u16, 6u16, 12u16, 13u16],
            1860u16 => &[2u16, 6u16, 12u16, 13u16],
            1861u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1862u16 => &[2u16, 6u16, 12u16, 13u16],
            1863u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1864u16 => &[1u16, 2u16, 3u16, 4u16],
            1865u16 => &[5u16, 6u16, 7u16, 8u16],
            1866u16 => &[1u16, 2u16, 3u16, 4u16],
            1867u16 => &[5u16, 6u16, 7u16, 8u16],
            1868u16 => &[5u16, 6u16, 7u16, 8u16],
            1869u16 => &[1u16, 2u16, 3u16, 4u16],
            1870u16 => &[5u16, 6u16, 7u16, 8u16],
            1871u16 => &[1u16, 2u16, 3u16, 4u16],
            1872u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1873u16 => &[2u16, 6u16, 12u16, 13u16],
            1874u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1875u16 => &[2u16, 6u16, 12u16, 13u16],
            1876u16 => &[2u16, 6u16, 12u16, 13u16],
            1877u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1878u16 => &[2u16, 6u16, 12u16, 13u16],
            1879u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1880u16 => &[1u16, 2u16, 3u16, 4u16],
            1881u16 => &[5u16, 6u16, 7u16, 8u16],
            1882u16 => &[1u16, 2u16, 3u16, 4u16],
            1883u16 => &[5u16, 6u16, 7u16, 8u16],
            1884u16 => &[5u16, 6u16, 7u16, 8u16],
            1885u16 => &[1u16, 2u16, 3u16, 4u16],
            1886u16 => &[5u16, 6u16, 7u16, 8u16],
            1887u16 => &[1u16, 2u16, 3u16, 4u16],
            1888u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1889u16 => &[2u16, 6u16, 12u16, 13u16],
            1890u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1891u16 => &[2u16, 6u16, 12u16, 13u16],
            1892u16 => &[2u16, 6u16, 12u16, 13u16],
            1893u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1894u16 => &[2u16, 6u16, 12u16, 13u16],
            1895u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1896u16 => &[1u16, 2u16, 3u16, 4u16],
            1897u16 => &[5u16, 6u16, 7u16, 8u16],
            1898u16 => &[1u16, 2u16, 3u16, 4u16],
            1899u16 => &[5u16, 6u16, 7u16, 8u16],
            1900u16 => &[5u16, 6u16, 7u16, 8u16],
            1901u16 => &[1u16, 2u16, 3u16, 4u16],
            1902u16 => &[5u16, 6u16, 7u16, 8u16],
            1903u16 => &[1u16, 2u16, 3u16, 4u16],
            1904u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1905u16 => &[2u16, 6u16, 12u16, 13u16],
            1906u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1907u16 => &[2u16, 6u16, 12u16, 13u16],
            1908u16 => &[2u16, 6u16, 12u16, 13u16],
            1909u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1910u16 => &[2u16, 6u16, 12u16, 13u16],
            1911u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1912u16 => &[1u16, 2u16, 3u16, 4u16],
            1913u16 => &[5u16, 6u16, 7u16, 8u16],
            1914u16 => &[1u16, 2u16, 3u16, 4u16],
            1915u16 => &[5u16, 6u16, 7u16, 8u16],
            1916u16 => &[5u16, 6u16, 7u16, 8u16],
            1917u16 => &[1u16, 2u16, 3u16, 4u16],
            1918u16 => &[5u16, 6u16, 7u16, 8u16],
            1919u16 => &[1u16, 2u16, 3u16, 4u16],
            1920u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1921u16 => &[2u16, 6u16, 12u16, 13u16],
            1922u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1923u16 => &[2u16, 6u16, 12u16, 13u16],
            1924u16 => &[2u16, 6u16, 12u16, 13u16],
            1925u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1926u16 => &[2u16, 6u16, 12u16, 13u16],
            1927u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1928u16 => &[1u16, 2u16, 3u16, 4u16],
            1929u16 => &[5u16, 6u16, 7u16, 8u16],
            1930u16 => &[1u16, 2u16, 3u16, 4u16],
            1931u16 => &[5u16, 6u16, 7u16, 8u16],
            1932u16 => &[5u16, 6u16, 7u16, 8u16],
            1933u16 => &[1u16, 2u16, 3u16, 4u16],
            1934u16 => &[5u16, 6u16, 7u16, 8u16],
            1935u16 => &[1u16, 2u16, 3u16, 4u16],
            1936u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1937u16 => &[2u16, 6u16, 12u16, 13u16],
            1938u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1939u16 => &[2u16, 6u16, 12u16, 13u16],
            1940u16 => &[2u16, 6u16, 12u16, 13u16],
            1941u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1942u16 => &[2u16, 6u16, 12u16, 13u16],
            1943u16 => &[1u16, 5u16, 9u16, 10u16, 11u16],
            1944u16 => &[],
            1945u16 => &[],
            1946u16 => &[],
            1947u16 => &[],
            1948u16 => &[],
            1949u16 => &[],
            1950u16 => &[],
            1951u16 => &[],
            1952u16 => &[],
            1953u16 => &[],
            1954u16 => &[],
            1955u16 => &[],
            1956u16 => &[],
            1957u16 => &[],
            1958u16 => &[],
            1959u16 => &[],
            1960u16 => &[],
            1961u16 => &[],
            1962u16 => &[],
            1963u16 => &[],
            1964u16 => &[],
            1965u16 => &[],
            1966u16 => &[],
            1967u16 => &[],
            1968u16 => &[],
            1969u16 => &[],
            1970u16 => &[],
            1971u16 => &[],
            1972u16 => &[],
            1973u16 => &[],
            1974u16 => &[],
            1975u16 => &[],
            1976u16 => &[],
            1977u16 => &[],
            1978u16 => &[],
            1979u16 => &[],
            1980u16 => &[],
            1981u16 => &[],
            1982u16 => &[],
            1983u16 => &[],
            1984u16 => &[],
            1985u16 => &[],
            1986u16 => &[],
            1987u16 => &[],
            1988u16 => &[],
            1989u16 => &[],
            1990u16 => &[],
            1991u16 => &[],
            1992u16 => &[14u16],
            1993u16 => &[15u16],
            1994u16 => &[16u16],
            1995u16 => &[17u16],
            1996u16 => &[18u16],
            1997u16 => &[19u16],
            1998u16 => &[0u16],
            1999u16 => &[0u16],
            2000u16 => &[0u16],
            2001u16 => &[0u16],
            2002u16 => &[0u16],
            2003u16 => &[0u16],
            2004u16 => &[],
            2005u16 => &[],
            2006u16 => &[],
            2007u16 => &[],
            2008u16 => &[],
            2009u16 => &[],
            2010u16 => &[],
            2011u16 => &[14u16],
            2012u16 => &[15u16],
            2013u16 => &[16u16],
            2014u16 => &[17u16],
            2015u16 => &[18u16],
            2016u16 => &[19u16],
            2017u16 => &[0u16],
            2018u16 => &[0u16],
            2019u16 => &[0u16],
            2020u16 => &[0u16],
            2021u16 => &[0u16],
            2022u16 => &[0u16],
            2023u16 => &[20u16, 21u16],
            2024u16 => &[20u16, 21u16],
            2025u16 => &[20u16, 22u16],
            2026u16 => &[20u16, 22u16],
            2027u16 => &[23u16, 24u16],
            2028u16 => &[23u16, 24u16],
            2029u16 => &[23u16, 25u16],
            2030u16 => &[23u16, 25u16],
            2031u16 => &[26u16, 27u16],
            2032u16 => &[26u16, 27u16],
            2033u16 => &[26u16, 28u16],
            2034u16 => &[26u16, 28u16],
            2035u16 => &[29u16, 30u16],
            2036u16 => &[29u16, 30u16],
            2037u16 => &[29u16, 31u16],
            2038u16 => &[29u16, 31u16],
            2039u16 => &[32u16, 33u16, 34u16, 35u16, 36u16],
            2040u16 => &[32u16, 33u16, 34u16, 35u16, 36u16],
            2041u16 => &[37u16, 33u16, 34u16, 35u16, 36u16],
            2042u16 => &[37u16, 33u16, 34u16, 35u16, 36u16],
            2043u16 => &[38u16, 39u16],
            2044u16 => &[38u16, 39u16],
            2045u16 => &[38u16, 40u16],
            2046u16 => &[38u16, 40u16],
            2047u16 => &[0u16],
            2048u16 => &[0u16],
            2049u16 => &[0u16],
            2050u16 => &[0u16],
            2051u16 => &[0u16],
            2052u16 => &[0u16],
            2053u16 => &[0u16],
            2054u16 => &[0u16],
            2055u16 => &[0u16],
            2056u16 => &[0u16],
            2057u16 => &[0u16],
            2058u16 => &[0u16],
            2059u16 => &[0u16],
            2060u16 => &[0u16],
            2061u16 => &[0u16],
            2062u16 => &[0u16],
            2063u16 => &[],
            2064u16 => &[],
            2065u16 => &[],
            2066u16 => &[],
            2067u16 => &[],
            2068u16 => &[],
            2069u16 => &[],
            2070u16 => &[],
            2071u16 => &[],
            2072u16 => &[],
            2073u16 => &[],
            2074u16 => &[],
            2075u16 => &[],
            2076u16 => &[],
            2077u16 => &[],
            2078u16 => &[],
            2079u16 => &[],
            2080u16 => &[],
            2081u16 => &[],
            2082u16 => &[],
            2083u16 => &[],
            2084u16 => &[],
            2085u16 => &[],
            2086u16 => &[],
            2087u16 => &[],
            2088u16 => &[],
            2089u16 => &[],
            2090u16 => &[],
            2091u16 => &[0u16],
            2092u16 => &[0u16],
            2093u16 => &[0u16],
            2094u16 => &[0u16],
            2095u16 => &[0u16],
            2096u16 => &[0u16],
            2097u16 => &[0u16],
            2098u16 => &[0u16],
            2099u16 => &[0u16],
            2100u16 => &[0u16],
            2101u16 => &[0u16],
            2102u16 => &[0u16],
            2103u16 => &[0u16],
            2104u16 => &[0u16],
            2105u16 => &[0u16],
            2106u16 => &[0u16],
            2107u16 => &[0u16],
            2108u16 => &[0u16],
            2109u16 => &[0u16],
            2110u16 => &[0u16],
            2111u16 => &[0u16],
            2112u16 => &[0u16],
            2113u16 => &[0u16],
            2114u16 => &[0u16],
            2115u16 => &[0u16],
            2116u16 => &[0u16],
            2117u16 => &[0u16],
            2118u16 => &[0u16],
            2119u16 => &[0u16],
            2120u16 => &[0u16],
            2121u16 => &[0u16],
            2122u16 => &[0u16],
            2123u16 => &[0u16],
            2124u16 => &[0u16],
            2125u16 => &[0u16],
            2126u16 => &[0u16],
            2127u16 => &[0u16],
            2128u16 => &[0u16],
            2129u16 => &[0u16],
            2130u16 => &[0u16],
            2131u16 => &[0u16],
            2132u16 => &[0u16],
            2133u16 => &[0u16],
            2134u16 => &[0u16],
            2135u16 => &[0u16],
            2136u16 => &[0u16],
            2137u16 => &[0u16],
            2138u16 => &[0u16],
            2139u16 => &[0u16],
            2140u16 => &[0u16],
            2141u16 => &[0u16],
            2142u16 => &[0u16],
            2143u16 => &[0u16],
            2144u16 => &[0u16],
            2145u16 => &[0u16],
            2146u16 => &[0u16],
            2147u16 => &[0u16],
            2148u16 => &[0u16],
            2149u16 => &[0u16],
            2150u16 => &[0u16],
            2151u16 => &[0u16],
            2152u16 => &[0u16],
            2153u16 => &[0u16],
            2154u16 => &[0u16],
            2155u16 => &[0u16],
            2156u16 => &[0u16],
            2157u16 => &[0u16],
            2158u16 => &[0u16],
            2159u16 => &[0u16],
            2160u16 => &[0u16],
            2161u16 => &[0u16],
            2162u16 => &[0u16],
            2163u16 => &[0u16],
            2164u16 => &[0u16],
            2165u16 => &[0u16],
            2166u16 => &[0u16],
            2167u16 => &[0u16],
            2168u16 => &[0u16],
            2169u16 => &[0u16],
            2170u16 => &[0u16],
            2171u16 => &[0u16],
            2172u16 => &[0u16],
            2173u16 => &[0u16],
            2174u16 => &[0u16],
            2175u16 => &[0u16],
            2176u16 => &[0u16],
            2177u16 => &[0u16],
            2178u16 => &[0u16],
            2179u16 => &[0u16],
            2180u16 => &[0u16],
            2181u16 => &[0u16],
            2182u16 => &[0u16],
            2183u16 => &[0u16],
            2184u16 => &[0u16],
            2185u16 => &[0u16],
            2186u16 => &[0u16],
            2187u16 => &[0u16],
            2188u16 => &[0u16],
            2189u16 => &[0u16],
            2190u16 => &[0u16],
            2191u16 => &[0u16],
            2192u16 => &[0u16],
            2193u16 => &[0u16],
            2194u16 => &[0u16],
            2195u16 => &[0u16],
            2196u16 => &[0u16],
            2197u16 => &[0u16],
            2198u16 => &[0u16],
            2199u16 => &[0u16],
            2200u16 => &[0u16],
            2201u16 => &[0u16],
            2202u16 => &[0u16],
            2203u16 => &[0u16],
            2204u16 => &[0u16],
            2205u16 => &[0u16],
            2206u16 => &[0u16],
            2207u16 => &[0u16],
            2208u16 => &[0u16],
            2209u16 => &[0u16],
            2210u16 => &[0u16],
            2211u16 => &[0u16],
            2212u16 => &[0u16],
            2213u16 => &[0u16],
            2214u16 => &[0u16],
            2215u16 => &[0u16],
            2216u16 => &[0u16],
            2217u16 => &[0u16],
            2218u16 => &[0u16],
            2219u16 => &[0u16],
            2220u16 => &[0u16],
            2221u16 => &[0u16],
            2222u16 => &[0u16],
            2223u16 => &[0u16],
            2224u16 => &[0u16],
            2225u16 => &[0u16],
            2226u16 => &[0u16],
            2227u16 => &[0u16],
            2228u16 => &[0u16],
            2229u16 => &[0u16],
            2230u16 => &[0u16],
            2231u16 => &[0u16],
            2232u16 => &[0u16],
            2233u16 => &[0u16],
            2234u16 => &[0u16],
            2235u16 => &[0u16],
            2236u16 => &[0u16],
            2237u16 => &[0u16],
            2238u16 => &[0u16],
            2239u16 => &[0u16],
            2240u16 => &[0u16],
            2241u16 => &[0u16],
            2242u16 => &[0u16],
            2243u16 => &[0u16],
            2244u16 => &[0u16],
            2245u16 => &[0u16],
            2246u16 => &[0u16],
            2247u16 => &[0u16],
            2248u16 => &[0u16],
            2249u16 => &[0u16],
            2250u16 => &[0u16],
            2251u16 => &[0u16],
            2252u16 => &[0u16],
            2253u16 => &[0u16],
            2254u16 => &[0u16],
            2255u16 => &[0u16],
            2256u16 => &[0u16],
            2257u16 => &[0u16],
            2258u16 => &[0u16],
            2259u16 => &[0u16],
            2260u16 => &[0u16],
            2261u16 => &[0u16],
            2262u16 => &[0u16],
            2263u16 => &[0u16],
            2264u16 => &[0u16],
            2265u16 => &[0u16],
            2266u16 => &[0u16],
            2267u16 => &[0u16],
            2268u16 => &[0u16],
            2269u16 => &[0u16],
            2270u16 => &[0u16],
            2271u16 => &[0u16],
            2272u16 => &[0u16],
            2273u16 => &[0u16],
            2274u16 => &[0u16],
            2275u16 => &[0u16],
            2276u16 => &[0u16],
            2277u16 => &[0u16],
            2278u16 => &[0u16],
            2279u16 => &[0u16],
            2280u16 => &[0u16],
            2281u16 => &[0u16],
            2282u16 => &[0u16],
            2283u16 => &[0u16],
            2284u16 => &[0u16],
            2285u16 => &[0u16],
            2286u16 => &[0u16],
            2287u16 => &[0u16],
            2288u16 => &[0u16],
            2289u16 => &[0u16],
            2290u16 => &[0u16],
            2291u16 => &[0u16],
            2292u16 => &[0u16],
            2293u16 => &[0u16],
            2294u16 => &[0u16],
            2295u16 => &[0u16],
            2296u16 => &[0u16],
            2297u16 => &[0u16],
            2298u16 => &[0u16],
            2299u16 => &[0u16],
            2300u16 => &[0u16],
            2301u16 => &[0u16],
            2302u16 => &[0u16],
            2303u16 => &[0u16],
            2304u16 => &[0u16],
            2305u16 => &[0u16],
            2306u16 => &[0u16],
            2307u16 => &[0u16],
            2308u16 => &[0u16],
            2309u16 => &[0u16],
            2310u16 => &[0u16],
            2311u16 => &[0u16],
            2312u16 => &[0u16],
            2313u16 => &[0u16],
            2314u16 => &[0u16],
            2315u16 => &[0u16],
            2316u16 => &[0u16],
            2317u16 => &[0u16],
            2318u16 => &[0u16],
            2319u16 => &[0u16],
            2320u16 => &[0u16],
            2321u16 => &[0u16],
            2322u16 => &[0u16],
            2323u16 => &[0u16],
            2324u16 => &[0u16],
            2325u16 => &[0u16],
            2326u16 => &[0u16],
            2327u16 => &[0u16],
            2328u16 => &[0u16],
            2329u16 => &[0u16],
            2330u16 => &[0u16],
            2331u16 => &[0u16],
            2332u16 => &[0u16],
            2333u16 => &[0u16],
            2334u16 => &[0u16],
            2335u16 => &[0u16],
            2336u16 => &[0u16],
            2337u16 => &[0u16],
            2338u16 => &[0u16],
            2339u16 => &[0u16],
            2340u16 => &[0u16],
            2341u16 => &[0u16],
            2342u16 => &[0u16],
            2343u16 => &[0u16],
            2344u16 => &[0u16],
            2345u16 => &[0u16],
            2346u16 => &[0u16],
            2347u16 => &[0u16],
            2348u16 => &[0u16],
            2349u16 => &[0u16],
            2350u16 => &[0u16],
            2351u16 => &[0u16],
            2352u16 => &[0u16],
            2353u16 => &[0u16],
            2354u16 => &[0u16],
            2355u16 => &[],
            2356u16 => &[],
            2357u16 => &[],
            2358u16 => &[],
            2359u16 => &[],
            2360u16 => &[],
            2361u16 => &[],
            2362u16 => &[],
            2363u16 => &[],
            2364u16 => &[],
            2365u16 => &[],
            2366u16 => &[],
            2367u16 => &[],
            2368u16 => &[],
            2369u16 => &[],
            2370u16 => &[],
            2371u16 => &[],
            2372u16 => &[],
            2373u16 => &[],
            2374u16 => &[],
            2375u16 => &[],
            2376u16 => &[],
            2377u16 => &[],
            2378u16 => &[],
            2379u16 => &[],
            2380u16 => &[],
            2381u16 => &[],
            2382u16 => &[],
            2383u16 => &[],
            2384u16 => &[],
            2385u16 => &[],
            2386u16 => &[],
            2387u16 => &[],
            2388u16 => &[],
            2389u16 => &[],
            2390u16 => &[],
            2391u16 => &[],
            2392u16 => &[],
            2393u16 => &[],
            2394u16 => &[],
            2395u16 => &[],
            2396u16 => &[],
            2397u16 => &[],
            2398u16 => &[],
            2399u16 => &[],
            2400u16 => &[],
            2401u16 => &[],
            2402u16 => &[],
            2403u16 => &[],
            2404u16 => &[],
            2405u16 => &[],
            2406u16 => &[],
            2407u16 => &[],
            2408u16 => &[],
            2409u16 => &[],
            2410u16 => &[],
            2411u16 => &[],
            2412u16 => &[],
            2413u16 => &[],
            2414u16 => &[],
            2415u16 => &[],
            2416u16 => &[],
            2417u16 => &[],
            2418u16 => &[],
            2419u16 => &[],
            2420u16 => &[],
            2421u16 => &[],
            2422u16 => &[],
            2423u16 => &[],
            2424u16 => &[],
            2425u16 => &[],
            2426u16 => &[],
            2427u16 => &[],
            2428u16 => &[],
            2429u16 => &[],
            2430u16 => &[],
            2431u16 => &[],
            2432u16 => &[],
            2433u16 => &[],
            2434u16 => &[],
            2435u16 => &[],
            2436u16 => &[],
            2437u16 => &[],
            2438u16 => &[],
            2439u16 => &[],
            2440u16 => &[],
            2441u16 => &[],
            2442u16 => &[],
            2443u16 => &[],
            2444u16 => &[],
            2445u16 => &[],
            2446u16 => &[],
            2447u16 => &[],
            2448u16 => &[],
            2449u16 => &[],
            2450u16 => &[],
            2451u16 => &[],
            2452u16 => &[],
            2453u16 => &[],
            2454u16 => &[],
            2455u16 => &[],
            2456u16 => &[],
            2457u16 => &[],
            2458u16 => &[],
            2459u16 => &[],
            2460u16 => &[],
            2461u16 => &[],
            2462u16 => &[],
            2463u16 => &[],
            2464u16 => &[],
            2465u16 => &[],
            2466u16 => &[],
            2467u16 => &[],
            2468u16 => &[],
            2469u16 => &[],
            2470u16 => &[],
            2471u16 => &[],
            2472u16 => &[],
            2473u16 => &[],
            2474u16 => &[],
            2475u16 => &[],
            2476u16 => &[],
            2477u16 => &[],
            2478u16 => &[],
            2479u16 => &[],
            2480u16 => &[],
            2481u16 => &[],
            2482u16 => &[],
            2483u16 => &[],
            2484u16 => &[],
            2485u16 => &[],
            2486u16 => &[],
            2487u16 => &[],
            2488u16 => &[],
            2489u16 => &[],
            2490u16 => &[],
            2491u16 => &[],
            2492u16 => &[],
            2493u16 => &[],
            2494u16 => &[],
            2495u16 => &[],
            2496u16 => &[],
            2497u16 => &[],
            2498u16 => &[],
            2499u16 => &[],
            2500u16 => &[],
            2501u16 => &[],
            2502u16 => &[],
            2503u16 => &[],
            2504u16 => &[],
            2505u16 => &[],
            2506u16 => &[],
            2507u16 => &[],
            2508u16 => &[],
            2509u16 => &[],
            2510u16 => &[],
            2511u16 => &[],
            2512u16 => &[],
            2513u16 => &[],
            2514u16 => &[],
            2515u16 => &[],
            2516u16 => &[],
            2517u16 => &[],
            2518u16 => &[],
            2519u16 => &[],
            2520u16 => &[],
            2521u16 => &[],
            2522u16 => &[],
            2523u16 => &[],
            2524u16 => &[],
            2525u16 => &[],
            2526u16 => &[],
            2527u16 => &[],
            2528u16 => &[],
            2529u16 => &[],
            2530u16 => &[],
            2531u16 => &[],
            2532u16 => &[],
            2533u16 => &[],
            2534u16 => &[],
            2535u16 => &[],
            2536u16 => &[],
            2537u16 => &[],
            2538u16 => &[],
            2539u16 => &[],
            2540u16 => &[],
            2541u16 => &[],
            2542u16 => &[],
            2543u16 => &[],
            2544u16 => &[],
            2545u16 => &[],
            2546u16 => &[],
            2547u16 => &[],
            2548u16 => &[],
            2549u16 => &[],
            2550u16 => &[],
            2551u16 => &[],
            2552u16 => &[],
            2553u16 => &[],
            2554u16 => &[],
            2555u16 => &[],
            2556u16 => &[],
            2557u16 => &[],
            2558u16 => &[],
            2559u16 => &[],
            2560u16 => &[],
            2561u16 => &[],
            2562u16 => &[],
            2563u16 => &[],
            2564u16 => &[],
            2565u16 => &[],
            2566u16 => &[],
            2567u16 => &[],
            2568u16 => &[],
            2569u16 => &[],
            2570u16 => &[],
            2571u16 => &[],
            2572u16 => &[],
            2573u16 => &[],
            2574u16 => &[],
            2575u16 => &[],
            2576u16 => &[],
            2577u16 => &[],
            2578u16 => &[],
            2579u16 => &[],
            2580u16 => &[],
            2581u16 => &[],
            2582u16 => &[],
            2583u16 => &[],
            2584u16 => &[],
            2585u16 => &[],
            2586u16 => &[],
            2587u16 => &[],
            2588u16 => &[],
            2589u16 => &[],
            2590u16 => &[],
            2591u16 => &[],
            2592u16 => &[],
            2593u16 => &[],
            2594u16 => &[],
            2595u16 => &[],
            2596u16 => &[],
            2597u16 => &[],
            2598u16 => &[],
            2599u16 => &[],
            2600u16 => &[],
            2601u16 => &[],
            2602u16 => &[],
            2603u16 => &[],
            2604u16 => &[],
            2605u16 => &[],
            2606u16 => &[],
            2607u16 => &[],
            2608u16 => &[],
            2609u16 => &[],
            2610u16 => &[],
            2611u16 => &[],
            2612u16 => &[],
            2613u16 => &[],
            2614u16 => &[],
            2615u16 => &[],
            2616u16 => &[],
            2617u16 => &[],
            2618u16 => &[],
            2619u16 => &[],
            2620u16 => &[],
            2621u16 => &[],
            2622u16 => &[],
            2623u16 => &[],
            2624u16 => &[],
            2625u16 => &[],
            2626u16 => &[],
            2627u16 => &[],
            2628u16 => &[],
            2629u16 => &[],
            2630u16 => &[],
            2631u16 => &[],
            2632u16 => &[],
            2633u16 => &[],
            2634u16 => &[],
            2635u16 => &[],
            2636u16 => &[],
            2637u16 => &[],
            2638u16 => &[],
            2639u16 => &[],
            2640u16 => &[],
            2641u16 => &[],
            2642u16 => &[],
            2643u16 => &[],
            2644u16 => &[],
            2645u16 => &[],
            2646u16 => &[],
            2647u16 => &[],
            2648u16 => &[],
            2649u16 => &[],
            2650u16 => &[],
            2651u16 => &[],
            2652u16 => &[],
            2653u16 => &[],
            2654u16 => &[],
            2655u16 => &[],
            2656u16 => &[],
            2657u16 => &[],
            2658u16 => &[],
            2659u16 => &[],
            2660u16 => &[],
            2661u16 => &[],
            2662u16 => &[],
            2663u16 => &[],
            2664u16 => &[],
            2665u16 => &[],
            2666u16 => &[],
            2667u16 => &[],
            2668u16 => &[],
            2669u16 => &[],
            2670u16 => &[],
            2671u16 => &[],
            2672u16 => &[],
            2673u16 => &[],
            2674u16 => &[],
            2675u16 => &[],
            2676u16 => &[],
            2677u16 => &[],
            2678u16 => &[],
            2679u16 => &[],
            2680u16 => &[],
            2681u16 => &[],
            2682u16 => &[],
            2683u16 => &[],
            2684u16 => &[],
            2685u16 => &[],
            2686u16 => &[],
            2687u16 => &[],
            2688u16 => &[],
            2689u16 => &[],
            2690u16 => &[],
            2691u16 => &[],
            2692u16 => &[],
            2693u16 => &[],
            2694u16 => &[],
            2695u16 => &[],
            2696u16 => &[],
            2697u16 => &[],
            2698u16 => &[],
            2699u16 => &[],
            2700u16 => &[],
            2701u16 => &[],
            2702u16 => &[],
            2703u16 => &[],
            2704u16 => &[],
            2705u16 => &[],
            2706u16 => &[],
            2707u16 => &[],
            2708u16 => &[],
            2709u16 => &[],
            2710u16 => &[],
            2711u16 => &[],
            2712u16 => &[],
            2713u16 => &[],
            2714u16 => &[],
            2715u16 => &[],
            2716u16 => &[],
            2717u16 => &[],
            2718u16 => &[],
            2719u16 => &[],
            2720u16 => &[],
            2721u16 => &[],
            2722u16 => &[],
            2723u16 => &[],
            2724u16 => &[],
            2725u16 => &[],
            2726u16 => &[],
            2727u16 => &[],
            2728u16 => &[],
            2729u16 => &[],
            2730u16 => &[],
            2731u16 => &[],
            2732u16 => &[],
            2733u16 => &[],
            2734u16 => &[],
            2735u16 => &[],
            2736u16 => &[],
            2737u16 => &[],
            2738u16 => &[],
            2739u16 => &[],
            2740u16 => &[],
            2741u16 => &[],
            2742u16 => &[],
            2743u16 => &[],
            2744u16 => &[],
            2745u16 => &[],
            2746u16 => &[],
            2747u16 => &[],
            2748u16 => &[],
            2749u16 => &[],
            2750u16 => &[],
            2751u16 => &[],
            2752u16 => &[],
            2753u16 => &[],
            2754u16 => &[],
            2755u16 => &[],
            2756u16 => &[],
            2757u16 => &[],
            2758u16 => &[],
            2759u16 => &[],
            2760u16 => &[],
            2761u16 => &[],
            2762u16 => &[],
            2763u16 => &[],
            2764u16 => &[],
            2765u16 => &[],
            2766u16 => &[],
            2767u16 => &[],
            2768u16 => &[],
            2769u16 => &[],
            2770u16 => &[],
            2771u16 => &[],
            2772u16 => &[],
            2773u16 => &[],
            2774u16 => &[],
            2775u16 => &[],
            2776u16 => &[],
            2777u16 => &[],
            2778u16 => &[],
            2779u16 => &[],
            2780u16 => &[],
            2781u16 => &[],
            2782u16 => &[],
            2783u16 => &[],
            2784u16 => &[],
            2785u16 => &[],
            2786u16 => &[],
            2787u16 => &[],
            2788u16 => &[],
            2789u16 => &[],
            2790u16 => &[],
            2791u16 => &[],
            2792u16 => &[],
            2793u16 => &[],
            2794u16 => &[],
            2795u16 => &[],
            2796u16 => &[],
            2797u16 => &[],
            2798u16 => &[],
            2799u16 => &[],
            2800u16 => &[],
            2801u16 => &[],
            2802u16 => &[],
            2803u16 => &[],
            2804u16 => &[],
            2805u16 => &[],
            2806u16 => &[],
            2807u16 => &[],
            2808u16 => &[],
            2809u16 => &[],
            2810u16 => &[],
            2811u16 => &[],
            2812u16 => &[],
            2813u16 => &[],
            2814u16 => &[],
            2815u16 => &[],
            2816u16 => &[],
            2817u16 => &[],
            2818u16 => &[],
            2819u16 => &[],
            2820u16 => &[],
            2821u16 => &[],
            2822u16 => &[],
            2823u16 => &[],
            2824u16 => &[],
            2825u16 => &[],
            2826u16 => &[],
            2827u16 => &[],
            2828u16 => &[],
            2829u16 => &[],
            2830u16 => &[],
            2831u16 => &[],
            2832u16 => &[],
            2833u16 => &[],
            2834u16 => &[],
            2835u16 => &[],
            2836u16 => &[],
            2837u16 => &[],
            2838u16 => &[],
            2839u16 => &[],
            2840u16 => &[],
            2841u16 => &[],
            2842u16 => &[],
            2843u16 => &[],
            2844u16 => &[],
            2845u16 => &[],
            2846u16 => &[],
            2847u16 => &[],
            2848u16 => &[],
            2849u16 => &[],
            2850u16 => &[],
            2851u16 => &[],
            2852u16 => &[],
            2853u16 => &[],
            2854u16 => &[],
            2855u16 => &[],
            2856u16 => &[],
            2857u16 => &[],
            2858u16 => &[],
            2859u16 => &[],
            2860u16 => &[],
            2861u16 => &[],
            2862u16 => &[],
            2863u16 => &[],
            2864u16 => &[],
            2865u16 => &[],
            2866u16 => &[],
            2867u16 => &[],
            2868u16 => &[],
            2869u16 => &[],
            2870u16 => &[],
            2871u16 => &[],
            2872u16 => &[],
            2873u16 => &[0u16],
            2874u16 => &[41u16, 42u16],
            2875u16 => &[41u16, 42u16],
            2876u16 => &[43u16, 44u16, 45u16],
            2877u16 => &[43u16, 44u16, 45u16],
            2878u16 => &[41u16, 46u16, 47u16],
            2879u16 => &[41u16, 46u16, 47u16],
            2880u16 => &[48u16, 42u16, 49u16],
            2881u16 => &[48u16, 42u16, 49u16],
            2882u16 => &[44u16, 50u16, 45u16],
            2883u16 => &[44u16, 50u16, 45u16],
            2884u16 => &[51u16, 52u16],
            2885u16 => &[51u16, 52u16],
            2886u16 => &[51u16, 50u16, 49u16],
            2887u16 => &[51u16, 50u16, 49u16],
            2888u16 => &[51u16, 52u16, 45u16],
            2889u16 => &[51u16, 52u16, 45u16],
            2890u16 => &[51u16, 53u16],
            2891u16 => &[51u16, 53u16],
            2892u16 => &[51u16, 49u16],
            2893u16 => &[51u16, 49u16],
            2894u16 => &[54u16, 52u16],
            2895u16 => &[54u16, 52u16],
            2896u16 => &[54u16, 44u16, 53u16],
            2897u16 => &[54u16, 44u16, 53u16],
            2898u16 => &[43u16, 46u16, 49u16],
            2899u16 => &[43u16, 46u16, 49u16],
            2900u16 => &[46u16, 50u16, 49u16],
            2901u16 => &[46u16, 50u16, 49u16],
            2902u16 => &[55u16, 52u16, 45u16],
            2903u16 => &[55u16, 52u16, 45u16],
            2904u16 => &[51u16, 42u16],
            2905u16 => &[51u16, 42u16],
            2906u16 => &[51u16, 42u16, 49u16],
            2907u16 => &[51u16, 42u16, 49u16],
            2908u16 => &[51u16, 50u16, 45u16],
            2909u16 => &[51u16, 50u16, 45u16],
            2910u16 => &[51u16, 45u16],
            2911u16 => &[51u16, 45u16],
            2912u16 => &[51u16, 47u16],
            2913u16 => &[51u16, 47u16],
            2914u16 => &[43u16, 56u16],
            2915u16 => &[43u16, 56u16],
            2916u16 => &[43u16, 46u16, 49u16],
            2917u16 => &[43u16, 46u16, 49u16],
            2918u16 => &[43u16, 44u16, 45u16],
            2919u16 => &[43u16, 44u16, 45u16],
            2920u16 => &[55u16, 52u16, 45u16],
            2921u16 => &[55u16, 52u16, 45u16],
            2922u16 => &[48u16, 42u16, 49u16],
            2923u16 => &[48u16, 42u16, 49u16],
            2924u16 => &[51u16, 50u16],
            2925u16 => &[51u16, 50u16],
            2926u16 => &[51u16, 50u16, 45u16],
            2927u16 => &[51u16, 50u16, 45u16],
            2928u16 => &[51u16, 50u16, 49u16],
            2929u16 => &[51u16, 50u16, 49u16],
            2930u16 => &[51u16, 47u16],
            2931u16 => &[51u16, 47u16],
            2932u16 => &[51u16, 53u16],
            2933u16 => &[51u16, 53u16],
            2934u16 => &[57u16, 50u16],
            2935u16 => &[57u16, 50u16],
            2936u16 => &[41u16, 46u16, 47u16],
            2937u16 => &[41u16, 46u16, 47u16],
            2938u16 => &[54u16, 44u16, 53u16],
            2939u16 => &[54u16, 44u16, 53u16],
            2940u16 => &[44u16, 50u16, 45u16],
            2941u16 => &[44u16, 50u16, 45u16],
            2942u16 => &[46u16, 50u16, 49u16],
            2943u16 => &[46u16, 50u16, 49u16],
            2944u16 => &[51u16, 56u16],
            2945u16 => &[51u16, 56u16],
            2946u16 => &[51u16, 52u16, 45u16],
            2947u16 => &[51u16, 52u16, 45u16],
            2948u16 => &[51u16, 42u16, 49u16],
            2949u16 => &[51u16, 42u16, 49u16],
            2950u16 => &[51u16, 49u16],
            2951u16 => &[51u16, 49u16],
            2952u16 => &[51u16, 45u16],
            2953u16 => &[51u16, 45u16],
            2954u16 => &[58u16],
            2955u16 => &[58u16],
            2956u16 => &[59u16],
            2957u16 => &[59u16],
            2958u16 => &[60u16],
            2959u16 => &[60u16],
            2960u16 => &[58u16],
            2961u16 => &[58u16],
            2962u16 => &[60u16],
            2963u16 => &[60u16],
            2964u16 => &[59u16],
            2965u16 => &[59u16],
            2966u16 => &[58u16],
            2967u16 => &[58u16],
            2968u16 => &[61u16],
            2969u16 => &[61u16],
            2970u16 => &[62u16],
            2971u16 => &[62u16],
            2972u16 => &[58u16],
            2973u16 => &[58u16],
            2974u16 => &[62u16],
            2975u16 => &[62u16],
            2976u16 => &[61u16],
            2977u16 => &[61u16],
            2978u16 => &[],
            2979u16 => &[],
            2980u16 => &[],
            2981u16 => &[],
            2982u16 => &[],
            2983u16 => &[],
            2984u16 => &[],
            2985u16 => &[],
            2986u16 => &[],
            2987u16 => &[],
            2988u16 => &[],
            2989u16 => &[],
            2990u16 => &[],
            2991u16 => &[],
            2992u16 => &[],
            2993u16 => &[],
            2994u16 => &[],
            2995u16 => &[],
            2996u16 => &[],
            2997u16 => &[],
            2998u16 => &[],
            2999u16 => &[],
            3000u16 => &[],
            3001u16 => &[],
            3002u16 => &[],
            3003u16 => &[],
            3004u16 => &[],
            3005u16 => &[],
            3006u16 => &[],
            3007u16 => &[],
            3008u16 => &[],
            3009u16 => &[],
            3010u16 => &[],
            3011u16 => &[],
            3012u16 => &[],
            3013u16 => &[],
            3014u16 => &[],
            3015u16 => &[],
            3016u16 => &[],
            3017u16 => &[],
            3018u16 => &[],
            3019u16 => &[],
            3020u16 => &[],
            3021u16 => &[],
            3022u16 => &[],
            3023u16 => &[],
            3024u16 => &[],
            3025u16 => &[],
            3026u16 => &[],
            3027u16 => &[],
            3028u16 => &[],
            3029u16 => &[],
            3030u16 => &[],
            3031u16 => &[],
            3032u16 => &[],
            3033u16 => &[],
            3034u16 => &[],
            3035u16 => &[],
            3036u16 => &[],
            3037u16 => &[],
            3038u16 => &[],
            3039u16 => &[],
            3040u16 => &[],
            3041u16 => &[],
            3042u16 => &[],
            3043u16 => &[],
            3044u16 => &[],
            3045u16 => &[],
            3046u16 => &[],
            3047u16 => &[],
            3048u16 => &[],
            3049u16 => &[],
            3050u16 => &[],
            3051u16 => &[],
            3052u16 => &[],
            3053u16 => &[],
            3054u16 => &[],
            3055u16 => &[],
            3056u16 => &[],
            3057u16 => &[],
            3058u16 => &[],
            3059u16 => &[],
            3060u16 => &[],
            3061u16 => &[],
            3062u16 => &[],
            3063u16 => &[],
            3064u16 => &[],
            3065u16 => &[],
            3066u16 => &[],
            3067u16 => &[],
            3068u16 => &[],
            3069u16 => &[],
            3070u16 => &[],
            3071u16 => &[],
            3072u16 => &[],
            3073u16 => &[],
            3074u16 => &[],
            3075u16 => &[],
            3076u16 => &[],
            3077u16 => &[],
            3078u16 => &[],
            3079u16 => &[],
            3080u16 => &[],
            3081u16 => &[],
            3082u16 => &[],
            3083u16 => &[],
            3084u16 => &[],
            3085u16 => &[],
            3086u16 => &[],
            3087u16 => &[],
            3088u16 => &[],
            3089u16 => &[],
            3090u16 => &[],
            3091u16 => &[],
            3092u16 => &[],
            3093u16 => &[],
            3094u16 => &[],
            3095u16 => &[],
            3096u16 => &[],
            3097u16 => &[],
            3098u16 => &[],
            3099u16 => &[],
            3100u16 => &[],
            3101u16 => &[],
            3102u16 => &[],
            3103u16 => &[],
            3104u16 => &[],
            3105u16 => &[],
            3106u16 => &[],
            3107u16 => &[],
            3108u16 => &[],
            3109u16 => &[],
            3110u16 => &[],
            3111u16 => &[],
            3112u16 => &[],
            3113u16 => &[],
            3114u16 => &[],
            3115u16 => &[],
            3116u16 => &[],
            3117u16 => &[],
            3118u16 => &[],
            3119u16 => &[],
            3120u16 => &[],
            3121u16 => &[],
            3122u16 => &[],
            3123u16 => &[],
            3124u16 => &[],
            3125u16 => &[],
            3126u16 => &[],
            3127u16 => &[],
            3128u16 => &[],
            3129u16 => &[],
            3130u16 => &[],
            3131u16 => &[],
            3132u16 => &[],
            3133u16 => &[],
            3134u16 => &[],
            3135u16 => &[],
            3136u16 => &[],
            3137u16 => &[],
            3138u16 => &[],
            3139u16 => &[],
            3140u16 => &[],
            3141u16 => &[],
            3142u16 => &[],
            3143u16 => &[],
            3144u16 => &[],
            3145u16 => &[],
            3146u16 => &[],
            3147u16 => &[],
            3148u16 => &[],
            3149u16 => &[],
            3150u16 => &[],
            3151u16 => &[],
            3152u16 => &[],
            3153u16 => &[],
            3154u16 => &[],
            3155u16 => &[],
            3156u16 => &[],
            3157u16 => &[],
            3158u16 => &[],
            3159u16 => &[],
            3160u16 => &[],
            3161u16 => &[],
            3162u16 => &[],
            3163u16 => &[],
            3164u16 => &[],
            3165u16 => &[],
            3166u16 => &[],
            3167u16 => &[],
            3168u16 => &[],
            3169u16 => &[],
            3170u16 => &[],
            3171u16 => &[],
            3172u16 => &[],
            3173u16 => &[],
            3174u16 => &[],
            3175u16 => &[],
            3176u16 => &[],
            3177u16 => &[],
            3178u16 => &[],
            3179u16 => &[],
            3180u16 => &[],
            3181u16 => &[],
            3182u16 => &[],
            3183u16 => &[],
            3184u16 => &[],
            3185u16 => &[],
            3186u16 => &[],
            3187u16 => &[],
            3188u16 => &[],
            3189u16 => &[],
            3190u16 => &[],
            3191u16 => &[],
            3192u16 => &[],
            3193u16 => &[],
            3194u16 => &[],
            3195u16 => &[],
            3196u16 => &[],
            3197u16 => &[],
            3198u16 => &[],
            3199u16 => &[],
            3200u16 => &[],
            3201u16 => &[],
            3202u16 => &[],
            3203u16 => &[],
            3204u16 => &[],
            3205u16 => &[],
            3206u16 => &[],
            3207u16 => &[],
            3208u16 => &[],
            3209u16 => &[],
            3210u16 => &[],
            3211u16 => &[],
            3212u16 => &[],
            3213u16 => &[],
            3214u16 => &[],
            3215u16 => &[],
            3216u16 => &[],
            3217u16 => &[],
            3218u16 => &[],
            3219u16 => &[],
            3220u16 => &[],
            3221u16 => &[],
            3222u16 => &[],
            3223u16 => &[],
            3224u16 => &[],
            3225u16 => &[],
            3226u16 => &[],
            3227u16 => &[],
            3228u16 => &[],
            3229u16 => &[],
            3230u16 => &[],
            3231u16 => &[],
            3232u16 => &[],
            3233u16 => &[],
            3234u16 => &[],
            3235u16 => &[],
            3236u16 => &[],
            3237u16 => &[],
            3238u16 => &[],
            3239u16 => &[],
            3240u16 => &[],
            3241u16 => &[],
            3242u16 => &[],
            3243u16 => &[],
            3244u16 => &[],
            3245u16 => &[],
            3246u16 => &[],
            3247u16 => &[],
            3248u16 => &[],
            3249u16 => &[],
            3250u16 => &[],
            3251u16 => &[],
            3252u16 => &[],
            3253u16 => &[],
            3254u16 => &[],
            3255u16 => &[],
            3256u16 => &[],
            3257u16 => &[],
            3258u16 => &[],
            3259u16 => &[],
            3260u16 => &[],
            3261u16 => &[],
            3262u16 => &[],
            3263u16 => &[],
            3264u16 => &[],
            3265u16 => &[],
            3266u16 => &[],
            3267u16 => &[],
            3268u16 => &[],
            3269u16 => &[],
            3270u16 => &[],
            3271u16 => &[],
            3272u16 => &[],
            3273u16 => &[],
            3274u16 => &[],
            3275u16 => &[],
            3276u16 => &[],
            3277u16 => &[],
            3278u16 => &[],
            3279u16 => &[],
            3280u16 => &[],
            3281u16 => &[],
            3282u16 => &[],
            3283u16 => &[],
            3284u16 => &[],
            3285u16 => &[],
            3286u16 => &[],
            3287u16 => &[],
            3288u16 => &[],
            3289u16 => &[],
            3290u16 => &[],
            3291u16 => &[],
            3292u16 => &[],
            3293u16 => &[],
            3294u16 => &[],
            3295u16 => &[],
            3296u16 => &[],
            3297u16 => &[],
            3298u16 => &[],
            3299u16 => &[],
            3300u16 => &[],
            3301u16 => &[],
            3302u16 => &[],
            3303u16 => &[],
            3304u16 => &[],
            3305u16 => &[],
            3306u16 => &[],
            3307u16 => &[],
            3308u16 => &[],
            3309u16 => &[],
            3310u16 => &[],
            3311u16 => &[],
            3312u16 => &[],
            3313u16 => &[],
            3314u16 => &[],
            3315u16 => &[],
            3316u16 => &[],
            3317u16 => &[],
            3318u16 => &[],
            3319u16 => &[],
            3320u16 => &[],
            3321u16 => &[],
            3322u16 => &[],
            3323u16 => &[],
            3324u16 => &[],
            3325u16 => &[],
            3326u16 => &[],
            3327u16 => &[],
            3328u16 => &[],
            3329u16 => &[],
            3330u16 => &[],
            3331u16 => &[],
            3332u16 => &[],
            3333u16 => &[],
            3334u16 => &[],
            3335u16 => &[],
            3336u16 => &[],
            3337u16 => &[],
            3338u16 => &[],
            3339u16 => &[],
            3340u16 => &[],
            3341u16 => &[],
            3342u16 => &[],
            3343u16 => &[],
            3344u16 => &[],
            3345u16 => &[],
            3346u16 => &[],
            3347u16 => &[],
            3348u16 => &[],
            3349u16 => &[],
            3350u16 => &[],
            3351u16 => &[],
            3352u16 => &[],
            3353u16 => &[],
            3354u16 => &[],
            3355u16 => &[],
            3356u16 => &[],
            3357u16 => &[],
            3358u16 => &[],
            3359u16 => &[],
            3360u16 => &[],
            3361u16 => &[],
            3362u16 => &[],
            3363u16 => &[],
            3364u16 => &[],
            3365u16 => &[],
            3366u16 => &[],
            3367u16 => &[],
            3368u16 => &[],
            3369u16 => &[],
            3370u16 => &[],
            3371u16 => &[],
            3372u16 => &[],
            3373u16 => &[],
            3374u16 => &[],
            3375u16 => &[],
            3376u16 => &[],
            3377u16 => &[],
            3378u16 => &[],
            3379u16 => &[],
            3380u16 => &[],
            3381u16 => &[],
            3382u16 => &[],
            3383u16 => &[],
            3384u16 => &[],
            3385u16 => &[],
            3386u16 => &[],
            3387u16 => &[],
            3388u16 => &[],
            3389u16 => &[],
            3390u16 => &[],
            3391u16 => &[],
            3392u16 => &[],
            3393u16 => &[],
            3394u16 => &[],
            3395u16 => &[],
            3396u16 => &[],
            3397u16 => &[],
            3398u16 => &[],
            3399u16 => &[],
            3400u16 => &[],
            3401u16 => &[],
            3402u16 => &[],
            3403u16 => &[],
            3404u16 => &[],
            3405u16 => &[],
            3406u16 => &[],
            3407u16 => &[],
            3408u16 => &[],
            3409u16 => &[],
            3410u16 => &[],
            3411u16 => &[],
            3412u16 => &[],
            3413u16 => &[],
            3414u16 => &[],
            3415u16 => &[],
            3416u16 => &[],
            3417u16 => &[],
            3418u16 => &[],
            3419u16 => &[],
            3420u16 => &[],
            3421u16 => &[],
            3422u16 => &[],
            3423u16 => &[],
            3424u16 => &[],
            3425u16 => &[],
            3426u16 => &[],
            3427u16 => &[],
            3428u16 => &[],
            3429u16 => &[],
            3430u16 => &[],
            3431u16 => &[],
            3432u16 => &[],
            3433u16 => &[],
            3434u16 => &[],
            3435u16 => &[],
            3436u16 => &[],
            3437u16 => &[],
            3438u16 => &[],
            3439u16 => &[],
            3440u16 => &[],
            3441u16 => &[],
            3442u16 => &[],
            3443u16 => &[],
            3444u16 => &[],
            3445u16 => &[],
            3446u16 => &[],
            3447u16 => &[],
            3448u16 => &[],
            3449u16 => &[],
            3450u16 => &[],
            3451u16 => &[],
            3452u16 => &[],
            3453u16 => &[],
            3454u16 => &[],
            3455u16 => &[],
            3456u16 => &[],
            3457u16 => &[],
            3458u16 => &[],
            3459u16 => &[],
            3460u16 => &[],
            3461u16 => &[],
            3462u16 => &[],
            3463u16 => &[],
            3464u16 => &[],
            3465u16 => &[],
            3466u16 => &[],
            3467u16 => &[],
            3468u16 => &[],
            3469u16 => &[],
            3470u16 => &[],
            3471u16 => &[],
            3472u16 => &[],
            3473u16 => &[],
            3474u16 => &[],
            3475u16 => &[],
            3476u16 => &[],
            3477u16 => &[],
            3478u16 => &[],
            3479u16 => &[],
            3480u16 => &[],
            3481u16 => &[],
            3482u16 => &[],
            3483u16 => &[],
            3484u16 => &[],
            3485u16 => &[],
            3486u16 => &[],
            3487u16 => &[],
            3488u16 => &[],
            3489u16 => &[],
            3490u16 => &[],
            3491u16 => &[],
            3492u16 => &[],
            3493u16 => &[],
            3494u16 => &[],
            3495u16 => &[],
            3496u16 => &[],
            3497u16 => &[],
            3498u16 => &[],
            3499u16 => &[],
            3500u16 => &[],
            3501u16 => &[],
            3502u16 => &[],
            3503u16 => &[],
            3504u16 => &[],
            3505u16 => &[],
            3506u16 => &[],
            3507u16 => &[],
            3508u16 => &[],
            3509u16 => &[],
            3510u16 => &[],
            3511u16 => &[],
            3512u16 => &[],
            3513u16 => &[],
            3514u16 => &[],
            3515u16 => &[],
            3516u16 => &[],
            3517u16 => &[],
            3518u16 => &[],
            3519u16 => &[],
            3520u16 => &[],
            3521u16 => &[],
            3522u16 => &[],
            3523u16 => &[],
            3524u16 => &[],
            3525u16 => &[],
            3526u16 => &[],
            3527u16 => &[],
            3528u16 => &[],
            3529u16 => &[],
            3530u16 => &[],
            3531u16 => &[],
            3532u16 => &[],
            3533u16 => &[],
            3534u16 => &[],
            3535u16 => &[],
            3536u16 => &[],
            3537u16 => &[],
            3538u16 => &[],
            3539u16 => &[],
            3540u16 => &[],
            3541u16 => &[],
            3542u16 => &[],
            3543u16 => &[],
            3544u16 => &[],
            3545u16 => &[],
            3546u16 => &[],
            3547u16 => &[],
            3548u16 => &[],
            3549u16 => &[],
            3550u16 => &[],
            3551u16 => &[],
            3552u16 => &[],
            3553u16 => &[],
            3554u16 => &[],
            3555u16 => &[],
            3556u16 => &[],
            3557u16 => &[],
            3558u16 => &[],
            3559u16 => &[],
            3560u16 => &[],
            3561u16 => &[],
            3562u16 => &[],
            3563u16 => &[],
            3564u16 => &[],
            3565u16 => &[],
            3566u16 => &[],
            3567u16 => &[],
            3568u16 => &[],
            3569u16 => &[],
            3570u16 => &[],
            3571u16 => &[],
            3572u16 => &[],
            3573u16 => &[],
            3574u16 => &[],
            3575u16 => &[],
            3576u16 => &[],
            3577u16 => &[],
            3578u16 => &[],
            3579u16 => &[],
            3580u16 => &[],
            3581u16 => &[],
            3582u16 => &[],
            3583u16 => &[],
            3584u16 => &[],
            3585u16 => &[],
            3586u16 => &[],
            3587u16 => &[],
            3588u16 => &[],
            3589u16 => &[],
            3590u16 => &[],
            3591u16 => &[],
            3592u16 => &[],
            3593u16 => &[],
            3594u16 => &[],
            3595u16 => &[],
            3596u16 => &[],
            3597u16 => &[],
            3598u16 => &[],
            3599u16 => &[],
            3600u16 => &[],
            3601u16 => &[],
            3602u16 => &[],
            3603u16 => &[],
            3604u16 => &[],
            3605u16 => &[],
            3606u16 => &[],
            3607u16 => &[],
            3608u16 => &[],
            3609u16 => &[],
            3610u16 => &[],
            3611u16 => &[],
            3612u16 => &[],
            3613u16 => &[],
            3614u16 => &[],
            3615u16 => &[],
            3616u16 => &[],
            3617u16 => &[],
            3618u16 => &[],
            3619u16 => &[],
            3620u16 => &[],
            3621u16 => &[],
            3622u16 => &[],
            3623u16 => &[],
            3624u16 => &[],
            3625u16 => &[],
            3626u16 => &[],
            3627u16 => &[],
            3628u16 => &[],
            3629u16 => &[],
            3630u16 => &[],
            3631u16 => &[],
            3632u16 => &[],
            3633u16 => &[],
            3634u16 => &[],
            3635u16 => &[],
            3636u16 => &[],
            3637u16 => &[],
            3638u16 => &[],
            3639u16 => &[],
            3640u16 => &[],
            3641u16 => &[],
            3642u16 => &[],
            3643u16 => &[],
            3644u16 => &[],
            3645u16 => &[],
            3646u16 => &[],
            3647u16 => &[],
            3648u16 => &[],
            3649u16 => &[],
            3650u16 => &[],
            3651u16 => &[],
            3652u16 => &[],
            3653u16 => &[],
            3654u16 => &[],
            3655u16 => &[],
            3656u16 => &[],
            3657u16 => &[],
            3658u16 => &[],
            3659u16 => &[],
            3660u16 => &[],
            3661u16 => &[],
            3662u16 => &[],
            3663u16 => &[],
            3664u16 => &[],
            3665u16 => &[],
            3666u16 => &[],
            3667u16 => &[],
            3668u16 => &[],
            3669u16 => &[],
            3670u16 => &[],
            3671u16 => &[],
            3672u16 => &[],
            3673u16 => &[],
            3674u16 => &[],
            3675u16 => &[],
            3676u16 => &[],
            3677u16 => &[],
            3678u16 => &[],
            3679u16 => &[],
            3680u16 => &[],
            3681u16 => &[],
            3682u16 => &[],
            3683u16 => &[],
            3684u16 => &[],
            3685u16 => &[],
            3686u16 => &[],
            3687u16 => &[],
            3688u16 => &[],
            3689u16 => &[],
            3690u16 => &[],
            3691u16 => &[],
            3692u16 => &[],
            3693u16 => &[],
            3694u16 => &[],
            3695u16 => &[],
            3696u16 => &[],
            3697u16 => &[],
            3698u16 => &[],
            3699u16 => &[],
            3700u16 => &[],
            3701u16 => &[],
            3702u16 => &[],
            3703u16 => &[],
            3704u16 => &[],
            3705u16 => &[],
            3706u16 => &[],
            3707u16 => &[],
            3708u16 => &[],
            3709u16 => &[],
            3710u16 => &[],
            3711u16 => &[],
            3712u16 => &[],
            3713u16 => &[],
            3714u16 => &[],
            3715u16 => &[],
            3716u16 => &[],
            3717u16 => &[],
            3718u16 => &[],
            3719u16 => &[],
            3720u16 => &[],
            3721u16 => &[],
            3722u16 => &[],
            3723u16 => &[],
            3724u16 => &[],
            3725u16 => &[],
            3726u16 => &[],
            3727u16 => &[],
            3728u16 => &[],
            3729u16 => &[],
            3730u16 => &[],
            3731u16 => &[],
            3732u16 => &[],
            3733u16 => &[],
            3734u16 => &[],
            3735u16 => &[],
            3736u16 => &[],
            3737u16 => &[],
            3738u16 => &[],
            3739u16 => &[],
            3740u16 => &[],
            3741u16 => &[],
            3742u16 => &[],
            3743u16 => &[],
            3744u16 => &[],
            3745u16 => &[],
            3746u16 => &[],
            3747u16 => &[],
            3748u16 => &[],
            3749u16 => &[],
            3750u16 => &[],
            3751u16 => &[],
            3752u16 => &[],
            3753u16 => &[],
            3754u16 => &[],
            3755u16 => &[],
            3756u16 => &[],
            3757u16 => &[],
            3758u16 => &[],
            3759u16 => &[],
            3760u16 => &[],
            3761u16 => &[],
            3762u16 => &[],
            3763u16 => &[],
            3764u16 => &[],
            3765u16 => &[],
            3766u16 => &[],
            3767u16 => &[],
            3768u16 => &[],
            3769u16 => &[],
            3770u16 => &[],
            3771u16 => &[],
            3772u16 => &[],
            3773u16 => &[],
            3774u16 => &[],
            3775u16 => &[],
            3776u16 => &[],
            3777u16 => &[],
            3778u16 => &[],
            3779u16 => &[],
            3780u16 => &[],
            3781u16 => &[],
            3782u16 => &[],
            3783u16 => &[],
            3784u16 => &[],
            3785u16 => &[],
            3786u16 => &[],
            3787u16 => &[],
            3788u16 => &[],
            3789u16 => &[],
            3790u16 => &[],
            3791u16 => &[],
            3792u16 => &[],
            3793u16 => &[],
            3794u16 => &[],
            3795u16 => &[],
            3796u16 => &[],
            3797u16 => &[],
            3798u16 => &[],
            3799u16 => &[],
            3800u16 => &[],
            3801u16 => &[],
            3802u16 => &[],
            3803u16 => &[],
            3804u16 => &[],
            3805u16 => &[],
            3806u16 => &[],
            3807u16 => &[],
            3808u16 => &[],
            3809u16 => &[],
            3810u16 => &[],
            3811u16 => &[],
            3812u16 => &[],
            3813u16 => &[],
            3814u16 => &[],
            3815u16 => &[],
            3816u16 => &[],
            3817u16 => &[],
            3818u16 => &[],
            3819u16 => &[],
            3820u16 => &[],
            3821u16 => &[],
            3822u16 => &[],
            3823u16 => &[],
            3824u16 => &[],
            3825u16 => &[],
            3826u16 => &[],
            3827u16 => &[],
            3828u16 => &[],
            3829u16 => &[],
            3830u16 => &[],
            3831u16 => &[],
            3832u16 => &[],
            3833u16 => &[],
            3834u16 => &[],
            3835u16 => &[],
            3836u16 => &[],
            3837u16 => &[],
            3838u16 => &[],
            3839u16 => &[],
            3840u16 => &[],
            3841u16 => &[],
            3842u16 => &[],
            3843u16 => &[],
            3844u16 => &[],
            3845u16 => &[],
            3846u16 => &[],
            3847u16 => &[],
            3848u16 => &[],
            3849u16 => &[],
            3850u16 => &[],
            3851u16 => &[],
            3852u16 => &[],
            3853u16 => &[],
            3854u16 => &[],
            3855u16 => &[],
            3856u16 => &[],
            3857u16 => &[],
            3858u16 => &[],
            3859u16 => &[],
            3860u16 => &[],
            3861u16 => &[],
            3862u16 => &[],
            3863u16 => &[],
            3864u16 => &[],
            3865u16 => &[],
            3866u16 => &[],
            3867u16 => &[],
            3868u16 => &[],
            3869u16 => &[],
            3870u16 => &[],
            3871u16 => &[],
            3872u16 => &[],
            3873u16 => &[],
            3874u16 => &[],
            3875u16 => &[],
            3876u16 => &[],
            3877u16 => &[],
            3878u16 => &[],
            3879u16 => &[],
            3880u16 => &[],
            3881u16 => &[],
            3882u16 => &[],
            3883u16 => &[],
            3884u16 => &[],
            3885u16 => &[],
            3886u16 => &[],
            3887u16 => &[],
            3888u16 => &[],
            3889u16 => &[],
            3890u16 => &[],
            3891u16 => &[],
            3892u16 => &[],
            3893u16 => &[],
            3894u16 => &[],
            3895u16 => &[],
            3896u16 => &[],
            3897u16 => &[],
            3898u16 => &[],
            3899u16 => &[],
            3900u16 => &[],
            3901u16 => &[],
            3902u16 => &[],
            3903u16 => &[],
            3904u16 => &[],
            3905u16 => &[],
            3906u16 => &[],
            3907u16 => &[],
            3908u16 => &[],
            3909u16 => &[],
            3910u16 => &[],
            3911u16 => &[],
            3912u16 => &[],
            3913u16 => &[],
            3914u16 => &[],
            3915u16 => &[],
            3916u16 => &[],
            3917u16 => &[],
            3918u16 => &[],
            3919u16 => &[],
            3920u16 => &[],
            3921u16 => &[],
            3922u16 => &[],
            3923u16 => &[],
            3924u16 => &[],
            3925u16 => &[],
            3926u16 => &[],
            3927u16 => &[],
            3928u16 => &[],
            3929u16 => &[],
            3930u16 => &[],
            3931u16 => &[],
            3932u16 => &[],
            3933u16 => &[],
            3934u16 => &[],
            3935u16 => &[],
            3936u16 => &[],
            3937u16 => &[],
            3938u16 => &[],
            3939u16 => &[],
            3940u16 => &[],
            3941u16 => &[],
            3942u16 => &[],
            3943u16 => &[],
            3944u16 => &[],
            3945u16 => &[],
            3946u16 => &[],
            3947u16 => &[],
            3948u16 => &[],
            3949u16 => &[],
            3950u16 => &[],
            3951u16 => &[],
            3952u16 => &[],
            3953u16 => &[],
            3954u16 => &[],
            3955u16 => &[],
            3956u16 => &[],
            3957u16 => &[],
            3958u16 => &[],
            3959u16 => &[],
            3960u16 => &[],
            3961u16 => &[],
            3962u16 => &[],
            3963u16 => &[],
            3964u16 => &[],
            3965u16 => &[],
            3966u16 => &[],
            3967u16 => &[],
            3968u16 => &[],
            3969u16 => &[],
            3970u16 => &[],
            3971u16 => &[],
            3972u16 => &[],
            3973u16 => &[],
            3974u16 => &[],
            3975u16 => &[],
            3976u16 => &[],
            3977u16 => &[],
            3978u16 => &[],
            3979u16 => &[],
            3980u16 => &[],
            3981u16 => &[],
            3982u16 => &[],
            3983u16 => &[],
            3984u16 => &[],
            3985u16 => &[],
            3986u16 => &[],
            3987u16 => &[],
            3988u16 => &[],
            3989u16 => &[],
            3990u16 => &[],
            3991u16 => &[],
            3992u16 => &[],
            3993u16 => &[],
            3994u16 => &[],
            3995u16 => &[],
            3996u16 => &[],
            3997u16 => &[],
            3998u16 => &[],
            3999u16 => &[],
            4000u16 => &[],
            4001u16 => &[],
            4002u16 => &[],
            4003u16 => &[],
            4004u16 => &[],
            4005u16 => &[],
            4006u16 => &[],
            4007u16 => &[],
            4008u16 => &[],
            4009u16 => &[],
            4010u16 => &[],
            4011u16 => &[],
            4012u16 => &[],
            4013u16 => &[],
            4014u16 => &[],
            4015u16 => &[],
            4016u16 => &[],
            4017u16 => &[],
            4018u16 => &[],
            4019u16 => &[],
            4020u16 => &[],
            4021u16 => &[],
            4022u16 => &[],
            4023u16 => &[],
            4024u16 => &[],
            4025u16 => &[],
            4026u16 => &[],
            4027u16 => &[],
            4028u16 => &[],
            4029u16 => &[],
            4030u16 => &[],
            4031u16 => &[],
            4032u16 => &[],
            4033u16 => &[],
            4034u16 => &[],
            4035u16 => &[],
            4036u16 => &[],
            4037u16 => &[],
            4038u16 => &[],
            4039u16 => &[],
            4040u16 => &[],
            4041u16 => &[],
            4042u16 => &[],
            4043u16 => &[],
            4044u16 => &[],
            4045u16 => &[],
            4046u16 => &[],
            4047u16 => &[],
            4048u16 => &[],
            4049u16 => &[],
            4050u16 => &[],
            4051u16 => &[],
            4052u16 => &[],
            4053u16 => &[],
            4054u16 => &[],
            4055u16 => &[],
            4056u16 => &[],
            4057u16 => &[],
            4058u16 => &[],
            4059u16 => &[],
            4060u16 => &[],
            4061u16 => &[],
            4062u16 => &[],
            4063u16 => &[],
            4064u16 => &[],
            4065u16 => &[],
            4066u16 => &[],
            4067u16 => &[],
            4068u16 => &[],
            4069u16 => &[],
            4070u16 => &[],
            4071u16 => &[],
            4072u16 => &[],
            4073u16 => &[],
            4074u16 => &[],
            4075u16 => &[],
            4076u16 => &[],
            4077u16 => &[],
            4078u16 => &[],
            4079u16 => &[],
            4080u16 => &[],
            4081u16 => &[],
            4082u16 => &[],
            4083u16 => &[],
            4084u16 => &[],
            4085u16 => &[],
            4086u16 => &[],
            4087u16 => &[],
            4088u16 => &[],
            4089u16 => &[],
            4090u16 => &[],
            4091u16 => &[],
            4092u16 => &[],
            4093u16 => &[],
            4094u16 => &[],
            4095u16 => &[],
            4096u16 => &[],
            4097u16 => &[],
            4098u16 => &[],
            4099u16 => &[],
            4100u16 => &[],
            4101u16 => &[],
            4102u16 => &[],
            4103u16 => &[],
            4104u16 => &[],
            4105u16 => &[],
            4106u16 => &[],
            4107u16 => &[],
            4108u16 => &[],
            4109u16 => &[],
            4110u16 => &[],
            4111u16 => &[],
            4112u16 => &[],
            4113u16 => &[],
            4114u16 => &[],
            4115u16 => &[],
            4116u16 => &[],
            4117u16 => &[],
            4118u16 => &[],
            4119u16 => &[],
            4120u16 => &[],
            4121u16 => &[],
            4122u16 => &[],
            4123u16 => &[],
            4124u16 => &[],
            4125u16 => &[],
            4126u16 => &[],
            4127u16 => &[],
            4128u16 => &[],
            4129u16 => &[],
            4130u16 => &[],
            4131u16 => &[],
            4132u16 => &[],
            4133u16 => &[],
            4134u16 => &[],
            4135u16 => &[],
            4136u16 => &[],
            4137u16 => &[],
            4138u16 => &[],
            4139u16 => &[],
            4140u16 => &[],
            4141u16 => &[],
            4142u16 => &[],
            4143u16 => &[],
            4144u16 => &[],
            4145u16 => &[],
            4146u16 => &[],
            4147u16 => &[],
            4148u16 => &[],
            4149u16 => &[],
            4150u16 => &[],
            4151u16 => &[],
            4152u16 => &[],
            4153u16 => &[],
            4154u16 => &[],
            4155u16 => &[],
            4156u16 => &[],
            4157u16 => &[],
            4158u16 => &[],
            4159u16 => &[],
            4160u16 => &[],
            4161u16 => &[],
            4162u16 => &[],
            4163u16 => &[],
            4164u16 => &[],
            4165u16 => &[],
            4166u16 => &[],
            4167u16 => &[],
            4168u16 => &[],
            4169u16 => &[],
            4170u16 => &[],
            4171u16 => &[],
            4172u16 => &[],
            4173u16 => &[],
            4174u16 => &[],
            4175u16 => &[],
            4176u16 => &[],
            4177u16 => &[],
            4178u16 => &[],
            4179u16 => &[],
            4180u16 => &[],
            4181u16 => &[],
            4182u16 => &[],
            4183u16 => &[],
            4184u16 => &[],
            4185u16 => &[],
            4186u16 => &[],
            4187u16 => &[],
            4188u16 => &[],
            4189u16 => &[],
            4190u16 => &[],
            4191u16 => &[],
            4192u16 => &[],
            4193u16 => &[],
            4194u16 => &[],
            4195u16 => &[],
            4196u16 => &[],
            4197u16 => &[],
            4198u16 => &[],
            4199u16 => &[],
            4200u16 => &[],
            4201u16 => &[],
            4202u16 => &[],
            4203u16 => &[],
            4204u16 => &[],
            4205u16 => &[],
            4206u16 => &[],
            4207u16 => &[],
            4208u16 => &[],
            4209u16 => &[],
            4210u16 => &[],
            4211u16 => &[],
            4212u16 => &[],
            4213u16 => &[],
            4214u16 => &[],
            4215u16 => &[],
            4216u16 => &[],
            4217u16 => &[],
            4218u16 => &[],
            4219u16 => &[],
            4220u16 => &[],
            4221u16 => &[],
            4222u16 => &[],
            4223u16 => &[],
            4224u16 => &[],
            4225u16 => &[],
            4226u16 => &[],
            4227u16 => &[],
            4228u16 => &[],
            4229u16 => &[],
            4230u16 => &[],
            4231u16 => &[],
            4232u16 => &[],
            4233u16 => &[],
            4234u16 => &[],
            4235u16 => &[],
            4236u16 => &[],
            4237u16 => &[],
            4238u16 => &[],
            4239u16 => &[],
            4240u16 => &[],
            4241u16 => &[],
            4242u16 => &[],
            4243u16 => &[],
            4244u16 => &[],
            4245u16 => &[],
            4246u16 => &[],
            4247u16 => &[],
            4248u16 => &[],
            4249u16 => &[],
            4250u16 => &[],
            4251u16 => &[],
            4252u16 => &[],
            4253u16 => &[],
            4254u16 => &[],
            4255u16 => &[],
            4256u16 => &[],
            4257u16 => &[],
            4258u16 => &[],
            4259u16 => &[],
            4260u16 => &[],
            4261u16 => &[],
            4262u16 => &[],
            4263u16 => &[],
            4264u16 => &[],
            4265u16 => &[],
            4266u16 => &[],
            4267u16 => &[],
            4268u16 => &[],
            4269u16 => &[],
            4270u16 => &[],
            4271u16 => &[],
            4272u16 => &[],
            4273u16 => &[],
            4274u16 => &[0u16],
            4275u16 => &[0u16],
            4276u16 => &[0u16],
            4277u16 => &[0u16],
            4278u16 => &[],
            4279u16 => &[],
            4280u16 => &[],
            4281u16 => &[],
            4282u16 => &[],
            4283u16 => &[],
            4284u16 => &[],
            4285u16 => &[],
            4286u16 => &[63u16],
            4287u16 => &[63u16],
            4288u16 => &[63u16],
            4289u16 => &[63u16],
            4290u16 => &[63u16],
            4291u16 => &[63u16],
            4292u16 => &[63u16],
            4293u16 => &[63u16],
            4294u16 => &[0u16],
            4295u16 => &[0u16],
            4296u16 => &[0u16],
            4297u16 => &[0u16],
            4298u16 => &[0u16],
            4299u16 => &[0u16],
            4300u16 => &[0u16],
            4301u16 => &[0u16],
            4302u16 => &[],
            4303u16 => &[],
            4304u16 => &[],
            4305u16 => &[],
            4306u16 => &[],
            4307u16 => &[],
            4308u16 => &[],
            4309u16 => &[],
            4310u16 => &[],
            4311u16 => &[],
            4312u16 => &[],
            4313u16 => &[],
            4314u16 => &[],
            4315u16 => &[],
            4316u16 => &[],
            4317u16 => &[],
            4318u16 => &[],
            4319u16 => &[],
            4320u16 => &[],
            4321u16 => &[],
            4322u16 => &[],
            4323u16 => &[],
            4324u16 => &[],
            4325u16 => &[],
            4326u16 => &[],
            4327u16 => &[],
            4328u16 => &[],
            4329u16 => &[],
            4330u16 => &[],
            4331u16 => &[],
            4332u16 => &[],
            4333u16 => &[],
            4334u16 => &[],
            4335u16 => &[],
            4336u16 => &[],
            4337u16 => &[],
            4338u16 => &[],
            4339u16 => &[],
            4340u16 => &[],
            4341u16 => &[],
            4342u16 => &[],
            4343u16 => &[],
            4344u16 => &[],
            4345u16 => &[],
            4346u16 => &[],
            4347u16 => &[],
            4348u16 => &[],
            4349u16 => &[],
            4350u16 => &[],
            4351u16 => &[],
            4352u16 => &[],
            4353u16 => &[],
            4354u16 => &[],
            4355u16 => &[],
            4356u16 => &[],
            4357u16 => &[],
            4358u16 => &[],
            4359u16 => &[],
            4360u16 => &[],
            4361u16 => &[],
            4362u16 => &[],
            4363u16 => &[],
            4364u16 => &[],
            4365u16 => &[],
            4366u16 => &[],
            4367u16 => &[],
            4368u16 => &[],
            4369u16 => &[],
            4370u16 => &[],
            4371u16 => &[],
            4372u16 => &[],
            4373u16 => &[],
            4374u16 => &[],
            4375u16 => &[],
            4376u16 => &[],
            4377u16 => &[],
            4378u16 => &[],
            4379u16 => &[],
            4380u16 => &[],
            4381u16 => &[],
            4382u16 => &[],
            4383u16 => &[],
            4384u16 => &[],
            4385u16 => &[],
            4386u16 => &[],
            4387u16 => &[],
            4388u16 => &[],
            4389u16 => &[],
            4390u16 => &[],
            4391u16 => &[],
            4392u16 => &[],
            4393u16 => &[],
            4394u16 => &[],
            4395u16 => &[],
            4396u16 => &[],
            4397u16 => &[],
            4398u16 => &[],
            4399u16 => &[],
            4400u16 => &[],
            4401u16 => &[],
            4402u16 => &[],
            4403u16 => &[],
            4404u16 => &[],
            4405u16 => &[],
            4406u16 => &[],
            4407u16 => &[],
            4408u16 => &[],
            4409u16 => &[],
            4410u16 => &[],
            4411u16 => &[],
            4412u16 => &[],
            4413u16 => &[],
            4414u16 => &[],
            4415u16 => &[],
            4416u16 => &[],
            4417u16 => &[],
            4418u16 => &[],
            4419u16 => &[],
            4420u16 => &[],
            4421u16 => &[],
            4422u16 => &[],
            4423u16 => &[],
            4424u16 => &[],
            4425u16 => &[],
            4426u16 => &[],
            4427u16 => &[],
            4428u16 => &[],
            4429u16 => &[],
            4430u16 => &[],
            4431u16 => &[],
            4432u16 => &[],
            4433u16 => &[],
            4434u16 => &[],
            4435u16 => &[],
            4436u16 => &[],
            4437u16 => &[],
            4438u16 => &[],
            4439u16 => &[],
            4440u16 => &[],
            4441u16 => &[],
            4442u16 => &[],
            4443u16 => &[],
            4444u16 => &[],
            4445u16 => &[],
            4446u16 => &[],
            4447u16 => &[],
            4448u16 => &[],
            4449u16 => &[],
            4450u16 => &[],
            4451u16 => &[],
            4452u16 => &[],
            4453u16 => &[],
            4454u16 => &[],
            4455u16 => &[],
            4456u16 => &[],
            4457u16 => &[],
            4458u16 => &[],
            4459u16 => &[],
            4460u16 => &[],
            4461u16 => &[],
            4462u16 => &[],
            4463u16 => &[],
            4464u16 => &[],
            4465u16 => &[],
            4466u16 => &[],
            4467u16 => &[],
            4468u16 => &[],
            4469u16 => &[],
            4470u16 => &[],
            4471u16 => &[],
            4472u16 => &[],
            4473u16 => &[],
            4474u16 => &[],
            4475u16 => &[],
            4476u16 => &[],
            4477u16 => &[],
            4478u16 => &[],
            4479u16 => &[],
            4480u16 => &[],
            4481u16 => &[],
            4482u16 => &[],
            4483u16 => &[],
            4484u16 => &[],
            4485u16 => &[],
            4486u16 => &[],
            4487u16 => &[],
            4488u16 => &[],
            4489u16 => &[],
            4490u16 => &[],
            4491u16 => &[],
            4492u16 => &[],
            4493u16 => &[],
            4494u16 => &[],
            4495u16 => &[],
            4496u16 => &[],
            4497u16 => &[],
            4498u16 => &[],
            4499u16 => &[],
            4500u16 => &[],
            4501u16 => &[],
            4502u16 => &[],
            4503u16 => &[],
            4504u16 => &[],
            4505u16 => &[],
            4506u16 => &[],
            4507u16 => &[],
            4508u16 => &[],
            4509u16 => &[],
            4510u16 => &[],
            4511u16 => &[],
            4512u16 => &[],
            4513u16 => &[],
            4514u16 => &[],
            4515u16 => &[],
            4516u16 => &[],
            4517u16 => &[],
            4518u16 => &[],
            4519u16 => &[],
            4520u16 => &[],
            4521u16 => &[],
            4522u16 => &[],
            4523u16 => &[],
            4524u16 => &[],
            4525u16 => &[],
            4526u16 => &[],
            4527u16 => &[],
            4528u16 => &[],
            4529u16 => &[],
            4530u16 => &[],
            4531u16 => &[],
            4532u16 => &[],
            4533u16 => &[],
            4534u16 => &[],
            4535u16 => &[],
            4536u16 => &[],
            4537u16 => &[],
            4538u16 => &[],
            4539u16 => &[],
            4540u16 => &[],
            4541u16 => &[],
            4542u16 => &[],
            4543u16 => &[],
            4544u16 => &[],
            4545u16 => &[],
            4546u16 => &[],
            4547u16 => &[],
            4548u16 => &[],
            4549u16 => &[],
            4550u16 => &[],
            4551u16 => &[],
            4552u16 => &[],
            4553u16 => &[],
            4554u16 => &[],
            4555u16 => &[],
            4556u16 => &[],
            4557u16 => &[],
            4558u16 => &[],
            4559u16 => &[],
            4560u16 => &[],
            4561u16 => &[],
            4562u16 => &[],
            4563u16 => &[],
            4564u16 => &[],
            4565u16 => &[],
            4566u16 => &[],
            4567u16 => &[],
            4568u16 => &[],
            4569u16 => &[],
            4570u16 => &[],
            4571u16 => &[],
            4572u16 => &[],
            4573u16 => &[],
            4574u16 => &[],
            4575u16 => &[],
            4576u16 => &[],
            4577u16 => &[],
            4578u16 => &[],
            4579u16 => &[],
            4580u16 => &[],
            4581u16 => &[],
            4582u16 => &[],
            4583u16 => &[],
            4584u16 => &[],
            4585u16 => &[],
            4586u16 => &[],
            4587u16 => &[],
            4588u16 => &[],
            4589u16 => &[],
            4590u16 => &[64u16],
            4591u16 => &[64u16],
            4592u16 => &[65u16],
            4593u16 => &[65u16],
            4594u16 => &[66u16],
            4595u16 => &[66u16],
            4596u16 => &[65u16],
            4597u16 => &[65u16],
            4598u16 => &[64u16],
            4599u16 => &[64u16],
            4600u16 => &[65u16],
            4601u16 => &[65u16],
            4602u16 => &[66u16],
            4603u16 => &[66u16],
            4604u16 => &[65u16],
            4605u16 => &[65u16],
            4606u16 => &[66u16],
            4607u16 => &[66u16],
            4608u16 => &[67u16],
            4609u16 => &[67u16],
            4610u16 => &[64u16],
            4611u16 => &[64u16],
            4612u16 => &[67u16],
            4613u16 => &[67u16],
            4614u16 => &[66u16],
            4615u16 => &[66u16],
            4616u16 => &[67u16],
            4617u16 => &[67u16],
            4618u16 => &[64u16],
            4619u16 => &[64u16],
            4620u16 => &[67u16],
            4621u16 => &[67u16],
            4622u16 => &[65u16],
            4623u16 => &[65u16],
            4624u16 => &[66u16],
            4625u16 => &[66u16],
            4626u16 => &[67u16],
            4627u16 => &[67u16],
            4628u16 => &[66u16],
            4629u16 => &[66u16],
            4630u16 => &[65u16],
            4631u16 => &[65u16],
            4632u16 => &[66u16],
            4633u16 => &[66u16],
            4634u16 => &[67u16],
            4635u16 => &[67u16],
            4636u16 => &[66u16],
            4637u16 => &[66u16],
            4638u16 => &[67u16],
            4639u16 => &[67u16],
            4640u16 => &[64u16],
            4641u16 => &[64u16],
            4642u16 => &[65u16],
            4643u16 => &[65u16],
            4644u16 => &[64u16],
            4645u16 => &[64u16],
            4646u16 => &[67u16],
            4647u16 => &[67u16],
            4648u16 => &[64u16],
            4649u16 => &[64u16],
            4650u16 => &[65u16],
            4651u16 => &[65u16],
            4652u16 => &[64u16],
            4653u16 => &[64u16],
            4654u16 => &[65u16],
            4655u16 => &[65u16],
            4656u16 => &[67u16],
            4657u16 => &[67u16],
            4658u16 => &[66u16],
            4659u16 => &[66u16],
            4660u16 => &[64u16],
            4661u16 => &[64u16],
            4662u16 => &[],
            4663u16 => &[],
            4664u16 => &[],
            4665u16 => &[],
            4666u16 => &[],
            4667u16 => &[],
            4668u16 => &[],
            4669u16 => &[],
            4670u16 => &[],
            4671u16 => &[],
            4672u16 => &[],
            4673u16 => &[],
            4674u16 => &[],
            4675u16 => &[],
            4676u16 => &[],
            4677u16 => &[],
            4678u16 => &[],
            4679u16 => &[],
            4680u16 => &[],
            4681u16 => &[],
            4682u16 => &[41u16, 42u16],
            4683u16 => &[41u16, 42u16],
            4684u16 => &[43u16, 44u16, 45u16],
            4685u16 => &[43u16, 44u16, 45u16],
            4686u16 => &[41u16, 46u16, 47u16],
            4687u16 => &[41u16, 46u16, 47u16],
            4688u16 => &[48u16, 42u16, 49u16],
            4689u16 => &[48u16, 42u16, 49u16],
            4690u16 => &[44u16, 50u16, 45u16],
            4691u16 => &[44u16, 50u16, 45u16],
            4692u16 => &[51u16, 52u16],
            4693u16 => &[51u16, 52u16],
            4694u16 => &[51u16, 50u16, 49u16],
            4695u16 => &[51u16, 50u16, 49u16],
            4696u16 => &[51u16, 52u16, 45u16],
            4697u16 => &[51u16, 52u16, 45u16],
            4698u16 => &[51u16, 53u16],
            4699u16 => &[51u16, 53u16],
            4700u16 => &[51u16, 49u16],
            4701u16 => &[51u16, 49u16],
            4702u16 => &[54u16, 52u16],
            4703u16 => &[54u16, 52u16],
            4704u16 => &[54u16, 44u16, 53u16],
            4705u16 => &[54u16, 44u16, 53u16],
            4706u16 => &[43u16, 46u16, 49u16],
            4707u16 => &[43u16, 46u16, 49u16],
            4708u16 => &[46u16, 50u16, 49u16],
            4709u16 => &[46u16, 50u16, 49u16],
            4710u16 => &[55u16, 52u16, 45u16],
            4711u16 => &[55u16, 52u16, 45u16],
            4712u16 => &[51u16, 42u16],
            4713u16 => &[51u16, 42u16],
            4714u16 => &[51u16, 42u16, 49u16],
            4715u16 => &[51u16, 42u16, 49u16],
            4716u16 => &[51u16, 50u16, 45u16],
            4717u16 => &[51u16, 50u16, 45u16],
            4718u16 => &[51u16, 45u16],
            4719u16 => &[51u16, 45u16],
            4720u16 => &[51u16, 47u16],
            4721u16 => &[51u16, 47u16],
            4722u16 => &[43u16, 56u16],
            4723u16 => &[43u16, 56u16],
            4724u16 => &[43u16, 46u16, 49u16],
            4725u16 => &[43u16, 46u16, 49u16],
            4726u16 => &[43u16, 44u16, 45u16],
            4727u16 => &[43u16, 44u16, 45u16],
            4728u16 => &[55u16, 52u16, 45u16],
            4729u16 => &[55u16, 52u16, 45u16],
            4730u16 => &[48u16, 42u16, 49u16],
            4731u16 => &[48u16, 42u16, 49u16],
            4732u16 => &[51u16, 50u16],
            4733u16 => &[51u16, 50u16],
            4734u16 => &[51u16, 50u16, 45u16],
            4735u16 => &[51u16, 50u16, 45u16],
            4736u16 => &[51u16, 50u16, 49u16],
            4737u16 => &[51u16, 50u16, 49u16],
            4738u16 => &[51u16, 47u16],
            4739u16 => &[51u16, 47u16],
            4740u16 => &[51u16, 53u16],
            4741u16 => &[51u16, 53u16],
            4742u16 => &[57u16, 50u16],
            4743u16 => &[57u16, 50u16],
            4744u16 => &[41u16, 46u16, 47u16],
            4745u16 => &[41u16, 46u16, 47u16],
            4746u16 => &[54u16, 44u16, 53u16],
            4747u16 => &[54u16, 44u16, 53u16],
            4748u16 => &[44u16, 50u16, 45u16],
            4749u16 => &[44u16, 50u16, 45u16],
            4750u16 => &[46u16, 50u16, 49u16],
            4751u16 => &[46u16, 50u16, 49u16],
            4752u16 => &[51u16, 56u16],
            4753u16 => &[51u16, 56u16],
            4754u16 => &[51u16, 52u16, 45u16],
            4755u16 => &[51u16, 52u16, 45u16],
            4756u16 => &[51u16, 42u16, 49u16],
            4757u16 => &[51u16, 42u16, 49u16],
            4758u16 => &[51u16, 49u16],
            4759u16 => &[51u16, 49u16],
            4760u16 => &[51u16, 45u16],
            4761u16 => &[51u16, 45u16],
            4762u16 => &[],
            4763u16 => &[],
            4764u16 => &[],
            4765u16 => &[],
            4766u16 => &[],
            4767u16 => &[],
            4768u16 => &[],
            4769u16 => &[],
            4770u16 => &[],
            4771u16 => &[],
            4772u16 => &[],
            4773u16 => &[],
            4774u16 => &[],
            4775u16 => &[],
            4776u16 => &[],
            4777u16 => &[],
            4778u16 => &[],
            4779u16 => &[],
            4780u16 => &[],
            4781u16 => &[],
            4782u16 => &[],
            4783u16 => &[],
            4784u16 => &[],
            4785u16 => &[],
            4786u16 => &[],
            4787u16 => &[],
            4788u16 => &[],
            4789u16 => &[],
            4790u16 => &[],
            4791u16 => &[],
            4792u16 => &[],
            4793u16 => &[],
            4794u16 => &[],
            4795u16 => &[],
            4796u16 => &[],
            4797u16 => &[],
            4798u16 => &[],
            4799u16 => &[],
            4800u16 => &[],
            4801u16 => &[],
            4802u16 => &[],
            4803u16 => &[],
            4804u16 => &[],
            4805u16 => &[],
            4806u16 => &[],
            4807u16 => &[],
            4808u16 => &[],
            4809u16 => &[],
            4810u16 => &[],
            4811u16 => &[],
            4812u16 => &[],
            4813u16 => &[],
            4814u16 => &[],
            4815u16 => &[],
            4816u16 => &[],
            4817u16 => &[],
            4818u16 => &[],
            4819u16 => &[],
            4820u16 => &[],
            4821u16 => &[],
            4822u16 => &[],
            4823u16 => &[],
            4824u16 => &[],
            4825u16 => &[],
            4826u16 => &[],
            4827u16 => &[],
            4828u16 => &[],
            4829u16 => &[],
            4830u16 => &[],
            4831u16 => &[],
            4832u16 => &[],
            4833u16 => &[],
            4834u16 => &[],
            4835u16 => &[],
            4836u16 => &[],
            4837u16 => &[],
            4838u16 => &[],
            4839u16 => &[],
            4840u16 => &[],
            4841u16 => &[],
            4842u16 => &[],
            4843u16 => &[],
            4844u16 => &[],
            4845u16 => &[],
            4846u16 => &[],
            4847u16 => &[],
            4848u16 => &[],
            4849u16 => &[],
            4850u16 => &[],
            4851u16 => &[],
            4852u16 => &[],
            4853u16 => &[],
            4854u16 => &[],
            4855u16 => &[],
            4856u16 => &[],
            4857u16 => &[],
            4858u16 => &[],
            4859u16 => &[],
            4860u16 => &[],
            4861u16 => &[],
            4862u16 => &[],
            4863u16 => &[],
            4864u16 => &[],
            4865u16 => &[],
            4866u16 => &[],
            4867u16 => &[],
            4868u16 => &[],
            4869u16 => &[],
            4870u16 => &[],
            4871u16 => &[],
            4872u16 => &[],
            4873u16 => &[],
            4874u16 => &[],
            4875u16 => &[],
            4876u16 => &[],
            4877u16 => &[],
            4878u16 => &[],
            4879u16 => &[],
            4880u16 => &[],
            4881u16 => &[],
            4882u16 => &[],
            4883u16 => &[],
            4884u16 => &[],
            4885u16 => &[],
            4886u16 => &[],
            4887u16 => &[],
            4888u16 => &[],
            4889u16 => &[],
            4890u16 => &[],
            4891u16 => &[],
            4892u16 => &[],
            4893u16 => &[],
            4894u16 => &[],
            4895u16 => &[],
            4896u16 => &[],
            4897u16 => &[],
            4898u16 => &[],
            4899u16 => &[],
            4900u16 => &[],
            4901u16 => &[],
            4902u16 => &[],
            4903u16 => &[],
            4904u16 => &[],
            4905u16 => &[],
            4906u16 => &[],
            4907u16 => &[],
            4908u16 => &[],
            4909u16 => &[],
            4910u16 => &[],
            4911u16 => &[],
            4912u16 => &[],
            4913u16 => &[],
            4914u16 => &[],
            4915u16 => &[],
            4916u16 => &[],
            4917u16 => &[],
            4918u16 => &[],
            4919u16 => &[],
            4920u16 => &[],
            4921u16 => &[],
            4922u16 => &[],
            4923u16 => &[],
            4924u16 => &[],
            4925u16 => &[],
            4926u16 => &[],
            4927u16 => &[],
            4928u16 => &[],
            4929u16 => &[],
            4930u16 => &[],
            4931u16 => &[],
            4932u16 => &[],
            4933u16 => &[],
            4934u16 => &[],
            4935u16 => &[],
            4936u16 => &[],
            4937u16 => &[],
            4938u16 => &[],
            4939u16 => &[],
            4940u16 => &[],
            4941u16 => &[],
            4942u16 => &[],
            4943u16 => &[],
            4944u16 => &[],
            4945u16 => &[],
            4946u16 => &[],
            4947u16 => &[],
            4948u16 => &[],
            4949u16 => &[],
            4950u16 => &[],
            4951u16 => &[],
            4952u16 => &[],
            4953u16 => &[],
            4954u16 => &[],
            4955u16 => &[],
            4956u16 => &[],
            4957u16 => &[],
            4958u16 => &[],
            4959u16 => &[],
            4960u16 => &[],
            4961u16 => &[],
            4962u16 => &[],
            4963u16 => &[],
            4964u16 => &[],
            4965u16 => &[],
            4966u16 => &[],
            4967u16 => &[],
            4968u16 => &[],
            4969u16 => &[],
            4970u16 => &[],
            4971u16 => &[],
            4972u16 => &[],
            4973u16 => &[],
            4974u16 => &[],
            4975u16 => &[],
            4976u16 => &[],
            4977u16 => &[],
            4978u16 => &[],
            4979u16 => &[],
            4980u16 => &[],
            4981u16 => &[],
            4982u16 => &[],
            4983u16 => &[],
            4984u16 => &[],
            4985u16 => &[],
            4986u16 => &[],
            4987u16 => &[],
            4988u16 => &[],
            4989u16 => &[],
            4990u16 => &[],
            4991u16 => &[],
            4992u16 => &[],
            4993u16 => &[],
            4994u16 => &[],
            4995u16 => &[],
            4996u16 => &[],
            4997u16 => &[],
            4998u16 => &[],
            4999u16 => &[],
            5000u16 => &[],
            5001u16 => &[],
            5002u16 => &[],
            5003u16 => &[],
            5004u16 => &[],
            5005u16 => &[],
            5006u16 => &[],
            5007u16 => &[],
            5008u16 => &[],
            5009u16 => &[],
            5010u16 => &[],
            5011u16 => &[],
            5012u16 => &[],
            5013u16 => &[],
            5014u16 => &[],
            5015u16 => &[],
            5016u16 => &[],
            5017u16 => &[],
            5018u16 => &[],
            5019u16 => &[],
            5020u16 => &[],
            5021u16 => &[],
            5022u16 => &[],
            5023u16 => &[],
            5024u16 => &[],
            5025u16 => &[],
            5026u16 => &[],
            5027u16 => &[],
            5028u16 => &[],
            5029u16 => &[],
            5030u16 => &[],
            5031u16 => &[],
            5032u16 => &[],
            5033u16 => &[],
            5034u16 => &[],
            5035u16 => &[],
            5036u16 => &[],
            5037u16 => &[],
            5038u16 => &[],
            5039u16 => &[],
            5040u16 => &[],
            5041u16 => &[],
            5042u16 => &[],
            5043u16 => &[],
            5044u16 => &[],
            5045u16 => &[],
            5046u16 => &[],
            5047u16 => &[],
            5048u16 => &[],
            5049u16 => &[],
            5050u16 => &[],
            5051u16 => &[],
            5052u16 => &[],
            5053u16 => &[],
            5054u16 => &[],
            5055u16 => &[],
            5056u16 => &[],
            5057u16 => &[],
            5058u16 => &[],
            5059u16 => &[],
            5060u16 => &[],
            5061u16 => &[],
            5062u16 => &[],
            5063u16 => &[],
            5064u16 => &[],
            5065u16 => &[],
            5066u16 => &[],
            5067u16 => &[],
            5068u16 => &[],
            5069u16 => &[],
            5070u16 => &[],
            5071u16 => &[],
            5072u16 => &[],
            5073u16 => &[],
            5074u16 => &[],
            5075u16 => &[],
            5076u16 => &[],
            5077u16 => &[],
            5078u16 => &[],
            5079u16 => &[],
            5080u16 => &[],
            5081u16 => &[],
            5082u16 => &[],
            5083u16 => &[],
            5084u16 => &[],
            5085u16 => &[],
            5086u16 => &[],
            5087u16 => &[],
            5088u16 => &[],
            5089u16 => &[],
            5090u16 => &[],
            5091u16 => &[],
            5092u16 => &[],
            5093u16 => &[],
            5094u16 => &[],
            5095u16 => &[],
            5096u16 => &[],
            5097u16 => &[],
            5098u16 => &[],
            5099u16 => &[],
            5100u16 => &[],
            5101u16 => &[],
            5102u16 => &[],
            5103u16 => &[],
            5104u16 => &[],
            5105u16 => &[],
            5106u16 => &[],
            5107u16 => &[],
            5108u16 => &[],
            5109u16 => &[],
            5110u16 => &[],
            5111u16 => &[],
            5112u16 => &[],
            5113u16 => &[],
            5114u16 => &[],
            5115u16 => &[],
            5116u16 => &[],
            5117u16 => &[],
            5118u16 => &[],
            5119u16 => &[],
            5120u16 => &[],
            5121u16 => &[],
            5122u16 => &[],
            5123u16 => &[],
            5124u16 => &[],
            5125u16 => &[],
            5126u16 => &[],
            5127u16 => &[],
            5128u16 => &[],
            5129u16 => &[],
            5130u16 => &[],
            5131u16 => &[],
            5132u16 => &[],
            5133u16 => &[],
            5134u16 => &[],
            5135u16 => &[],
            5136u16 => &[],
            5137u16 => &[],
            5138u16 => &[],
            5139u16 => &[],
            5140u16 => &[],
            5141u16 => &[],
            5142u16 => &[],
            5143u16 => &[],
            5144u16 => &[],
            5145u16 => &[],
            5146u16 => &[],
            5147u16 => &[],
            5148u16 => &[],
            5149u16 => &[],
            5150u16 => &[],
            5151u16 => &[],
            5152u16 => &[],
            5153u16 => &[],
            5154u16 => &[],
            5155u16 => &[],
            5156u16 => &[],
            5157u16 => &[],
            5158u16 => &[],
            5159u16 => &[],
            5160u16 => &[],
            5161u16 => &[],
            5162u16 => &[],
            5163u16 => &[],
            5164u16 => &[],
            5165u16 => &[],
            5166u16 => &[],
            5167u16 => &[],
            5168u16 => &[],
            5169u16 => &[],
            5170u16 => &[],
            5171u16 => &[],
            5172u16 => &[],
            5173u16 => &[],
            5174u16 => &[],
            5175u16 => &[],
            5176u16 => &[],
            5177u16 => &[],
            5178u16 => &[],
            5179u16 => &[],
            5180u16 => &[],
            5181u16 => &[],
            5182u16 => &[],
            5183u16 => &[],
            5184u16 => &[],
            5185u16 => &[],
            5186u16 => &[],
            5187u16 => &[],
            5188u16 => &[],
            5189u16 => &[],
            5190u16 => &[],
            5191u16 => &[],
            5192u16 => &[],
            5193u16 => &[],
            5194u16 => &[],
            5195u16 => &[],
            5196u16 => &[],
            5197u16 => &[],
            5198u16 => &[],
            5199u16 => &[],
            5200u16 => &[],
            5201u16 => &[],
            5202u16 => &[],
            5203u16 => &[],
            5204u16 => &[],
            5205u16 => &[],
            5206u16 => &[],
            5207u16 => &[],
            5208u16 => &[],
            5209u16 => &[],
            5210u16 => &[],
            5211u16 => &[],
            5212u16 => &[],
            5213u16 => &[],
            5214u16 => &[],
            5215u16 => &[],
            5216u16 => &[],
            5217u16 => &[],
            5218u16 => &[],
            5219u16 => &[],
            5220u16 => &[],
            5221u16 => &[],
            5222u16 => &[],
            5223u16 => &[],
            5224u16 => &[],
            5225u16 => &[],
            5226u16 => &[],
            5227u16 => &[],
            5228u16 => &[],
            5229u16 => &[],
            5230u16 => &[],
            5231u16 => &[],
            5232u16 => &[],
            5233u16 => &[],
            5234u16 => &[],
            5235u16 => &[],
            5236u16 => &[],
            5237u16 => &[],
            5238u16 => &[],
            5239u16 => &[],
            5240u16 => &[],
            5241u16 => &[],
            5242u16 => &[],
            5243u16 => &[],
            5244u16 => &[],
            5245u16 => &[],
            5246u16 => &[],
            5247u16 => &[],
            5248u16 => &[],
            5249u16 => &[],
            5250u16 => &[],
            5251u16 => &[],
            5252u16 => &[],
            5253u16 => &[],
            5254u16 => &[],
            5255u16 => &[],
            5256u16 => &[],
            5257u16 => &[],
            5258u16 => &[],
            5259u16 => &[],
            5260u16 => &[],
            5261u16 => &[],
            5262u16 => &[],
            5263u16 => &[],
            5264u16 => &[],
            5265u16 => &[],
            5266u16 => &[],
            5267u16 => &[],
            5268u16 => &[],
            5269u16 => &[],
            5270u16 => &[],
            5271u16 => &[],
            5272u16 => &[],
            5273u16 => &[],
            5274u16 => &[],
            5275u16 => &[],
            5276u16 => &[],
            5277u16 => &[],
            5278u16 => &[],
            5279u16 => &[],
            5280u16 => &[],
            5281u16 => &[],
            5282u16 => &[],
            5283u16 => &[],
            5284u16 => &[],
            5285u16 => &[],
            5286u16 => &[],
            5287u16 => &[],
            5288u16 => &[],
            5289u16 => &[],
            5290u16 => &[],
            5291u16 => &[],
            5292u16 => &[],
            5293u16 => &[],
            5294u16 => &[],
            5295u16 => &[],
            5296u16 => &[],
            5297u16 => &[],
            5298u16 => &[],
            5299u16 => &[],
            5300u16 => &[],
            5301u16 => &[],
            5302u16 => &[],
            5303u16 => &[],
            5304u16 => &[],
            5305u16 => &[],
            5306u16 => &[],
            5307u16 => &[],
            5308u16 => &[],
            5309u16 => &[],
            5310u16 => &[],
            5311u16 => &[],
            5312u16 => &[],
            5313u16 => &[],
            5314u16 => &[],
            5315u16 => &[],
            5316u16 => &[],
            5317u16 => &[],
            5318u16 => &[],
            5319u16 => &[],
            5320u16 => &[],
            5321u16 => &[],
            5322u16 => &[],
            5323u16 => &[],
            5324u16 => &[],
            5325u16 => &[],
            5326u16 => &[],
            5327u16 => &[],
            5328u16 => &[],
            5329u16 => &[],
            5330u16 => &[],
            5331u16 => &[],
            5332u16 => &[],
            5333u16 => &[],
            5334u16 => &[],
            5335u16 => &[],
            5336u16 => &[],
            5337u16 => &[],
            5338u16 => &[],
            5339u16 => &[],
            5340u16 => &[],
            5341u16 => &[],
            5342u16 => &[],
            5343u16 => &[],
            5344u16 => &[],
            5345u16 => &[],
            5346u16 => &[],
            5347u16 => &[],
            5348u16 => &[],
            5349u16 => &[],
            5350u16 => &[],
            5351u16 => &[],
            5352u16 => &[],
            5353u16 => &[],
            5354u16 => &[],
            5355u16 => &[],
            5356u16 => &[],
            5357u16 => &[],
            5358u16 => &[],
            5359u16 => &[],
            5360u16 => &[],
            5361u16 => &[],
            5362u16 => &[],
            5363u16 => &[],
            5364u16 => &[],
            5365u16 => &[],
            5366u16 => &[],
            5367u16 => &[],
            5368u16 => &[],
            5369u16 => &[],
            5370u16 => &[],
            5371u16 => &[],
            5372u16 => &[],
            5373u16 => &[],
            5374u16 => &[],
            5375u16 => &[],
            5376u16 => &[],
            5377u16 => &[],
            5378u16 => &[],
            5379u16 => &[],
            5380u16 => &[],
            5381u16 => &[],
            5382u16 => &[],
            5383u16 => &[],
            5384u16 => &[],
            5385u16 => &[],
            5386u16 => &[],
            5387u16 => &[],
            5388u16 => &[],
            5389u16 => &[],
            5390u16 => &[],
            5391u16 => &[],
            5392u16 => &[],
            5393u16 => &[],
            5394u16 => &[],
            5395u16 => &[],
            5396u16 => &[],
            5397u16 => &[],
            5398u16 => &[],
            5399u16 => &[],
            5400u16 => &[],
            5401u16 => &[],
            5402u16 => &[],
            5403u16 => &[],
            5404u16 => &[],
            5405u16 => &[],
            5406u16 => &[],
            5407u16 => &[],
            5408u16 => &[],
            5409u16 => &[],
            5410u16 => &[],
            5411u16 => &[],
            5412u16 => &[],
            5413u16 => &[],
            5414u16 => &[],
            5415u16 => &[],
            5416u16 => &[],
            5417u16 => &[],
            5418u16 => &[],
            5419u16 => &[],
            5420u16 => &[],
            5421u16 => &[],
            5422u16 => &[],
            5423u16 => &[],
            5424u16 => &[],
            5425u16 => &[],
            5426u16 => &[],
            5427u16 => &[],
            5428u16 => &[],
            5429u16 => &[],
            5430u16 => &[],
            5431u16 => &[],
            5432u16 => &[],
            5433u16 => &[],
            5434u16 => &[],
            5435u16 => &[],
            5436u16 => &[],
            5437u16 => &[],
            5438u16 => &[],
            5439u16 => &[],
            5440u16 => &[],
            5441u16 => &[],
            5442u16 => &[],
            5443u16 => &[],
            5444u16 => &[],
            5445u16 => &[],
            5446u16 => &[],
            5447u16 => &[],
            5448u16 => &[],
            5449u16 => &[],
            5450u16 => &[],
            5451u16 => &[],
            5452u16 => &[],
            5453u16 => &[],
            5454u16 => &[],
            5455u16 => &[],
            5456u16 => &[],
            5457u16 => &[],
            5458u16 => &[],
            5459u16 => &[],
            5460u16 => &[],
            5461u16 => &[],
            5462u16 => &[],
            5463u16 => &[],
            5464u16 => &[],
            5465u16 => &[],
            5466u16 => &[],
            5467u16 => &[],
            5468u16 => &[],
            5469u16 => &[],
            5470u16 => &[],
            5471u16 => &[],
            5472u16 => &[],
            5473u16 => &[],
            5474u16 => &[],
            5475u16 => &[],
            5476u16 => &[],
            5477u16 => &[],
            5478u16 => &[],
            5479u16 => &[],
            5480u16 => &[],
            5481u16 => &[],
            5482u16 => &[],
            5483u16 => &[],
            5484u16 => &[],
            5485u16 => &[],
            5486u16 => &[],
            5487u16 => &[],
            5488u16 => &[],
            5489u16 => &[],
            5490u16 => &[],
            5491u16 => &[],
            5492u16 => &[],
            5493u16 => &[],
            5494u16 => &[],
            5495u16 => &[],
            5496u16 => &[],
            5497u16 => &[],
            5498u16 => &[],
            5499u16 => &[],
            5500u16 => &[],
            5501u16 => &[],
            5502u16 => &[],
            5503u16 => &[],
            5504u16 => &[],
            5505u16 => &[],
            5506u16 => &[],
            5507u16 => &[],
            5508u16 => &[],
            5509u16 => &[],
            5510u16 => &[],
            5511u16 => &[],
            5512u16 => &[],
            5513u16 => &[],
            5514u16 => &[],
            5515u16 => &[],
            5516u16 => &[],
            5517u16 => &[],
            5518u16 => &[],
            5519u16 => &[],
            5520u16 => &[],
            5521u16 => &[],
            5522u16 => &[],
            5523u16 => &[],
            5524u16 => &[],
            5525u16 => &[],
            5526u16 => &[],
            5527u16 => &[],
            5528u16 => &[],
            5529u16 => &[],
            5530u16 => &[],
            5531u16 => &[],
            5532u16 => &[],
            5533u16 => &[],
            5534u16 => &[],
            5535u16 => &[],
            5536u16 => &[],
            5537u16 => &[],
            5538u16 => &[68u16],
            5539u16 => &[68u16],
            5540u16 => &[68u16],
            5541u16 => &[68u16],
            5542u16 => &[69u16],
            5543u16 => &[69u16],
            5544u16 => &[69u16],
            5545u16 => &[69u16],
            5546u16 => &[68u16],
            5547u16 => &[68u16],
            5548u16 => &[68u16],
            5549u16 => &[68u16],
            5550u16 => &[69u16],
            5551u16 => &[69u16],
            5552u16 => &[69u16],
            5553u16 => &[69u16],
            5554u16 => &[68u16],
            5555u16 => &[68u16],
            5556u16 => &[68u16],
            5557u16 => &[68u16],
            5558u16 => &[69u16],
            5559u16 => &[69u16],
            5560u16 => &[69u16],
            5561u16 => &[69u16],
            5562u16 => &[68u16],
            5563u16 => &[68u16],
            5564u16 => &[68u16],
            5565u16 => &[68u16],
            5566u16 => &[69u16],
            5567u16 => &[69u16],
            5568u16 => &[69u16],
            5569u16 => &[69u16],
            5570u16 => &[68u16],
            5571u16 => &[68u16],
            5572u16 => &[68u16],
            5573u16 => &[68u16],
            5574u16 => &[69u16],
            5575u16 => &[69u16],
            5576u16 => &[69u16],
            5577u16 => &[69u16],
            5578u16 => &[68u16],
            5579u16 => &[68u16],
            5580u16 => &[68u16],
            5581u16 => &[68u16],
            5582u16 => &[69u16],
            5583u16 => &[69u16],
            5584u16 => &[69u16],
            5585u16 => &[69u16],
            5586u16 => &[68u16],
            5587u16 => &[68u16],
            5588u16 => &[68u16],
            5589u16 => &[68u16],
            5590u16 => &[69u16],
            5591u16 => &[69u16],
            5592u16 => &[69u16],
            5593u16 => &[69u16],
            5594u16 => &[68u16],
            5595u16 => &[68u16],
            5596u16 => &[68u16],
            5597u16 => &[68u16],
            5598u16 => &[69u16],
            5599u16 => &[69u16],
            5600u16 => &[69u16],
            5601u16 => &[69u16],
            5602u16 => &[68u16],
            5603u16 => &[68u16],
            5604u16 => &[68u16],
            5605u16 => &[68u16],
            5606u16 => &[69u16],
            5607u16 => &[69u16],
            5608u16 => &[69u16],
            5609u16 => &[69u16],
            5610u16 => &[68u16],
            5611u16 => &[68u16],
            5612u16 => &[68u16],
            5613u16 => &[68u16],
            5614u16 => &[69u16],
            5615u16 => &[69u16],
            5616u16 => &[69u16],
            5617u16 => &[69u16],
            5618u16 => &[68u16],
            5619u16 => &[68u16],
            5620u16 => &[68u16],
            5621u16 => &[68u16],
            5622u16 => &[69u16],
            5623u16 => &[69u16],
            5624u16 => &[69u16],
            5625u16 => &[69u16],
            5626u16 => &[],
            5627u16 => &[],
            5628u16 => &[],
            5629u16 => &[],
            5630u16 => &[],
            5631u16 => &[],
            5632u16 => &[],
            5633u16 => &[],
            5634u16 => &[],
            5635u16 => &[],
            5636u16 => &[],
            5637u16 => &[],
            5638u16 => &[],
            5639u16 => &[],
            5640u16 => &[],
            5641u16 => &[],
            5642u16 => &[],
            5643u16 => &[],
            5644u16 => &[],
            5645u16 => &[],
            5646u16 => &[],
            5647u16 => &[],
            5648u16 => &[],
            5649u16 => &[],
            5650u16 => &[],
            5651u16 => &[],
            5652u16 => &[64u16],
            5653u16 => &[64u16],
            5654u16 => &[65u16],
            5655u16 => &[65u16],
            5656u16 => &[66u16],
            5657u16 => &[66u16],
            5658u16 => &[65u16],
            5659u16 => &[65u16],
            5660u16 => &[64u16],
            5661u16 => &[64u16],
            5662u16 => &[65u16],
            5663u16 => &[65u16],
            5664u16 => &[66u16],
            5665u16 => &[66u16],
            5666u16 => &[65u16],
            5667u16 => &[65u16],
            5668u16 => &[66u16],
            5669u16 => &[66u16],
            5670u16 => &[67u16],
            5671u16 => &[67u16],
            5672u16 => &[64u16],
            5673u16 => &[64u16],
            5674u16 => &[67u16],
            5675u16 => &[67u16],
            5676u16 => &[66u16],
            5677u16 => &[66u16],
            5678u16 => &[67u16],
            5679u16 => &[67u16],
            5680u16 => &[64u16],
            5681u16 => &[64u16],
            5682u16 => &[67u16],
            5683u16 => &[67u16],
            5684u16 => &[65u16],
            5685u16 => &[65u16],
            5686u16 => &[66u16],
            5687u16 => &[66u16],
            5688u16 => &[67u16],
            5689u16 => &[67u16],
            5690u16 => &[66u16],
            5691u16 => &[66u16],
            5692u16 => &[65u16],
            5693u16 => &[65u16],
            5694u16 => &[66u16],
            5695u16 => &[66u16],
            5696u16 => &[67u16],
            5697u16 => &[67u16],
            5698u16 => &[66u16],
            5699u16 => &[66u16],
            5700u16 => &[67u16],
            5701u16 => &[67u16],
            5702u16 => &[64u16],
            5703u16 => &[64u16],
            5704u16 => &[65u16],
            5705u16 => &[65u16],
            5706u16 => &[64u16],
            5707u16 => &[64u16],
            5708u16 => &[67u16],
            5709u16 => &[67u16],
            5710u16 => &[64u16],
            5711u16 => &[64u16],
            5712u16 => &[65u16],
            5713u16 => &[65u16],
            5714u16 => &[64u16],
            5715u16 => &[64u16],
            5716u16 => &[],
            5717u16 => &[],
            5718u16 => &[],
            5719u16 => &[],
            5720u16 => &[],
            5721u16 => &[],
            5722u16 => &[],
            5723u16 => &[],
            5724u16 => &[],
            5725u16 => &[],
            5726u16 => &[],
            5727u16 => &[],
            5728u16 => &[],
            5729u16 => &[],
            5730u16 => &[],
            5731u16 => &[],
            5732u16 => &[],
            5733u16 => &[],
            5734u16 => &[0u16],
            5735u16 => &[0u16],
            5736u16 => &[0u16],
            5737u16 => &[0u16],
            5738u16 => &[],
            5739u16 => &[],
            5740u16 => &[],
            5741u16 => &[],
            5742u16 => &[],
            5743u16 => &[],
            5744u16 => &[],
            5745u16 => &[],
            5746u16 => &[],
            5747u16 => &[],
            5748u16 => &[],
            5749u16 => &[],
            5750u16 => &[],
            5751u16 => &[],
            5752u16 => &[],
            5753u16 => &[],
            5754u16 => &[],
            5755u16 => &[],
            5756u16 => &[],
            5757u16 => &[],
            5758u16 => &[],
            5759u16 => &[],
            5760u16 => &[],
            5761u16 => &[],
            5762u16 => &[],
            5763u16 => &[],
            5764u16 => &[],
            5765u16 => &[],
            5766u16 => &[],
            5767u16 => &[],
            5768u16 => &[],
            5769u16 => &[],
            5770u16 => &[],
            5771u16 => &[],
            5772u16 => &[],
            5773u16 => &[70u16],
            5774u16 => &[38u16],
            5775u16 => &[71u16],
            5776u16 => &[51u16],
            5777u16 => &[72u16],
            5778u16 => &[18u16],
            5779u16 => &[73u16],
            5780u16 => &[0u16],
            5781u16 => &[0u16],
            5782u16 => &[74u16],
            5783u16 => &[74u16],
            5784u16 => &[74u16],
            5785u16 => &[74u16],
            5786u16 => &[74u16],
            5787u16 => &[74u16],
            5788u16 => &[74u16],
            5789u16 => &[74u16],
            5790u16 => &[74u16],
            5791u16 => &[74u16],
            5792u16 => &[74u16],
            5793u16 => &[74u16],
            5794u16 => &[74u16],
            5795u16 => &[74u16],
            5796u16 => &[74u16],
            5797u16 => &[74u16],
            5798u16 => &[0u16],
            5799u16 => &[],
            5800u16 => &[],
            5801u16 => &[],
            5802u16 => &[],
            5803u16 => &[],
            5804u16 => &[],
            5805u16 => &[],
            5806u16 => &[],
            5807u16 => &[],
            5808u16 => &[],
            5809u16 => &[],
            5810u16 => &[],
            5811u16 => &[],
            5812u16 => &[],
            5813u16 => &[],
            5814u16 => &[],
            5815u16 => &[0u16],
            5816u16 => &[0u16],
            5817u16 => &[75u16, 76u16, 77u16],
            5818u16 => &[78u16, 79u16],
            5819u16 => &[75u16, 76u16, 77u16],
            5820u16 => &[78u16, 79u16],
            5821u16 => &[75u16, 76u16],
            5822u16 => &[80u16, 79u16],
            5823u16 => &[75u16, 76u16],
            5824u16 => &[80u16, 79u16],
            5825u16 => &[75u16, 77u16],
            5826u16 => &[81u16, 79u16],
            5827u16 => &[75u16, 77u16],
            5828u16 => &[81u16, 79u16],
            5829u16 => &[75u16],
            5830u16 => &[82u16],
            5831u16 => &[75u16],
            5832u16 => &[82u16],
            5833u16 => &[83u16, 76u16, 77u16],
            5834u16 => &[78u16],
            5835u16 => &[83u16, 76u16, 77u16],
            5836u16 => &[78u16],
            5837u16 => &[83u16, 76u16],
            5838u16 => &[80u16],
            5839u16 => &[83u16, 76u16],
            5840u16 => &[80u16],
            5841u16 => &[83u16, 77u16],
            5842u16 => &[81u16],
            5843u16 => &[83u16, 77u16],
            5844u16 => &[81u16],
            5845u16 => &[83u16],
            5846u16 => &[84u16],
            5847u16 => &[83u16],
            5848u16 => &[84u16],
            5849u16 => &[0u16],
            5850u16 => &[0u16],
            5851u16 => &[73u16],
            5852u16 => &[0u16],
            5853u16 => &[0u16],
            5854u16 => &[0u16],
            5855u16 => &[0u16],
            5856u16 => &[0u16],
            5857u16 => &[0u16],
            5858u16 => &[0u16],
            5859u16 => &[],
            5860u16 => &[],
            5861u16 => &[],
            5862u16 => &[],
            5863u16 => &[],
            5864u16 => &[0u16],
            5865u16 => &[],
            5866u16 => &[],
            5867u16 => &[0u16],
            5868u16 => &[0u16],
            5869u16 => &[0u16],
            5870u16 => &[0u16],
            5871u16 => &[0u16],
            5872u16 => &[0u16],
            5873u16 => &[0u16],
            5874u16 => &[0u16],
            5875u16 => &[85u16],
            5876u16 => &[86u16],
            5877u16 => &[87u16],
            5878u16 => &[88u16],
            5879u16 => &[89u16],
            5880u16 => &[90u16],
            5881u16 => &[91u16],
            5882u16 => &[70u16],
            5883u16 => &[70u16],
            5884u16 => &[70u16],
            5885u16 => &[70u16],
            5886u16 => &[70u16],
            5887u16 => &[70u16],
            5888u16 => &[70u16],
            5889u16 => &[70u16],
            5890u16 => &[70u16],
            5891u16 => &[70u16],
            5892u16 => &[70u16],
            5893u16 => &[70u16],
            5894u16 => &[70u16],
            5895u16 => &[70u16],
            5896u16 => &[70u16],
            5897u16 => &[70u16],
            5898u16 => &[70u16],
            5899u16 => &[70u16],
            5900u16 => &[70u16],
            5901u16 => &[70u16],
            5902u16 => &[70u16],
            5903u16 => &[70u16],
            5904u16 => &[70u16],
            5905u16 => &[70u16],
            5906u16 => &[70u16],
            5907u16 => &[70u16],
            5908u16 => &[70u16],
            5909u16 => &[70u16],
            5910u16 => &[70u16],
            5911u16 => &[70u16],
            5912u16 => &[70u16],
            5913u16 => &[70u16],
            5914u16 => &[70u16],
            5915u16 => &[70u16],
            5916u16 => &[70u16],
            5917u16 => &[70u16],
            5918u16 => &[70u16],
            5919u16 => &[70u16],
            5920u16 => &[70u16],
            5921u16 => &[70u16],
            5922u16 => &[70u16],
            5923u16 => &[70u16],
            5924u16 => &[70u16],
            5925u16 => &[70u16],
            5926u16 => &[70u16],
            5927u16 => &[70u16],
            5928u16 => &[70u16],
            5929u16 => &[70u16],
            5930u16 => &[70u16],
            5931u16 => &[70u16],
            5932u16 => &[70u16],
            5933u16 => &[70u16],
            5934u16 => &[70u16],
            5935u16 => &[70u16],
            5936u16 => &[70u16],
            5937u16 => &[70u16],
            5938u16 => &[70u16],
            5939u16 => &[70u16],
            5940u16 => &[70u16],
            5941u16 => &[70u16],
            5942u16 => &[70u16],
            5943u16 => &[70u16],
            5944u16 => &[70u16],
            5945u16 => &[70u16],
            5946u16 => &[0u16],
            5947u16 => &[0u16],
            5948u16 => &[0u16],
            5949u16 => &[0u16],
            5950u16 => &[0u16],
            5951u16 => &[0u16],
            5952u16 => &[0u16],
            5953u16 => &[0u16],
            5954u16 => &[0u16],
            5955u16 => &[0u16],
            5956u16 => &[0u16],
            5957u16 => &[0u16],
            5958u16 => &[0u16],
            5959u16 => &[0u16],
            5960u16 => &[0u16],
            5961u16 => &[0u16],
            5962u16 => &[65u16],
            5963u16 => &[65u16],
            5964u16 => &[65u16],
            5965u16 => &[65u16],
            5966u16 => &[92u16],
            5967u16 => &[92u16],
            5968u16 => &[92u16],
            5969u16 => &[92u16],
            5970u16 => &[65u16],
            5971u16 => &[65u16],
            5972u16 => &[65u16],
            5973u16 => &[65u16],
            5974u16 => &[93u16],
            5975u16 => &[93u16],
            5976u16 => &[93u16],
            5977u16 => &[93u16],
            5978u16 => &[67u16],
            5979u16 => &[67u16],
            5980u16 => &[67u16],
            5981u16 => &[67u16],
            5982u16 => &[92u16],
            5983u16 => &[92u16],
            5984u16 => &[92u16],
            5985u16 => &[92u16],
            5986u16 => &[67u16],
            5987u16 => &[67u16],
            5988u16 => &[67u16],
            5989u16 => &[67u16],
            5990u16 => &[93u16],
            5991u16 => &[93u16],
            5992u16 => &[93u16],
            5993u16 => &[93u16],
            5994u16 => &[66u16],
            5995u16 => &[66u16],
            5996u16 => &[66u16],
            5997u16 => &[66u16],
            5998u16 => &[92u16],
            5999u16 => &[92u16],
            6000u16 => &[92u16],
            6001u16 => &[92u16],
            6002u16 => &[66u16],
            6003u16 => &[66u16],
            6004u16 => &[66u16],
            6005u16 => &[66u16],
            6006u16 => &[93u16],
            6007u16 => &[93u16],
            6008u16 => &[93u16],
            6009u16 => &[93u16],
            6010u16 => &[64u16],
            6011u16 => &[64u16],
            6012u16 => &[64u16],
            6013u16 => &[64u16],
            6014u16 => &[92u16],
            6015u16 => &[92u16],
            6016u16 => &[92u16],
            6017u16 => &[92u16],
            6018u16 => &[64u16],
            6019u16 => &[64u16],
            6020u16 => &[64u16],
            6021u16 => &[64u16],
            6022u16 => &[93u16],
            6023u16 => &[93u16],
            6024u16 => &[93u16],
            6025u16 => &[93u16],
            6026u16 => &[65u16],
            6027u16 => &[65u16],
            6028u16 => &[65u16],
            6029u16 => &[65u16],
            6030u16 => &[92u16],
            6031u16 => &[92u16],
            6032u16 => &[92u16],
            6033u16 => &[92u16],
            6034u16 => &[65u16],
            6035u16 => &[65u16],
            6036u16 => &[65u16],
            6037u16 => &[65u16],
            6038u16 => &[93u16],
            6039u16 => &[93u16],
            6040u16 => &[93u16],
            6041u16 => &[93u16],
            6042u16 => &[67u16],
            6043u16 => &[67u16],
            6044u16 => &[67u16],
            6045u16 => &[67u16],
            6046u16 => &[92u16],
            6047u16 => &[92u16],
            6048u16 => &[92u16],
            6049u16 => &[92u16],
            6050u16 => &[67u16],
            6051u16 => &[67u16],
            6052u16 => &[67u16],
            6053u16 => &[67u16],
            6054u16 => &[93u16],
            6055u16 => &[93u16],
            6056u16 => &[93u16],
            6057u16 => &[93u16],
            6058u16 => &[66u16],
            6059u16 => &[66u16],
            6060u16 => &[66u16],
            6061u16 => &[66u16],
            6062u16 => &[92u16],
            6063u16 => &[92u16],
            6064u16 => &[92u16],
            6065u16 => &[92u16],
            6066u16 => &[66u16],
            6067u16 => &[66u16],
            6068u16 => &[66u16],
            6069u16 => &[66u16],
            6070u16 => &[93u16],
            6071u16 => &[93u16],
            6072u16 => &[93u16],
            6073u16 => &[93u16],
            6074u16 => &[64u16],
            6075u16 => &[64u16],
            6076u16 => &[64u16],
            6077u16 => &[64u16],
            6078u16 => &[92u16],
            6079u16 => &[92u16],
            6080u16 => &[92u16],
            6081u16 => &[92u16],
            6082u16 => &[64u16],
            6083u16 => &[64u16],
            6084u16 => &[64u16],
            6085u16 => &[64u16],
            6086u16 => &[93u16],
            6087u16 => &[93u16],
            6088u16 => &[93u16],
            6089u16 => &[93u16],
            6090u16 => &[65u16],
            6091u16 => &[65u16],
            6092u16 => &[65u16],
            6093u16 => &[65u16],
            6094u16 => &[92u16],
            6095u16 => &[92u16],
            6096u16 => &[92u16],
            6097u16 => &[92u16],
            6098u16 => &[65u16],
            6099u16 => &[65u16],
            6100u16 => &[65u16],
            6101u16 => &[65u16],
            6102u16 => &[93u16],
            6103u16 => &[93u16],
            6104u16 => &[93u16],
            6105u16 => &[93u16],
            6106u16 => &[67u16],
            6107u16 => &[67u16],
            6108u16 => &[67u16],
            6109u16 => &[67u16],
            6110u16 => &[92u16],
            6111u16 => &[92u16],
            6112u16 => &[92u16],
            6113u16 => &[92u16],
            6114u16 => &[67u16],
            6115u16 => &[67u16],
            6116u16 => &[67u16],
            6117u16 => &[67u16],
            6118u16 => &[93u16],
            6119u16 => &[93u16],
            6120u16 => &[93u16],
            6121u16 => &[93u16],
            6122u16 => &[66u16],
            6123u16 => &[66u16],
            6124u16 => &[66u16],
            6125u16 => &[66u16],
            6126u16 => &[92u16],
            6127u16 => &[92u16],
            6128u16 => &[92u16],
            6129u16 => &[92u16],
            6130u16 => &[66u16],
            6131u16 => &[66u16],
            6132u16 => &[66u16],
            6133u16 => &[66u16],
            6134u16 => &[93u16],
            6135u16 => &[93u16],
            6136u16 => &[93u16],
            6137u16 => &[93u16],
            6138u16 => &[64u16],
            6139u16 => &[64u16],
            6140u16 => &[64u16],
            6141u16 => &[64u16],
            6142u16 => &[92u16],
            6143u16 => &[92u16],
            6144u16 => &[92u16],
            6145u16 => &[92u16],
            6146u16 => &[64u16],
            6147u16 => &[64u16],
            6148u16 => &[64u16],
            6149u16 => &[64u16],
            6150u16 => &[93u16],
            6151u16 => &[93u16],
            6152u16 => &[93u16],
            6153u16 => &[93u16],
            6154u16 => &[65u16],
            6155u16 => &[65u16],
            6156u16 => &[65u16],
            6157u16 => &[65u16],
            6158u16 => &[92u16],
            6159u16 => &[92u16],
            6160u16 => &[92u16],
            6161u16 => &[92u16],
            6162u16 => &[65u16],
            6163u16 => &[65u16],
            6164u16 => &[65u16],
            6165u16 => &[65u16],
            6166u16 => &[93u16],
            6167u16 => &[93u16],
            6168u16 => &[93u16],
            6169u16 => &[93u16],
            6170u16 => &[67u16],
            6171u16 => &[67u16],
            6172u16 => &[67u16],
            6173u16 => &[67u16],
            6174u16 => &[92u16],
            6175u16 => &[92u16],
            6176u16 => &[92u16],
            6177u16 => &[92u16],
            6178u16 => &[67u16],
            6179u16 => &[67u16],
            6180u16 => &[67u16],
            6181u16 => &[67u16],
            6182u16 => &[93u16],
            6183u16 => &[93u16],
            6184u16 => &[93u16],
            6185u16 => &[93u16],
            6186u16 => &[66u16],
            6187u16 => &[66u16],
            6188u16 => &[66u16],
            6189u16 => &[66u16],
            6190u16 => &[92u16],
            6191u16 => &[92u16],
            6192u16 => &[92u16],
            6193u16 => &[92u16],
            6194u16 => &[66u16],
            6195u16 => &[66u16],
            6196u16 => &[66u16],
            6197u16 => &[66u16],
            6198u16 => &[93u16],
            6199u16 => &[93u16],
            6200u16 => &[93u16],
            6201u16 => &[93u16],
            6202u16 => &[64u16],
            6203u16 => &[64u16],
            6204u16 => &[64u16],
            6205u16 => &[64u16],
            6206u16 => &[92u16],
            6207u16 => &[92u16],
            6208u16 => &[92u16],
            6209u16 => &[92u16],
            6210u16 => &[64u16],
            6211u16 => &[64u16],
            6212u16 => &[64u16],
            6213u16 => &[64u16],
            6214u16 => &[93u16],
            6215u16 => &[93u16],
            6216u16 => &[93u16],
            6217u16 => &[93u16],
            6218u16 => &[65u16],
            6219u16 => &[65u16],
            6220u16 => &[65u16],
            6221u16 => &[65u16],
            6222u16 => &[92u16],
            6223u16 => &[92u16],
            6224u16 => &[92u16],
            6225u16 => &[92u16],
            6226u16 => &[65u16],
            6227u16 => &[65u16],
            6228u16 => &[65u16],
            6229u16 => &[65u16],
            6230u16 => &[93u16],
            6231u16 => &[93u16],
            6232u16 => &[93u16],
            6233u16 => &[93u16],
            6234u16 => &[67u16],
            6235u16 => &[67u16],
            6236u16 => &[67u16],
            6237u16 => &[67u16],
            6238u16 => &[92u16],
            6239u16 => &[92u16],
            6240u16 => &[92u16],
            6241u16 => &[92u16],
            6242u16 => &[67u16],
            6243u16 => &[67u16],
            6244u16 => &[67u16],
            6245u16 => &[67u16],
            6246u16 => &[93u16],
            6247u16 => &[93u16],
            6248u16 => &[93u16],
            6249u16 => &[93u16],
            6250u16 => &[66u16],
            6251u16 => &[66u16],
            6252u16 => &[66u16],
            6253u16 => &[66u16],
            6254u16 => &[92u16],
            6255u16 => &[92u16],
            6256u16 => &[92u16],
            6257u16 => &[92u16],
            6258u16 => &[66u16],
            6259u16 => &[66u16],
            6260u16 => &[66u16],
            6261u16 => &[66u16],
            6262u16 => &[93u16],
            6263u16 => &[93u16],
            6264u16 => &[93u16],
            6265u16 => &[93u16],
            6266u16 => &[64u16],
            6267u16 => &[64u16],
            6268u16 => &[64u16],
            6269u16 => &[64u16],
            6270u16 => &[92u16],
            6271u16 => &[92u16],
            6272u16 => &[92u16],
            6273u16 => &[92u16],
            6274u16 => &[64u16],
            6275u16 => &[64u16],
            6276u16 => &[64u16],
            6277u16 => &[64u16],
            6278u16 => &[93u16],
            6279u16 => &[93u16],
            6280u16 => &[93u16],
            6281u16 => &[93u16],
            6282u16 => &[65u16],
            6283u16 => &[65u16],
            6284u16 => &[65u16],
            6285u16 => &[65u16],
            6286u16 => &[92u16],
            6287u16 => &[92u16],
            6288u16 => &[92u16],
            6289u16 => &[92u16],
            6290u16 => &[65u16],
            6291u16 => &[65u16],
            6292u16 => &[65u16],
            6293u16 => &[65u16],
            6294u16 => &[93u16],
            6295u16 => &[93u16],
            6296u16 => &[93u16],
            6297u16 => &[93u16],
            6298u16 => &[67u16],
            6299u16 => &[67u16],
            6300u16 => &[67u16],
            6301u16 => &[67u16],
            6302u16 => &[92u16],
            6303u16 => &[92u16],
            6304u16 => &[92u16],
            6305u16 => &[92u16],
            6306u16 => &[67u16],
            6307u16 => &[67u16],
            6308u16 => &[67u16],
            6309u16 => &[67u16],
            6310u16 => &[93u16],
            6311u16 => &[93u16],
            6312u16 => &[93u16],
            6313u16 => &[93u16],
            6314u16 => &[66u16],
            6315u16 => &[66u16],
            6316u16 => &[66u16],
            6317u16 => &[66u16],
            6318u16 => &[92u16],
            6319u16 => &[92u16],
            6320u16 => &[92u16],
            6321u16 => &[92u16],
            6322u16 => &[66u16],
            6323u16 => &[66u16],
            6324u16 => &[66u16],
            6325u16 => &[66u16],
            6326u16 => &[93u16],
            6327u16 => &[93u16],
            6328u16 => &[93u16],
            6329u16 => &[93u16],
            6330u16 => &[64u16],
            6331u16 => &[64u16],
            6332u16 => &[64u16],
            6333u16 => &[64u16],
            6334u16 => &[92u16],
            6335u16 => &[92u16],
            6336u16 => &[92u16],
            6337u16 => &[92u16],
            6338u16 => &[64u16],
            6339u16 => &[64u16],
            6340u16 => &[64u16],
            6341u16 => &[64u16],
            6342u16 => &[93u16],
            6343u16 => &[93u16],
            6344u16 => &[93u16],
            6345u16 => &[93u16],
            6346u16 => &[65u16],
            6347u16 => &[65u16],
            6348u16 => &[65u16],
            6349u16 => &[65u16],
            6350u16 => &[92u16],
            6351u16 => &[92u16],
            6352u16 => &[92u16],
            6353u16 => &[92u16],
            6354u16 => &[65u16],
            6355u16 => &[65u16],
            6356u16 => &[65u16],
            6357u16 => &[65u16],
            6358u16 => &[93u16],
            6359u16 => &[93u16],
            6360u16 => &[93u16],
            6361u16 => &[93u16],
            6362u16 => &[67u16],
            6363u16 => &[67u16],
            6364u16 => &[67u16],
            6365u16 => &[67u16],
            6366u16 => &[92u16],
            6367u16 => &[92u16],
            6368u16 => &[92u16],
            6369u16 => &[92u16],
            6370u16 => &[67u16],
            6371u16 => &[67u16],
            6372u16 => &[67u16],
            6373u16 => &[67u16],
            6374u16 => &[93u16],
            6375u16 => &[93u16],
            6376u16 => &[93u16],
            6377u16 => &[93u16],
            6378u16 => &[66u16],
            6379u16 => &[66u16],
            6380u16 => &[66u16],
            6381u16 => &[66u16],
            6382u16 => &[92u16],
            6383u16 => &[92u16],
            6384u16 => &[92u16],
            6385u16 => &[92u16],
            6386u16 => &[66u16],
            6387u16 => &[66u16],
            6388u16 => &[66u16],
            6389u16 => &[66u16],
            6390u16 => &[93u16],
            6391u16 => &[93u16],
            6392u16 => &[93u16],
            6393u16 => &[93u16],
            6394u16 => &[64u16],
            6395u16 => &[64u16],
            6396u16 => &[64u16],
            6397u16 => &[64u16],
            6398u16 => &[92u16],
            6399u16 => &[92u16],
            6400u16 => &[92u16],
            6401u16 => &[92u16],
            6402u16 => &[64u16],
            6403u16 => &[64u16],
            6404u16 => &[64u16],
            6405u16 => &[64u16],
            6406u16 => &[93u16],
            6407u16 => &[93u16],
            6408u16 => &[93u16],
            6409u16 => &[93u16],
            6410u16 => &[65u16],
            6411u16 => &[65u16],
            6412u16 => &[65u16],
            6413u16 => &[65u16],
            6414u16 => &[92u16],
            6415u16 => &[92u16],
            6416u16 => &[92u16],
            6417u16 => &[92u16],
            6418u16 => &[65u16],
            6419u16 => &[65u16],
            6420u16 => &[65u16],
            6421u16 => &[65u16],
            6422u16 => &[93u16],
            6423u16 => &[93u16],
            6424u16 => &[93u16],
            6425u16 => &[93u16],
            6426u16 => &[67u16],
            6427u16 => &[67u16],
            6428u16 => &[67u16],
            6429u16 => &[67u16],
            6430u16 => &[92u16],
            6431u16 => &[92u16],
            6432u16 => &[92u16],
            6433u16 => &[92u16],
            6434u16 => &[67u16],
            6435u16 => &[67u16],
            6436u16 => &[67u16],
            6437u16 => &[67u16],
            6438u16 => &[93u16],
            6439u16 => &[93u16],
            6440u16 => &[93u16],
            6441u16 => &[93u16],
            6442u16 => &[66u16],
            6443u16 => &[66u16],
            6444u16 => &[66u16],
            6445u16 => &[66u16],
            6446u16 => &[92u16],
            6447u16 => &[92u16],
            6448u16 => &[92u16],
            6449u16 => &[92u16],
            6450u16 => &[66u16],
            6451u16 => &[66u16],
            6452u16 => &[66u16],
            6453u16 => &[66u16],
            6454u16 => &[93u16],
            6455u16 => &[93u16],
            6456u16 => &[93u16],
            6457u16 => &[93u16],
            6458u16 => &[64u16],
            6459u16 => &[64u16],
            6460u16 => &[64u16],
            6461u16 => &[64u16],
            6462u16 => &[92u16],
            6463u16 => &[92u16],
            6464u16 => &[92u16],
            6465u16 => &[92u16],
            6466u16 => &[64u16],
            6467u16 => &[64u16],
            6468u16 => &[64u16],
            6469u16 => &[64u16],
            6470u16 => &[93u16],
            6471u16 => &[93u16],
            6472u16 => &[93u16],
            6473u16 => &[93u16],
            6474u16 => &[65u16],
            6475u16 => &[65u16],
            6476u16 => &[65u16],
            6477u16 => &[65u16],
            6478u16 => &[92u16],
            6479u16 => &[92u16],
            6480u16 => &[92u16],
            6481u16 => &[92u16],
            6482u16 => &[65u16],
            6483u16 => &[65u16],
            6484u16 => &[65u16],
            6485u16 => &[65u16],
            6486u16 => &[93u16],
            6487u16 => &[93u16],
            6488u16 => &[93u16],
            6489u16 => &[93u16],
            6490u16 => &[67u16],
            6491u16 => &[67u16],
            6492u16 => &[67u16],
            6493u16 => &[67u16],
            6494u16 => &[92u16],
            6495u16 => &[92u16],
            6496u16 => &[92u16],
            6497u16 => &[92u16],
            6498u16 => &[67u16],
            6499u16 => &[67u16],
            6500u16 => &[67u16],
            6501u16 => &[67u16],
            6502u16 => &[93u16],
            6503u16 => &[93u16],
            6504u16 => &[93u16],
            6505u16 => &[93u16],
            6506u16 => &[66u16],
            6507u16 => &[66u16],
            6508u16 => &[66u16],
            6509u16 => &[66u16],
            6510u16 => &[92u16],
            6511u16 => &[92u16],
            6512u16 => &[92u16],
            6513u16 => &[92u16],
            6514u16 => &[66u16],
            6515u16 => &[66u16],
            6516u16 => &[66u16],
            6517u16 => &[66u16],
            6518u16 => &[93u16],
            6519u16 => &[93u16],
            6520u16 => &[93u16],
            6521u16 => &[93u16],
            6522u16 => &[64u16],
            6523u16 => &[64u16],
            6524u16 => &[64u16],
            6525u16 => &[64u16],
            6526u16 => &[92u16],
            6527u16 => &[92u16],
            6528u16 => &[92u16],
            6529u16 => &[92u16],
            6530u16 => &[64u16],
            6531u16 => &[64u16],
            6532u16 => &[64u16],
            6533u16 => &[64u16],
            6534u16 => &[93u16],
            6535u16 => &[93u16],
            6536u16 => &[93u16],
            6537u16 => &[93u16],
            6538u16 => &[0u16],
            6539u16 => &[0u16],
            6540u16 => &[0u16],
            6541u16 => &[0u16],
            6542u16 => &[0u16],
            6543u16 => &[0u16],
            6544u16 => &[0u16],
            6545u16 => &[0u16],
            6546u16 => &[0u16],
            6547u16 => &[0u16],
            6548u16 => &[0u16],
            6549u16 => &[0u16],
            6550u16 => &[0u16],
            6551u16 => &[0u16],
            6552u16 => &[0u16],
            6553u16 => &[0u16],
            6554u16 => &[0u16],
            6555u16 => &[0u16],
            6556u16 => &[0u16],
            6557u16 => &[0u16],
            6558u16 => &[0u16],
            6559u16 => &[0u16],
            6560u16 => &[0u16],
            6561u16 => &[0u16],
            6562u16 => &[0u16],
            6563u16 => &[0u16],
            6564u16 => &[0u16],
            6565u16 => &[0u16],
            6566u16 => &[0u16],
            6567u16 => &[0u16],
            6568u16 => &[0u16],
            6569u16 => &[0u16],
            6570u16 => &[0u16],
            6571u16 => &[0u16],
            6572u16 => &[0u16],
            6573u16 => &[0u16],
            6574u16 => &[0u16],
            6575u16 => &[0u16],
            6576u16 => &[0u16],
            6577u16 => &[0u16],
            6578u16 => &[0u16],
            6579u16 => &[0u16],
            6580u16 => &[0u16],
            6581u16 => &[0u16],
            6582u16 => &[0u16],
            6583u16 => &[0u16],
            6584u16 => &[0u16],
            6585u16 => &[0u16],
            6586u16 => &[0u16],
            6587u16 => &[0u16],
            6588u16 => &[0u16],
            6589u16 => &[0u16],
            6590u16 => &[0u16],
            6591u16 => &[0u16],
            6592u16 => &[0u16],
            6593u16 => &[0u16],
            6594u16 => &[0u16],
            6595u16 => &[0u16],
            6596u16 => &[0u16],
            6597u16 => &[0u16],
            6598u16 => &[0u16],
            6599u16 => &[0u16],
            6600u16 => &[0u16],
            6601u16 => &[0u16],
            6602u16 => &[0u16],
            6603u16 => &[0u16],
            6604u16 => &[0u16],
            6605u16 => &[0u16],
            6606u16 => &[0u16],
            6607u16 => &[0u16],
            6608u16 => &[0u16],
            6609u16 => &[0u16],
            6610u16 => &[0u16],
            6611u16 => &[0u16],
            6612u16 => &[0u16],
            6613u16 => &[0u16],
            6614u16 => &[0u16],
            6615u16 => &[0u16],
            6616u16 => &[0u16],
            6617u16 => &[0u16],
            6618u16 => &[0u16],
            6619u16 => &[0u16],
            6620u16 => &[0u16],
            6621u16 => &[0u16],
            6622u16 => &[0u16],
            6623u16 => &[0u16],
            6624u16 => &[0u16],
            6625u16 => &[0u16],
            6626u16 => &[0u16],
            6627u16 => &[0u16],
            6628u16 => &[0u16],
            6629u16 => &[0u16],
            6630u16 => &[0u16],
            6631u16 => &[0u16],
            6632u16 => &[0u16],
            6633u16 => &[0u16],
            6634u16 => &[0u16],
            6635u16 => &[0u16],
            6636u16 => &[0u16],
            6637u16 => &[0u16],
            6638u16 => &[0u16],
            6639u16 => &[0u16],
            6640u16 => &[0u16],
            6641u16 => &[0u16],
            6642u16 => &[0u16],
            6643u16 => &[0u16],
            6644u16 => &[0u16],
            6645u16 => &[0u16],
            6646u16 => &[0u16],
            6647u16 => &[0u16],
            6648u16 => &[0u16],
            6649u16 => &[0u16],
            6650u16 => &[0u16],
            6651u16 => &[0u16],
            6652u16 => &[0u16],
            6653u16 => &[0u16],
            6654u16 => &[0u16],
            6655u16 => &[0u16],
            6656u16 => &[0u16],
            6657u16 => &[0u16],
            6658u16 => &[0u16],
            6659u16 => &[0u16],
            6660u16 => &[0u16],
            6661u16 => &[0u16],
            6662u16 => &[0u16],
            6663u16 => &[0u16],
            6664u16 => &[0u16],
            6665u16 => &[0u16],
            6666u16 => &[0u16],
            6667u16 => &[0u16],
            6668u16 => &[0u16],
            6669u16 => &[0u16],
            6670u16 => &[0u16],
            6671u16 => &[0u16],
            6672u16 => &[0u16],
            6673u16 => &[0u16],
            6674u16 => &[0u16],
            6675u16 => &[0u16],
            6676u16 => &[0u16],
            6677u16 => &[0u16],
            6678u16 => &[0u16],
            6679u16 => &[0u16],
            6680u16 => &[0u16],
            6681u16 => &[0u16],
            6682u16 => &[0u16],
            6683u16 => &[0u16],
            6684u16 => &[0u16],
            6685u16 => &[0u16],
            6686u16 => &[0u16],
            6687u16 => &[0u16],
            6688u16 => &[0u16],
            6689u16 => &[0u16],
            6690u16 => &[0u16],
            6691u16 => &[0u16],
            6692u16 => &[0u16],
            6693u16 => &[0u16],
            6694u16 => &[0u16],
            6695u16 => &[0u16],
            6696u16 => &[0u16],
            6697u16 => &[0u16],
            6698u16 => &[0u16],
            6699u16 => &[0u16],
            6700u16 => &[0u16],
            6701u16 => &[0u16],
            6702u16 => &[0u16],
            6703u16 => &[0u16],
            6704u16 => &[0u16],
            6705u16 => &[0u16],
            6706u16 => &[0u16],
            6707u16 => &[0u16],
            6708u16 => &[0u16],
            6709u16 => &[0u16],
            6710u16 => &[0u16],
            6711u16 => &[0u16],
            6712u16 => &[0u16],
            6713u16 => &[0u16],
            6714u16 => &[0u16],
            6715u16 => &[0u16],
            6716u16 => &[0u16],
            6717u16 => &[0u16],
            6718u16 => &[0u16],
            6719u16 => &[0u16],
            6720u16 => &[0u16],
            6721u16 => &[0u16],
            6722u16 => &[0u16],
            6723u16 => &[0u16],
            6724u16 => &[0u16],
            6725u16 => &[0u16],
            6726u16 => &[0u16],
            6727u16 => &[0u16],
            6728u16 => &[0u16],
            6729u16 => &[0u16],
            6730u16 => &[0u16],
            6731u16 => &[0u16],
            6732u16 => &[0u16],
            6733u16 => &[0u16],
            6734u16 => &[0u16],
            6735u16 => &[0u16],
            6736u16 => &[0u16],
            6737u16 => &[0u16],
            6738u16 => &[0u16],
            6739u16 => &[0u16],
            6740u16 => &[0u16],
            6741u16 => &[0u16],
            6742u16 => &[94u16, 95u16, 96u16],
            6743u16 => &[97u16, 98u16],
            6744u16 => &[94u16, 95u16, 96u16],
            6745u16 => &[97u16, 98u16],
            6746u16 => &[94u16, 95u16],
            6747u16 => &[99u16, 98u16],
            6748u16 => &[94u16, 95u16],
            6749u16 => &[99u16, 98u16],
            6750u16 => &[94u16, 96u16],
            6751u16 => &[100u16, 98u16],
            6752u16 => &[94u16, 96u16],
            6753u16 => &[100u16, 98u16],
            6754u16 => &[94u16],
            6755u16 => &[101u16],
            6756u16 => &[94u16],
            6757u16 => &[101u16],
            6758u16 => &[102u16, 95u16, 96u16],
            6759u16 => &[97u16],
            6760u16 => &[102u16, 95u16, 96u16],
            6761u16 => &[97u16],
            6762u16 => &[102u16, 95u16],
            6763u16 => &[99u16],
            6764u16 => &[102u16, 95u16],
            6765u16 => &[99u16],
            6766u16 => &[102u16, 96u16],
            6767u16 => &[100u16],
            6768u16 => &[102u16, 96u16],
            6769u16 => &[100u16],
            6770u16 => &[102u16],
            6771u16 => &[103u16],
            6772u16 => &[102u16],
            6773u16 => &[103u16],
            6774u16 => &[104u16],
            6775u16 => &[104u16],
            6776u16 => &[105u16],
            6777u16 => &[105u16],
            6778u16 => &[106u16],
            6779u16 => &[106u16],
            6780u16 => &[94u16, 95u16, 96u16],
            6781u16 => &[97u16, 98u16],
            6782u16 => &[94u16, 95u16, 96u16],
            6783u16 => &[97u16, 98u16],
            6784u16 => &[94u16, 95u16],
            6785u16 => &[99u16, 98u16],
            6786u16 => &[94u16, 95u16],
            6787u16 => &[99u16, 98u16],
            6788u16 => &[94u16, 96u16],
            6789u16 => &[100u16, 98u16],
            6790u16 => &[94u16, 96u16],
            6791u16 => &[100u16, 98u16],
            6792u16 => &[94u16],
            6793u16 => &[101u16],
            6794u16 => &[94u16],
            6795u16 => &[101u16],
            6796u16 => &[102u16, 95u16, 96u16],
            6797u16 => &[97u16],
            6798u16 => &[102u16, 95u16, 96u16],
            6799u16 => &[97u16],
            6800u16 => &[102u16, 95u16],
            6801u16 => &[99u16],
            6802u16 => &[102u16, 95u16],
            6803u16 => &[99u16],
            6804u16 => &[102u16, 96u16],
            6805u16 => &[100u16],
            6806u16 => &[102u16, 96u16],
            6807u16 => &[100u16],
            6808u16 => &[102u16],
            6809u16 => &[103u16],
            6810u16 => &[102u16],
            6811u16 => &[103u16],
            6812u16 => &[0u16],
            6813u16 => &[],
            6814u16 => &[],
            6815u16 => &[],
            6816u16 => &[],
            6817u16 => &[],
            6818u16 => &[],
            6819u16 => &[],
            6820u16 => &[],
            6821u16 => &[],
            6822u16 => &[],
            6823u16 => &[],
            6824u16 => &[],
            6825u16 => &[],
            6826u16 => &[],
            6827u16 => &[],
            6828u16 => &[],
            6829u16 => &[],
            6830u16 => &[],
            6831u16 => &[],
            6832u16 => &[],
            6833u16 => &[],
            6834u16 => &[],
            6835u16 => &[],
            6836u16 => &[],
            6837u16 => &[],
            6838u16 => &[],
            6839u16 => &[],
            6840u16 => &[],
            6841u16 => &[],
            6842u16 => &[],
            6843u16 => &[],
            6844u16 => &[],
            6845u16 => &[],
            6846u16 => &[],
            6847u16 => &[],
            6848u16 => &[],
            6849u16 => &[],
            6850u16 => &[],
            6851u16 => &[],
            6852u16 => &[],
            6853u16 => &[],
            6854u16 => &[],
            6855u16 => &[],
            6856u16 => &[],
            6857u16 => &[],
            6858u16 => &[],
            6859u16 => &[],
            6860u16 => &[],
            6861u16 => &[],
            6862u16 => &[],
            6863u16 => &[],
            6864u16 => &[],
            6865u16 => &[],
            6866u16 => &[],
            6867u16 => &[],
            6868u16 => &[],
            6869u16 => &[],
            6870u16 => &[],
            6871u16 => &[],
            6872u16 => &[],
            6873u16 => &[],
            6874u16 => &[],
            6875u16 => &[],
            6876u16 => &[],
            6877u16 => &[],
            6878u16 => &[],
            6879u16 => &[],
            6880u16 => &[],
            6881u16 => &[],
            6882u16 => &[],
            6883u16 => &[],
            6884u16 => &[],
            6885u16 => &[],
            6886u16 => &[],
            6887u16 => &[],
            6888u16 => &[],
            6889u16 => &[],
            6890u16 => &[],
            6891u16 => &[],
            6892u16 => &[],
            6893u16 => &[],
            6894u16 => &[],
            6895u16 => &[],
            6896u16 => &[],
            6897u16 => &[],
            6898u16 => &[],
            6899u16 => &[],
            6900u16 => &[],
            6901u16 => &[],
            6902u16 => &[],
            6903u16 => &[],
            6904u16 => &[],
            6905u16 => &[],
            6906u16 => &[],
            6907u16 => &[],
            6908u16 => &[],
            6909u16 => &[],
            6910u16 => &[],
            6911u16 => &[],
            6912u16 => &[],
            6913u16 => &[],
            6914u16 => &[],
            6915u16 => &[],
            6916u16 => &[],
            6917u16 => &[],
            6918u16 => &[],
            6919u16 => &[],
            6920u16 => &[],
            6921u16 => &[],
            6922u16 => &[],
            6923u16 => &[],
            6924u16 => &[],
            6925u16 => &[],
            6926u16 => &[],
            6927u16 => &[],
            6928u16 => &[],
            6929u16 => &[],
            6930u16 => &[],
            6931u16 => &[],
            6932u16 => &[],
            6933u16 => &[],
            6934u16 => &[],
            6935u16 => &[],
            6936u16 => &[],
            6937u16 => &[],
            6938u16 => &[],
            6939u16 => &[],
            6940u16 => &[],
            6941u16 => &[],
            6942u16 => &[],
            6943u16 => &[],
            6944u16 => &[],
            6945u16 => &[],
            6946u16 => &[],
            6947u16 => &[],
            6948u16 => &[],
            6949u16 => &[],
            6950u16 => &[],
            6951u16 => &[],
            6952u16 => &[],
            6953u16 => &[],
            6954u16 => &[],
            6955u16 => &[],
            6956u16 => &[],
            6957u16 => &[],
            6958u16 => &[],
            6959u16 => &[],
            6960u16 => &[],
            6961u16 => &[],
            6962u16 => &[],
            6963u16 => &[],
            6964u16 => &[],
            6965u16 => &[],
            6966u16 => &[],
            6967u16 => &[],
            6968u16 => &[],
            6969u16 => &[],
            6970u16 => &[],
            6971u16 => &[],
            6972u16 => &[],
            6973u16 => &[],
            6974u16 => &[],
            6975u16 => &[],
            6976u16 => &[],
            6977u16 => &[],
            6978u16 => &[],
            6979u16 => &[],
            6980u16 => &[],
            6981u16 => &[],
            6982u16 => &[],
            6983u16 => &[],
            6984u16 => &[],
            6985u16 => &[],
            6986u16 => &[],
            6987u16 => &[],
            6988u16 => &[],
            6989u16 => &[],
            6990u16 => &[],
            6991u16 => &[],
            6992u16 => &[],
            6993u16 => &[],
            6994u16 => &[],
            6995u16 => &[],
            6996u16 => &[],
            6997u16 => &[],
            6998u16 => &[],
            6999u16 => &[75u16],
            7000u16 => &[75u16],
            7001u16 => &[],
            7002u16 => &[],
            7003u16 => &[75u16],
            7004u16 => &[75u16],
            7005u16 => &[],
            7006u16 => &[],
            7007u16 => &[75u16],
            7008u16 => &[75u16],
            7009u16 => &[],
            7010u16 => &[],
            7011u16 => &[75u16],
            7012u16 => &[75u16],
            7013u16 => &[],
            7014u16 => &[],
            7015u16 => &[78u16],
            7016u16 => &[78u16],
            7017u16 => &[],
            7018u16 => &[],
            7019u16 => &[78u16],
            7020u16 => &[78u16],
            7021u16 => &[],
            7022u16 => &[],
            7023u16 => &[78u16],
            7024u16 => &[78u16],
            7025u16 => &[],
            7026u16 => &[],
            7027u16 => &[78u16],
            7028u16 => &[78u16],
            7029u16 => &[41u16, 42u16],
            7030u16 => &[41u16, 42u16],
            7031u16 => &[43u16, 44u16, 45u16],
            7032u16 => &[43u16, 44u16, 45u16],
            7033u16 => &[41u16, 46u16, 47u16],
            7034u16 => &[41u16, 46u16, 47u16],
            7035u16 => &[48u16, 42u16, 49u16],
            7036u16 => &[48u16, 42u16, 49u16],
            7037u16 => &[44u16, 50u16, 45u16],
            7038u16 => &[44u16, 50u16, 45u16],
            7039u16 => &[51u16, 52u16],
            7040u16 => &[51u16, 52u16],
            7041u16 => &[51u16, 50u16, 49u16],
            7042u16 => &[51u16, 50u16, 49u16],
            7043u16 => &[51u16, 52u16, 45u16],
            7044u16 => &[51u16, 52u16, 45u16],
            7045u16 => &[51u16, 53u16],
            7046u16 => &[51u16, 53u16],
            7047u16 => &[51u16, 49u16],
            7048u16 => &[51u16, 49u16],
            7049u16 => &[54u16, 52u16],
            7050u16 => &[54u16, 52u16],
            7051u16 => &[54u16, 44u16, 53u16],
            7052u16 => &[54u16, 44u16, 53u16],
            7053u16 => &[43u16, 46u16, 49u16],
            7054u16 => &[43u16, 46u16, 49u16],
            7055u16 => &[46u16, 50u16, 49u16],
            7056u16 => &[46u16, 50u16, 49u16],
            7057u16 => &[55u16, 52u16, 45u16],
            7058u16 => &[55u16, 52u16, 45u16],
            7059u16 => &[51u16, 42u16],
            7060u16 => &[51u16, 42u16],
            7061u16 => &[51u16, 42u16, 49u16],
            7062u16 => &[51u16, 42u16, 49u16],
            7063u16 => &[51u16, 50u16, 45u16],
            7064u16 => &[51u16, 50u16, 45u16],
            7065u16 => &[51u16, 45u16],
            7066u16 => &[51u16, 45u16],
            7067u16 => &[51u16, 47u16],
            7068u16 => &[51u16, 47u16],
            7069u16 => &[43u16, 56u16],
            7070u16 => &[43u16, 56u16],
            7071u16 => &[43u16, 46u16, 49u16],
            7072u16 => &[43u16, 46u16, 49u16],
            7073u16 => &[43u16, 44u16, 45u16],
            7074u16 => &[43u16, 44u16, 45u16],
            7075u16 => &[55u16, 52u16, 45u16],
            7076u16 => &[55u16, 52u16, 45u16],
            7077u16 => &[48u16, 42u16, 49u16],
            7078u16 => &[48u16, 42u16, 49u16],
            7079u16 => &[51u16, 50u16],
            7080u16 => &[51u16, 50u16],
            7081u16 => &[51u16, 50u16, 45u16],
            7082u16 => &[51u16, 50u16, 45u16],
            7083u16 => &[51u16, 50u16, 49u16],
            7084u16 => &[51u16, 50u16, 49u16],
            7085u16 => &[51u16, 47u16],
            7086u16 => &[51u16, 47u16],
            7087u16 => &[51u16, 53u16],
            7088u16 => &[51u16, 53u16],
            7089u16 => &[57u16, 50u16],
            7090u16 => &[57u16, 50u16],
            7091u16 => &[41u16, 46u16, 47u16],
            7092u16 => &[41u16, 46u16, 47u16],
            7093u16 => &[54u16, 44u16, 53u16],
            7094u16 => &[54u16, 44u16, 53u16],
            7095u16 => &[44u16, 50u16, 45u16],
            7096u16 => &[44u16, 50u16, 45u16],
            7097u16 => &[46u16, 50u16, 49u16],
            7098u16 => &[46u16, 50u16, 49u16],
            7099u16 => &[51u16, 56u16],
            7100u16 => &[51u16, 56u16],
            7101u16 => &[51u16, 52u16, 45u16],
            7102u16 => &[51u16, 52u16, 45u16],
            7103u16 => &[51u16, 42u16, 49u16],
            7104u16 => &[51u16, 42u16, 49u16],
            7105u16 => &[51u16, 49u16],
            7106u16 => &[51u16, 49u16],
            7107u16 => &[51u16, 45u16],
            7108u16 => &[51u16, 45u16],
            7109u16 => &[41u16, 42u16],
            7110u16 => &[41u16, 42u16],
            7111u16 => &[43u16, 44u16, 45u16],
            7112u16 => &[43u16, 44u16, 45u16],
            7113u16 => &[41u16, 46u16, 47u16],
            7114u16 => &[41u16, 46u16, 47u16],
            7115u16 => &[48u16, 42u16, 49u16],
            7116u16 => &[48u16, 42u16, 49u16],
            7117u16 => &[44u16, 50u16, 45u16],
            7118u16 => &[44u16, 50u16, 45u16],
            7119u16 => &[51u16, 52u16],
            7120u16 => &[51u16, 52u16],
            7121u16 => &[51u16, 50u16, 49u16],
            7122u16 => &[51u16, 50u16, 49u16],
            7123u16 => &[51u16, 52u16, 45u16],
            7124u16 => &[51u16, 52u16, 45u16],
            7125u16 => &[51u16, 53u16],
            7126u16 => &[51u16, 53u16],
            7127u16 => &[51u16, 49u16],
            7128u16 => &[51u16, 49u16],
            7129u16 => &[54u16, 52u16],
            7130u16 => &[54u16, 52u16],
            7131u16 => &[54u16, 44u16, 53u16],
            7132u16 => &[54u16, 44u16, 53u16],
            7133u16 => &[43u16, 46u16, 49u16],
            7134u16 => &[43u16, 46u16, 49u16],
            7135u16 => &[46u16, 50u16, 49u16],
            7136u16 => &[46u16, 50u16, 49u16],
            7137u16 => &[55u16, 52u16, 45u16],
            7138u16 => &[55u16, 52u16, 45u16],
            7139u16 => &[51u16, 42u16],
            7140u16 => &[51u16, 42u16],
            7141u16 => &[51u16, 42u16, 49u16],
            7142u16 => &[51u16, 42u16, 49u16],
            7143u16 => &[51u16, 50u16, 45u16],
            7144u16 => &[51u16, 50u16, 45u16],
            7145u16 => &[51u16, 45u16],
            7146u16 => &[51u16, 45u16],
            7147u16 => &[51u16, 47u16],
            7148u16 => &[51u16, 47u16],
            7149u16 => &[43u16, 56u16],
            7150u16 => &[43u16, 56u16],
            7151u16 => &[43u16, 46u16, 49u16],
            7152u16 => &[43u16, 46u16, 49u16],
            7153u16 => &[43u16, 44u16, 45u16],
            7154u16 => &[43u16, 44u16, 45u16],
            7155u16 => &[55u16, 52u16, 45u16],
            7156u16 => &[55u16, 52u16, 45u16],
            7157u16 => &[48u16, 42u16, 49u16],
            7158u16 => &[48u16, 42u16, 49u16],
            7159u16 => &[51u16, 50u16],
            7160u16 => &[51u16, 50u16],
            7161u16 => &[51u16, 50u16, 45u16],
            7162u16 => &[51u16, 50u16, 45u16],
            7163u16 => &[51u16, 50u16, 49u16],
            7164u16 => &[51u16, 50u16, 49u16],
            7165u16 => &[51u16, 47u16],
            7166u16 => &[51u16, 47u16],
            7167u16 => &[51u16, 53u16],
            7168u16 => &[51u16, 53u16],
            7169u16 => &[57u16, 50u16],
            7170u16 => &[57u16, 50u16],
            7171u16 => &[41u16, 46u16, 47u16],
            7172u16 => &[41u16, 46u16, 47u16],
            7173u16 => &[54u16, 44u16, 53u16],
            7174u16 => &[54u16, 44u16, 53u16],
            7175u16 => &[44u16, 50u16, 45u16],
            7176u16 => &[44u16, 50u16, 45u16],
            7177u16 => &[46u16, 50u16, 49u16],
            7178u16 => &[46u16, 50u16, 49u16],
            7179u16 => &[51u16, 56u16],
            7180u16 => &[51u16, 56u16],
            7181u16 => &[51u16, 52u16, 45u16],
            7182u16 => &[51u16, 52u16, 45u16],
            7183u16 => &[51u16, 42u16, 49u16],
            7184u16 => &[51u16, 42u16, 49u16],
            7185u16 => &[51u16, 49u16],
            7186u16 => &[51u16, 49u16],
            7187u16 => &[51u16, 45u16],
            7188u16 => &[51u16, 45u16],
            7189u16 => &[41u16, 42u16],
            7190u16 => &[41u16, 42u16],
            7191u16 => &[43u16, 44u16, 45u16],
            7192u16 => &[43u16, 44u16, 45u16],
            7193u16 => &[41u16, 46u16, 47u16],
            7194u16 => &[41u16, 46u16, 47u16],
            7195u16 => &[48u16, 42u16, 49u16],
            7196u16 => &[48u16, 42u16, 49u16],
            7197u16 => &[44u16, 50u16, 45u16],
            7198u16 => &[44u16, 50u16, 45u16],
            7199u16 => &[51u16, 52u16],
            7200u16 => &[51u16, 52u16],
            7201u16 => &[51u16, 50u16, 49u16],
            7202u16 => &[51u16, 50u16, 49u16],
            7203u16 => &[51u16, 52u16, 45u16],
            7204u16 => &[51u16, 52u16, 45u16],
            7205u16 => &[51u16, 53u16],
            7206u16 => &[51u16, 53u16],
            7207u16 => &[51u16, 49u16],
            7208u16 => &[51u16, 49u16],
            7209u16 => &[54u16, 52u16],
            7210u16 => &[54u16, 52u16],
            7211u16 => &[54u16, 44u16, 53u16],
            7212u16 => &[54u16, 44u16, 53u16],
            7213u16 => &[43u16, 46u16, 49u16],
            7214u16 => &[43u16, 46u16, 49u16],
            7215u16 => &[46u16, 50u16, 49u16],
            7216u16 => &[46u16, 50u16, 49u16],
            7217u16 => &[55u16, 52u16, 45u16],
            7218u16 => &[55u16, 52u16, 45u16],
            7219u16 => &[51u16, 42u16],
            7220u16 => &[51u16, 42u16],
            7221u16 => &[51u16, 42u16, 49u16],
            7222u16 => &[51u16, 42u16, 49u16],
            7223u16 => &[51u16, 50u16, 45u16],
            7224u16 => &[51u16, 50u16, 45u16],
            7225u16 => &[51u16, 45u16],
            7226u16 => &[51u16, 45u16],
            7227u16 => &[51u16, 47u16],
            7228u16 => &[51u16, 47u16],
            7229u16 => &[43u16, 56u16],
            7230u16 => &[43u16, 56u16],
            7231u16 => &[43u16, 46u16, 49u16],
            7232u16 => &[43u16, 46u16, 49u16],
            7233u16 => &[43u16, 44u16, 45u16],
            7234u16 => &[43u16, 44u16, 45u16],
            7235u16 => &[55u16, 52u16, 45u16],
            7236u16 => &[55u16, 52u16, 45u16],
            7237u16 => &[48u16, 42u16, 49u16],
            7238u16 => &[48u16, 42u16, 49u16],
            7239u16 => &[51u16, 50u16],
            7240u16 => &[51u16, 50u16],
            7241u16 => &[51u16, 50u16, 45u16],
            7242u16 => &[51u16, 50u16, 45u16],
            7243u16 => &[51u16, 50u16, 49u16],
            7244u16 => &[51u16, 50u16, 49u16],
            7245u16 => &[51u16, 47u16],
            7246u16 => &[51u16, 47u16],
            7247u16 => &[51u16, 53u16],
            7248u16 => &[51u16, 53u16],
            7249u16 => &[57u16, 50u16],
            7250u16 => &[57u16, 50u16],
            7251u16 => &[41u16, 46u16, 47u16],
            7252u16 => &[41u16, 46u16, 47u16],
            7253u16 => &[54u16, 44u16, 53u16],
            7254u16 => &[54u16, 44u16, 53u16],
            7255u16 => &[44u16, 50u16, 45u16],
            7256u16 => &[44u16, 50u16, 45u16],
            7257u16 => &[46u16, 50u16, 49u16],
            7258u16 => &[46u16, 50u16, 49u16],
            7259u16 => &[51u16, 56u16],
            7260u16 => &[51u16, 56u16],
            7261u16 => &[51u16, 52u16, 45u16],
            7262u16 => &[51u16, 52u16, 45u16],
            7263u16 => &[51u16, 42u16, 49u16],
            7264u16 => &[51u16, 42u16, 49u16],
            7265u16 => &[51u16, 49u16],
            7266u16 => &[51u16, 49u16],
            7267u16 => &[51u16, 45u16],
            7268u16 => &[51u16, 45u16],
            7269u16 => &[0u16],
            7270u16 => &[0u16],
            7271u16 => &[107u16],
            7272u16 => &[0u16],
            7273u16 => &[75u16, 76u16, 77u16],
            7274u16 => &[78u16, 79u16],
            7275u16 => &[75u16, 76u16, 77u16],
            7276u16 => &[78u16, 79u16],
            7277u16 => &[75u16, 76u16],
            7278u16 => &[80u16, 79u16],
            7279u16 => &[75u16, 76u16],
            7280u16 => &[80u16, 79u16],
            7281u16 => &[75u16, 77u16],
            7282u16 => &[81u16, 79u16],
            7283u16 => &[75u16, 77u16],
            7284u16 => &[81u16, 79u16],
            7285u16 => &[75u16],
            7286u16 => &[82u16],
            7287u16 => &[75u16],
            7288u16 => &[82u16],
            7289u16 => &[83u16, 76u16, 77u16],
            7290u16 => &[78u16],
            7291u16 => &[83u16, 76u16, 77u16],
            7292u16 => &[78u16],
            7293u16 => &[83u16, 76u16],
            7294u16 => &[80u16],
            7295u16 => &[83u16, 76u16],
            7296u16 => &[80u16],
            7297u16 => &[83u16, 77u16],
            7298u16 => &[81u16],
            7299u16 => &[83u16, 77u16],
            7300u16 => &[81u16],
            7301u16 => &[83u16],
            7302u16 => &[84u16],
            7303u16 => &[83u16],
            7304u16 => &[84u16],
            7305u16 => &[41u16, 42u16],
            7306u16 => &[41u16, 42u16],
            7307u16 => &[43u16, 44u16, 45u16],
            7308u16 => &[43u16, 44u16, 45u16],
            7309u16 => &[41u16, 46u16, 47u16],
            7310u16 => &[41u16, 46u16, 47u16],
            7311u16 => &[48u16, 42u16, 49u16],
            7312u16 => &[48u16, 42u16, 49u16],
            7313u16 => &[44u16, 50u16, 45u16],
            7314u16 => &[44u16, 50u16, 45u16],
            7315u16 => &[51u16, 52u16],
            7316u16 => &[51u16, 52u16],
            7317u16 => &[51u16, 50u16, 49u16],
            7318u16 => &[51u16, 50u16, 49u16],
            7319u16 => &[51u16, 52u16, 45u16],
            7320u16 => &[51u16, 52u16, 45u16],
            7321u16 => &[51u16, 53u16],
            7322u16 => &[51u16, 53u16],
            7323u16 => &[51u16, 49u16],
            7324u16 => &[51u16, 49u16],
            7325u16 => &[54u16, 52u16],
            7326u16 => &[54u16, 52u16],
            7327u16 => &[54u16, 44u16, 53u16],
            7328u16 => &[54u16, 44u16, 53u16],
            7329u16 => &[43u16, 46u16, 49u16],
            7330u16 => &[43u16, 46u16, 49u16],
            7331u16 => &[46u16, 50u16, 49u16],
            7332u16 => &[46u16, 50u16, 49u16],
            7333u16 => &[55u16, 52u16, 45u16],
            7334u16 => &[55u16, 52u16, 45u16],
            7335u16 => &[51u16, 42u16],
            7336u16 => &[51u16, 42u16],
            7337u16 => &[51u16, 42u16, 49u16],
            7338u16 => &[51u16, 42u16, 49u16],
            7339u16 => &[51u16, 50u16, 45u16],
            7340u16 => &[51u16, 50u16, 45u16],
            7341u16 => &[51u16, 45u16],
            7342u16 => &[51u16, 45u16],
            7343u16 => &[51u16, 47u16],
            7344u16 => &[51u16, 47u16],
            7345u16 => &[43u16, 56u16],
            7346u16 => &[43u16, 56u16],
            7347u16 => &[43u16, 46u16, 49u16],
            7348u16 => &[43u16, 46u16, 49u16],
            7349u16 => &[43u16, 44u16, 45u16],
            7350u16 => &[43u16, 44u16, 45u16],
            7351u16 => &[55u16, 52u16, 45u16],
            7352u16 => &[55u16, 52u16, 45u16],
            7353u16 => &[48u16, 42u16, 49u16],
            7354u16 => &[48u16, 42u16, 49u16],
            7355u16 => &[51u16, 50u16],
            7356u16 => &[51u16, 50u16],
            7357u16 => &[51u16, 50u16, 45u16],
            7358u16 => &[51u16, 50u16, 45u16],
            7359u16 => &[51u16, 50u16, 49u16],
            7360u16 => &[51u16, 50u16, 49u16],
            7361u16 => &[51u16, 47u16],
            7362u16 => &[51u16, 47u16],
            7363u16 => &[51u16, 53u16],
            7364u16 => &[51u16, 53u16],
            7365u16 => &[57u16, 50u16],
            7366u16 => &[57u16, 50u16],
            7367u16 => &[41u16, 46u16, 47u16],
            7368u16 => &[41u16, 46u16, 47u16],
            7369u16 => &[54u16, 44u16, 53u16],
            7370u16 => &[54u16, 44u16, 53u16],
            7371u16 => &[44u16, 50u16, 45u16],
            7372u16 => &[44u16, 50u16, 45u16],
            7373u16 => &[46u16, 50u16, 49u16],
            7374u16 => &[46u16, 50u16, 49u16],
            7375u16 => &[51u16, 56u16],
            7376u16 => &[51u16, 56u16],
            7377u16 => &[51u16, 52u16, 45u16],
            7378u16 => &[51u16, 52u16, 45u16],
            7379u16 => &[51u16, 42u16, 49u16],
            7380u16 => &[51u16, 42u16, 49u16],
            7381u16 => &[51u16, 49u16],
            7382u16 => &[51u16, 49u16],
            7383u16 => &[51u16, 45u16],
            7384u16 => &[51u16, 45u16],
            7385u16 => &[],
            7386u16 => &[],
            7387u16 => &[],
            7388u16 => &[],
            7389u16 => &[18u16],
            7390u16 => &[108u16, 109u16],
            7391u16 => &[108u16, 109u16],
            7392u16 => &[108u16, 109u16],
            7393u16 => &[108u16, 109u16],
            7394u16 => &[108u16, 109u16],
            7395u16 => &[108u16, 109u16],
            7396u16 => &[108u16, 109u16],
            7397u16 => &[108u16, 109u16],
            7398u16 => &[
                110u16, 111u16, 112u16, 113u16, 114u16, 115u16, 116u16, 117u16, 118u16, 119u16,
                120u16, 121u16, 122u16, 123u16, 124u16,
            ],
            7399u16 => &[
                110u16, 111u16, 112u16, 113u16, 114u16, 115u16, 116u16, 117u16, 118u16, 119u16,
                120u16, 121u16, 122u16, 123u16, 124u16,
            ],
            7400u16 => &[
                110u16, 111u16, 112u16, 113u16, 114u16, 115u16, 116u16, 117u16, 118u16, 119u16,
                120u16, 121u16, 122u16, 123u16, 124u16,
            ],
            7401u16 => &[
                110u16, 111u16, 112u16, 113u16, 114u16, 115u16, 116u16, 117u16, 118u16, 119u16,
                120u16, 121u16, 122u16, 123u16, 124u16,
            ],
            7402u16 => &[
                110u16, 111u16, 112u16, 113u16, 114u16, 115u16, 116u16, 117u16, 118u16, 119u16,
                120u16, 121u16, 122u16, 123u16, 124u16,
            ],
            7403u16 => &[
                110u16, 111u16, 112u16, 113u16, 114u16, 115u16, 116u16, 117u16, 118u16, 119u16,
                120u16, 121u16, 122u16, 123u16, 124u16,
            ],
            7404u16 => &[
                110u16, 111u16, 112u16, 113u16, 114u16, 115u16, 116u16, 117u16, 118u16, 119u16,
                120u16, 121u16, 122u16, 123u16, 124u16,
            ],
            7405u16 => &[
                110u16, 111u16, 112u16, 113u16, 114u16, 115u16, 116u16, 117u16, 118u16, 119u16,
                120u16, 121u16, 122u16, 123u16, 124u16,
            ],
            7406u16 => &[],
            7407u16 => &[125u16, 126u16],
            7408u16 => &[125u16, 126u16],
            7409u16 => &[125u16, 126u16],
            7410u16 => &[125u16, 126u16],
            7411u16 => &[125u16],
            7412u16 => &[125u16],
            7413u16 => &[125u16],
            7414u16 => &[125u16],
            7415u16 => &[0u16],
            7416u16 => &[127u16],
            7417u16 => &[0u16],
            7418u16 => &[0u16],
            7419u16 => &[128u16],
            7420u16 => &[129u16],
            7421u16 => &[130u16],
            7422u16 => &[131u16],
            7423u16 => &[132u16],
            7424u16 => &[133u16],
            7425u16 => &[134u16],
            7426u16 => &[135u16],
            7427u16 => &[136u16],
            7428u16 => &[137u16],
            7429u16 => &[138u16],
            7430u16 => &[139u16],
            7431u16 => &[41u16, 42u16],
            7432u16 => &[41u16, 42u16],
            7433u16 => &[43u16, 44u16, 45u16],
            7434u16 => &[43u16, 44u16, 45u16],
            7435u16 => &[41u16, 46u16, 47u16],
            7436u16 => &[41u16, 46u16, 47u16],
            7437u16 => &[48u16, 42u16, 49u16],
            7438u16 => &[48u16, 42u16, 49u16],
            7439u16 => &[44u16, 50u16, 45u16],
            7440u16 => &[44u16, 50u16, 45u16],
            7441u16 => &[51u16, 52u16],
            7442u16 => &[51u16, 52u16],
            7443u16 => &[51u16, 50u16, 49u16],
            7444u16 => &[51u16, 50u16, 49u16],
            7445u16 => &[51u16, 52u16, 45u16],
            7446u16 => &[51u16, 52u16, 45u16],
            7447u16 => &[51u16, 53u16],
            7448u16 => &[51u16, 53u16],
            7449u16 => &[51u16, 49u16],
            7450u16 => &[51u16, 49u16],
            7451u16 => &[54u16, 52u16],
            7452u16 => &[54u16, 52u16],
            7453u16 => &[54u16, 44u16, 53u16],
            7454u16 => &[54u16, 44u16, 53u16],
            7455u16 => &[43u16, 46u16, 49u16],
            7456u16 => &[43u16, 46u16, 49u16],
            7457u16 => &[46u16, 50u16, 49u16],
            7458u16 => &[46u16, 50u16, 49u16],
            7459u16 => &[55u16, 52u16, 45u16],
            7460u16 => &[55u16, 52u16, 45u16],
            7461u16 => &[51u16, 42u16],
            7462u16 => &[51u16, 42u16],
            7463u16 => &[51u16, 42u16, 49u16],
            7464u16 => &[51u16, 42u16, 49u16],
            7465u16 => &[51u16, 50u16, 45u16],
            7466u16 => &[51u16, 50u16, 45u16],
            7467u16 => &[51u16, 45u16],
            7468u16 => &[51u16, 45u16],
            7469u16 => &[51u16, 47u16],
            7470u16 => &[51u16, 47u16],
            7471u16 => &[43u16, 56u16],
            7472u16 => &[43u16, 56u16],
            7473u16 => &[43u16, 46u16, 49u16],
            7474u16 => &[43u16, 46u16, 49u16],
            7475u16 => &[43u16, 44u16, 45u16],
            7476u16 => &[43u16, 44u16, 45u16],
            7477u16 => &[55u16, 52u16, 45u16],
            7478u16 => &[55u16, 52u16, 45u16],
            7479u16 => &[48u16, 42u16, 49u16],
            7480u16 => &[48u16, 42u16, 49u16],
            7481u16 => &[51u16, 50u16],
            7482u16 => &[51u16, 50u16],
            7483u16 => &[51u16, 50u16, 45u16],
            7484u16 => &[51u16, 50u16, 45u16],
            7485u16 => &[51u16, 50u16, 49u16],
            7486u16 => &[51u16, 50u16, 49u16],
            7487u16 => &[51u16, 47u16],
            7488u16 => &[51u16, 47u16],
            7489u16 => &[51u16, 53u16],
            7490u16 => &[51u16, 53u16],
            7491u16 => &[57u16, 50u16],
            7492u16 => &[57u16, 50u16],
            7493u16 => &[41u16, 46u16, 47u16],
            7494u16 => &[41u16, 46u16, 47u16],
            7495u16 => &[54u16, 44u16, 53u16],
            7496u16 => &[54u16, 44u16, 53u16],
            7497u16 => &[44u16, 50u16, 45u16],
            7498u16 => &[44u16, 50u16, 45u16],
            7499u16 => &[46u16, 50u16, 49u16],
            7500u16 => &[46u16, 50u16, 49u16],
            7501u16 => &[51u16, 56u16],
            7502u16 => &[51u16, 56u16],
            7503u16 => &[51u16, 52u16, 45u16],
            7504u16 => &[51u16, 52u16, 45u16],
            7505u16 => &[51u16, 42u16, 49u16],
            7506u16 => &[51u16, 42u16, 49u16],
            7507u16 => &[51u16, 49u16],
            7508u16 => &[51u16, 49u16],
            7509u16 => &[51u16, 45u16],
            7510u16 => &[51u16, 45u16],
            7511u16 => &[0u16],
            7512u16 => &[0u16],
            7513u16 => &[58u16],
            7514u16 => &[58u16],
            7515u16 => &[58u16],
            7516u16 => &[58u16],
            7517u16 => &[58u16],
            7518u16 => &[58u16],
            7519u16 => &[58u16],
            7520u16 => &[58u16],
            7521u16 => &[],
            7522u16 => &[],
            7523u16 => &[],
            7524u16 => &[],
            7525u16 => &[],
            7526u16 => &[],
            7527u16 => &[],
            7528u16 => &[],
            7529u16 => &[],
            7530u16 => &[],
            7531u16 => &[],
            7532u16 => &[],
            7533u16 => &[],
            7534u16 => &[],
            7535u16 => &[],
            7536u16 => &[],
            7537u16 => &[],
            7538u16 => &[],
            7539u16 => &[],
            7540u16 => &[],
            7541u16 => &[],
            7542u16 => &[],
            7543u16 => &[],
            7544u16 => &[],
            7545u16 => &[],
            7546u16 => &[],
            7547u16 => &[],
            7548u16 => &[],
            7549u16 => &[],
            7550u16 => &[],
            7551u16 => &[],
            7552u16 => &[],
            7553u16 => &[],
            7554u16 => &[],
            7555u16 => &[],
            7556u16 => &[],
            7557u16 => &[],
            7558u16 => &[],
            7559u16 => &[],
            7560u16 => &[],
            7561u16 => &[],
            7562u16 => &[],
            7563u16 => &[],
            7564u16 => &[],
            7565u16 => &[],
            7566u16 => &[],
            7567u16 => &[],
            7568u16 => &[],
            7569u16 => &[],
            7570u16 => &[],
            7571u16 => &[],
            7572u16 => &[],
            7573u16 => &[],
            7574u16 => &[],
            7575u16 => &[],
            7576u16 => &[],
            7577u16 => &[],
            7578u16 => &[],
            7579u16 => &[],
            7580u16 => &[],
            7581u16 => &[],
            7582u16 => &[],
            7583u16 => &[],
            7584u16 => &[],
            7585u16 => &[],
            7586u16 => &[],
            7587u16 => &[],
            7588u16 => &[],
            7589u16 => &[],
            7590u16 => &[],
            7591u16 => &[],
            7592u16 => &[],
            7593u16 => &[],
            7594u16 => &[],
            7595u16 => &[],
            7596u16 => &[],
            7597u16 => &[],
            7598u16 => &[],
            7599u16 => &[],
            7600u16 => &[],
            7601u16 => &[],
            7602u16 => &[],
            7603u16 => &[],
            7604u16 => &[],
            7605u16 => &[],
            7606u16 => &[],
            7607u16 => &[],
            7608u16 => &[],
            7609u16 => &[],
            7610u16 => &[],
            7611u16 => &[],
            7612u16 => &[],
            7613u16 => &[],
            7614u16 => &[],
            7615u16 => &[],
            7616u16 => &[],
            7617u16 => &[],
            7618u16 => &[],
            7619u16 => &[],
            7620u16 => &[],
            7621u16 => &[],
            7622u16 => &[],
            7623u16 => &[],
            7624u16 => &[],
            7625u16 => &[],
            7626u16 => &[],
            7627u16 => &[],
            7628u16 => &[],
            7629u16 => &[],
            7630u16 => &[],
            7631u16 => &[],
            7632u16 => &[],
            7633u16 => &[],
            7634u16 => &[],
            7635u16 => &[],
            7636u16 => &[],
            7637u16 => &[],
            7638u16 => &[],
            7639u16 => &[],
            7640u16 => &[],
            7641u16 => &[],
            7642u16 => &[],
            7643u16 => &[],
            7644u16 => &[],
            7645u16 => &[],
            7646u16 => &[],
            7647u16 => &[],
            7648u16 => &[],
            7649u16 => &[],
            7650u16 => &[],
            7651u16 => &[],
            7652u16 => &[],
            7653u16 => &[],
            7654u16 => &[],
            7655u16 => &[],
            7656u16 => &[],
            7657u16 => &[],
            7658u16 => &[],
            7659u16 => &[],
            7660u16 => &[],
            7661u16 => &[],
            7662u16 => &[],
            7663u16 => &[],
            7664u16 => &[],
            7665u16 => &[0u16],
            7666u16 => &[41u16, 42u16],
            7667u16 => &[41u16, 42u16],
            7668u16 => &[43u16, 44u16, 45u16],
            7669u16 => &[43u16, 44u16, 45u16],
            7670u16 => &[41u16, 46u16, 47u16],
            7671u16 => &[41u16, 46u16, 47u16],
            7672u16 => &[48u16, 42u16, 49u16],
            7673u16 => &[48u16, 42u16, 49u16],
            7674u16 => &[44u16, 50u16, 45u16],
            7675u16 => &[44u16, 50u16, 45u16],
            7676u16 => &[51u16, 52u16],
            7677u16 => &[51u16, 52u16],
            7678u16 => &[51u16, 50u16, 49u16],
            7679u16 => &[51u16, 50u16, 49u16],
            7680u16 => &[51u16, 52u16, 45u16],
            7681u16 => &[51u16, 52u16, 45u16],
            7682u16 => &[51u16, 53u16],
            7683u16 => &[51u16, 53u16],
            7684u16 => &[51u16, 49u16],
            7685u16 => &[51u16, 49u16],
            7686u16 => &[54u16, 52u16],
            7687u16 => &[54u16, 52u16],
            7688u16 => &[54u16, 44u16, 53u16],
            7689u16 => &[54u16, 44u16, 53u16],
            7690u16 => &[43u16, 46u16, 49u16],
            7691u16 => &[43u16, 46u16, 49u16],
            7692u16 => &[46u16, 50u16, 49u16],
            7693u16 => &[46u16, 50u16, 49u16],
            7694u16 => &[55u16, 52u16, 45u16],
            7695u16 => &[55u16, 52u16, 45u16],
            7696u16 => &[51u16, 42u16],
            7697u16 => &[51u16, 42u16],
            7698u16 => &[51u16, 42u16, 49u16],
            7699u16 => &[51u16, 42u16, 49u16],
            7700u16 => &[51u16, 50u16, 45u16],
            7701u16 => &[51u16, 50u16, 45u16],
            7702u16 => &[51u16, 45u16],
            7703u16 => &[51u16, 45u16],
            7704u16 => &[51u16, 47u16],
            7705u16 => &[51u16, 47u16],
            7706u16 => &[43u16, 56u16],
            7707u16 => &[43u16, 56u16],
            7708u16 => &[43u16, 46u16, 49u16],
            7709u16 => &[43u16, 46u16, 49u16],
            7710u16 => &[43u16, 44u16, 45u16],
            7711u16 => &[43u16, 44u16, 45u16],
            7712u16 => &[55u16, 52u16, 45u16],
            7713u16 => &[55u16, 52u16, 45u16],
            7714u16 => &[48u16, 42u16, 49u16],
            7715u16 => &[48u16, 42u16, 49u16],
            7716u16 => &[51u16, 50u16],
            7717u16 => &[51u16, 50u16],
            7718u16 => &[51u16, 50u16, 45u16],
            7719u16 => &[51u16, 50u16, 45u16],
            7720u16 => &[51u16, 50u16, 49u16],
            7721u16 => &[51u16, 50u16, 49u16],
            7722u16 => &[51u16, 47u16],
            7723u16 => &[51u16, 47u16],
            7724u16 => &[51u16, 53u16],
            7725u16 => &[51u16, 53u16],
            7726u16 => &[57u16, 50u16],
            7727u16 => &[57u16, 50u16],
            7728u16 => &[41u16, 46u16, 47u16],
            7729u16 => &[41u16, 46u16, 47u16],
            7730u16 => &[54u16, 44u16, 53u16],
            7731u16 => &[54u16, 44u16, 53u16],
            7732u16 => &[44u16, 50u16, 45u16],
            7733u16 => &[44u16, 50u16, 45u16],
            7734u16 => &[46u16, 50u16, 49u16],
            7735u16 => &[46u16, 50u16, 49u16],
            7736u16 => &[51u16, 56u16],
            7737u16 => &[51u16, 56u16],
            7738u16 => &[51u16, 52u16, 45u16],
            7739u16 => &[51u16, 52u16, 45u16],
            7740u16 => &[51u16, 42u16, 49u16],
            7741u16 => &[51u16, 42u16, 49u16],
            7742u16 => &[51u16, 49u16],
            7743u16 => &[51u16, 49u16],
            7744u16 => &[51u16, 45u16],
            7745u16 => &[51u16, 45u16],
            7746u16 => &[41u16, 42u16],
            7747u16 => &[41u16, 42u16],
            7748u16 => &[43u16, 44u16, 45u16],
            7749u16 => &[43u16, 44u16, 45u16],
            7750u16 => &[41u16, 46u16, 47u16],
            7751u16 => &[41u16, 46u16, 47u16],
            7752u16 => &[48u16, 42u16, 49u16],
            7753u16 => &[48u16, 42u16, 49u16],
            7754u16 => &[44u16, 50u16, 45u16],
            7755u16 => &[44u16, 50u16, 45u16],
            7756u16 => &[51u16, 52u16],
            7757u16 => &[51u16, 52u16],
            7758u16 => &[51u16, 50u16, 49u16],
            7759u16 => &[51u16, 50u16, 49u16],
            7760u16 => &[51u16, 52u16, 45u16],
            7761u16 => &[51u16, 52u16, 45u16],
            7762u16 => &[51u16, 53u16],
            7763u16 => &[51u16, 53u16],
            7764u16 => &[51u16, 49u16],
            7765u16 => &[51u16, 49u16],
            7766u16 => &[54u16, 52u16],
            7767u16 => &[54u16, 52u16],
            7768u16 => &[54u16, 44u16, 53u16],
            7769u16 => &[54u16, 44u16, 53u16],
            7770u16 => &[43u16, 46u16, 49u16],
            7771u16 => &[43u16, 46u16, 49u16],
            7772u16 => &[46u16, 50u16, 49u16],
            7773u16 => &[46u16, 50u16, 49u16],
            7774u16 => &[55u16, 52u16, 45u16],
            7775u16 => &[55u16, 52u16, 45u16],
            7776u16 => &[51u16, 42u16],
            7777u16 => &[51u16, 42u16],
            7778u16 => &[51u16, 42u16, 49u16],
            7779u16 => &[51u16, 42u16, 49u16],
            7780u16 => &[51u16, 50u16, 45u16],
            7781u16 => &[51u16, 50u16, 45u16],
            7782u16 => &[51u16, 45u16],
            7783u16 => &[51u16, 45u16],
            7784u16 => &[51u16, 47u16],
            7785u16 => &[51u16, 47u16],
            7786u16 => &[43u16, 56u16],
            7787u16 => &[43u16, 56u16],
            7788u16 => &[43u16, 46u16, 49u16],
            7789u16 => &[43u16, 46u16, 49u16],
            7790u16 => &[43u16, 44u16, 45u16],
            7791u16 => &[43u16, 44u16, 45u16],
            7792u16 => &[55u16, 52u16, 45u16],
            7793u16 => &[55u16, 52u16, 45u16],
            7794u16 => &[48u16, 42u16, 49u16],
            7795u16 => &[48u16, 42u16, 49u16],
            7796u16 => &[51u16, 50u16],
            7797u16 => &[51u16, 50u16],
            7798u16 => &[51u16, 50u16, 45u16],
            7799u16 => &[51u16, 50u16, 45u16],
            7800u16 => &[51u16, 50u16, 49u16],
            7801u16 => &[51u16, 50u16, 49u16],
            7802u16 => &[51u16, 47u16],
            7803u16 => &[51u16, 47u16],
            7804u16 => &[51u16, 53u16],
            7805u16 => &[51u16, 53u16],
            7806u16 => &[57u16, 50u16],
            7807u16 => &[57u16, 50u16],
            7808u16 => &[41u16, 46u16, 47u16],
            7809u16 => &[41u16, 46u16, 47u16],
            7810u16 => &[54u16, 44u16, 53u16],
            7811u16 => &[54u16, 44u16, 53u16],
            7812u16 => &[44u16, 50u16, 45u16],
            7813u16 => &[44u16, 50u16, 45u16],
            7814u16 => &[46u16, 50u16, 49u16],
            7815u16 => &[46u16, 50u16, 49u16],
            7816u16 => &[51u16, 56u16],
            7817u16 => &[51u16, 56u16],
            7818u16 => &[51u16, 52u16, 45u16],
            7819u16 => &[51u16, 52u16, 45u16],
            7820u16 => &[51u16, 42u16, 49u16],
            7821u16 => &[51u16, 42u16, 49u16],
            7822u16 => &[51u16, 49u16],
            7823u16 => &[51u16, 49u16],
            7824u16 => &[51u16, 45u16],
            7825u16 => &[51u16, 45u16],
            7826u16 => &[41u16, 42u16],
            7827u16 => &[41u16, 42u16],
            7828u16 => &[43u16, 44u16, 45u16],
            7829u16 => &[43u16, 44u16, 45u16],
            7830u16 => &[41u16, 46u16, 47u16],
            7831u16 => &[41u16, 46u16, 47u16],
            7832u16 => &[48u16, 42u16, 49u16],
            7833u16 => &[48u16, 42u16, 49u16],
            7834u16 => &[44u16, 50u16, 45u16],
            7835u16 => &[44u16, 50u16, 45u16],
            7836u16 => &[51u16, 52u16],
            7837u16 => &[51u16, 52u16],
            7838u16 => &[51u16, 50u16, 49u16],
            7839u16 => &[51u16, 50u16, 49u16],
            7840u16 => &[51u16, 52u16, 45u16],
            7841u16 => &[51u16, 52u16, 45u16],
            7842u16 => &[51u16, 53u16],
            7843u16 => &[51u16, 53u16],
            7844u16 => &[51u16, 49u16],
            7845u16 => &[51u16, 49u16],
            7846u16 => &[54u16, 52u16],
            7847u16 => &[54u16, 52u16],
            7848u16 => &[54u16, 44u16, 53u16],
            7849u16 => &[54u16, 44u16, 53u16],
            7850u16 => &[43u16, 46u16, 49u16],
            7851u16 => &[43u16, 46u16, 49u16],
            7852u16 => &[46u16, 50u16, 49u16],
            7853u16 => &[46u16, 50u16, 49u16],
            7854u16 => &[55u16, 52u16, 45u16],
            7855u16 => &[55u16, 52u16, 45u16],
            7856u16 => &[51u16, 42u16],
            7857u16 => &[51u16, 42u16],
            7858u16 => &[51u16, 42u16, 49u16],
            7859u16 => &[51u16, 42u16, 49u16],
            7860u16 => &[51u16, 50u16, 45u16],
            7861u16 => &[51u16, 50u16, 45u16],
            7862u16 => &[51u16, 45u16],
            7863u16 => &[51u16, 45u16],
            7864u16 => &[51u16, 47u16],
            7865u16 => &[51u16, 47u16],
            7866u16 => &[43u16, 56u16],
            7867u16 => &[43u16, 56u16],
            7868u16 => &[43u16, 46u16, 49u16],
            7869u16 => &[43u16, 46u16, 49u16],
            7870u16 => &[43u16, 44u16, 45u16],
            7871u16 => &[43u16, 44u16, 45u16],
            7872u16 => &[55u16, 52u16, 45u16],
            7873u16 => &[55u16, 52u16, 45u16],
            7874u16 => &[48u16, 42u16, 49u16],
            7875u16 => &[48u16, 42u16, 49u16],
            7876u16 => &[51u16, 50u16],
            7877u16 => &[51u16, 50u16],
            7878u16 => &[51u16, 50u16, 45u16],
            7879u16 => &[51u16, 50u16, 45u16],
            7880u16 => &[51u16, 50u16, 49u16],
            7881u16 => &[51u16, 50u16, 49u16],
            7882u16 => &[51u16, 47u16],
            7883u16 => &[51u16, 47u16],
            7884u16 => &[51u16, 53u16],
            7885u16 => &[51u16, 53u16],
            7886u16 => &[57u16, 50u16],
            7887u16 => &[57u16, 50u16],
            7888u16 => &[41u16, 46u16, 47u16],
            7889u16 => &[41u16, 46u16, 47u16],
            7890u16 => &[54u16, 44u16, 53u16],
            7891u16 => &[54u16, 44u16, 53u16],
            7892u16 => &[44u16, 50u16, 45u16],
            7893u16 => &[44u16, 50u16, 45u16],
            7894u16 => &[46u16, 50u16, 49u16],
            7895u16 => &[46u16, 50u16, 49u16],
            7896u16 => &[51u16, 56u16],
            7897u16 => &[51u16, 56u16],
            7898u16 => &[51u16, 52u16, 45u16],
            7899u16 => &[51u16, 52u16, 45u16],
            7900u16 => &[51u16, 42u16, 49u16],
            7901u16 => &[51u16, 42u16, 49u16],
            7902u16 => &[51u16, 49u16],
            7903u16 => &[51u16, 49u16],
            7904u16 => &[51u16, 45u16],
            7905u16 => &[51u16, 45u16],
            7906u16 => &[0u16],
            7907u16 => &[0u16],
            7908u16 => &[0u16],
            7909u16 => &[0u16],
            7910u16 => &[0u16],
            7911u16 => &[0u16],
            7912u16 => &[0u16],
            7913u16 => &[0u16],
            7914u16 => &[0u16],
            7915u16 => &[0u16],
            7916u16 => &[0u16],
            7917u16 => &[0u16],
            7918u16 => &[0u16],
            7919u16 => &[140u16],
            7920u16 => &[141u16, 142u16, 143u16],
            7921u16 => &[141u16, 142u16, 143u16],
            7922u16 => &[140u16],
            7923u16 => &[141u16, 142u16, 143u16],
            7924u16 => &[141u16, 142u16, 143u16],
            7925u16 => &[],
            7926u16 => &[144u16],
            7927u16 => &[144u16],
            7928u16 => &[],
            7929u16 => &[144u16],
            7930u16 => &[144u16],
            7931u16 => &[140u16, 145u16],
            7932u16 => &[141u16, 142u16, 143u16, 145u16],
            7933u16 => &[141u16, 142u16, 143u16, 145u16],
            7934u16 => &[140u16, 145u16],
            7935u16 => &[141u16, 142u16, 143u16, 145u16],
            7936u16 => &[141u16, 142u16, 143u16, 145u16],
            7937u16 => &[146u16],
            7938u16 => &[144u16, 147u16],
            7939u16 => &[144u16, 147u16],
            7940u16 => &[146u16],
            7941u16 => &[144u16, 147u16],
            7942u16 => &[144u16, 147u16],
            7943u16 => &[140u16, 145u16],
            7944u16 => &[141u16, 142u16, 143u16, 145u16],
            7945u16 => &[141u16, 142u16, 143u16, 145u16],
            7946u16 => &[140u16, 145u16],
            7947u16 => &[141u16, 142u16, 143u16, 145u16],
            7948u16 => &[141u16, 142u16, 143u16, 145u16],
            7949u16 => &[146u16],
            7950u16 => &[144u16, 147u16],
            7951u16 => &[144u16, 147u16],
            7952u16 => &[146u16],
            7953u16 => &[144u16, 147u16],
            7954u16 => &[144u16, 147u16],
            7955u16 => &[140u16, 148u16],
            7956u16 => &[141u16, 142u16, 143u16, 148u16],
            7957u16 => &[141u16, 142u16, 143u16, 148u16],
            7958u16 => &[140u16, 148u16],
            7959u16 => &[141u16, 142u16, 143u16, 148u16],
            7960u16 => &[141u16, 142u16, 143u16, 148u16],
            7961u16 => &[149u16],
            7962u16 => &[144u16, 150u16],
            7963u16 => &[144u16, 150u16],
            7964u16 => &[149u16],
            7965u16 => &[144u16, 150u16],
            7966u16 => &[144u16, 150u16],
            7967u16 => &[140u16, 148u16, 145u16],
            7968u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            7969u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            7970u16 => &[140u16, 148u16, 145u16],
            7971u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            7972u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            7973u16 => &[151u16],
            7974u16 => &[144u16, 150u16, 147u16],
            7975u16 => &[144u16, 150u16, 147u16],
            7976u16 => &[151u16],
            7977u16 => &[144u16, 150u16, 147u16],
            7978u16 => &[144u16, 150u16, 147u16],
            7979u16 => &[140u16, 148u16, 145u16],
            7980u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            7981u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            7982u16 => &[140u16, 148u16, 145u16],
            7983u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            7984u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            7985u16 => &[151u16],
            7986u16 => &[144u16, 150u16, 147u16],
            7987u16 => &[144u16, 150u16, 147u16],
            7988u16 => &[151u16],
            7989u16 => &[144u16, 150u16, 147u16],
            7990u16 => &[144u16, 150u16, 147u16],
            7991u16 => &[140u16, 148u16],
            7992u16 => &[141u16, 142u16, 143u16, 148u16],
            7993u16 => &[141u16, 142u16, 143u16, 148u16],
            7994u16 => &[140u16, 148u16],
            7995u16 => &[141u16, 142u16, 143u16, 148u16],
            7996u16 => &[141u16, 142u16, 143u16, 148u16],
            7997u16 => &[149u16],
            7998u16 => &[144u16, 150u16],
            7999u16 => &[144u16, 150u16],
            8000u16 => &[149u16],
            8001u16 => &[144u16, 150u16],
            8002u16 => &[144u16, 150u16],
            8003u16 => &[140u16, 148u16, 145u16],
            8004u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            8005u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            8006u16 => &[140u16, 148u16, 145u16],
            8007u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            8008u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            8009u16 => &[151u16],
            8010u16 => &[144u16, 150u16, 147u16],
            8011u16 => &[144u16, 150u16, 147u16],
            8012u16 => &[151u16],
            8013u16 => &[144u16, 150u16, 147u16],
            8014u16 => &[144u16, 150u16, 147u16],
            8015u16 => &[140u16, 148u16, 145u16],
            8016u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            8017u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            8018u16 => &[140u16, 148u16, 145u16],
            8019u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            8020u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            8021u16 => &[151u16],
            8022u16 => &[144u16, 150u16, 147u16],
            8023u16 => &[144u16, 150u16, 147u16],
            8024u16 => &[151u16],
            8025u16 => &[144u16, 150u16, 147u16],
            8026u16 => &[144u16, 150u16, 147u16],
            8027u16 => &[140u16, 152u16],
            8028u16 => &[153u16, 142u16, 143u16],
            8029u16 => &[153u16, 142u16, 143u16],
            8030u16 => &[140u16, 152u16],
            8031u16 => &[153u16, 142u16, 143u16],
            8032u16 => &[153u16, 142u16, 143u16],
            8033u16 => &[154u16],
            8034u16 => &[153u16],
            8035u16 => &[153u16],
            8036u16 => &[154u16],
            8037u16 => &[153u16],
            8038u16 => &[153u16],
            8039u16 => &[140u16, 145u16, 152u16],
            8040u16 => &[153u16, 142u16, 143u16, 145u16],
            8041u16 => &[153u16, 142u16, 143u16, 145u16],
            8042u16 => &[140u16, 145u16, 152u16],
            8043u16 => &[153u16, 142u16, 143u16, 145u16],
            8044u16 => &[153u16, 142u16, 143u16, 145u16],
            8045u16 => &[146u16, 155u16],
            8046u16 => &[153u16, 147u16],
            8047u16 => &[153u16, 147u16],
            8048u16 => &[146u16, 155u16],
            8049u16 => &[153u16, 147u16],
            8050u16 => &[153u16, 147u16],
            8051u16 => &[140u16, 145u16, 152u16],
            8052u16 => &[153u16, 142u16, 143u16, 145u16],
            8053u16 => &[153u16, 142u16, 143u16, 145u16],
            8054u16 => &[140u16, 145u16, 152u16],
            8055u16 => &[153u16, 142u16, 143u16, 145u16],
            8056u16 => &[153u16, 142u16, 143u16, 145u16],
            8057u16 => &[146u16, 155u16],
            8058u16 => &[153u16, 147u16],
            8059u16 => &[153u16, 147u16],
            8060u16 => &[146u16, 155u16],
            8061u16 => &[153u16, 147u16],
            8062u16 => &[153u16, 147u16],
            8063u16 => &[140u16, 148u16, 152u16],
            8064u16 => &[153u16, 142u16, 143u16, 148u16],
            8065u16 => &[153u16, 142u16, 143u16, 148u16],
            8066u16 => &[140u16, 148u16, 152u16],
            8067u16 => &[153u16, 142u16, 143u16, 148u16],
            8068u16 => &[153u16, 142u16, 143u16, 148u16],
            8069u16 => &[149u16, 155u16],
            8070u16 => &[153u16, 150u16],
            8071u16 => &[153u16, 150u16],
            8072u16 => &[149u16, 155u16],
            8073u16 => &[153u16, 150u16],
            8074u16 => &[153u16, 150u16],
            8075u16 => &[140u16, 148u16, 145u16, 152u16],
            8076u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8077u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8078u16 => &[140u16, 148u16, 145u16, 152u16],
            8079u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8080u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8081u16 => &[151u16, 155u16],
            8082u16 => &[153u16, 150u16, 147u16],
            8083u16 => &[153u16, 150u16, 147u16],
            8084u16 => &[151u16, 155u16],
            8085u16 => &[153u16, 150u16, 147u16],
            8086u16 => &[153u16, 150u16, 147u16],
            8087u16 => &[140u16, 148u16, 145u16, 152u16],
            8088u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8089u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8090u16 => &[140u16, 148u16, 145u16, 152u16],
            8091u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8092u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8093u16 => &[151u16, 155u16],
            8094u16 => &[153u16, 150u16, 147u16],
            8095u16 => &[153u16, 150u16, 147u16],
            8096u16 => &[151u16, 155u16],
            8097u16 => &[153u16, 150u16, 147u16],
            8098u16 => &[153u16, 150u16, 147u16],
            8099u16 => &[140u16, 148u16, 152u16],
            8100u16 => &[153u16, 142u16, 143u16, 148u16],
            8101u16 => &[153u16, 142u16, 143u16, 148u16],
            8102u16 => &[140u16, 148u16, 152u16],
            8103u16 => &[153u16, 142u16, 143u16, 148u16],
            8104u16 => &[153u16, 142u16, 143u16, 148u16],
            8105u16 => &[149u16, 155u16],
            8106u16 => &[153u16, 150u16],
            8107u16 => &[153u16, 150u16],
            8108u16 => &[149u16, 155u16],
            8109u16 => &[153u16, 150u16],
            8110u16 => &[153u16, 150u16],
            8111u16 => &[140u16, 148u16, 145u16, 152u16],
            8112u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8113u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8114u16 => &[140u16, 148u16, 145u16, 152u16],
            8115u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8116u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8117u16 => &[151u16, 155u16],
            8118u16 => &[153u16, 150u16, 147u16],
            8119u16 => &[153u16, 150u16, 147u16],
            8120u16 => &[151u16, 155u16],
            8121u16 => &[153u16, 150u16, 147u16],
            8122u16 => &[153u16, 150u16, 147u16],
            8123u16 => &[140u16, 148u16, 145u16, 152u16],
            8124u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8125u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8126u16 => &[140u16, 148u16, 145u16, 152u16],
            8127u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8128u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8129u16 => &[151u16, 155u16],
            8130u16 => &[153u16, 150u16, 147u16],
            8131u16 => &[153u16, 150u16, 147u16],
            8132u16 => &[151u16, 155u16],
            8133u16 => &[153u16, 150u16, 147u16],
            8134u16 => &[153u16, 150u16, 147u16],
            8135u16 => &[140u16, 152u16],
            8136u16 => &[153u16, 142u16, 143u16],
            8137u16 => &[153u16, 142u16, 143u16],
            8138u16 => &[140u16, 152u16],
            8139u16 => &[153u16, 142u16, 143u16],
            8140u16 => &[153u16, 142u16, 143u16],
            8141u16 => &[154u16],
            8142u16 => &[153u16],
            8143u16 => &[153u16],
            8144u16 => &[154u16],
            8145u16 => &[153u16],
            8146u16 => &[153u16],
            8147u16 => &[140u16, 145u16, 152u16],
            8148u16 => &[153u16, 142u16, 143u16, 145u16],
            8149u16 => &[153u16, 142u16, 143u16, 145u16],
            8150u16 => &[140u16, 145u16, 152u16],
            8151u16 => &[153u16, 142u16, 143u16, 145u16],
            8152u16 => &[153u16, 142u16, 143u16, 145u16],
            8153u16 => &[146u16, 155u16],
            8154u16 => &[153u16, 147u16],
            8155u16 => &[153u16, 147u16],
            8156u16 => &[146u16, 155u16],
            8157u16 => &[153u16, 147u16],
            8158u16 => &[153u16, 147u16],
            8159u16 => &[140u16, 145u16, 152u16],
            8160u16 => &[153u16, 142u16, 143u16, 145u16],
            8161u16 => &[153u16, 142u16, 143u16, 145u16],
            8162u16 => &[140u16, 145u16, 152u16],
            8163u16 => &[153u16, 142u16, 143u16, 145u16],
            8164u16 => &[153u16, 142u16, 143u16, 145u16],
            8165u16 => &[146u16, 155u16],
            8166u16 => &[153u16, 147u16],
            8167u16 => &[153u16, 147u16],
            8168u16 => &[146u16, 155u16],
            8169u16 => &[153u16, 147u16],
            8170u16 => &[153u16, 147u16],
            8171u16 => &[140u16, 148u16, 152u16],
            8172u16 => &[153u16, 142u16, 143u16, 148u16],
            8173u16 => &[153u16, 142u16, 143u16, 148u16],
            8174u16 => &[140u16, 148u16, 152u16],
            8175u16 => &[153u16, 142u16, 143u16, 148u16],
            8176u16 => &[153u16, 142u16, 143u16, 148u16],
            8177u16 => &[149u16, 155u16],
            8178u16 => &[153u16, 150u16],
            8179u16 => &[153u16, 150u16],
            8180u16 => &[149u16, 155u16],
            8181u16 => &[153u16, 150u16],
            8182u16 => &[153u16, 150u16],
            8183u16 => &[140u16, 148u16, 145u16, 152u16],
            8184u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8185u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8186u16 => &[140u16, 148u16, 145u16, 152u16],
            8187u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8188u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8189u16 => &[151u16, 155u16],
            8190u16 => &[153u16, 150u16, 147u16],
            8191u16 => &[153u16, 150u16, 147u16],
            8192u16 => &[151u16, 155u16],
            8193u16 => &[153u16, 150u16, 147u16],
            8194u16 => &[153u16, 150u16, 147u16],
            8195u16 => &[140u16, 148u16, 145u16, 152u16],
            8196u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8197u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8198u16 => &[140u16, 148u16, 145u16, 152u16],
            8199u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8200u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8201u16 => &[151u16, 155u16],
            8202u16 => &[153u16, 150u16, 147u16],
            8203u16 => &[153u16, 150u16, 147u16],
            8204u16 => &[151u16, 155u16],
            8205u16 => &[153u16, 150u16, 147u16],
            8206u16 => &[153u16, 150u16, 147u16],
            8207u16 => &[140u16, 148u16, 152u16],
            8208u16 => &[153u16, 142u16, 143u16, 148u16],
            8209u16 => &[153u16, 142u16, 143u16, 148u16],
            8210u16 => &[140u16, 148u16, 152u16],
            8211u16 => &[153u16, 142u16, 143u16, 148u16],
            8212u16 => &[153u16, 142u16, 143u16, 148u16],
            8213u16 => &[149u16, 155u16],
            8214u16 => &[153u16, 150u16],
            8215u16 => &[153u16, 150u16],
            8216u16 => &[149u16, 155u16],
            8217u16 => &[153u16, 150u16],
            8218u16 => &[153u16, 150u16],
            8219u16 => &[140u16, 148u16, 145u16, 152u16],
            8220u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8221u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8222u16 => &[140u16, 148u16, 145u16, 152u16],
            8223u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8224u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8225u16 => &[151u16, 155u16],
            8226u16 => &[153u16, 150u16, 147u16],
            8227u16 => &[153u16, 150u16, 147u16],
            8228u16 => &[151u16, 155u16],
            8229u16 => &[153u16, 150u16, 147u16],
            8230u16 => &[153u16, 150u16, 147u16],
            8231u16 => &[140u16, 148u16, 145u16, 152u16],
            8232u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8233u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8234u16 => &[140u16, 148u16, 145u16, 152u16],
            8235u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8236u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8237u16 => &[151u16, 155u16],
            8238u16 => &[153u16, 150u16, 147u16],
            8239u16 => &[153u16, 150u16, 147u16],
            8240u16 => &[151u16, 155u16],
            8241u16 => &[153u16, 150u16, 147u16],
            8242u16 => &[153u16, 150u16, 147u16],
            8243u16 => &[140u16],
            8244u16 => &[141u16, 142u16, 143u16],
            8245u16 => &[141u16, 142u16, 143u16],
            8246u16 => &[140u16],
            8247u16 => &[141u16, 142u16, 143u16],
            8248u16 => &[141u16, 142u16, 143u16],
            8249u16 => &[],
            8250u16 => &[144u16],
            8251u16 => &[144u16],
            8252u16 => &[],
            8253u16 => &[144u16],
            8254u16 => &[144u16],
            8255u16 => &[140u16, 145u16],
            8256u16 => &[141u16, 142u16, 143u16, 145u16],
            8257u16 => &[141u16, 142u16, 143u16, 145u16],
            8258u16 => &[140u16, 145u16],
            8259u16 => &[141u16, 142u16, 143u16, 145u16],
            8260u16 => &[141u16, 142u16, 143u16, 145u16],
            8261u16 => &[146u16],
            8262u16 => &[144u16, 147u16],
            8263u16 => &[144u16, 147u16],
            8264u16 => &[146u16],
            8265u16 => &[144u16, 147u16],
            8266u16 => &[144u16, 147u16],
            8267u16 => &[140u16, 145u16],
            8268u16 => &[141u16, 142u16, 143u16, 145u16],
            8269u16 => &[141u16, 142u16, 143u16, 145u16],
            8270u16 => &[140u16, 145u16],
            8271u16 => &[141u16, 142u16, 143u16, 145u16],
            8272u16 => &[141u16, 142u16, 143u16, 145u16],
            8273u16 => &[146u16],
            8274u16 => &[144u16, 147u16],
            8275u16 => &[144u16, 147u16],
            8276u16 => &[146u16],
            8277u16 => &[144u16, 147u16],
            8278u16 => &[144u16, 147u16],
            8279u16 => &[140u16, 148u16],
            8280u16 => &[141u16, 142u16, 143u16, 148u16],
            8281u16 => &[141u16, 142u16, 143u16, 148u16],
            8282u16 => &[140u16, 148u16],
            8283u16 => &[141u16, 142u16, 143u16, 148u16],
            8284u16 => &[141u16, 142u16, 143u16, 148u16],
            8285u16 => &[149u16],
            8286u16 => &[144u16, 150u16],
            8287u16 => &[144u16, 150u16],
            8288u16 => &[149u16],
            8289u16 => &[144u16, 150u16],
            8290u16 => &[144u16, 150u16],
            8291u16 => &[140u16, 148u16, 145u16],
            8292u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            8293u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            8294u16 => &[140u16, 148u16, 145u16],
            8295u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            8296u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            8297u16 => &[151u16],
            8298u16 => &[144u16, 150u16, 147u16],
            8299u16 => &[144u16, 150u16, 147u16],
            8300u16 => &[151u16],
            8301u16 => &[144u16, 150u16, 147u16],
            8302u16 => &[144u16, 150u16, 147u16],
            8303u16 => &[140u16, 148u16, 145u16],
            8304u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            8305u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            8306u16 => &[140u16, 148u16, 145u16],
            8307u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            8308u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            8309u16 => &[151u16],
            8310u16 => &[144u16, 150u16, 147u16],
            8311u16 => &[144u16, 150u16, 147u16],
            8312u16 => &[151u16],
            8313u16 => &[144u16, 150u16, 147u16],
            8314u16 => &[144u16, 150u16, 147u16],
            8315u16 => &[140u16, 148u16],
            8316u16 => &[141u16, 142u16, 143u16, 148u16],
            8317u16 => &[141u16, 142u16, 143u16, 148u16],
            8318u16 => &[140u16, 148u16],
            8319u16 => &[141u16, 142u16, 143u16, 148u16],
            8320u16 => &[141u16, 142u16, 143u16, 148u16],
            8321u16 => &[149u16],
            8322u16 => &[144u16, 150u16],
            8323u16 => &[144u16, 150u16],
            8324u16 => &[149u16],
            8325u16 => &[144u16, 150u16],
            8326u16 => &[144u16, 150u16],
            8327u16 => &[140u16, 148u16, 145u16],
            8328u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            8329u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            8330u16 => &[140u16, 148u16, 145u16],
            8331u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            8332u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            8333u16 => &[151u16],
            8334u16 => &[144u16, 150u16, 147u16],
            8335u16 => &[144u16, 150u16, 147u16],
            8336u16 => &[151u16],
            8337u16 => &[144u16, 150u16, 147u16],
            8338u16 => &[144u16, 150u16, 147u16],
            8339u16 => &[140u16, 148u16, 145u16],
            8340u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            8341u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            8342u16 => &[140u16, 148u16, 145u16],
            8343u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            8344u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            8345u16 => &[151u16],
            8346u16 => &[144u16, 150u16, 147u16],
            8347u16 => &[144u16, 150u16, 147u16],
            8348u16 => &[151u16],
            8349u16 => &[144u16, 150u16, 147u16],
            8350u16 => &[144u16, 150u16, 147u16],
            8351u16 => &[140u16, 152u16],
            8352u16 => &[153u16, 142u16, 143u16],
            8353u16 => &[153u16, 142u16, 143u16],
            8354u16 => &[140u16, 152u16],
            8355u16 => &[153u16, 142u16, 143u16],
            8356u16 => &[153u16, 142u16, 143u16],
            8357u16 => &[154u16],
            8358u16 => &[153u16],
            8359u16 => &[153u16],
            8360u16 => &[154u16],
            8361u16 => &[153u16],
            8362u16 => &[153u16],
            8363u16 => &[140u16, 145u16, 152u16],
            8364u16 => &[153u16, 142u16, 143u16, 145u16],
            8365u16 => &[153u16, 142u16, 143u16, 145u16],
            8366u16 => &[140u16, 145u16, 152u16],
            8367u16 => &[153u16, 142u16, 143u16, 145u16],
            8368u16 => &[153u16, 142u16, 143u16, 145u16],
            8369u16 => &[146u16, 155u16],
            8370u16 => &[153u16, 147u16],
            8371u16 => &[153u16, 147u16],
            8372u16 => &[146u16, 155u16],
            8373u16 => &[153u16, 147u16],
            8374u16 => &[153u16, 147u16],
            8375u16 => &[140u16, 145u16, 152u16],
            8376u16 => &[153u16, 142u16, 143u16, 145u16],
            8377u16 => &[153u16, 142u16, 143u16, 145u16],
            8378u16 => &[140u16, 145u16, 152u16],
            8379u16 => &[153u16, 142u16, 143u16, 145u16],
            8380u16 => &[153u16, 142u16, 143u16, 145u16],
            8381u16 => &[146u16, 155u16],
            8382u16 => &[153u16, 147u16],
            8383u16 => &[153u16, 147u16],
            8384u16 => &[146u16, 155u16],
            8385u16 => &[153u16, 147u16],
            8386u16 => &[153u16, 147u16],
            8387u16 => &[140u16, 148u16, 152u16],
            8388u16 => &[153u16, 142u16, 143u16, 148u16],
            8389u16 => &[153u16, 142u16, 143u16, 148u16],
            8390u16 => &[140u16, 148u16, 152u16],
            8391u16 => &[153u16, 142u16, 143u16, 148u16],
            8392u16 => &[153u16, 142u16, 143u16, 148u16],
            8393u16 => &[149u16, 155u16],
            8394u16 => &[153u16, 150u16],
            8395u16 => &[153u16, 150u16],
            8396u16 => &[149u16, 155u16],
            8397u16 => &[153u16, 150u16],
            8398u16 => &[153u16, 150u16],
            8399u16 => &[140u16, 148u16, 145u16, 152u16],
            8400u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8401u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8402u16 => &[140u16, 148u16, 145u16, 152u16],
            8403u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8404u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8405u16 => &[151u16, 155u16],
            8406u16 => &[153u16, 150u16, 147u16],
            8407u16 => &[153u16, 150u16, 147u16],
            8408u16 => &[151u16, 155u16],
            8409u16 => &[153u16, 150u16, 147u16],
            8410u16 => &[153u16, 150u16, 147u16],
            8411u16 => &[140u16, 148u16, 145u16, 152u16],
            8412u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8413u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8414u16 => &[140u16, 148u16, 145u16, 152u16],
            8415u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8416u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8417u16 => &[151u16, 155u16],
            8418u16 => &[153u16, 150u16, 147u16],
            8419u16 => &[153u16, 150u16, 147u16],
            8420u16 => &[151u16, 155u16],
            8421u16 => &[153u16, 150u16, 147u16],
            8422u16 => &[153u16, 150u16, 147u16],
            8423u16 => &[140u16, 148u16, 152u16],
            8424u16 => &[153u16, 142u16, 143u16, 148u16],
            8425u16 => &[153u16, 142u16, 143u16, 148u16],
            8426u16 => &[140u16, 148u16, 152u16],
            8427u16 => &[153u16, 142u16, 143u16, 148u16],
            8428u16 => &[153u16, 142u16, 143u16, 148u16],
            8429u16 => &[149u16, 155u16],
            8430u16 => &[153u16, 150u16],
            8431u16 => &[153u16, 150u16],
            8432u16 => &[149u16, 155u16],
            8433u16 => &[153u16, 150u16],
            8434u16 => &[153u16, 150u16],
            8435u16 => &[140u16, 148u16, 145u16, 152u16],
            8436u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8437u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8438u16 => &[140u16, 148u16, 145u16, 152u16],
            8439u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8440u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8441u16 => &[151u16, 155u16],
            8442u16 => &[153u16, 150u16, 147u16],
            8443u16 => &[153u16, 150u16, 147u16],
            8444u16 => &[151u16, 155u16],
            8445u16 => &[153u16, 150u16, 147u16],
            8446u16 => &[153u16, 150u16, 147u16],
            8447u16 => &[140u16, 148u16, 145u16, 152u16],
            8448u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8449u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8450u16 => &[140u16, 148u16, 145u16, 152u16],
            8451u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8452u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8453u16 => &[151u16, 155u16],
            8454u16 => &[153u16, 150u16, 147u16],
            8455u16 => &[153u16, 150u16, 147u16],
            8456u16 => &[151u16, 155u16],
            8457u16 => &[153u16, 150u16, 147u16],
            8458u16 => &[153u16, 150u16, 147u16],
            8459u16 => &[140u16, 152u16],
            8460u16 => &[153u16, 142u16, 143u16],
            8461u16 => &[153u16, 142u16, 143u16],
            8462u16 => &[140u16, 152u16],
            8463u16 => &[153u16, 142u16, 143u16],
            8464u16 => &[153u16, 142u16, 143u16],
            8465u16 => &[154u16],
            8466u16 => &[153u16],
            8467u16 => &[153u16],
            8468u16 => &[154u16],
            8469u16 => &[153u16],
            8470u16 => &[153u16],
            8471u16 => &[140u16, 145u16, 152u16],
            8472u16 => &[153u16, 142u16, 143u16, 145u16],
            8473u16 => &[153u16, 142u16, 143u16, 145u16],
            8474u16 => &[140u16, 145u16, 152u16],
            8475u16 => &[153u16, 142u16, 143u16, 145u16],
            8476u16 => &[153u16, 142u16, 143u16, 145u16],
            8477u16 => &[146u16, 155u16],
            8478u16 => &[153u16, 147u16],
            8479u16 => &[153u16, 147u16],
            8480u16 => &[146u16, 155u16],
            8481u16 => &[153u16, 147u16],
            8482u16 => &[153u16, 147u16],
            8483u16 => &[140u16, 145u16, 152u16],
            8484u16 => &[153u16, 142u16, 143u16, 145u16],
            8485u16 => &[153u16, 142u16, 143u16, 145u16],
            8486u16 => &[140u16, 145u16, 152u16],
            8487u16 => &[153u16, 142u16, 143u16, 145u16],
            8488u16 => &[153u16, 142u16, 143u16, 145u16],
            8489u16 => &[146u16, 155u16],
            8490u16 => &[153u16, 147u16],
            8491u16 => &[153u16, 147u16],
            8492u16 => &[146u16, 155u16],
            8493u16 => &[153u16, 147u16],
            8494u16 => &[153u16, 147u16],
            8495u16 => &[140u16, 148u16, 152u16],
            8496u16 => &[153u16, 142u16, 143u16, 148u16],
            8497u16 => &[153u16, 142u16, 143u16, 148u16],
            8498u16 => &[140u16, 148u16, 152u16],
            8499u16 => &[153u16, 142u16, 143u16, 148u16],
            8500u16 => &[153u16, 142u16, 143u16, 148u16],
            8501u16 => &[149u16, 155u16],
            8502u16 => &[153u16, 150u16],
            8503u16 => &[153u16, 150u16],
            8504u16 => &[149u16, 155u16],
            8505u16 => &[153u16, 150u16],
            8506u16 => &[153u16, 150u16],
            8507u16 => &[140u16, 148u16, 145u16, 152u16],
            8508u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8509u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8510u16 => &[140u16, 148u16, 145u16, 152u16],
            8511u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8512u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8513u16 => &[151u16, 155u16],
            8514u16 => &[153u16, 150u16, 147u16],
            8515u16 => &[153u16, 150u16, 147u16],
            8516u16 => &[151u16, 155u16],
            8517u16 => &[153u16, 150u16, 147u16],
            8518u16 => &[153u16, 150u16, 147u16],
            8519u16 => &[140u16, 148u16, 145u16, 152u16],
            8520u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8521u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8522u16 => &[140u16, 148u16, 145u16, 152u16],
            8523u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8524u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8525u16 => &[151u16, 155u16],
            8526u16 => &[153u16, 150u16, 147u16],
            8527u16 => &[153u16, 150u16, 147u16],
            8528u16 => &[151u16, 155u16],
            8529u16 => &[153u16, 150u16, 147u16],
            8530u16 => &[153u16, 150u16, 147u16],
            8531u16 => &[140u16, 148u16, 152u16],
            8532u16 => &[153u16, 142u16, 143u16, 148u16],
            8533u16 => &[153u16, 142u16, 143u16, 148u16],
            8534u16 => &[140u16, 148u16, 152u16],
            8535u16 => &[153u16, 142u16, 143u16, 148u16],
            8536u16 => &[153u16, 142u16, 143u16, 148u16],
            8537u16 => &[149u16, 155u16],
            8538u16 => &[153u16, 150u16],
            8539u16 => &[153u16, 150u16],
            8540u16 => &[149u16, 155u16],
            8541u16 => &[153u16, 150u16],
            8542u16 => &[153u16, 150u16],
            8543u16 => &[140u16, 148u16, 145u16, 152u16],
            8544u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8545u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8546u16 => &[140u16, 148u16, 145u16, 152u16],
            8547u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8548u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8549u16 => &[151u16, 155u16],
            8550u16 => &[153u16, 150u16, 147u16],
            8551u16 => &[153u16, 150u16, 147u16],
            8552u16 => &[151u16, 155u16],
            8553u16 => &[153u16, 150u16, 147u16],
            8554u16 => &[153u16, 150u16, 147u16],
            8555u16 => &[140u16, 148u16, 145u16, 152u16],
            8556u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8557u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8558u16 => &[140u16, 148u16, 145u16, 152u16],
            8559u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8560u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            8561u16 => &[151u16, 155u16],
            8562u16 => &[153u16, 150u16, 147u16],
            8563u16 => &[153u16, 150u16, 147u16],
            8564u16 => &[151u16, 155u16],
            8565u16 => &[153u16, 150u16, 147u16],
            8566u16 => &[153u16, 150u16, 147u16],
            8567u16 => &[156u16],
            8568u16 => &[156u16],
            8569u16 => &[156u16],
            8570u16 => &[156u16],
            8571u16 => &[156u16],
            8572u16 => &[156u16],
            8573u16 => &[156u16],
            8574u16 => &[156u16],
            8575u16 => &[156u16],
            8576u16 => &[156u16],
            8577u16 => &[156u16],
            8578u16 => &[156u16],
            8579u16 => &[156u16],
            8580u16 => &[156u16],
            8581u16 => &[156u16],
            8582u16 => &[156u16],
            8583u16 => &[156u16],
            8584u16 => &[156u16],
            8585u16 => &[156u16],
            8586u16 => &[156u16],
            8587u16 => &[156u16],
            8588u16 => &[156u16],
            8589u16 => &[156u16],
            8590u16 => &[156u16],
            8591u16 => &[156u16],
            8592u16 => &[156u16],
            8593u16 => &[156u16],
            8594u16 => &[156u16],
            8595u16 => &[],
            8596u16 => &[],
            8597u16 => &[],
            8598u16 => &[],
            8599u16 => &[],
            8600u16 => &[],
            8601u16 => &[],
            8602u16 => &[],
            8603u16 => &[],
            8604u16 => &[],
            8605u16 => &[],
            8606u16 => &[],
            8607u16 => &[],
            8608u16 => &[],
            8609u16 => &[],
            8610u16 => &[],
            8611u16 => &[],
            8612u16 => &[],
            8613u16 => &[],
            8614u16 => &[],
            8615u16 => &[],
            8616u16 => &[],
            8617u16 => &[],
            8618u16 => &[],
            8619u16 => &[],
            8620u16 => &[],
            8621u16 => &[],
            8622u16 => &[],
            8623u16 => &[],
            8624u16 => &[],
            8625u16 => &[],
            8626u16 => &[],
            8627u16 => &[],
            8628u16 => &[],
            8629u16 => &[],
            8630u16 => &[],
            8631u16 => &[],
            8632u16 => &[],
            8633u16 => &[],
            8634u16 => &[],
            8635u16 => &[],
            8636u16 => &[],
            8637u16 => &[],
            8638u16 => &[],
            8639u16 => &[],
            8640u16 => &[],
            8641u16 => &[],
            8642u16 => &[],
            8643u16 => &[],
            8644u16 => &[],
            8645u16 => &[],
            8646u16 => &[],
            8647u16 => &[],
            8648u16 => &[],
            8649u16 => &[],
            8650u16 => &[],
            8651u16 => &[],
            8652u16 => &[],
            8653u16 => &[],
            8654u16 => &[],
            8655u16 => &[],
            8656u16 => &[],
            8657u16 => &[],
            8658u16 => &[],
            8659u16 => &[],
            8660u16 => &[],
            8661u16 => &[],
            8662u16 => &[],
            8663u16 => &[],
            8664u16 => &[],
            8665u16 => &[],
            8666u16 => &[],
            8667u16 => &[],
            8668u16 => &[],
            8669u16 => &[],
            8670u16 => &[],
            8671u16 => &[],
            8672u16 => &[],
            8673u16 => &[],
            8674u16 => &[],
            8675u16 => &[],
            8676u16 => &[],
            8677u16 => &[],
            8678u16 => &[],
            8679u16 => &[],
            8680u16 => &[],
            8681u16 => &[],
            8682u16 => &[],
            8683u16 => &[],
            8684u16 => &[],
            8685u16 => &[],
            8686u16 => &[],
            8687u16 => &[],
            8688u16 => &[],
            8689u16 => &[],
            8690u16 => &[],
            8691u16 => &[],
            8692u16 => &[],
            8693u16 => &[],
            8694u16 => &[],
            8695u16 => &[],
            8696u16 => &[],
            8697u16 => &[],
            8698u16 => &[],
            8699u16 => &[],
            8700u16 => &[],
            8701u16 => &[],
            8702u16 => &[],
            8703u16 => &[],
            8704u16 => &[],
            8705u16 => &[],
            8706u16 => &[],
            8707u16 => &[],
            8708u16 => &[],
            8709u16 => &[],
            8710u16 => &[],
            8711u16 => &[],
            8712u16 => &[],
            8713u16 => &[],
            8714u16 => &[],
            8715u16 => &[],
            8716u16 => &[],
            8717u16 => &[],
            8718u16 => &[],
            8719u16 => &[],
            8720u16 => &[],
            8721u16 => &[],
            8722u16 => &[],
            8723u16 => &[],
            8724u16 => &[],
            8725u16 => &[],
            8726u16 => &[],
            8727u16 => &[],
            8728u16 => &[],
            8729u16 => &[],
            8730u16 => &[],
            8731u16 => &[],
            8732u16 => &[],
            8733u16 => &[],
            8734u16 => &[],
            8735u16 => &[],
            8736u16 => &[],
            8737u16 => &[],
            8738u16 => &[],
            8739u16 => &[],
            8740u16 => &[],
            8741u16 => &[],
            8742u16 => &[],
            8743u16 => &[],
            8744u16 => &[],
            8745u16 => &[],
            8746u16 => &[],
            8747u16 => &[],
            8748u16 => &[],
            8749u16 => &[],
            8750u16 => &[],
            8751u16 => &[],
            8752u16 => &[],
            8753u16 => &[],
            8754u16 => &[],
            8755u16 => &[],
            8756u16 => &[],
            8757u16 => &[],
            8758u16 => &[],
            8759u16 => &[],
            8760u16 => &[],
            8761u16 => &[],
            8762u16 => &[],
            8763u16 => &[],
            8764u16 => &[],
            8765u16 => &[],
            8766u16 => &[],
            8767u16 => &[],
            8768u16 => &[],
            8769u16 => &[],
            8770u16 => &[],
            8771u16 => &[],
            8772u16 => &[],
            8773u16 => &[],
            8774u16 => &[],
            8775u16 => &[],
            8776u16 => &[],
            8777u16 => &[],
            8778u16 => &[],
            8779u16 => &[],
            8780u16 => &[],
            8781u16 => &[],
            8782u16 => &[],
            8783u16 => &[],
            8784u16 => &[],
            8785u16 => &[],
            8786u16 => &[],
            8787u16 => &[],
            8788u16 => &[],
            8789u16 => &[],
            8790u16 => &[],
            8791u16 => &[],
            8792u16 => &[],
            8793u16 => &[],
            8794u16 => &[],
            8795u16 => &[],
            8796u16 => &[],
            8797u16 => &[],
            8798u16 => &[],
            8799u16 => &[],
            8800u16 => &[],
            8801u16 => &[],
            8802u16 => &[],
            8803u16 => &[],
            8804u16 => &[],
            8805u16 => &[],
            8806u16 => &[],
            8807u16 => &[],
            8808u16 => &[],
            8809u16 => &[],
            8810u16 => &[],
            8811u16 => &[],
            8812u16 => &[],
            8813u16 => &[],
            8814u16 => &[],
            8815u16 => &[],
            8816u16 => &[],
            8817u16 => &[],
            8818u16 => &[],
            8819u16 => &[],
            8820u16 => &[],
            8821u16 => &[],
            8822u16 => &[],
            8823u16 => &[],
            8824u16 => &[],
            8825u16 => &[],
            8826u16 => &[],
            8827u16 => &[157u16],
            8828u16 => &[157u16],
            8829u16 => &[157u16],
            8830u16 => &[157u16],
            8831u16 => &[157u16],
            8832u16 => &[157u16],
            8833u16 => &[157u16],
            8834u16 => &[157u16],
            8835u16 => &[157u16],
            8836u16 => &[157u16],
            8837u16 => &[157u16],
            8838u16 => &[157u16],
            8839u16 => &[157u16],
            8840u16 => &[157u16],
            8841u16 => &[157u16],
            8842u16 => &[157u16],
            8843u16 => &[158u16],
            8844u16 => &[159u16],
            8845u16 => &[160u16],
            8846u16 => &[161u16],
            8847u16 => &[157u16],
            8848u16 => &[157u16],
            8849u16 => &[157u16],
            8850u16 => &[157u16],
            8851u16 => &[157u16],
            8852u16 => &[157u16],
            8853u16 => &[157u16],
            8854u16 => &[157u16],
            8855u16 => &[157u16],
            8856u16 => &[157u16],
            8857u16 => &[157u16],
            8858u16 => &[157u16],
            8859u16 => &[157u16],
            8860u16 => &[157u16],
            8861u16 => &[157u16],
            8862u16 => &[157u16],
            8863u16 => &[158u16],
            8864u16 => &[159u16],
            8865u16 => &[160u16],
            8866u16 => &[161u16],
            8867u16 => &[157u16],
            8868u16 => &[157u16],
            8869u16 => &[157u16],
            8870u16 => &[157u16],
            8871u16 => &[157u16],
            8872u16 => &[157u16],
            8873u16 => &[157u16],
            8874u16 => &[157u16],
            8875u16 => &[157u16],
            8876u16 => &[157u16],
            8877u16 => &[157u16],
            8878u16 => &[157u16],
            8879u16 => &[157u16],
            8880u16 => &[157u16],
            8881u16 => &[157u16],
            8882u16 => &[157u16],
            8883u16 => &[158u16],
            8884u16 => &[159u16],
            8885u16 => &[160u16],
            8886u16 => &[161u16],
            8887u16 => &[157u16],
            8888u16 => &[157u16],
            8889u16 => &[157u16],
            8890u16 => &[157u16],
            8891u16 => &[157u16],
            8892u16 => &[157u16],
            8893u16 => &[157u16],
            8894u16 => &[157u16],
            8895u16 => &[157u16],
            8896u16 => &[157u16],
            8897u16 => &[157u16],
            8898u16 => &[157u16],
            8899u16 => &[157u16],
            8900u16 => &[157u16],
            8901u16 => &[157u16],
            8902u16 => &[157u16],
            8903u16 => &[158u16],
            8904u16 => &[159u16],
            8905u16 => &[160u16],
            8906u16 => &[161u16],
            8907u16 => &[157u16],
            8908u16 => &[157u16],
            8909u16 => &[157u16],
            8910u16 => &[157u16],
            8911u16 => &[157u16],
            8912u16 => &[157u16],
            8913u16 => &[157u16],
            8914u16 => &[157u16],
            8915u16 => &[157u16],
            8916u16 => &[157u16],
            8917u16 => &[157u16],
            8918u16 => &[157u16],
            8919u16 => &[157u16],
            8920u16 => &[157u16],
            8921u16 => &[157u16],
            8922u16 => &[157u16],
            8923u16 => &[158u16],
            8924u16 => &[159u16],
            8925u16 => &[160u16],
            8926u16 => &[161u16],
            8927u16 => &[157u16],
            8928u16 => &[157u16],
            8929u16 => &[157u16],
            8930u16 => &[157u16],
            8931u16 => &[157u16],
            8932u16 => &[157u16],
            8933u16 => &[157u16],
            8934u16 => &[157u16],
            8935u16 => &[157u16],
            8936u16 => &[157u16],
            8937u16 => &[157u16],
            8938u16 => &[157u16],
            8939u16 => &[157u16],
            8940u16 => &[157u16],
            8941u16 => &[157u16],
            8942u16 => &[157u16],
            8943u16 => &[158u16],
            8944u16 => &[159u16],
            8945u16 => &[160u16],
            8946u16 => &[161u16],
            8947u16 => &[162u16],
            8948u16 => &[162u16],
            8949u16 => &[162u16],
            8950u16 => &[162u16],
            8951u16 => &[162u16],
            8952u16 => &[162u16],
            8953u16 => &[162u16],
            8954u16 => &[162u16],
            8955u16 => &[162u16],
            8956u16 => &[162u16],
            8957u16 => &[162u16],
            8958u16 => &[162u16],
            8959u16 => &[162u16],
            8960u16 => &[162u16],
            8961u16 => &[162u16],
            8962u16 => &[162u16],
            8963u16 => &[163u16],
            8964u16 => &[164u16],
            8965u16 => &[165u16],
            8966u16 => &[166u16],
            8967u16 => &[167u16, 168u16, 169u16, 170u16, 171u16, 172u16, 173u16],
            8968u16 => &[167u16, 168u16, 169u16, 170u16, 171u16, 172u16, 173u16],
            8969u16 => &[167u16, 174u16, 175u16, 176u16, 177u16, 178u16, 179u16],
            8970u16 => &[167u16, 174u16, 175u16, 176u16, 177u16, 178u16, 179u16],
            8971u16 => &[167u16, 168u16, 169u16, 170u16, 171u16, 172u16, 173u16],
            8972u16 => &[167u16, 168u16, 169u16, 170u16, 171u16, 172u16, 173u16],
            8973u16 => &[167u16, 174u16, 175u16, 176u16, 177u16, 178u16, 179u16],
            8974u16 => &[167u16, 174u16, 175u16, 176u16, 177u16, 178u16, 179u16],
            8975u16 => &[167u16, 168u16, 169u16, 170u16, 171u16, 172u16, 173u16],
            8976u16 => &[167u16, 168u16, 169u16, 170u16, 171u16, 172u16, 173u16],
            8977u16 => &[167u16, 174u16, 175u16, 176u16, 177u16, 178u16, 179u16],
            8978u16 => &[167u16, 174u16, 175u16, 176u16, 177u16, 178u16, 179u16],
            8979u16 => &[58u16],
            8980u16 => &[58u16],
            8981u16 => &[59u16],
            8982u16 => &[59u16],
            8983u16 => &[60u16],
            8984u16 => &[60u16],
            8985u16 => &[58u16],
            8986u16 => &[58u16],
            8987u16 => &[60u16],
            8988u16 => &[60u16],
            8989u16 => &[59u16],
            8990u16 => &[59u16],
            8991u16 => &[58u16],
            8992u16 => &[58u16],
            8993u16 => &[61u16],
            8994u16 => &[61u16],
            8995u16 => &[62u16],
            8996u16 => &[62u16],
            8997u16 => &[58u16],
            8998u16 => &[58u16],
            8999u16 => &[62u16],
            9000u16 => &[62u16],
            9001u16 => &[61u16],
            9002u16 => &[61u16],
            9003u16 => &[],
            9004u16 => &[],
            9005u16 => &[],
            9006u16 => &[],
            9007u16 => &[],
            9008u16 => &[],
            9009u16 => &[],
            9010u16 => &[],
            9011u16 => &[],
            9012u16 => &[],
            9013u16 => &[],
            9014u16 => &[],
            9015u16 => &[],
            9016u16 => &[],
            9017u16 => &[],
            9018u16 => &[],
            9019u16 => &[],
            9020u16 => &[],
            9021u16 => &[],
            9022u16 => &[],
            9023u16 => &[],
            9024u16 => &[],
            9025u16 => &[],
            9026u16 => &[],
            9027u16 => &[],
            9028u16 => &[],
            9029u16 => &[],
            9030u16 => &[],
            9031u16 => &[],
            9032u16 => &[],
            9033u16 => &[],
            9034u16 => &[],
            9035u16 => &[70u16],
            9036u16 => &[70u16],
            9037u16 => &[70u16],
            9038u16 => &[70u16],
            9039u16 => &[70u16],
            9040u16 => &[70u16],
            9041u16 => &[70u16],
            9042u16 => &[70u16],
            9043u16 => &[70u16],
            9044u16 => &[70u16],
            9045u16 => &[70u16],
            9046u16 => &[70u16],
            9047u16 => &[70u16],
            9048u16 => &[70u16],
            9049u16 => &[70u16],
            9050u16 => &[70u16],
            9051u16 => &[71u16],
            9052u16 => &[71u16],
            9053u16 => &[71u16],
            9054u16 => &[71u16],
            9055u16 => &[71u16],
            9056u16 => &[71u16],
            9057u16 => &[71u16],
            9058u16 => &[71u16],
            9059u16 => &[71u16],
            9060u16 => &[71u16],
            9061u16 => &[71u16],
            9062u16 => &[71u16],
            9063u16 => &[71u16],
            9064u16 => &[71u16],
            9065u16 => &[71u16],
            9066u16 => &[71u16],
            9067u16 => &[71u16],
            9068u16 => &[71u16],
            9069u16 => &[71u16],
            9070u16 => &[71u16],
            9071u16 => &[71u16],
            9072u16 => &[71u16],
            9073u16 => &[71u16],
            9074u16 => &[71u16],
            9075u16 => &[71u16],
            9076u16 => &[71u16],
            9077u16 => &[71u16],
            9078u16 => &[71u16],
            9079u16 => &[71u16],
            9080u16 => &[71u16],
            9081u16 => &[71u16],
            9082u16 => &[71u16],
            9083u16 => &[0u16],
            9084u16 => &[0u16],
            9085u16 => &[
                180u16, 181u16, 182u16, 183u16, 184u16, 185u16, 186u16, 187u16, 188u16, 189u16,
                190u16, 191u16, 192u16,
            ],
            9086u16 => &[
                193u16, 194u16, 185u16, 186u16, 187u16, 188u16, 189u16, 190u16, 191u16, 192u16,
            ],
            9087u16 => &[
                193u16, 195u16, 185u16, 186u16, 187u16, 188u16, 189u16, 190u16, 191u16, 192u16,
            ],
            9088u16 => &[
                196u16, 197u16, 198u16, 199u16, 185u16, 186u16, 187u16, 188u16, 189u16, 190u16,
                191u16, 192u16,
            ],
            9089u16 => &[
                193u16, 200u16, 185u16, 186u16, 187u16, 188u16, 189u16, 190u16, 191u16, 192u16,
            ],
            9090u16 => &[
                180u16, 181u16, 182u16, 183u16, 184u16, 185u16, 186u16, 187u16, 188u16, 189u16,
                190u16, 191u16, 192u16,
            ],
            9091u16 => &[
                193u16, 194u16, 185u16, 186u16, 187u16, 188u16, 189u16, 190u16, 191u16, 192u16,
            ],
            9092u16 => &[
                193u16, 195u16, 185u16, 186u16, 187u16, 188u16, 189u16, 190u16, 191u16, 192u16,
            ],
            9093u16 => &[
                196u16, 197u16, 198u16, 199u16, 185u16, 186u16, 187u16, 188u16, 189u16, 190u16,
                191u16, 192u16,
            ],
            9094u16 => &[
                193u16, 200u16, 185u16, 186u16, 187u16, 188u16, 189u16, 190u16, 191u16, 192u16,
            ],
            9095u16 => &[0u16],
            9096u16 => &[0u16],
            9097u16 => &[0u16],
            9098u16 => &[0u16],
            9099u16 => &[0u16],
            9100u16 => &[41u16, 42u16],
            9101u16 => &[41u16, 42u16],
            9102u16 => &[43u16, 44u16, 45u16],
            9103u16 => &[43u16, 44u16, 45u16],
            9104u16 => &[41u16, 46u16, 47u16],
            9105u16 => &[41u16, 46u16, 47u16],
            9106u16 => &[48u16, 42u16, 49u16],
            9107u16 => &[48u16, 42u16, 49u16],
            9108u16 => &[44u16, 50u16, 45u16],
            9109u16 => &[44u16, 50u16, 45u16],
            9110u16 => &[51u16, 52u16],
            9111u16 => &[51u16, 52u16],
            9112u16 => &[51u16, 50u16, 49u16],
            9113u16 => &[51u16, 50u16, 49u16],
            9114u16 => &[51u16, 52u16, 45u16],
            9115u16 => &[51u16, 52u16, 45u16],
            9116u16 => &[51u16, 53u16],
            9117u16 => &[51u16, 53u16],
            9118u16 => &[51u16, 49u16],
            9119u16 => &[51u16, 49u16],
            9120u16 => &[54u16, 52u16],
            9121u16 => &[54u16, 52u16],
            9122u16 => &[54u16, 44u16, 53u16],
            9123u16 => &[54u16, 44u16, 53u16],
            9124u16 => &[43u16, 46u16, 49u16],
            9125u16 => &[43u16, 46u16, 49u16],
            9126u16 => &[46u16, 50u16, 49u16],
            9127u16 => &[46u16, 50u16, 49u16],
            9128u16 => &[55u16, 52u16, 45u16],
            9129u16 => &[55u16, 52u16, 45u16],
            9130u16 => &[51u16, 42u16],
            9131u16 => &[51u16, 42u16],
            9132u16 => &[51u16, 42u16, 49u16],
            9133u16 => &[51u16, 42u16, 49u16],
            9134u16 => &[51u16, 50u16, 45u16],
            9135u16 => &[51u16, 50u16, 45u16],
            9136u16 => &[51u16, 45u16],
            9137u16 => &[51u16, 45u16],
            9138u16 => &[51u16, 47u16],
            9139u16 => &[51u16, 47u16],
            9140u16 => &[43u16, 56u16],
            9141u16 => &[43u16, 56u16],
            9142u16 => &[43u16, 46u16, 49u16],
            9143u16 => &[43u16, 46u16, 49u16],
            9144u16 => &[43u16, 44u16, 45u16],
            9145u16 => &[43u16, 44u16, 45u16],
            9146u16 => &[55u16, 52u16, 45u16],
            9147u16 => &[55u16, 52u16, 45u16],
            9148u16 => &[48u16, 42u16, 49u16],
            9149u16 => &[48u16, 42u16, 49u16],
            9150u16 => &[51u16, 50u16],
            9151u16 => &[51u16, 50u16],
            9152u16 => &[51u16, 50u16, 45u16],
            9153u16 => &[51u16, 50u16, 45u16],
            9154u16 => &[51u16, 50u16, 49u16],
            9155u16 => &[51u16, 50u16, 49u16],
            9156u16 => &[51u16, 47u16],
            9157u16 => &[51u16, 47u16],
            9158u16 => &[51u16, 53u16],
            9159u16 => &[51u16, 53u16],
            9160u16 => &[57u16, 50u16],
            9161u16 => &[57u16, 50u16],
            9162u16 => &[41u16, 46u16, 47u16],
            9163u16 => &[41u16, 46u16, 47u16],
            9164u16 => &[54u16, 44u16, 53u16],
            9165u16 => &[54u16, 44u16, 53u16],
            9166u16 => &[44u16, 50u16, 45u16],
            9167u16 => &[44u16, 50u16, 45u16],
            9168u16 => &[46u16, 50u16, 49u16],
            9169u16 => &[46u16, 50u16, 49u16],
            9170u16 => &[51u16, 56u16],
            9171u16 => &[51u16, 56u16],
            9172u16 => &[51u16, 52u16, 45u16],
            9173u16 => &[51u16, 52u16, 45u16],
            9174u16 => &[51u16, 42u16, 49u16],
            9175u16 => &[51u16, 42u16, 49u16],
            9176u16 => &[51u16, 49u16],
            9177u16 => &[51u16, 49u16],
            9178u16 => &[51u16, 45u16],
            9179u16 => &[51u16, 45u16],
            9180u16 => &[],
            9181u16 => &[],
            9182u16 => &[],
            9183u16 => &[],
            9184u16 => &[],
            9185u16 => &[],
            9186u16 => &[],
            9187u16 => &[],
            9188u16 => &[],
            9189u16 => &[],
            9190u16 => &[],
            9191u16 => &[],
            9192u16 => &[],
            9193u16 => &[],
            9194u16 => &[],
            9195u16 => &[],
            9196u16 => &[],
            9197u16 => &[],
            9198u16 => &[],
            9199u16 => &[],
            9200u16 => &[],
            9201u16 => &[],
            9202u16 => &[],
            9203u16 => &[],
            9204u16 => &[0u16],
            9205u16 => &[0u16],
            9206u16 => &[0u16],
            9207u16 => &[0u16],
            9208u16 => &[0u16],
            9209u16 => &[0u16],
            9210u16 => &[0u16],
            9211u16 => &[0u16],
            9212u16 => &[0u16],
            9213u16 => &[0u16],
            9214u16 => &[0u16],
            9215u16 => &[0u16],
            9216u16 => &[0u16],
            9217u16 => &[0u16],
            9218u16 => &[0u16],
            9219u16 => &[0u16],
            9220u16 => &[0u16],
            9221u16 => &[0u16],
            9222u16 => &[0u16],
            9223u16 => &[0u16],
            9224u16 => &[0u16],
            9225u16 => &[0u16],
            9226u16 => &[0u16],
            9227u16 => &[0u16],
            9228u16 => &[0u16],
            9229u16 => &[0u16],
            9230u16 => &[0u16],
            9231u16 => &[0u16],
            9232u16 => &[94u16, 95u16, 96u16],
            9233u16 => &[97u16, 98u16],
            9234u16 => &[94u16, 95u16, 96u16],
            9235u16 => &[97u16, 98u16],
            9236u16 => &[94u16, 95u16],
            9237u16 => &[99u16, 98u16],
            9238u16 => &[94u16, 95u16],
            9239u16 => &[99u16, 98u16],
            9240u16 => &[94u16, 96u16],
            9241u16 => &[100u16, 98u16],
            9242u16 => &[94u16, 96u16],
            9243u16 => &[100u16, 98u16],
            9244u16 => &[94u16],
            9245u16 => &[101u16],
            9246u16 => &[94u16],
            9247u16 => &[101u16],
            9248u16 => &[102u16, 95u16, 96u16],
            9249u16 => &[97u16],
            9250u16 => &[102u16, 95u16, 96u16],
            9251u16 => &[97u16],
            9252u16 => &[102u16, 95u16],
            9253u16 => &[99u16],
            9254u16 => &[102u16, 95u16],
            9255u16 => &[99u16],
            9256u16 => &[102u16, 96u16],
            9257u16 => &[100u16],
            9258u16 => &[102u16, 96u16],
            9259u16 => &[100u16],
            9260u16 => &[102u16],
            9261u16 => &[103u16],
            9262u16 => &[102u16],
            9263u16 => &[103u16],
            9264u16 => &[94u16, 95u16, 96u16],
            9265u16 => &[97u16, 98u16],
            9266u16 => &[94u16, 95u16, 96u16],
            9267u16 => &[97u16, 98u16],
            9268u16 => &[94u16, 95u16],
            9269u16 => &[99u16, 98u16],
            9270u16 => &[94u16, 95u16],
            9271u16 => &[99u16, 98u16],
            9272u16 => &[94u16, 96u16],
            9273u16 => &[100u16, 98u16],
            9274u16 => &[94u16, 96u16],
            9275u16 => &[100u16, 98u16],
            9276u16 => &[94u16],
            9277u16 => &[101u16],
            9278u16 => &[94u16],
            9279u16 => &[101u16],
            9280u16 => &[102u16, 95u16, 96u16],
            9281u16 => &[97u16],
            9282u16 => &[102u16, 95u16, 96u16],
            9283u16 => &[97u16],
            9284u16 => &[102u16, 95u16],
            9285u16 => &[99u16],
            9286u16 => &[102u16, 95u16],
            9287u16 => &[99u16],
            9288u16 => &[102u16, 96u16],
            9289u16 => &[100u16],
            9290u16 => &[102u16, 96u16],
            9291u16 => &[100u16],
            9292u16 => &[102u16],
            9293u16 => &[103u16],
            9294u16 => &[102u16],
            9295u16 => &[103u16],
            9296u16 => &[94u16, 95u16, 96u16],
            9297u16 => &[97u16, 98u16],
            9298u16 => &[94u16, 95u16, 96u16],
            9299u16 => &[97u16, 98u16],
            9300u16 => &[94u16, 95u16],
            9301u16 => &[99u16, 98u16],
            9302u16 => &[94u16, 95u16],
            9303u16 => &[99u16, 98u16],
            9304u16 => &[94u16, 96u16],
            9305u16 => &[100u16, 98u16],
            9306u16 => &[94u16, 96u16],
            9307u16 => &[100u16, 98u16],
            9308u16 => &[94u16],
            9309u16 => &[101u16],
            9310u16 => &[94u16],
            9311u16 => &[101u16],
            9312u16 => &[102u16, 95u16, 96u16],
            9313u16 => &[97u16],
            9314u16 => &[102u16, 95u16, 96u16],
            9315u16 => &[97u16],
            9316u16 => &[102u16, 95u16],
            9317u16 => &[99u16],
            9318u16 => &[102u16, 95u16],
            9319u16 => &[99u16],
            9320u16 => &[102u16, 96u16],
            9321u16 => &[100u16],
            9322u16 => &[102u16, 96u16],
            9323u16 => &[100u16],
            9324u16 => &[102u16],
            9325u16 => &[103u16],
            9326u16 => &[102u16],
            9327u16 => &[103u16],
            9328u16 => &[94u16, 95u16, 96u16],
            9329u16 => &[97u16, 98u16],
            9330u16 => &[94u16, 95u16, 96u16],
            9331u16 => &[97u16, 98u16],
            9332u16 => &[94u16, 95u16],
            9333u16 => &[99u16, 98u16],
            9334u16 => &[94u16, 95u16],
            9335u16 => &[99u16, 98u16],
            9336u16 => &[94u16, 96u16],
            9337u16 => &[100u16, 98u16],
            9338u16 => &[94u16, 96u16],
            9339u16 => &[100u16, 98u16],
            9340u16 => &[94u16],
            9341u16 => &[101u16],
            9342u16 => &[94u16],
            9343u16 => &[101u16],
            9344u16 => &[102u16, 95u16, 96u16],
            9345u16 => &[97u16],
            9346u16 => &[102u16, 95u16, 96u16],
            9347u16 => &[97u16],
            9348u16 => &[102u16, 95u16],
            9349u16 => &[99u16],
            9350u16 => &[102u16, 95u16],
            9351u16 => &[99u16],
            9352u16 => &[102u16, 96u16],
            9353u16 => &[100u16],
            9354u16 => &[102u16, 96u16],
            9355u16 => &[100u16],
            9356u16 => &[102u16],
            9357u16 => &[103u16],
            9358u16 => &[102u16],
            9359u16 => &[103u16],
            9360u16 => &[94u16, 95u16, 96u16],
            9361u16 => &[97u16, 98u16],
            9362u16 => &[94u16, 95u16, 96u16],
            9363u16 => &[97u16, 98u16],
            9364u16 => &[94u16, 95u16],
            9365u16 => &[99u16, 98u16],
            9366u16 => &[94u16, 95u16],
            9367u16 => &[99u16, 98u16],
            9368u16 => &[94u16, 96u16],
            9369u16 => &[100u16, 98u16],
            9370u16 => &[94u16, 96u16],
            9371u16 => &[100u16, 98u16],
            9372u16 => &[94u16],
            9373u16 => &[101u16],
            9374u16 => &[94u16],
            9375u16 => &[101u16],
            9376u16 => &[102u16, 95u16, 96u16],
            9377u16 => &[97u16],
            9378u16 => &[102u16, 95u16, 96u16],
            9379u16 => &[97u16],
            9380u16 => &[102u16, 95u16],
            9381u16 => &[99u16],
            9382u16 => &[102u16, 95u16],
            9383u16 => &[99u16],
            9384u16 => &[102u16, 96u16],
            9385u16 => &[100u16],
            9386u16 => &[102u16, 96u16],
            9387u16 => &[100u16],
            9388u16 => &[102u16],
            9389u16 => &[103u16],
            9390u16 => &[102u16],
            9391u16 => &[103u16],
            9392u16 => &[94u16, 95u16, 96u16],
            9393u16 => &[97u16, 98u16],
            9394u16 => &[94u16, 95u16, 96u16],
            9395u16 => &[97u16, 98u16],
            9396u16 => &[94u16, 95u16],
            9397u16 => &[99u16, 98u16],
            9398u16 => &[94u16, 95u16],
            9399u16 => &[99u16, 98u16],
            9400u16 => &[94u16, 96u16],
            9401u16 => &[100u16, 98u16],
            9402u16 => &[94u16, 96u16],
            9403u16 => &[100u16, 98u16],
            9404u16 => &[94u16],
            9405u16 => &[101u16],
            9406u16 => &[94u16],
            9407u16 => &[101u16],
            9408u16 => &[102u16, 95u16, 96u16],
            9409u16 => &[97u16],
            9410u16 => &[102u16, 95u16, 96u16],
            9411u16 => &[97u16],
            9412u16 => &[102u16, 95u16],
            9413u16 => &[99u16],
            9414u16 => &[102u16, 95u16],
            9415u16 => &[99u16],
            9416u16 => &[102u16, 96u16],
            9417u16 => &[100u16],
            9418u16 => &[102u16, 96u16],
            9419u16 => &[100u16],
            9420u16 => &[102u16],
            9421u16 => &[103u16],
            9422u16 => &[102u16],
            9423u16 => &[103u16],
            9424u16 => &[94u16, 95u16, 96u16],
            9425u16 => &[97u16, 98u16],
            9426u16 => &[94u16, 95u16, 96u16],
            9427u16 => &[97u16, 98u16],
            9428u16 => &[94u16, 95u16],
            9429u16 => &[99u16, 98u16],
            9430u16 => &[94u16, 95u16],
            9431u16 => &[99u16, 98u16],
            9432u16 => &[94u16, 96u16],
            9433u16 => &[100u16, 98u16],
            9434u16 => &[94u16, 96u16],
            9435u16 => &[100u16, 98u16],
            9436u16 => &[94u16],
            9437u16 => &[101u16],
            9438u16 => &[94u16],
            9439u16 => &[101u16],
            9440u16 => &[102u16, 95u16, 96u16],
            9441u16 => &[97u16],
            9442u16 => &[102u16, 95u16, 96u16],
            9443u16 => &[97u16],
            9444u16 => &[102u16, 95u16],
            9445u16 => &[99u16],
            9446u16 => &[102u16, 95u16],
            9447u16 => &[99u16],
            9448u16 => &[102u16, 96u16],
            9449u16 => &[100u16],
            9450u16 => &[102u16, 96u16],
            9451u16 => &[100u16],
            9452u16 => &[102u16],
            9453u16 => &[103u16],
            9454u16 => &[102u16],
            9455u16 => &[103u16],
            9456u16 => &[94u16, 95u16, 96u16],
            9457u16 => &[97u16, 98u16],
            9458u16 => &[94u16, 95u16, 96u16],
            9459u16 => &[97u16, 98u16],
            9460u16 => &[94u16, 95u16],
            9461u16 => &[99u16, 98u16],
            9462u16 => &[94u16, 95u16],
            9463u16 => &[99u16, 98u16],
            9464u16 => &[94u16, 96u16],
            9465u16 => &[100u16, 98u16],
            9466u16 => &[94u16, 96u16],
            9467u16 => &[100u16, 98u16],
            9468u16 => &[94u16],
            9469u16 => &[101u16],
            9470u16 => &[94u16],
            9471u16 => &[101u16],
            9472u16 => &[102u16, 95u16, 96u16],
            9473u16 => &[97u16],
            9474u16 => &[102u16, 95u16, 96u16],
            9475u16 => &[97u16],
            9476u16 => &[102u16, 95u16],
            9477u16 => &[99u16],
            9478u16 => &[102u16, 95u16],
            9479u16 => &[99u16],
            9480u16 => &[102u16, 96u16],
            9481u16 => &[100u16],
            9482u16 => &[102u16, 96u16],
            9483u16 => &[100u16],
            9484u16 => &[102u16],
            9485u16 => &[103u16],
            9486u16 => &[102u16],
            9487u16 => &[103u16],
            9488u16 => &[94u16, 95u16, 96u16],
            9489u16 => &[97u16, 98u16],
            9490u16 => &[94u16, 95u16, 96u16],
            9491u16 => &[97u16, 98u16],
            9492u16 => &[94u16, 95u16],
            9493u16 => &[99u16, 98u16],
            9494u16 => &[94u16, 95u16],
            9495u16 => &[99u16, 98u16],
            9496u16 => &[94u16, 96u16],
            9497u16 => &[100u16, 98u16],
            9498u16 => &[94u16, 96u16],
            9499u16 => &[100u16, 98u16],
            9500u16 => &[94u16],
            9501u16 => &[101u16],
            9502u16 => &[94u16],
            9503u16 => &[101u16],
            9504u16 => &[102u16, 95u16, 96u16],
            9505u16 => &[97u16],
            9506u16 => &[102u16, 95u16, 96u16],
            9507u16 => &[97u16],
            9508u16 => &[102u16, 95u16],
            9509u16 => &[99u16],
            9510u16 => &[102u16, 95u16],
            9511u16 => &[99u16],
            9512u16 => &[102u16, 96u16],
            9513u16 => &[100u16],
            9514u16 => &[102u16, 96u16],
            9515u16 => &[100u16],
            9516u16 => &[102u16],
            9517u16 => &[103u16],
            9518u16 => &[102u16],
            9519u16 => &[103u16],
            9520u16 => &[94u16, 95u16, 96u16],
            9521u16 => &[97u16, 98u16],
            9522u16 => &[94u16, 95u16, 96u16],
            9523u16 => &[97u16, 98u16],
            9524u16 => &[94u16, 95u16],
            9525u16 => &[99u16, 98u16],
            9526u16 => &[94u16, 95u16],
            9527u16 => &[99u16, 98u16],
            9528u16 => &[94u16, 96u16],
            9529u16 => &[100u16, 98u16],
            9530u16 => &[94u16, 96u16],
            9531u16 => &[100u16, 98u16],
            9532u16 => &[94u16],
            9533u16 => &[101u16],
            9534u16 => &[94u16],
            9535u16 => &[101u16],
            9536u16 => &[102u16, 95u16, 96u16],
            9537u16 => &[97u16],
            9538u16 => &[102u16, 95u16, 96u16],
            9539u16 => &[97u16],
            9540u16 => &[102u16, 95u16],
            9541u16 => &[99u16],
            9542u16 => &[102u16, 95u16],
            9543u16 => &[99u16],
            9544u16 => &[102u16, 96u16],
            9545u16 => &[100u16],
            9546u16 => &[102u16, 96u16],
            9547u16 => &[100u16],
            9548u16 => &[102u16],
            9549u16 => &[103u16],
            9550u16 => &[102u16],
            9551u16 => &[103u16],
            9552u16 => &[94u16, 95u16, 96u16],
            9553u16 => &[97u16, 98u16],
            9554u16 => &[94u16, 95u16, 96u16],
            9555u16 => &[97u16, 98u16],
            9556u16 => &[94u16, 95u16],
            9557u16 => &[99u16, 98u16],
            9558u16 => &[94u16, 95u16],
            9559u16 => &[99u16, 98u16],
            9560u16 => &[94u16, 96u16],
            9561u16 => &[100u16, 98u16],
            9562u16 => &[94u16, 96u16],
            9563u16 => &[100u16, 98u16],
            9564u16 => &[94u16],
            9565u16 => &[101u16],
            9566u16 => &[94u16],
            9567u16 => &[101u16],
            9568u16 => &[102u16, 95u16, 96u16],
            9569u16 => &[97u16],
            9570u16 => &[102u16, 95u16, 96u16],
            9571u16 => &[97u16],
            9572u16 => &[102u16, 95u16],
            9573u16 => &[99u16],
            9574u16 => &[102u16, 95u16],
            9575u16 => &[99u16],
            9576u16 => &[102u16, 96u16],
            9577u16 => &[100u16],
            9578u16 => &[102u16, 96u16],
            9579u16 => &[100u16],
            9580u16 => &[102u16],
            9581u16 => &[103u16],
            9582u16 => &[102u16],
            9583u16 => &[103u16],
            9584u16 => &[94u16, 95u16, 96u16],
            9585u16 => &[97u16, 98u16],
            9586u16 => &[94u16, 95u16, 96u16],
            9587u16 => &[97u16, 98u16],
            9588u16 => &[94u16, 95u16],
            9589u16 => &[99u16, 98u16],
            9590u16 => &[94u16, 95u16],
            9591u16 => &[99u16, 98u16],
            9592u16 => &[94u16, 96u16],
            9593u16 => &[100u16, 98u16],
            9594u16 => &[94u16, 96u16],
            9595u16 => &[100u16, 98u16],
            9596u16 => &[94u16],
            9597u16 => &[101u16],
            9598u16 => &[94u16],
            9599u16 => &[101u16],
            9600u16 => &[102u16, 95u16, 96u16],
            9601u16 => &[97u16],
            9602u16 => &[102u16, 95u16, 96u16],
            9603u16 => &[97u16],
            9604u16 => &[102u16, 95u16],
            9605u16 => &[99u16],
            9606u16 => &[102u16, 95u16],
            9607u16 => &[99u16],
            9608u16 => &[102u16, 96u16],
            9609u16 => &[100u16],
            9610u16 => &[102u16, 96u16],
            9611u16 => &[100u16],
            9612u16 => &[102u16],
            9613u16 => &[103u16],
            9614u16 => &[102u16],
            9615u16 => &[103u16],
            9616u16 => &[94u16, 95u16, 96u16],
            9617u16 => &[97u16, 98u16],
            9618u16 => &[94u16, 95u16, 96u16],
            9619u16 => &[97u16, 98u16],
            9620u16 => &[94u16, 95u16],
            9621u16 => &[99u16, 98u16],
            9622u16 => &[94u16, 95u16],
            9623u16 => &[99u16, 98u16],
            9624u16 => &[94u16, 96u16],
            9625u16 => &[100u16, 98u16],
            9626u16 => &[94u16, 96u16],
            9627u16 => &[100u16, 98u16],
            9628u16 => &[94u16],
            9629u16 => &[101u16],
            9630u16 => &[94u16],
            9631u16 => &[101u16],
            9632u16 => &[102u16, 95u16, 96u16],
            9633u16 => &[97u16],
            9634u16 => &[102u16, 95u16, 96u16],
            9635u16 => &[97u16],
            9636u16 => &[102u16, 95u16],
            9637u16 => &[99u16],
            9638u16 => &[102u16, 95u16],
            9639u16 => &[99u16],
            9640u16 => &[102u16, 96u16],
            9641u16 => &[100u16],
            9642u16 => &[102u16, 96u16],
            9643u16 => &[100u16],
            9644u16 => &[102u16],
            9645u16 => &[103u16],
            9646u16 => &[102u16],
            9647u16 => &[103u16],
            9648u16 => &[94u16, 95u16, 96u16],
            9649u16 => &[97u16, 98u16],
            9650u16 => &[94u16, 95u16, 96u16],
            9651u16 => &[97u16, 98u16],
            9652u16 => &[94u16, 95u16],
            9653u16 => &[99u16, 98u16],
            9654u16 => &[94u16, 95u16],
            9655u16 => &[99u16, 98u16],
            9656u16 => &[94u16, 96u16],
            9657u16 => &[100u16, 98u16],
            9658u16 => &[94u16, 96u16],
            9659u16 => &[100u16, 98u16],
            9660u16 => &[94u16],
            9661u16 => &[101u16],
            9662u16 => &[94u16],
            9663u16 => &[101u16],
            9664u16 => &[102u16, 95u16, 96u16],
            9665u16 => &[97u16],
            9666u16 => &[102u16, 95u16, 96u16],
            9667u16 => &[97u16],
            9668u16 => &[102u16, 95u16],
            9669u16 => &[99u16],
            9670u16 => &[102u16, 95u16],
            9671u16 => &[99u16],
            9672u16 => &[102u16, 96u16],
            9673u16 => &[100u16],
            9674u16 => &[102u16, 96u16],
            9675u16 => &[100u16],
            9676u16 => &[102u16],
            9677u16 => &[103u16],
            9678u16 => &[102u16],
            9679u16 => &[103u16],
            9680u16 => &[94u16, 95u16, 96u16],
            9681u16 => &[97u16, 98u16],
            9682u16 => &[94u16, 95u16, 96u16],
            9683u16 => &[97u16, 98u16],
            9684u16 => &[94u16, 95u16],
            9685u16 => &[99u16, 98u16],
            9686u16 => &[94u16, 95u16],
            9687u16 => &[99u16, 98u16],
            9688u16 => &[94u16, 96u16],
            9689u16 => &[100u16, 98u16],
            9690u16 => &[94u16, 96u16],
            9691u16 => &[100u16, 98u16],
            9692u16 => &[94u16],
            9693u16 => &[101u16],
            9694u16 => &[94u16],
            9695u16 => &[101u16],
            9696u16 => &[102u16, 95u16, 96u16],
            9697u16 => &[97u16],
            9698u16 => &[102u16, 95u16, 96u16],
            9699u16 => &[97u16],
            9700u16 => &[102u16, 95u16],
            9701u16 => &[99u16],
            9702u16 => &[102u16, 95u16],
            9703u16 => &[99u16],
            9704u16 => &[102u16, 96u16],
            9705u16 => &[100u16],
            9706u16 => &[102u16, 96u16],
            9707u16 => &[100u16],
            9708u16 => &[102u16],
            9709u16 => &[103u16],
            9710u16 => &[102u16],
            9711u16 => &[103u16],
            9712u16 => &[94u16, 95u16, 96u16],
            9713u16 => &[97u16, 98u16],
            9714u16 => &[94u16, 95u16, 96u16],
            9715u16 => &[97u16, 98u16],
            9716u16 => &[94u16, 95u16],
            9717u16 => &[99u16, 98u16],
            9718u16 => &[94u16, 95u16],
            9719u16 => &[99u16, 98u16],
            9720u16 => &[94u16, 96u16],
            9721u16 => &[100u16, 98u16],
            9722u16 => &[94u16, 96u16],
            9723u16 => &[100u16, 98u16],
            9724u16 => &[94u16],
            9725u16 => &[101u16],
            9726u16 => &[94u16],
            9727u16 => &[101u16],
            9728u16 => &[102u16, 95u16, 96u16],
            9729u16 => &[97u16],
            9730u16 => &[102u16, 95u16, 96u16],
            9731u16 => &[97u16],
            9732u16 => &[102u16, 95u16],
            9733u16 => &[99u16],
            9734u16 => &[102u16, 95u16],
            9735u16 => &[99u16],
            9736u16 => &[102u16, 96u16],
            9737u16 => &[100u16],
            9738u16 => &[102u16, 96u16],
            9739u16 => &[100u16],
            9740u16 => &[102u16],
            9741u16 => &[103u16],
            9742u16 => &[102u16],
            9743u16 => &[103u16],
            9744u16 => &[41u16, 42u16],
            9745u16 => &[41u16, 42u16],
            9746u16 => &[43u16, 44u16, 45u16],
            9747u16 => &[43u16, 44u16, 45u16],
            9748u16 => &[41u16, 46u16, 47u16],
            9749u16 => &[41u16, 46u16, 47u16],
            9750u16 => &[48u16, 42u16, 49u16],
            9751u16 => &[48u16, 42u16, 49u16],
            9752u16 => &[44u16, 50u16, 45u16],
            9753u16 => &[44u16, 50u16, 45u16],
            9754u16 => &[51u16, 52u16],
            9755u16 => &[51u16, 52u16],
            9756u16 => &[51u16, 50u16, 49u16],
            9757u16 => &[51u16, 50u16, 49u16],
            9758u16 => &[51u16, 52u16, 45u16],
            9759u16 => &[51u16, 52u16, 45u16],
            9760u16 => &[51u16, 53u16],
            9761u16 => &[51u16, 53u16],
            9762u16 => &[51u16, 49u16],
            9763u16 => &[51u16, 49u16],
            9764u16 => &[54u16, 52u16],
            9765u16 => &[54u16, 52u16],
            9766u16 => &[54u16, 44u16, 53u16],
            9767u16 => &[54u16, 44u16, 53u16],
            9768u16 => &[43u16, 46u16, 49u16],
            9769u16 => &[43u16, 46u16, 49u16],
            9770u16 => &[46u16, 50u16, 49u16],
            9771u16 => &[46u16, 50u16, 49u16],
            9772u16 => &[55u16, 52u16, 45u16],
            9773u16 => &[55u16, 52u16, 45u16],
            9774u16 => &[51u16, 42u16],
            9775u16 => &[51u16, 42u16],
            9776u16 => &[51u16, 42u16, 49u16],
            9777u16 => &[51u16, 42u16, 49u16],
            9778u16 => &[51u16, 50u16, 45u16],
            9779u16 => &[51u16, 50u16, 45u16],
            9780u16 => &[51u16, 45u16],
            9781u16 => &[51u16, 45u16],
            9782u16 => &[51u16, 47u16],
            9783u16 => &[51u16, 47u16],
            9784u16 => &[43u16, 56u16],
            9785u16 => &[43u16, 56u16],
            9786u16 => &[43u16, 46u16, 49u16],
            9787u16 => &[43u16, 46u16, 49u16],
            9788u16 => &[43u16, 44u16, 45u16],
            9789u16 => &[43u16, 44u16, 45u16],
            9790u16 => &[55u16, 52u16, 45u16],
            9791u16 => &[55u16, 52u16, 45u16],
            9792u16 => &[48u16, 42u16, 49u16],
            9793u16 => &[48u16, 42u16, 49u16],
            9794u16 => &[51u16, 50u16],
            9795u16 => &[51u16, 50u16],
            9796u16 => &[51u16, 50u16, 45u16],
            9797u16 => &[51u16, 50u16, 45u16],
            9798u16 => &[51u16, 50u16, 49u16],
            9799u16 => &[51u16, 50u16, 49u16],
            9800u16 => &[51u16, 47u16],
            9801u16 => &[51u16, 47u16],
            9802u16 => &[51u16, 53u16],
            9803u16 => &[51u16, 53u16],
            9804u16 => &[57u16, 50u16],
            9805u16 => &[57u16, 50u16],
            9806u16 => &[41u16, 46u16, 47u16],
            9807u16 => &[41u16, 46u16, 47u16],
            9808u16 => &[54u16, 44u16, 53u16],
            9809u16 => &[54u16, 44u16, 53u16],
            9810u16 => &[44u16, 50u16, 45u16],
            9811u16 => &[44u16, 50u16, 45u16],
            9812u16 => &[46u16, 50u16, 49u16],
            9813u16 => &[46u16, 50u16, 49u16],
            9814u16 => &[51u16, 56u16],
            9815u16 => &[51u16, 56u16],
            9816u16 => &[51u16, 52u16, 45u16],
            9817u16 => &[51u16, 52u16, 45u16],
            9818u16 => &[51u16, 42u16, 49u16],
            9819u16 => &[51u16, 42u16, 49u16],
            9820u16 => &[51u16, 49u16],
            9821u16 => &[51u16, 49u16],
            9822u16 => &[51u16, 45u16],
            9823u16 => &[51u16, 45u16],
            9824u16 => &[41u16, 42u16],
            9825u16 => &[41u16, 42u16],
            9826u16 => &[43u16, 44u16, 45u16],
            9827u16 => &[43u16, 44u16, 45u16],
            9828u16 => &[41u16, 46u16, 47u16],
            9829u16 => &[41u16, 46u16, 47u16],
            9830u16 => &[48u16, 42u16, 49u16],
            9831u16 => &[48u16, 42u16, 49u16],
            9832u16 => &[44u16, 50u16, 45u16],
            9833u16 => &[44u16, 50u16, 45u16],
            9834u16 => &[51u16, 52u16],
            9835u16 => &[51u16, 52u16],
            9836u16 => &[51u16, 50u16, 49u16],
            9837u16 => &[51u16, 50u16, 49u16],
            9838u16 => &[51u16, 52u16, 45u16],
            9839u16 => &[51u16, 52u16, 45u16],
            9840u16 => &[51u16, 53u16],
            9841u16 => &[51u16, 53u16],
            9842u16 => &[51u16, 49u16],
            9843u16 => &[51u16, 49u16],
            9844u16 => &[54u16, 52u16],
            9845u16 => &[54u16, 52u16],
            9846u16 => &[54u16, 44u16, 53u16],
            9847u16 => &[54u16, 44u16, 53u16],
            9848u16 => &[43u16, 46u16, 49u16],
            9849u16 => &[43u16, 46u16, 49u16],
            9850u16 => &[46u16, 50u16, 49u16],
            9851u16 => &[46u16, 50u16, 49u16],
            9852u16 => &[55u16, 52u16, 45u16],
            9853u16 => &[55u16, 52u16, 45u16],
            9854u16 => &[51u16, 42u16],
            9855u16 => &[51u16, 42u16],
            9856u16 => &[51u16, 42u16, 49u16],
            9857u16 => &[51u16, 42u16, 49u16],
            9858u16 => &[51u16, 50u16, 45u16],
            9859u16 => &[51u16, 50u16, 45u16],
            9860u16 => &[51u16, 45u16],
            9861u16 => &[51u16, 45u16],
            9862u16 => &[51u16, 47u16],
            9863u16 => &[51u16, 47u16],
            9864u16 => &[43u16, 56u16],
            9865u16 => &[43u16, 56u16],
            9866u16 => &[43u16, 46u16, 49u16],
            9867u16 => &[43u16, 46u16, 49u16],
            9868u16 => &[43u16, 44u16, 45u16],
            9869u16 => &[43u16, 44u16, 45u16],
            9870u16 => &[55u16, 52u16, 45u16],
            9871u16 => &[55u16, 52u16, 45u16],
            9872u16 => &[48u16, 42u16, 49u16],
            9873u16 => &[48u16, 42u16, 49u16],
            9874u16 => &[51u16, 50u16],
            9875u16 => &[51u16, 50u16],
            9876u16 => &[51u16, 50u16, 45u16],
            9877u16 => &[51u16, 50u16, 45u16],
            9878u16 => &[51u16, 50u16, 49u16],
            9879u16 => &[51u16, 50u16, 49u16],
            9880u16 => &[51u16, 47u16],
            9881u16 => &[51u16, 47u16],
            9882u16 => &[51u16, 53u16],
            9883u16 => &[51u16, 53u16],
            9884u16 => &[57u16, 50u16],
            9885u16 => &[57u16, 50u16],
            9886u16 => &[41u16, 46u16, 47u16],
            9887u16 => &[41u16, 46u16, 47u16],
            9888u16 => &[54u16, 44u16, 53u16],
            9889u16 => &[54u16, 44u16, 53u16],
            9890u16 => &[44u16, 50u16, 45u16],
            9891u16 => &[44u16, 50u16, 45u16],
            9892u16 => &[46u16, 50u16, 49u16],
            9893u16 => &[46u16, 50u16, 49u16],
            9894u16 => &[51u16, 56u16],
            9895u16 => &[51u16, 56u16],
            9896u16 => &[51u16, 52u16, 45u16],
            9897u16 => &[51u16, 52u16, 45u16],
            9898u16 => &[51u16, 42u16, 49u16],
            9899u16 => &[51u16, 42u16, 49u16],
            9900u16 => &[51u16, 49u16],
            9901u16 => &[51u16, 49u16],
            9902u16 => &[51u16, 45u16],
            9903u16 => &[51u16, 45u16],
            9904u16 => &[41u16, 42u16],
            9905u16 => &[41u16, 42u16],
            9906u16 => &[43u16, 44u16, 45u16],
            9907u16 => &[43u16, 44u16, 45u16],
            9908u16 => &[41u16, 46u16, 47u16],
            9909u16 => &[41u16, 46u16, 47u16],
            9910u16 => &[48u16, 42u16, 49u16],
            9911u16 => &[48u16, 42u16, 49u16],
            9912u16 => &[44u16, 50u16, 45u16],
            9913u16 => &[44u16, 50u16, 45u16],
            9914u16 => &[51u16, 52u16],
            9915u16 => &[51u16, 52u16],
            9916u16 => &[51u16, 50u16, 49u16],
            9917u16 => &[51u16, 50u16, 49u16],
            9918u16 => &[51u16, 52u16, 45u16],
            9919u16 => &[51u16, 52u16, 45u16],
            9920u16 => &[51u16, 53u16],
            9921u16 => &[51u16, 53u16],
            9922u16 => &[51u16, 49u16],
            9923u16 => &[51u16, 49u16],
            9924u16 => &[54u16, 52u16],
            9925u16 => &[54u16, 52u16],
            9926u16 => &[54u16, 44u16, 53u16],
            9927u16 => &[54u16, 44u16, 53u16],
            9928u16 => &[43u16, 46u16, 49u16],
            9929u16 => &[43u16, 46u16, 49u16],
            9930u16 => &[46u16, 50u16, 49u16],
            9931u16 => &[46u16, 50u16, 49u16],
            9932u16 => &[55u16, 52u16, 45u16],
            9933u16 => &[55u16, 52u16, 45u16],
            9934u16 => &[51u16, 42u16],
            9935u16 => &[51u16, 42u16],
            9936u16 => &[51u16, 42u16, 49u16],
            9937u16 => &[51u16, 42u16, 49u16],
            9938u16 => &[51u16, 50u16, 45u16],
            9939u16 => &[51u16, 50u16, 45u16],
            9940u16 => &[51u16, 45u16],
            9941u16 => &[51u16, 45u16],
            9942u16 => &[51u16, 47u16],
            9943u16 => &[51u16, 47u16],
            9944u16 => &[43u16, 56u16],
            9945u16 => &[43u16, 56u16],
            9946u16 => &[43u16, 46u16, 49u16],
            9947u16 => &[43u16, 46u16, 49u16],
            9948u16 => &[43u16, 44u16, 45u16],
            9949u16 => &[43u16, 44u16, 45u16],
            9950u16 => &[55u16, 52u16, 45u16],
            9951u16 => &[55u16, 52u16, 45u16],
            9952u16 => &[48u16, 42u16, 49u16],
            9953u16 => &[48u16, 42u16, 49u16],
            9954u16 => &[51u16, 50u16],
            9955u16 => &[51u16, 50u16],
            9956u16 => &[51u16, 50u16, 45u16],
            9957u16 => &[51u16, 50u16, 45u16],
            9958u16 => &[51u16, 50u16, 49u16],
            9959u16 => &[51u16, 50u16, 49u16],
            9960u16 => &[51u16, 47u16],
            9961u16 => &[51u16, 47u16],
            9962u16 => &[51u16, 53u16],
            9963u16 => &[51u16, 53u16],
            9964u16 => &[57u16, 50u16],
            9965u16 => &[57u16, 50u16],
            9966u16 => &[41u16, 46u16, 47u16],
            9967u16 => &[41u16, 46u16, 47u16],
            9968u16 => &[54u16, 44u16, 53u16],
            9969u16 => &[54u16, 44u16, 53u16],
            9970u16 => &[44u16, 50u16, 45u16],
            9971u16 => &[44u16, 50u16, 45u16],
            9972u16 => &[46u16, 50u16, 49u16],
            9973u16 => &[46u16, 50u16, 49u16],
            9974u16 => &[51u16, 56u16],
            9975u16 => &[51u16, 56u16],
            9976u16 => &[51u16, 52u16, 45u16],
            9977u16 => &[51u16, 52u16, 45u16],
            9978u16 => &[51u16, 42u16, 49u16],
            9979u16 => &[51u16, 42u16, 49u16],
            9980u16 => &[51u16, 49u16],
            9981u16 => &[51u16, 49u16],
            9982u16 => &[51u16, 45u16],
            9983u16 => &[51u16, 45u16],
            9984u16 => &[41u16, 42u16],
            9985u16 => &[41u16, 42u16],
            9986u16 => &[43u16, 44u16, 45u16],
            9987u16 => &[43u16, 44u16, 45u16],
            9988u16 => &[41u16, 46u16, 47u16],
            9989u16 => &[41u16, 46u16, 47u16],
            9990u16 => &[48u16, 42u16, 49u16],
            9991u16 => &[48u16, 42u16, 49u16],
            9992u16 => &[44u16, 50u16, 45u16],
            9993u16 => &[44u16, 50u16, 45u16],
            9994u16 => &[51u16, 52u16],
            9995u16 => &[51u16, 52u16],
            9996u16 => &[51u16, 50u16, 49u16],
            9997u16 => &[51u16, 50u16, 49u16],
            9998u16 => &[51u16, 52u16, 45u16],
            9999u16 => &[51u16, 52u16, 45u16],
            10000u16 => &[51u16, 53u16],
            10001u16 => &[51u16, 53u16],
            10002u16 => &[51u16, 49u16],
            10003u16 => &[51u16, 49u16],
            10004u16 => &[54u16, 52u16],
            10005u16 => &[54u16, 52u16],
            10006u16 => &[54u16, 44u16, 53u16],
            10007u16 => &[54u16, 44u16, 53u16],
            10008u16 => &[43u16, 46u16, 49u16],
            10009u16 => &[43u16, 46u16, 49u16],
            10010u16 => &[46u16, 50u16, 49u16],
            10011u16 => &[46u16, 50u16, 49u16],
            10012u16 => &[55u16, 52u16, 45u16],
            10013u16 => &[55u16, 52u16, 45u16],
            10014u16 => &[51u16, 42u16],
            10015u16 => &[51u16, 42u16],
            10016u16 => &[51u16, 42u16, 49u16],
            10017u16 => &[51u16, 42u16, 49u16],
            10018u16 => &[51u16, 50u16, 45u16],
            10019u16 => &[51u16, 50u16, 45u16],
            10020u16 => &[51u16, 45u16],
            10021u16 => &[51u16, 45u16],
            10022u16 => &[51u16, 47u16],
            10023u16 => &[51u16, 47u16],
            10024u16 => &[43u16, 56u16],
            10025u16 => &[43u16, 56u16],
            10026u16 => &[43u16, 46u16, 49u16],
            10027u16 => &[43u16, 46u16, 49u16],
            10028u16 => &[43u16, 44u16, 45u16],
            10029u16 => &[43u16, 44u16, 45u16],
            10030u16 => &[55u16, 52u16, 45u16],
            10031u16 => &[55u16, 52u16, 45u16],
            10032u16 => &[48u16, 42u16, 49u16],
            10033u16 => &[48u16, 42u16, 49u16],
            10034u16 => &[51u16, 50u16],
            10035u16 => &[51u16, 50u16],
            10036u16 => &[51u16, 50u16, 45u16],
            10037u16 => &[51u16, 50u16, 45u16],
            10038u16 => &[51u16, 50u16, 49u16],
            10039u16 => &[51u16, 50u16, 49u16],
            10040u16 => &[51u16, 47u16],
            10041u16 => &[51u16, 47u16],
            10042u16 => &[51u16, 53u16],
            10043u16 => &[51u16, 53u16],
            10044u16 => &[57u16, 50u16],
            10045u16 => &[57u16, 50u16],
            10046u16 => &[41u16, 46u16, 47u16],
            10047u16 => &[41u16, 46u16, 47u16],
            10048u16 => &[54u16, 44u16, 53u16],
            10049u16 => &[54u16, 44u16, 53u16],
            10050u16 => &[44u16, 50u16, 45u16],
            10051u16 => &[44u16, 50u16, 45u16],
            10052u16 => &[46u16, 50u16, 49u16],
            10053u16 => &[46u16, 50u16, 49u16],
            10054u16 => &[51u16, 56u16],
            10055u16 => &[51u16, 56u16],
            10056u16 => &[51u16, 52u16, 45u16],
            10057u16 => &[51u16, 52u16, 45u16],
            10058u16 => &[51u16, 42u16, 49u16],
            10059u16 => &[51u16, 42u16, 49u16],
            10060u16 => &[51u16, 49u16],
            10061u16 => &[51u16, 49u16],
            10062u16 => &[51u16, 45u16],
            10063u16 => &[51u16, 45u16],
            10064u16 => &[41u16, 42u16],
            10065u16 => &[41u16, 42u16],
            10066u16 => &[43u16, 44u16, 45u16],
            10067u16 => &[43u16, 44u16, 45u16],
            10068u16 => &[41u16, 46u16, 47u16],
            10069u16 => &[41u16, 46u16, 47u16],
            10070u16 => &[48u16, 42u16, 49u16],
            10071u16 => &[48u16, 42u16, 49u16],
            10072u16 => &[44u16, 50u16, 45u16],
            10073u16 => &[44u16, 50u16, 45u16],
            10074u16 => &[51u16, 52u16],
            10075u16 => &[51u16, 52u16],
            10076u16 => &[51u16, 50u16, 49u16],
            10077u16 => &[51u16, 50u16, 49u16],
            10078u16 => &[51u16, 52u16, 45u16],
            10079u16 => &[51u16, 52u16, 45u16],
            10080u16 => &[51u16, 53u16],
            10081u16 => &[51u16, 53u16],
            10082u16 => &[51u16, 49u16],
            10083u16 => &[51u16, 49u16],
            10084u16 => &[54u16, 52u16],
            10085u16 => &[54u16, 52u16],
            10086u16 => &[54u16, 44u16, 53u16],
            10087u16 => &[54u16, 44u16, 53u16],
            10088u16 => &[43u16, 46u16, 49u16],
            10089u16 => &[43u16, 46u16, 49u16],
            10090u16 => &[46u16, 50u16, 49u16],
            10091u16 => &[46u16, 50u16, 49u16],
            10092u16 => &[55u16, 52u16, 45u16],
            10093u16 => &[55u16, 52u16, 45u16],
            10094u16 => &[51u16, 42u16],
            10095u16 => &[51u16, 42u16],
            10096u16 => &[51u16, 42u16, 49u16],
            10097u16 => &[51u16, 42u16, 49u16],
            10098u16 => &[51u16, 50u16, 45u16],
            10099u16 => &[51u16, 50u16, 45u16],
            10100u16 => &[51u16, 45u16],
            10101u16 => &[51u16, 45u16],
            10102u16 => &[51u16, 47u16],
            10103u16 => &[51u16, 47u16],
            10104u16 => &[43u16, 56u16],
            10105u16 => &[43u16, 56u16],
            10106u16 => &[43u16, 46u16, 49u16],
            10107u16 => &[43u16, 46u16, 49u16],
            10108u16 => &[43u16, 44u16, 45u16],
            10109u16 => &[43u16, 44u16, 45u16],
            10110u16 => &[55u16, 52u16, 45u16],
            10111u16 => &[55u16, 52u16, 45u16],
            10112u16 => &[48u16, 42u16, 49u16],
            10113u16 => &[48u16, 42u16, 49u16],
            10114u16 => &[51u16, 50u16],
            10115u16 => &[51u16, 50u16],
            10116u16 => &[51u16, 50u16, 45u16],
            10117u16 => &[51u16, 50u16, 45u16],
            10118u16 => &[51u16, 50u16, 49u16],
            10119u16 => &[51u16, 50u16, 49u16],
            10120u16 => &[51u16, 47u16],
            10121u16 => &[51u16, 47u16],
            10122u16 => &[51u16, 53u16],
            10123u16 => &[51u16, 53u16],
            10124u16 => &[57u16, 50u16],
            10125u16 => &[57u16, 50u16],
            10126u16 => &[41u16, 46u16, 47u16],
            10127u16 => &[41u16, 46u16, 47u16],
            10128u16 => &[54u16, 44u16, 53u16],
            10129u16 => &[54u16, 44u16, 53u16],
            10130u16 => &[44u16, 50u16, 45u16],
            10131u16 => &[44u16, 50u16, 45u16],
            10132u16 => &[46u16, 50u16, 49u16],
            10133u16 => &[46u16, 50u16, 49u16],
            10134u16 => &[51u16, 56u16],
            10135u16 => &[51u16, 56u16],
            10136u16 => &[51u16, 52u16, 45u16],
            10137u16 => &[51u16, 52u16, 45u16],
            10138u16 => &[51u16, 42u16, 49u16],
            10139u16 => &[51u16, 42u16, 49u16],
            10140u16 => &[51u16, 49u16],
            10141u16 => &[51u16, 49u16],
            10142u16 => &[51u16, 45u16],
            10143u16 => &[51u16, 45u16],
            10144u16 => &[41u16, 42u16],
            10145u16 => &[41u16, 42u16],
            10146u16 => &[43u16, 44u16, 45u16],
            10147u16 => &[43u16, 44u16, 45u16],
            10148u16 => &[41u16, 46u16, 47u16],
            10149u16 => &[41u16, 46u16, 47u16],
            10150u16 => &[48u16, 42u16, 49u16],
            10151u16 => &[48u16, 42u16, 49u16],
            10152u16 => &[44u16, 50u16, 45u16],
            10153u16 => &[44u16, 50u16, 45u16],
            10154u16 => &[51u16, 52u16],
            10155u16 => &[51u16, 52u16],
            10156u16 => &[51u16, 50u16, 49u16],
            10157u16 => &[51u16, 50u16, 49u16],
            10158u16 => &[51u16, 52u16, 45u16],
            10159u16 => &[51u16, 52u16, 45u16],
            10160u16 => &[51u16, 53u16],
            10161u16 => &[51u16, 53u16],
            10162u16 => &[51u16, 49u16],
            10163u16 => &[51u16, 49u16],
            10164u16 => &[54u16, 52u16],
            10165u16 => &[54u16, 52u16],
            10166u16 => &[54u16, 44u16, 53u16],
            10167u16 => &[54u16, 44u16, 53u16],
            10168u16 => &[43u16, 46u16, 49u16],
            10169u16 => &[43u16, 46u16, 49u16],
            10170u16 => &[46u16, 50u16, 49u16],
            10171u16 => &[46u16, 50u16, 49u16],
            10172u16 => &[55u16, 52u16, 45u16],
            10173u16 => &[55u16, 52u16, 45u16],
            10174u16 => &[51u16, 42u16],
            10175u16 => &[51u16, 42u16],
            10176u16 => &[51u16, 42u16, 49u16],
            10177u16 => &[51u16, 42u16, 49u16],
            10178u16 => &[51u16, 50u16, 45u16],
            10179u16 => &[51u16, 50u16, 45u16],
            10180u16 => &[51u16, 45u16],
            10181u16 => &[51u16, 45u16],
            10182u16 => &[51u16, 47u16],
            10183u16 => &[51u16, 47u16],
            10184u16 => &[43u16, 56u16],
            10185u16 => &[43u16, 56u16],
            10186u16 => &[43u16, 46u16, 49u16],
            10187u16 => &[43u16, 46u16, 49u16],
            10188u16 => &[43u16, 44u16, 45u16],
            10189u16 => &[43u16, 44u16, 45u16],
            10190u16 => &[55u16, 52u16, 45u16],
            10191u16 => &[55u16, 52u16, 45u16],
            10192u16 => &[48u16, 42u16, 49u16],
            10193u16 => &[48u16, 42u16, 49u16],
            10194u16 => &[51u16, 50u16],
            10195u16 => &[51u16, 50u16],
            10196u16 => &[51u16, 50u16, 45u16],
            10197u16 => &[51u16, 50u16, 45u16],
            10198u16 => &[51u16, 50u16, 49u16],
            10199u16 => &[51u16, 50u16, 49u16],
            10200u16 => &[51u16, 47u16],
            10201u16 => &[51u16, 47u16],
            10202u16 => &[51u16, 53u16],
            10203u16 => &[51u16, 53u16],
            10204u16 => &[57u16, 50u16],
            10205u16 => &[57u16, 50u16],
            10206u16 => &[41u16, 46u16, 47u16],
            10207u16 => &[41u16, 46u16, 47u16],
            10208u16 => &[54u16, 44u16, 53u16],
            10209u16 => &[54u16, 44u16, 53u16],
            10210u16 => &[44u16, 50u16, 45u16],
            10211u16 => &[44u16, 50u16, 45u16],
            10212u16 => &[46u16, 50u16, 49u16],
            10213u16 => &[46u16, 50u16, 49u16],
            10214u16 => &[51u16, 56u16],
            10215u16 => &[51u16, 56u16],
            10216u16 => &[51u16, 52u16, 45u16],
            10217u16 => &[51u16, 52u16, 45u16],
            10218u16 => &[51u16, 42u16, 49u16],
            10219u16 => &[51u16, 42u16, 49u16],
            10220u16 => &[51u16, 49u16],
            10221u16 => &[51u16, 49u16],
            10222u16 => &[51u16, 45u16],
            10223u16 => &[51u16, 45u16],
            10224u16 => &[0u16],
            10225u16 => &[0u16],
            10226u16 => &[],
            10227u16 => &[],
            10228u16 => &[],
            10229u16 => &[],
            10230u16 => &[],
            10231u16 => &[],
            10232u16 => &[],
            10233u16 => &[],
            10234u16 => &[],
            10235u16 => &[],
            10236u16 => &[],
            10237u16 => &[],
            10238u16 => &[],
            10239u16 => &[],
            10240u16 => &[],
            10241u16 => &[],
            10242u16 => &[],
            10243u16 => &[],
            10244u16 => &[],
            10245u16 => &[],
            10246u16 => &[],
            10247u16 => &[],
            10248u16 => &[],
            10249u16 => &[],
            10250u16 => &[],
            10251u16 => &[],
            10252u16 => &[],
            10253u16 => &[],
            10254u16 => &[],
            10255u16 => &[],
            10256u16 => &[],
            10257u16 => &[],
            10258u16 => &[65u16],
            10259u16 => &[65u16],
            10260u16 => &[65u16],
            10261u16 => &[65u16],
            10262u16 => &[92u16],
            10263u16 => &[92u16],
            10264u16 => &[92u16],
            10265u16 => &[92u16],
            10266u16 => &[65u16],
            10267u16 => &[65u16],
            10268u16 => &[65u16],
            10269u16 => &[65u16],
            10270u16 => &[93u16],
            10271u16 => &[93u16],
            10272u16 => &[93u16],
            10273u16 => &[93u16],
            10274u16 => &[67u16],
            10275u16 => &[67u16],
            10276u16 => &[67u16],
            10277u16 => &[67u16],
            10278u16 => &[92u16],
            10279u16 => &[92u16],
            10280u16 => &[92u16],
            10281u16 => &[92u16],
            10282u16 => &[67u16],
            10283u16 => &[67u16],
            10284u16 => &[67u16],
            10285u16 => &[67u16],
            10286u16 => &[93u16],
            10287u16 => &[93u16],
            10288u16 => &[93u16],
            10289u16 => &[93u16],
            10290u16 => &[66u16],
            10291u16 => &[66u16],
            10292u16 => &[66u16],
            10293u16 => &[66u16],
            10294u16 => &[92u16],
            10295u16 => &[92u16],
            10296u16 => &[92u16],
            10297u16 => &[92u16],
            10298u16 => &[66u16],
            10299u16 => &[66u16],
            10300u16 => &[66u16],
            10301u16 => &[66u16],
            10302u16 => &[93u16],
            10303u16 => &[93u16],
            10304u16 => &[93u16],
            10305u16 => &[93u16],
            10306u16 => &[64u16],
            10307u16 => &[64u16],
            10308u16 => &[64u16],
            10309u16 => &[64u16],
            10310u16 => &[92u16],
            10311u16 => &[92u16],
            10312u16 => &[92u16],
            10313u16 => &[92u16],
            10314u16 => &[64u16],
            10315u16 => &[64u16],
            10316u16 => &[64u16],
            10317u16 => &[64u16],
            10318u16 => &[93u16],
            10319u16 => &[93u16],
            10320u16 => &[93u16],
            10321u16 => &[93u16],
            10322u16 => &[0u16],
            10323u16 => &[0u16],
            10324u16 => &[0u16],
            10325u16 => &[41u16, 42u16],
            10326u16 => &[41u16, 42u16],
            10327u16 => &[43u16, 44u16, 45u16],
            10328u16 => &[43u16, 44u16, 45u16],
            10329u16 => &[41u16, 46u16, 47u16],
            10330u16 => &[41u16, 46u16, 47u16],
            10331u16 => &[48u16, 42u16, 49u16],
            10332u16 => &[48u16, 42u16, 49u16],
            10333u16 => &[44u16, 50u16, 45u16],
            10334u16 => &[44u16, 50u16, 45u16],
            10335u16 => &[51u16, 52u16],
            10336u16 => &[51u16, 52u16],
            10337u16 => &[51u16, 50u16, 49u16],
            10338u16 => &[51u16, 50u16, 49u16],
            10339u16 => &[51u16, 52u16, 45u16],
            10340u16 => &[51u16, 52u16, 45u16],
            10341u16 => &[51u16, 53u16],
            10342u16 => &[51u16, 53u16],
            10343u16 => &[51u16, 49u16],
            10344u16 => &[51u16, 49u16],
            10345u16 => &[54u16, 52u16],
            10346u16 => &[54u16, 52u16],
            10347u16 => &[54u16, 44u16, 53u16],
            10348u16 => &[54u16, 44u16, 53u16],
            10349u16 => &[43u16, 46u16, 49u16],
            10350u16 => &[43u16, 46u16, 49u16],
            10351u16 => &[46u16, 50u16, 49u16],
            10352u16 => &[46u16, 50u16, 49u16],
            10353u16 => &[55u16, 52u16, 45u16],
            10354u16 => &[55u16, 52u16, 45u16],
            10355u16 => &[51u16, 42u16],
            10356u16 => &[51u16, 42u16],
            10357u16 => &[51u16, 42u16, 49u16],
            10358u16 => &[51u16, 42u16, 49u16],
            10359u16 => &[51u16, 50u16, 45u16],
            10360u16 => &[51u16, 50u16, 45u16],
            10361u16 => &[51u16, 45u16],
            10362u16 => &[51u16, 45u16],
            10363u16 => &[51u16, 47u16],
            10364u16 => &[51u16, 47u16],
            10365u16 => &[43u16, 56u16],
            10366u16 => &[43u16, 56u16],
            10367u16 => &[43u16, 46u16, 49u16],
            10368u16 => &[43u16, 46u16, 49u16],
            10369u16 => &[43u16, 44u16, 45u16],
            10370u16 => &[43u16, 44u16, 45u16],
            10371u16 => &[55u16, 52u16, 45u16],
            10372u16 => &[55u16, 52u16, 45u16],
            10373u16 => &[48u16, 42u16, 49u16],
            10374u16 => &[48u16, 42u16, 49u16],
            10375u16 => &[51u16, 50u16],
            10376u16 => &[51u16, 50u16],
            10377u16 => &[51u16, 50u16, 45u16],
            10378u16 => &[51u16, 50u16, 45u16],
            10379u16 => &[51u16, 50u16, 49u16],
            10380u16 => &[51u16, 50u16, 49u16],
            10381u16 => &[51u16, 47u16],
            10382u16 => &[51u16, 47u16],
            10383u16 => &[51u16, 53u16],
            10384u16 => &[51u16, 53u16],
            10385u16 => &[57u16, 50u16],
            10386u16 => &[57u16, 50u16],
            10387u16 => &[41u16, 46u16, 47u16],
            10388u16 => &[41u16, 46u16, 47u16],
            10389u16 => &[54u16, 44u16, 53u16],
            10390u16 => &[54u16, 44u16, 53u16],
            10391u16 => &[44u16, 50u16, 45u16],
            10392u16 => &[44u16, 50u16, 45u16],
            10393u16 => &[46u16, 50u16, 49u16],
            10394u16 => &[46u16, 50u16, 49u16],
            10395u16 => &[51u16, 56u16],
            10396u16 => &[51u16, 56u16],
            10397u16 => &[51u16, 52u16, 45u16],
            10398u16 => &[51u16, 52u16, 45u16],
            10399u16 => &[51u16, 42u16, 49u16],
            10400u16 => &[51u16, 42u16, 49u16],
            10401u16 => &[51u16, 49u16],
            10402u16 => &[51u16, 49u16],
            10403u16 => &[51u16, 45u16],
            10404u16 => &[51u16, 45u16],
            10405u16 => &[41u16, 42u16],
            10406u16 => &[41u16, 42u16],
            10407u16 => &[43u16, 44u16, 45u16],
            10408u16 => &[43u16, 44u16, 45u16],
            10409u16 => &[41u16, 46u16, 47u16],
            10410u16 => &[41u16, 46u16, 47u16],
            10411u16 => &[48u16, 42u16, 49u16],
            10412u16 => &[48u16, 42u16, 49u16],
            10413u16 => &[44u16, 50u16, 45u16],
            10414u16 => &[44u16, 50u16, 45u16],
            10415u16 => &[51u16, 52u16],
            10416u16 => &[51u16, 52u16],
            10417u16 => &[51u16, 50u16, 49u16],
            10418u16 => &[51u16, 50u16, 49u16],
            10419u16 => &[51u16, 52u16, 45u16],
            10420u16 => &[51u16, 52u16, 45u16],
            10421u16 => &[51u16, 53u16],
            10422u16 => &[51u16, 53u16],
            10423u16 => &[51u16, 49u16],
            10424u16 => &[51u16, 49u16],
            10425u16 => &[54u16, 52u16],
            10426u16 => &[54u16, 52u16],
            10427u16 => &[54u16, 44u16, 53u16],
            10428u16 => &[54u16, 44u16, 53u16],
            10429u16 => &[43u16, 46u16, 49u16],
            10430u16 => &[43u16, 46u16, 49u16],
            10431u16 => &[46u16, 50u16, 49u16],
            10432u16 => &[46u16, 50u16, 49u16],
            10433u16 => &[55u16, 52u16, 45u16],
            10434u16 => &[55u16, 52u16, 45u16],
            10435u16 => &[51u16, 42u16],
            10436u16 => &[51u16, 42u16],
            10437u16 => &[51u16, 42u16, 49u16],
            10438u16 => &[51u16, 42u16, 49u16],
            10439u16 => &[51u16, 50u16, 45u16],
            10440u16 => &[51u16, 50u16, 45u16],
            10441u16 => &[51u16, 45u16],
            10442u16 => &[51u16, 45u16],
            10443u16 => &[51u16, 47u16],
            10444u16 => &[51u16, 47u16],
            10445u16 => &[43u16, 56u16],
            10446u16 => &[43u16, 56u16],
            10447u16 => &[43u16, 46u16, 49u16],
            10448u16 => &[43u16, 46u16, 49u16],
            10449u16 => &[43u16, 44u16, 45u16],
            10450u16 => &[43u16, 44u16, 45u16],
            10451u16 => &[55u16, 52u16, 45u16],
            10452u16 => &[55u16, 52u16, 45u16],
            10453u16 => &[48u16, 42u16, 49u16],
            10454u16 => &[48u16, 42u16, 49u16],
            10455u16 => &[51u16, 50u16],
            10456u16 => &[51u16, 50u16],
            10457u16 => &[51u16, 50u16, 45u16],
            10458u16 => &[51u16, 50u16, 45u16],
            10459u16 => &[51u16, 50u16, 49u16],
            10460u16 => &[51u16, 50u16, 49u16],
            10461u16 => &[51u16, 47u16],
            10462u16 => &[51u16, 47u16],
            10463u16 => &[51u16, 53u16],
            10464u16 => &[51u16, 53u16],
            10465u16 => &[57u16, 50u16],
            10466u16 => &[57u16, 50u16],
            10467u16 => &[41u16, 46u16, 47u16],
            10468u16 => &[41u16, 46u16, 47u16],
            10469u16 => &[54u16, 44u16, 53u16],
            10470u16 => &[54u16, 44u16, 53u16],
            10471u16 => &[44u16, 50u16, 45u16],
            10472u16 => &[44u16, 50u16, 45u16],
            10473u16 => &[46u16, 50u16, 49u16],
            10474u16 => &[46u16, 50u16, 49u16],
            10475u16 => &[51u16, 56u16],
            10476u16 => &[51u16, 56u16],
            10477u16 => &[51u16, 52u16, 45u16],
            10478u16 => &[51u16, 52u16, 45u16],
            10479u16 => &[51u16, 42u16, 49u16],
            10480u16 => &[51u16, 42u16, 49u16],
            10481u16 => &[51u16, 49u16],
            10482u16 => &[51u16, 49u16],
            10483u16 => &[51u16, 45u16],
            10484u16 => &[51u16, 45u16],
            10485u16 => &[41u16, 42u16],
            10486u16 => &[41u16, 42u16],
            10487u16 => &[43u16, 44u16, 45u16],
            10488u16 => &[43u16, 44u16, 45u16],
            10489u16 => &[41u16, 46u16, 47u16],
            10490u16 => &[41u16, 46u16, 47u16],
            10491u16 => &[48u16, 42u16, 49u16],
            10492u16 => &[48u16, 42u16, 49u16],
            10493u16 => &[44u16, 50u16, 45u16],
            10494u16 => &[44u16, 50u16, 45u16],
            10495u16 => &[51u16, 52u16],
            10496u16 => &[51u16, 52u16],
            10497u16 => &[51u16, 50u16, 49u16],
            10498u16 => &[51u16, 50u16, 49u16],
            10499u16 => &[51u16, 52u16, 45u16],
            10500u16 => &[51u16, 52u16, 45u16],
            10501u16 => &[51u16, 53u16],
            10502u16 => &[51u16, 53u16],
            10503u16 => &[51u16, 49u16],
            10504u16 => &[51u16, 49u16],
            10505u16 => &[54u16, 52u16],
            10506u16 => &[54u16, 52u16],
            10507u16 => &[54u16, 44u16, 53u16],
            10508u16 => &[54u16, 44u16, 53u16],
            10509u16 => &[43u16, 46u16, 49u16],
            10510u16 => &[43u16, 46u16, 49u16],
            10511u16 => &[46u16, 50u16, 49u16],
            10512u16 => &[46u16, 50u16, 49u16],
            10513u16 => &[55u16, 52u16, 45u16],
            10514u16 => &[55u16, 52u16, 45u16],
            10515u16 => &[51u16, 42u16],
            10516u16 => &[51u16, 42u16],
            10517u16 => &[51u16, 42u16, 49u16],
            10518u16 => &[51u16, 42u16, 49u16],
            10519u16 => &[51u16, 50u16, 45u16],
            10520u16 => &[51u16, 50u16, 45u16],
            10521u16 => &[51u16, 45u16],
            10522u16 => &[51u16, 45u16],
            10523u16 => &[51u16, 47u16],
            10524u16 => &[51u16, 47u16],
            10525u16 => &[43u16, 56u16],
            10526u16 => &[43u16, 56u16],
            10527u16 => &[43u16, 46u16, 49u16],
            10528u16 => &[43u16, 46u16, 49u16],
            10529u16 => &[43u16, 44u16, 45u16],
            10530u16 => &[43u16, 44u16, 45u16],
            10531u16 => &[55u16, 52u16, 45u16],
            10532u16 => &[55u16, 52u16, 45u16],
            10533u16 => &[48u16, 42u16, 49u16],
            10534u16 => &[48u16, 42u16, 49u16],
            10535u16 => &[51u16, 50u16],
            10536u16 => &[51u16, 50u16],
            10537u16 => &[51u16, 50u16, 45u16],
            10538u16 => &[51u16, 50u16, 45u16],
            10539u16 => &[51u16, 50u16, 49u16],
            10540u16 => &[51u16, 50u16, 49u16],
            10541u16 => &[51u16, 47u16],
            10542u16 => &[51u16, 47u16],
            10543u16 => &[51u16, 53u16],
            10544u16 => &[51u16, 53u16],
            10545u16 => &[57u16, 50u16],
            10546u16 => &[57u16, 50u16],
            10547u16 => &[41u16, 46u16, 47u16],
            10548u16 => &[41u16, 46u16, 47u16],
            10549u16 => &[54u16, 44u16, 53u16],
            10550u16 => &[54u16, 44u16, 53u16],
            10551u16 => &[44u16, 50u16, 45u16],
            10552u16 => &[44u16, 50u16, 45u16],
            10553u16 => &[46u16, 50u16, 49u16],
            10554u16 => &[46u16, 50u16, 49u16],
            10555u16 => &[51u16, 56u16],
            10556u16 => &[51u16, 56u16],
            10557u16 => &[51u16, 52u16, 45u16],
            10558u16 => &[51u16, 52u16, 45u16],
            10559u16 => &[51u16, 42u16, 49u16],
            10560u16 => &[51u16, 42u16, 49u16],
            10561u16 => &[51u16, 49u16],
            10562u16 => &[51u16, 49u16],
            10563u16 => &[51u16, 45u16],
            10564u16 => &[51u16, 45u16],
            10565u16 => &[201u16],
            10566u16 => &[201u16],
            10567u16 => &[51u16],
            10568u16 => &[51u16],
            10569u16 => &[0u16],
            10570u16 => &[0u16],
            10571u16 => &[201u16],
            10572u16 => &[201u16],
            10573u16 => &[51u16],
            10574u16 => &[51u16],
            10575u16 => &[0u16],
            10576u16 => &[0u16],
            10577u16 => &[201u16],
            10578u16 => &[201u16],
            10579u16 => &[51u16],
            10580u16 => &[51u16],
            10581u16 => &[0u16],
            10582u16 => &[0u16],
            10583u16 => &[0u16],
            10584u16 => &[0u16],
            10585u16 => &[0u16],
            10586u16 => &[0u16],
            10587u16 => &[202u16],
            10588u16 => &[202u16],
            10589u16 => &[202u16],
            10590u16 => &[202u16],
            10591u16 => &[202u16],
            10592u16 => &[202u16],
            10593u16 => &[202u16],
            10594u16 => &[202u16],
            10595u16 => &[202u16],
            10596u16 => &[202u16],
            10597u16 => &[202u16],
            10598u16 => &[202u16],
            10599u16 => &[202u16],
            10600u16 => &[202u16],
            10601u16 => &[202u16],
            10602u16 => &[202u16],
            10603u16 => &[0u16],
            10604u16 => &[0u16],
            10605u16 => &[0u16],
            10606u16 => &[],
            10607u16 => &[],
            10608u16 => &[],
            10609u16 => &[],
            10610u16 => &[],
            10611u16 => &[],
            10612u16 => &[],
            10613u16 => &[],
            10614u16 => &[],
            10615u16 => &[],
            10616u16 => &[],
            10617u16 => &[],
            10618u16 => &[],
            10619u16 => &[],
            10620u16 => &[],
            10621u16 => &[],
            10622u16 => &[],
            10623u16 => &[],
            10624u16 => &[],
            10625u16 => &[],
            10626u16 => &[],
            10627u16 => &[],
            10628u16 => &[],
            10629u16 => &[],
            10630u16 => &[],
            10631u16 => &[],
            10632u16 => &[],
            10633u16 => &[],
            10634u16 => &[],
            10635u16 => &[],
            10636u16 => &[],
            10637u16 => &[],
            10638u16 => &[],
            10639u16 => &[],
            10640u16 => &[],
            10641u16 => &[],
            10642u16 => &[],
            10643u16 => &[],
            10644u16 => &[],
            10645u16 => &[],
            10646u16 => &[],
            10647u16 => &[],
            10648u16 => &[],
            10649u16 => &[],
            10650u16 => &[],
            10651u16 => &[],
            10652u16 => &[],
            10653u16 => &[],
            10654u16 => &[],
            10655u16 => &[],
            10656u16 => &[],
            10657u16 => &[],
            10658u16 => &[],
            10659u16 => &[],
            10660u16 => &[],
            10661u16 => &[],
            10662u16 => &[],
            10663u16 => &[],
            10664u16 => &[],
            10665u16 => &[],
            10666u16 => &[],
            10667u16 => &[],
            10668u16 => &[],
            10669u16 => &[],
            10670u16 => &[],
            10671u16 => &[],
            10672u16 => &[],
            10673u16 => &[],
            10674u16 => &[],
            10675u16 => &[],
            10676u16 => &[],
            10677u16 => &[],
            10678u16 => &[],
            10679u16 => &[],
            10680u16 => &[],
            10681u16 => &[],
            10682u16 => &[],
            10683u16 => &[],
            10684u16 => &[],
            10685u16 => &[],
            10686u16 => &[],
            10687u16 => &[],
            10688u16 => &[],
            10689u16 => &[],
            10690u16 => &[],
            10691u16 => &[],
            10692u16 => &[],
            10693u16 => &[],
            10694u16 => &[],
            10695u16 => &[],
            10696u16 => &[],
            10697u16 => &[],
            10698u16 => &[],
            10699u16 => &[],
            10700u16 => &[],
            10701u16 => &[],
            10702u16 => &[],
            10703u16 => &[],
            10704u16 => &[],
            10705u16 => &[],
            10706u16 => &[],
            10707u16 => &[],
            10708u16 => &[],
            10709u16 => &[],
            10710u16 => &[],
            10711u16 => &[],
            10712u16 => &[],
            10713u16 => &[],
            10714u16 => &[],
            10715u16 => &[],
            10716u16 => &[],
            10717u16 => &[],
            10718u16 => &[],
            10719u16 => &[],
            10720u16 => &[],
            10721u16 => &[],
            10722u16 => &[],
            10723u16 => &[],
            10724u16 => &[],
            10725u16 => &[],
            10726u16 => &[],
            10727u16 => &[],
            10728u16 => &[],
            10729u16 => &[],
            10730u16 => &[],
            10731u16 => &[],
            10732u16 => &[],
            10733u16 => &[],
            10734u16 => &[],
            10735u16 => &[],
            10736u16 => &[],
            10737u16 => &[],
            10738u16 => &[],
            10739u16 => &[],
            10740u16 => &[],
            10741u16 => &[],
            10742u16 => &[],
            10743u16 => &[],
            10744u16 => &[],
            10745u16 => &[],
            10746u16 => &[],
            10747u16 => &[],
            10748u16 => &[],
            10749u16 => &[],
            10750u16 => &[],
            10751u16 => &[],
            10752u16 => &[],
            10753u16 => &[],
            10754u16 => &[],
            10755u16 => &[],
            10756u16 => &[],
            10757u16 => &[],
            10758u16 => &[],
            10759u16 => &[],
            10760u16 => &[],
            10761u16 => &[],
            10762u16 => &[],
            10763u16 => &[],
            10764u16 => &[],
            10765u16 => &[],
            10766u16 => &[],
            10767u16 => &[],
            10768u16 => &[],
            10769u16 => &[],
            10770u16 => &[],
            10771u16 => &[],
            10772u16 => &[],
            10773u16 => &[],
            10774u16 => &[],
            10775u16 => &[],
            10776u16 => &[],
            10777u16 => &[],
            10778u16 => &[],
            10779u16 => &[],
            10780u16 => &[],
            10781u16 => &[],
            10782u16 => &[],
            10783u16 => &[],
            10784u16 => &[],
            10785u16 => &[],
            10786u16 => &[],
            10787u16 => &[],
            10788u16 => &[],
            10789u16 => &[],
            10790u16 => &[],
            10791u16 => &[],
            10792u16 => &[],
            10793u16 => &[],
            10794u16 => &[],
            10795u16 => &[],
            10796u16 => &[],
            10797u16 => &[],
            10798u16 => &[],
            10799u16 => &[],
            10800u16 => &[],
            10801u16 => &[],
            10802u16 => &[],
            10803u16 => &[],
            10804u16 => &[],
            10805u16 => &[],
            10806u16 => &[],
            10807u16 => &[],
            10808u16 => &[],
            10809u16 => &[],
            10810u16 => &[],
            10811u16 => &[],
            10812u16 => &[],
            10813u16 => &[],
            10814u16 => &[],
            10815u16 => &[],
            10816u16 => &[],
            10817u16 => &[],
            10818u16 => &[],
            10819u16 => &[],
            10820u16 => &[],
            10821u16 => &[],
            10822u16 => &[],
            10823u16 => &[],
            10824u16 => &[],
            10825u16 => &[],
            10826u16 => &[],
            10827u16 => &[],
            10828u16 => &[],
            10829u16 => &[],
            10830u16 => &[],
            10831u16 => &[],
            10832u16 => &[],
            10833u16 => &[],
            10834u16 => &[],
            10835u16 => &[],
            10836u16 => &[],
            10837u16 => &[],
            10838u16 => &[],
            10839u16 => &[],
            10840u16 => &[],
            10841u16 => &[],
            10842u16 => &[],
            10843u16 => &[],
            10844u16 => &[],
            10845u16 => &[],
            10846u16 => &[],
            10847u16 => &[],
            10848u16 => &[],
            10849u16 => &[],
            10850u16 => &[],
            10851u16 => &[],
            10852u16 => &[],
            10853u16 => &[],
            10854u16 => &[],
            10855u16 => &[],
            10856u16 => &[],
            10857u16 => &[],
            10858u16 => &[],
            10859u16 => &[],
            10860u16 => &[],
            10861u16 => &[],
            10862u16 => &[],
            10863u16 => &[],
            10864u16 => &[],
            10865u16 => &[],
            10866u16 => &[],
            10867u16 => &[],
            10868u16 => &[],
            10869u16 => &[],
            10870u16 => &[],
            10871u16 => &[],
            10872u16 => &[],
            10873u16 => &[],
            10874u16 => &[],
            10875u16 => &[],
            10876u16 => &[],
            10877u16 => &[],
            10878u16 => &[],
            10879u16 => &[],
            10880u16 => &[],
            10881u16 => &[],
            10882u16 => &[],
            10883u16 => &[],
            10884u16 => &[],
            10885u16 => &[],
            10886u16 => &[],
            10887u16 => &[],
            10888u16 => &[],
            10889u16 => &[],
            10890u16 => &[],
            10891u16 => &[],
            10892u16 => &[],
            10893u16 => &[],
            10894u16 => &[],
            10895u16 => &[],
            10896u16 => &[],
            10897u16 => &[],
            10898u16 => &[],
            10899u16 => &[],
            10900u16 => &[],
            10901u16 => &[],
            10902u16 => &[],
            10903u16 => &[],
            10904u16 => &[],
            10905u16 => &[],
            10906u16 => &[],
            10907u16 => &[],
            10908u16 => &[],
            10909u16 => &[],
            10910u16 => &[],
            10911u16 => &[],
            10912u16 => &[],
            10913u16 => &[],
            10914u16 => &[],
            10915u16 => &[],
            10916u16 => &[],
            10917u16 => &[],
            10918u16 => &[],
            10919u16 => &[],
            10920u16 => &[],
            10921u16 => &[],
            10922u16 => &[],
            10923u16 => &[],
            10924u16 => &[],
            10925u16 => &[],
            10926u16 => &[],
            10927u16 => &[],
            10928u16 => &[],
            10929u16 => &[],
            10930u16 => &[],
            10931u16 => &[],
            10932u16 => &[],
            10933u16 => &[],
            10934u16 => &[],
            10935u16 => &[],
            10936u16 => &[],
            10937u16 => &[],
            10938u16 => &[0u16],
            10939u16 => &[0u16],
            10940u16 => &[0u16],
            10941u16 => &[41u16, 42u16],
            10942u16 => &[41u16, 42u16],
            10943u16 => &[43u16, 44u16, 45u16],
            10944u16 => &[43u16, 44u16, 45u16],
            10945u16 => &[41u16, 46u16, 47u16],
            10946u16 => &[41u16, 46u16, 47u16],
            10947u16 => &[48u16, 42u16, 49u16],
            10948u16 => &[48u16, 42u16, 49u16],
            10949u16 => &[44u16, 50u16, 45u16],
            10950u16 => &[44u16, 50u16, 45u16],
            10951u16 => &[51u16, 52u16],
            10952u16 => &[51u16, 52u16],
            10953u16 => &[51u16, 50u16, 49u16],
            10954u16 => &[51u16, 50u16, 49u16],
            10955u16 => &[51u16, 52u16, 45u16],
            10956u16 => &[51u16, 52u16, 45u16],
            10957u16 => &[51u16, 53u16],
            10958u16 => &[51u16, 53u16],
            10959u16 => &[51u16, 49u16],
            10960u16 => &[51u16, 49u16],
            10961u16 => &[54u16, 52u16],
            10962u16 => &[54u16, 52u16],
            10963u16 => &[54u16, 44u16, 53u16],
            10964u16 => &[54u16, 44u16, 53u16],
            10965u16 => &[43u16, 46u16, 49u16],
            10966u16 => &[43u16, 46u16, 49u16],
            10967u16 => &[46u16, 50u16, 49u16],
            10968u16 => &[46u16, 50u16, 49u16],
            10969u16 => &[55u16, 52u16, 45u16],
            10970u16 => &[55u16, 52u16, 45u16],
            10971u16 => &[51u16, 42u16],
            10972u16 => &[51u16, 42u16],
            10973u16 => &[51u16, 42u16, 49u16],
            10974u16 => &[51u16, 42u16, 49u16],
            10975u16 => &[51u16, 50u16, 45u16],
            10976u16 => &[51u16, 50u16, 45u16],
            10977u16 => &[51u16, 45u16],
            10978u16 => &[51u16, 45u16],
            10979u16 => &[51u16, 47u16],
            10980u16 => &[51u16, 47u16],
            10981u16 => &[43u16, 56u16],
            10982u16 => &[43u16, 56u16],
            10983u16 => &[43u16, 46u16, 49u16],
            10984u16 => &[43u16, 46u16, 49u16],
            10985u16 => &[43u16, 44u16, 45u16],
            10986u16 => &[43u16, 44u16, 45u16],
            10987u16 => &[55u16, 52u16, 45u16],
            10988u16 => &[55u16, 52u16, 45u16],
            10989u16 => &[48u16, 42u16, 49u16],
            10990u16 => &[48u16, 42u16, 49u16],
            10991u16 => &[51u16, 50u16],
            10992u16 => &[51u16, 50u16],
            10993u16 => &[51u16, 50u16, 45u16],
            10994u16 => &[51u16, 50u16, 45u16],
            10995u16 => &[51u16, 50u16, 49u16],
            10996u16 => &[51u16, 50u16, 49u16],
            10997u16 => &[51u16, 47u16],
            10998u16 => &[51u16, 47u16],
            10999u16 => &[51u16, 53u16],
            11000u16 => &[51u16, 53u16],
            11001u16 => &[57u16, 50u16],
            11002u16 => &[57u16, 50u16],
            11003u16 => &[41u16, 46u16, 47u16],
            11004u16 => &[41u16, 46u16, 47u16],
            11005u16 => &[54u16, 44u16, 53u16],
            11006u16 => &[54u16, 44u16, 53u16],
            11007u16 => &[44u16, 50u16, 45u16],
            11008u16 => &[44u16, 50u16, 45u16],
            11009u16 => &[46u16, 50u16, 49u16],
            11010u16 => &[46u16, 50u16, 49u16],
            11011u16 => &[51u16, 56u16],
            11012u16 => &[51u16, 56u16],
            11013u16 => &[51u16, 52u16, 45u16],
            11014u16 => &[51u16, 52u16, 45u16],
            11015u16 => &[51u16, 42u16, 49u16],
            11016u16 => &[51u16, 42u16, 49u16],
            11017u16 => &[51u16, 49u16],
            11018u16 => &[51u16, 49u16],
            11019u16 => &[51u16, 45u16],
            11020u16 => &[51u16, 45u16],
            11021u16 => &[201u16],
            11022u16 => &[201u16],
            11023u16 => &[51u16],
            11024u16 => &[51u16],
            11025u16 => &[0u16],
            11026u16 => &[0u16],
            11027u16 => &[201u16],
            11028u16 => &[201u16],
            11029u16 => &[51u16],
            11030u16 => &[51u16],
            11031u16 => &[0u16],
            11032u16 => &[0u16],
            11033u16 => &[201u16],
            11034u16 => &[201u16],
            11035u16 => &[51u16],
            11036u16 => &[51u16],
            11037u16 => &[0u16],
            11038u16 => &[0u16],
            11039u16 => &[201u16],
            11040u16 => &[201u16],
            11041u16 => &[51u16],
            11042u16 => &[51u16],
            11043u16 => &[0u16],
            11044u16 => &[0u16],
            11045u16 => &[201u16],
            11046u16 => &[201u16],
            11047u16 => &[51u16],
            11048u16 => &[51u16],
            11049u16 => &[0u16],
            11050u16 => &[0u16],
            11051u16 => &[201u16],
            11052u16 => &[201u16],
            11053u16 => &[51u16],
            11054u16 => &[51u16],
            11055u16 => &[0u16],
            11056u16 => &[0u16],
            11057u16 => &[201u16],
            11058u16 => &[201u16],
            11059u16 => &[51u16],
            11060u16 => &[51u16],
            11061u16 => &[0u16],
            11062u16 => &[0u16],
            11063u16 => &[201u16],
            11064u16 => &[201u16],
            11065u16 => &[51u16],
            11066u16 => &[51u16],
            11067u16 => &[0u16],
            11068u16 => &[0u16],
            11069u16 => &[201u16],
            11070u16 => &[201u16],
            11071u16 => &[51u16],
            11072u16 => &[51u16],
            11073u16 => &[0u16],
            11074u16 => &[0u16],
            11075u16 => &[201u16],
            11076u16 => &[201u16],
            11077u16 => &[51u16],
            11078u16 => &[51u16],
            11079u16 => &[0u16],
            11080u16 => &[0u16],
            11081u16 => &[201u16],
            11082u16 => &[201u16],
            11083u16 => &[51u16],
            11084u16 => &[51u16],
            11085u16 => &[0u16],
            11086u16 => &[0u16],
            11087u16 => &[201u16],
            11088u16 => &[201u16],
            11089u16 => &[51u16],
            11090u16 => &[51u16],
            11091u16 => &[0u16],
            11092u16 => &[0u16],
            11093u16 => &[201u16],
            11094u16 => &[201u16],
            11095u16 => &[51u16],
            11096u16 => &[51u16],
            11097u16 => &[0u16],
            11098u16 => &[0u16],
            11099u16 => &[201u16],
            11100u16 => &[201u16],
            11101u16 => &[51u16],
            11102u16 => &[51u16],
            11103u16 => &[0u16],
            11104u16 => &[0u16],
            11105u16 => &[201u16],
            11106u16 => &[201u16],
            11107u16 => &[51u16],
            11108u16 => &[51u16],
            11109u16 => &[0u16],
            11110u16 => &[0u16],
            11111u16 => &[201u16],
            11112u16 => &[201u16],
            11113u16 => &[51u16],
            11114u16 => &[51u16],
            11115u16 => &[0u16],
            11116u16 => &[0u16],
            11117u16 => &[201u16],
            11118u16 => &[201u16],
            11119u16 => &[51u16],
            11120u16 => &[51u16],
            11121u16 => &[0u16],
            11122u16 => &[0u16],
            11123u16 => &[201u16],
            11124u16 => &[201u16],
            11125u16 => &[51u16],
            11126u16 => &[51u16],
            11127u16 => &[0u16],
            11128u16 => &[0u16],
            11129u16 => &[201u16],
            11130u16 => &[201u16],
            11131u16 => &[51u16],
            11132u16 => &[51u16],
            11133u16 => &[0u16],
            11134u16 => &[0u16],
            11135u16 => &[201u16],
            11136u16 => &[201u16],
            11137u16 => &[51u16],
            11138u16 => &[51u16],
            11139u16 => &[0u16],
            11140u16 => &[0u16],
            11141u16 => &[201u16],
            11142u16 => &[201u16],
            11143u16 => &[51u16],
            11144u16 => &[51u16],
            11145u16 => &[0u16],
            11146u16 => &[0u16],
            11147u16 => &[201u16],
            11148u16 => &[201u16],
            11149u16 => &[51u16],
            11150u16 => &[51u16],
            11151u16 => &[0u16],
            11152u16 => &[0u16],
            11153u16 => &[201u16],
            11154u16 => &[201u16],
            11155u16 => &[51u16],
            11156u16 => &[51u16],
            11157u16 => &[0u16],
            11158u16 => &[0u16],
            11159u16 => &[201u16],
            11160u16 => &[201u16],
            11161u16 => &[51u16],
            11162u16 => &[51u16],
            11163u16 => &[0u16],
            11164u16 => &[0u16],
            11165u16 => &[0u16],
            11166u16 => &[0u16],
            11167u16 => &[0u16],
            11168u16 => &[0u16],
            11169u16 => &[],
            11170u16 => &[],
            11171u16 => &[75u16],
            11172u16 => &[75u16],
            11173u16 => &[],
            11174u16 => &[],
            11175u16 => &[75u16],
            11176u16 => &[75u16],
            11177u16 => &[],
            11178u16 => &[],
            11179u16 => &[75u16],
            11180u16 => &[75u16],
            11181u16 => &[],
            11182u16 => &[],
            11183u16 => &[75u16],
            11184u16 => &[75u16],
            11185u16 => &[],
            11186u16 => &[],
            11187u16 => &[78u16],
            11188u16 => &[78u16],
            11189u16 => &[],
            11190u16 => &[],
            11191u16 => &[78u16],
            11192u16 => &[78u16],
            11193u16 => &[],
            11194u16 => &[],
            11195u16 => &[78u16],
            11196u16 => &[78u16],
            11197u16 => &[],
            11198u16 => &[],
            11199u16 => &[78u16],
            11200u16 => &[78u16],
            11201u16 => &[],
            11202u16 => &[],
            11203u16 => &[75u16],
            11204u16 => &[75u16],
            11205u16 => &[],
            11206u16 => &[],
            11207u16 => &[75u16],
            11208u16 => &[75u16],
            11209u16 => &[],
            11210u16 => &[],
            11211u16 => &[75u16],
            11212u16 => &[75u16],
            11213u16 => &[],
            11214u16 => &[],
            11215u16 => &[75u16],
            11216u16 => &[75u16],
            11217u16 => &[],
            11218u16 => &[],
            11219u16 => &[78u16],
            11220u16 => &[78u16],
            11221u16 => &[],
            11222u16 => &[],
            11223u16 => &[78u16],
            11224u16 => &[78u16],
            11225u16 => &[],
            11226u16 => &[],
            11227u16 => &[78u16],
            11228u16 => &[78u16],
            11229u16 => &[],
            11230u16 => &[],
            11231u16 => &[78u16],
            11232u16 => &[78u16],
            11233u16 => &[],
            11234u16 => &[],
            11235u16 => &[75u16],
            11236u16 => &[75u16],
            11237u16 => &[],
            11238u16 => &[],
            11239u16 => &[75u16],
            11240u16 => &[75u16],
            11241u16 => &[],
            11242u16 => &[],
            11243u16 => &[75u16],
            11244u16 => &[75u16],
            11245u16 => &[],
            11246u16 => &[],
            11247u16 => &[75u16],
            11248u16 => &[75u16],
            11249u16 => &[],
            11250u16 => &[],
            11251u16 => &[78u16],
            11252u16 => &[78u16],
            11253u16 => &[],
            11254u16 => &[],
            11255u16 => &[78u16],
            11256u16 => &[78u16],
            11257u16 => &[],
            11258u16 => &[],
            11259u16 => &[78u16],
            11260u16 => &[78u16],
            11261u16 => &[],
            11262u16 => &[],
            11263u16 => &[78u16],
            11264u16 => &[78u16],
            11265u16 => &[],
            11266u16 => &[],
            11267u16 => &[75u16],
            11268u16 => &[75u16],
            11269u16 => &[],
            11270u16 => &[],
            11271u16 => &[75u16],
            11272u16 => &[75u16],
            11273u16 => &[],
            11274u16 => &[],
            11275u16 => &[75u16],
            11276u16 => &[75u16],
            11277u16 => &[],
            11278u16 => &[],
            11279u16 => &[75u16],
            11280u16 => &[75u16],
            11281u16 => &[],
            11282u16 => &[],
            11283u16 => &[78u16],
            11284u16 => &[78u16],
            11285u16 => &[],
            11286u16 => &[],
            11287u16 => &[78u16],
            11288u16 => &[78u16],
            11289u16 => &[],
            11290u16 => &[],
            11291u16 => &[78u16],
            11292u16 => &[78u16],
            11293u16 => &[],
            11294u16 => &[],
            11295u16 => &[78u16],
            11296u16 => &[78u16],
            11297u16 => &[],
            11298u16 => &[],
            11299u16 => &[75u16],
            11300u16 => &[75u16],
            11301u16 => &[],
            11302u16 => &[],
            11303u16 => &[75u16],
            11304u16 => &[75u16],
            11305u16 => &[],
            11306u16 => &[],
            11307u16 => &[75u16],
            11308u16 => &[75u16],
            11309u16 => &[],
            11310u16 => &[],
            11311u16 => &[75u16],
            11312u16 => &[75u16],
            11313u16 => &[],
            11314u16 => &[],
            11315u16 => &[78u16],
            11316u16 => &[78u16],
            11317u16 => &[],
            11318u16 => &[],
            11319u16 => &[78u16],
            11320u16 => &[78u16],
            11321u16 => &[],
            11322u16 => &[],
            11323u16 => &[78u16],
            11324u16 => &[78u16],
            11325u16 => &[],
            11326u16 => &[],
            11327u16 => &[78u16],
            11328u16 => &[78u16],
            11329u16 => &[],
            11330u16 => &[],
            11331u16 => &[75u16],
            11332u16 => &[75u16],
            11333u16 => &[],
            11334u16 => &[],
            11335u16 => &[75u16],
            11336u16 => &[75u16],
            11337u16 => &[],
            11338u16 => &[],
            11339u16 => &[75u16],
            11340u16 => &[75u16],
            11341u16 => &[],
            11342u16 => &[],
            11343u16 => &[75u16],
            11344u16 => &[75u16],
            11345u16 => &[],
            11346u16 => &[],
            11347u16 => &[78u16],
            11348u16 => &[78u16],
            11349u16 => &[],
            11350u16 => &[],
            11351u16 => &[78u16],
            11352u16 => &[78u16],
            11353u16 => &[],
            11354u16 => &[],
            11355u16 => &[78u16],
            11356u16 => &[78u16],
            11357u16 => &[],
            11358u16 => &[],
            11359u16 => &[78u16],
            11360u16 => &[78u16],
            11361u16 => &[],
            11362u16 => &[],
            11363u16 => &[75u16],
            11364u16 => &[75u16],
            11365u16 => &[],
            11366u16 => &[],
            11367u16 => &[75u16],
            11368u16 => &[75u16],
            11369u16 => &[],
            11370u16 => &[],
            11371u16 => &[75u16],
            11372u16 => &[75u16],
            11373u16 => &[],
            11374u16 => &[],
            11375u16 => &[75u16],
            11376u16 => &[75u16],
            11377u16 => &[],
            11378u16 => &[],
            11379u16 => &[78u16],
            11380u16 => &[78u16],
            11381u16 => &[],
            11382u16 => &[],
            11383u16 => &[78u16],
            11384u16 => &[78u16],
            11385u16 => &[],
            11386u16 => &[],
            11387u16 => &[78u16],
            11388u16 => &[78u16],
            11389u16 => &[],
            11390u16 => &[],
            11391u16 => &[78u16],
            11392u16 => &[78u16],
            11393u16 => &[],
            11394u16 => &[],
            11395u16 => &[75u16],
            11396u16 => &[75u16],
            11397u16 => &[],
            11398u16 => &[],
            11399u16 => &[75u16],
            11400u16 => &[75u16],
            11401u16 => &[],
            11402u16 => &[],
            11403u16 => &[75u16],
            11404u16 => &[75u16],
            11405u16 => &[],
            11406u16 => &[],
            11407u16 => &[75u16],
            11408u16 => &[75u16],
            11409u16 => &[],
            11410u16 => &[],
            11411u16 => &[78u16],
            11412u16 => &[78u16],
            11413u16 => &[],
            11414u16 => &[],
            11415u16 => &[78u16],
            11416u16 => &[78u16],
            11417u16 => &[],
            11418u16 => &[],
            11419u16 => &[78u16],
            11420u16 => &[78u16],
            11421u16 => &[],
            11422u16 => &[],
            11423u16 => &[78u16],
            11424u16 => &[78u16],
            11425u16 => &[75u16, 76u16, 77u16],
            11426u16 => &[78u16, 79u16],
            11427u16 => &[75u16, 76u16, 77u16],
            11428u16 => &[78u16, 79u16],
            11429u16 => &[75u16, 76u16],
            11430u16 => &[80u16, 79u16],
            11431u16 => &[75u16, 76u16],
            11432u16 => &[80u16, 79u16],
            11433u16 => &[75u16, 77u16],
            11434u16 => &[81u16, 79u16],
            11435u16 => &[75u16, 77u16],
            11436u16 => &[81u16, 79u16],
            11437u16 => &[75u16],
            11438u16 => &[82u16],
            11439u16 => &[75u16],
            11440u16 => &[82u16],
            11441u16 => &[83u16, 76u16, 77u16],
            11442u16 => &[78u16],
            11443u16 => &[83u16, 76u16, 77u16],
            11444u16 => &[78u16],
            11445u16 => &[83u16, 76u16],
            11446u16 => &[80u16],
            11447u16 => &[83u16, 76u16],
            11448u16 => &[80u16],
            11449u16 => &[83u16, 77u16],
            11450u16 => &[81u16],
            11451u16 => &[83u16, 77u16],
            11452u16 => &[81u16],
            11453u16 => &[83u16],
            11454u16 => &[84u16],
            11455u16 => &[83u16],
            11456u16 => &[84u16],
            11457u16 => &[75u16, 76u16, 77u16],
            11458u16 => &[78u16, 79u16],
            11459u16 => &[75u16, 76u16, 77u16],
            11460u16 => &[78u16, 79u16],
            11461u16 => &[75u16, 76u16],
            11462u16 => &[80u16, 79u16],
            11463u16 => &[75u16, 76u16],
            11464u16 => &[80u16, 79u16],
            11465u16 => &[75u16, 77u16],
            11466u16 => &[81u16, 79u16],
            11467u16 => &[75u16, 77u16],
            11468u16 => &[81u16, 79u16],
            11469u16 => &[75u16],
            11470u16 => &[82u16],
            11471u16 => &[75u16],
            11472u16 => &[82u16],
            11473u16 => &[83u16, 76u16, 77u16],
            11474u16 => &[78u16],
            11475u16 => &[83u16, 76u16, 77u16],
            11476u16 => &[78u16],
            11477u16 => &[83u16, 76u16],
            11478u16 => &[80u16],
            11479u16 => &[83u16, 76u16],
            11480u16 => &[80u16],
            11481u16 => &[83u16, 77u16],
            11482u16 => &[81u16],
            11483u16 => &[83u16, 77u16],
            11484u16 => &[81u16],
            11485u16 => &[83u16],
            11486u16 => &[84u16],
            11487u16 => &[83u16],
            11488u16 => &[84u16],
            11489u16 => &[75u16, 76u16, 77u16],
            11490u16 => &[78u16, 79u16],
            11491u16 => &[75u16, 76u16, 77u16],
            11492u16 => &[78u16, 79u16],
            11493u16 => &[75u16, 76u16],
            11494u16 => &[80u16, 79u16],
            11495u16 => &[75u16, 76u16],
            11496u16 => &[80u16, 79u16],
            11497u16 => &[75u16, 77u16],
            11498u16 => &[81u16, 79u16],
            11499u16 => &[75u16, 77u16],
            11500u16 => &[81u16, 79u16],
            11501u16 => &[75u16],
            11502u16 => &[82u16],
            11503u16 => &[75u16],
            11504u16 => &[82u16],
            11505u16 => &[83u16, 76u16, 77u16],
            11506u16 => &[78u16],
            11507u16 => &[83u16, 76u16, 77u16],
            11508u16 => &[78u16],
            11509u16 => &[83u16, 76u16],
            11510u16 => &[80u16],
            11511u16 => &[83u16, 76u16],
            11512u16 => &[80u16],
            11513u16 => &[83u16, 77u16],
            11514u16 => &[81u16],
            11515u16 => &[83u16, 77u16],
            11516u16 => &[81u16],
            11517u16 => &[83u16],
            11518u16 => &[84u16],
            11519u16 => &[83u16],
            11520u16 => &[84u16],
            11521u16 => &[75u16, 76u16, 77u16],
            11522u16 => &[78u16, 79u16],
            11523u16 => &[75u16, 76u16, 77u16],
            11524u16 => &[78u16, 79u16],
            11525u16 => &[75u16, 76u16],
            11526u16 => &[80u16, 79u16],
            11527u16 => &[75u16, 76u16],
            11528u16 => &[80u16, 79u16],
            11529u16 => &[75u16, 77u16],
            11530u16 => &[81u16, 79u16],
            11531u16 => &[75u16, 77u16],
            11532u16 => &[81u16, 79u16],
            11533u16 => &[75u16],
            11534u16 => &[82u16],
            11535u16 => &[75u16],
            11536u16 => &[82u16],
            11537u16 => &[83u16, 76u16, 77u16],
            11538u16 => &[78u16],
            11539u16 => &[83u16, 76u16, 77u16],
            11540u16 => &[78u16],
            11541u16 => &[83u16, 76u16],
            11542u16 => &[80u16],
            11543u16 => &[83u16, 76u16],
            11544u16 => &[80u16],
            11545u16 => &[83u16, 77u16],
            11546u16 => &[81u16],
            11547u16 => &[83u16, 77u16],
            11548u16 => &[81u16],
            11549u16 => &[83u16],
            11550u16 => &[84u16],
            11551u16 => &[83u16],
            11552u16 => &[84u16],
            11553u16 => &[75u16, 76u16, 77u16],
            11554u16 => &[78u16, 79u16],
            11555u16 => &[75u16, 76u16, 77u16],
            11556u16 => &[78u16, 79u16],
            11557u16 => &[75u16, 76u16],
            11558u16 => &[80u16, 79u16],
            11559u16 => &[75u16, 76u16],
            11560u16 => &[80u16, 79u16],
            11561u16 => &[75u16, 77u16],
            11562u16 => &[81u16, 79u16],
            11563u16 => &[75u16, 77u16],
            11564u16 => &[81u16, 79u16],
            11565u16 => &[75u16],
            11566u16 => &[82u16],
            11567u16 => &[75u16],
            11568u16 => &[82u16],
            11569u16 => &[83u16, 76u16, 77u16],
            11570u16 => &[78u16],
            11571u16 => &[83u16, 76u16, 77u16],
            11572u16 => &[78u16],
            11573u16 => &[83u16, 76u16],
            11574u16 => &[80u16],
            11575u16 => &[83u16, 76u16],
            11576u16 => &[80u16],
            11577u16 => &[83u16, 77u16],
            11578u16 => &[81u16],
            11579u16 => &[83u16, 77u16],
            11580u16 => &[81u16],
            11581u16 => &[83u16],
            11582u16 => &[84u16],
            11583u16 => &[83u16],
            11584u16 => &[84u16],
            11585u16 => &[75u16, 76u16, 77u16],
            11586u16 => &[78u16, 79u16],
            11587u16 => &[75u16, 76u16, 77u16],
            11588u16 => &[78u16, 79u16],
            11589u16 => &[75u16, 76u16],
            11590u16 => &[80u16, 79u16],
            11591u16 => &[75u16, 76u16],
            11592u16 => &[80u16, 79u16],
            11593u16 => &[75u16, 77u16],
            11594u16 => &[81u16, 79u16],
            11595u16 => &[75u16, 77u16],
            11596u16 => &[81u16, 79u16],
            11597u16 => &[75u16],
            11598u16 => &[82u16],
            11599u16 => &[75u16],
            11600u16 => &[82u16],
            11601u16 => &[83u16, 76u16, 77u16],
            11602u16 => &[78u16],
            11603u16 => &[83u16, 76u16, 77u16],
            11604u16 => &[78u16],
            11605u16 => &[83u16, 76u16],
            11606u16 => &[80u16],
            11607u16 => &[83u16, 76u16],
            11608u16 => &[80u16],
            11609u16 => &[83u16, 77u16],
            11610u16 => &[81u16],
            11611u16 => &[83u16, 77u16],
            11612u16 => &[81u16],
            11613u16 => &[83u16],
            11614u16 => &[84u16],
            11615u16 => &[83u16],
            11616u16 => &[84u16],
            11617u16 => &[75u16, 76u16, 77u16],
            11618u16 => &[78u16, 79u16],
            11619u16 => &[75u16, 76u16, 77u16],
            11620u16 => &[78u16, 79u16],
            11621u16 => &[75u16, 76u16],
            11622u16 => &[80u16, 79u16],
            11623u16 => &[75u16, 76u16],
            11624u16 => &[80u16, 79u16],
            11625u16 => &[75u16, 77u16],
            11626u16 => &[81u16, 79u16],
            11627u16 => &[75u16, 77u16],
            11628u16 => &[81u16, 79u16],
            11629u16 => &[75u16],
            11630u16 => &[82u16],
            11631u16 => &[75u16],
            11632u16 => &[82u16],
            11633u16 => &[83u16, 76u16, 77u16],
            11634u16 => &[78u16],
            11635u16 => &[83u16, 76u16, 77u16],
            11636u16 => &[78u16],
            11637u16 => &[83u16, 76u16],
            11638u16 => &[80u16],
            11639u16 => &[83u16, 76u16],
            11640u16 => &[80u16],
            11641u16 => &[83u16, 77u16],
            11642u16 => &[81u16],
            11643u16 => &[83u16, 77u16],
            11644u16 => &[81u16],
            11645u16 => &[83u16],
            11646u16 => &[84u16],
            11647u16 => &[83u16],
            11648u16 => &[84u16],
            11649u16 => &[75u16, 76u16, 77u16],
            11650u16 => &[78u16, 79u16],
            11651u16 => &[75u16, 76u16, 77u16],
            11652u16 => &[78u16, 79u16],
            11653u16 => &[75u16, 76u16],
            11654u16 => &[80u16, 79u16],
            11655u16 => &[75u16, 76u16],
            11656u16 => &[80u16, 79u16],
            11657u16 => &[75u16, 77u16],
            11658u16 => &[81u16, 79u16],
            11659u16 => &[75u16, 77u16],
            11660u16 => &[81u16, 79u16],
            11661u16 => &[75u16],
            11662u16 => &[82u16],
            11663u16 => &[75u16],
            11664u16 => &[82u16],
            11665u16 => &[83u16, 76u16, 77u16],
            11666u16 => &[78u16],
            11667u16 => &[83u16, 76u16, 77u16],
            11668u16 => &[78u16],
            11669u16 => &[83u16, 76u16],
            11670u16 => &[80u16],
            11671u16 => &[83u16, 76u16],
            11672u16 => &[80u16],
            11673u16 => &[83u16, 77u16],
            11674u16 => &[81u16],
            11675u16 => &[83u16, 77u16],
            11676u16 => &[81u16],
            11677u16 => &[83u16],
            11678u16 => &[84u16],
            11679u16 => &[83u16],
            11680u16 => &[84u16],
            11681u16 => &[64u16],
            11682u16 => &[64u16],
            11683u16 => &[65u16],
            11684u16 => &[65u16],
            11685u16 => &[66u16],
            11686u16 => &[66u16],
            11687u16 => &[65u16],
            11688u16 => &[65u16],
            11689u16 => &[64u16],
            11690u16 => &[64u16],
            11691u16 => &[65u16],
            11692u16 => &[65u16],
            11693u16 => &[66u16],
            11694u16 => &[66u16],
            11695u16 => &[65u16],
            11696u16 => &[65u16],
            11697u16 => &[66u16],
            11698u16 => &[66u16],
            11699u16 => &[67u16],
            11700u16 => &[67u16],
            11701u16 => &[64u16],
            11702u16 => &[64u16],
            11703u16 => &[67u16],
            11704u16 => &[67u16],
            11705u16 => &[66u16],
            11706u16 => &[66u16],
            11707u16 => &[67u16],
            11708u16 => &[67u16],
            11709u16 => &[64u16],
            11710u16 => &[64u16],
            11711u16 => &[67u16],
            11712u16 => &[67u16],
            11713u16 => &[65u16],
            11714u16 => &[65u16],
            11715u16 => &[66u16],
            11716u16 => &[66u16],
            11717u16 => &[67u16],
            11718u16 => &[67u16],
            11719u16 => &[66u16],
            11720u16 => &[66u16],
            11721u16 => &[65u16],
            11722u16 => &[65u16],
            11723u16 => &[66u16],
            11724u16 => &[66u16],
            11725u16 => &[67u16],
            11726u16 => &[67u16],
            11727u16 => &[66u16],
            11728u16 => &[66u16],
            11729u16 => &[67u16],
            11730u16 => &[67u16],
            11731u16 => &[64u16],
            11732u16 => &[64u16],
            11733u16 => &[65u16],
            11734u16 => &[65u16],
            11735u16 => &[64u16],
            11736u16 => &[64u16],
            11737u16 => &[67u16],
            11738u16 => &[67u16],
            11739u16 => &[64u16],
            11740u16 => &[64u16],
            11741u16 => &[65u16],
            11742u16 => &[65u16],
            11743u16 => &[64u16],
            11744u16 => &[64u16],
            11745u16 => &[64u16],
            11746u16 => &[64u16],
            11747u16 => &[65u16],
            11748u16 => &[65u16],
            11749u16 => &[66u16],
            11750u16 => &[66u16],
            11751u16 => &[65u16],
            11752u16 => &[65u16],
            11753u16 => &[64u16],
            11754u16 => &[64u16],
            11755u16 => &[65u16],
            11756u16 => &[65u16],
            11757u16 => &[66u16],
            11758u16 => &[66u16],
            11759u16 => &[65u16],
            11760u16 => &[65u16],
            11761u16 => &[66u16],
            11762u16 => &[66u16],
            11763u16 => &[67u16],
            11764u16 => &[67u16],
            11765u16 => &[64u16],
            11766u16 => &[64u16],
            11767u16 => &[67u16],
            11768u16 => &[67u16],
            11769u16 => &[66u16],
            11770u16 => &[66u16],
            11771u16 => &[67u16],
            11772u16 => &[67u16],
            11773u16 => &[64u16],
            11774u16 => &[64u16],
            11775u16 => &[67u16],
            11776u16 => &[67u16],
            11777u16 => &[65u16],
            11778u16 => &[65u16],
            11779u16 => &[66u16],
            11780u16 => &[66u16],
            11781u16 => &[67u16],
            11782u16 => &[67u16],
            11783u16 => &[66u16],
            11784u16 => &[66u16],
            11785u16 => &[65u16],
            11786u16 => &[65u16],
            11787u16 => &[66u16],
            11788u16 => &[66u16],
            11789u16 => &[67u16],
            11790u16 => &[67u16],
            11791u16 => &[66u16],
            11792u16 => &[66u16],
            11793u16 => &[67u16],
            11794u16 => &[67u16],
            11795u16 => &[64u16],
            11796u16 => &[64u16],
            11797u16 => &[65u16],
            11798u16 => &[65u16],
            11799u16 => &[64u16],
            11800u16 => &[64u16],
            11801u16 => &[67u16],
            11802u16 => &[67u16],
            11803u16 => &[64u16],
            11804u16 => &[64u16],
            11805u16 => &[65u16],
            11806u16 => &[65u16],
            11807u16 => &[64u16],
            11808u16 => &[64u16],
            11809u16 => &[64u16],
            11810u16 => &[64u16],
            11811u16 => &[65u16],
            11812u16 => &[65u16],
            11813u16 => &[66u16],
            11814u16 => &[66u16],
            11815u16 => &[65u16],
            11816u16 => &[65u16],
            11817u16 => &[64u16],
            11818u16 => &[64u16],
            11819u16 => &[65u16],
            11820u16 => &[65u16],
            11821u16 => &[66u16],
            11822u16 => &[66u16],
            11823u16 => &[65u16],
            11824u16 => &[65u16],
            11825u16 => &[66u16],
            11826u16 => &[66u16],
            11827u16 => &[67u16],
            11828u16 => &[67u16],
            11829u16 => &[64u16],
            11830u16 => &[64u16],
            11831u16 => &[67u16],
            11832u16 => &[67u16],
            11833u16 => &[66u16],
            11834u16 => &[66u16],
            11835u16 => &[67u16],
            11836u16 => &[67u16],
            11837u16 => &[64u16],
            11838u16 => &[64u16],
            11839u16 => &[67u16],
            11840u16 => &[67u16],
            11841u16 => &[65u16],
            11842u16 => &[65u16],
            11843u16 => &[66u16],
            11844u16 => &[66u16],
            11845u16 => &[67u16],
            11846u16 => &[67u16],
            11847u16 => &[66u16],
            11848u16 => &[66u16],
            11849u16 => &[65u16],
            11850u16 => &[65u16],
            11851u16 => &[66u16],
            11852u16 => &[66u16],
            11853u16 => &[67u16],
            11854u16 => &[67u16],
            11855u16 => &[66u16],
            11856u16 => &[66u16],
            11857u16 => &[67u16],
            11858u16 => &[67u16],
            11859u16 => &[64u16],
            11860u16 => &[64u16],
            11861u16 => &[65u16],
            11862u16 => &[65u16],
            11863u16 => &[64u16],
            11864u16 => &[64u16],
            11865u16 => &[67u16],
            11866u16 => &[67u16],
            11867u16 => &[64u16],
            11868u16 => &[64u16],
            11869u16 => &[65u16],
            11870u16 => &[65u16],
            11871u16 => &[64u16],
            11872u16 => &[64u16],
            11873u16 => &[64u16],
            11874u16 => &[64u16],
            11875u16 => &[65u16],
            11876u16 => &[65u16],
            11877u16 => &[66u16],
            11878u16 => &[66u16],
            11879u16 => &[65u16],
            11880u16 => &[65u16],
            11881u16 => &[64u16],
            11882u16 => &[64u16],
            11883u16 => &[65u16],
            11884u16 => &[65u16],
            11885u16 => &[66u16],
            11886u16 => &[66u16],
            11887u16 => &[65u16],
            11888u16 => &[65u16],
            11889u16 => &[66u16],
            11890u16 => &[66u16],
            11891u16 => &[67u16],
            11892u16 => &[67u16],
            11893u16 => &[64u16],
            11894u16 => &[64u16],
            11895u16 => &[67u16],
            11896u16 => &[67u16],
            11897u16 => &[66u16],
            11898u16 => &[66u16],
            11899u16 => &[67u16],
            11900u16 => &[67u16],
            11901u16 => &[64u16],
            11902u16 => &[64u16],
            11903u16 => &[67u16],
            11904u16 => &[67u16],
            11905u16 => &[65u16],
            11906u16 => &[65u16],
            11907u16 => &[66u16],
            11908u16 => &[66u16],
            11909u16 => &[67u16],
            11910u16 => &[67u16],
            11911u16 => &[66u16],
            11912u16 => &[66u16],
            11913u16 => &[65u16],
            11914u16 => &[65u16],
            11915u16 => &[66u16],
            11916u16 => &[66u16],
            11917u16 => &[67u16],
            11918u16 => &[67u16],
            11919u16 => &[66u16],
            11920u16 => &[66u16],
            11921u16 => &[67u16],
            11922u16 => &[67u16],
            11923u16 => &[64u16],
            11924u16 => &[64u16],
            11925u16 => &[65u16],
            11926u16 => &[65u16],
            11927u16 => &[64u16],
            11928u16 => &[64u16],
            11929u16 => &[67u16],
            11930u16 => &[67u16],
            11931u16 => &[64u16],
            11932u16 => &[64u16],
            11933u16 => &[65u16],
            11934u16 => &[65u16],
            11935u16 => &[64u16],
            11936u16 => &[64u16],
            11937u16 => &[64u16],
            11938u16 => &[64u16],
            11939u16 => &[65u16],
            11940u16 => &[65u16],
            11941u16 => &[66u16],
            11942u16 => &[66u16],
            11943u16 => &[65u16],
            11944u16 => &[65u16],
            11945u16 => &[64u16],
            11946u16 => &[64u16],
            11947u16 => &[65u16],
            11948u16 => &[65u16],
            11949u16 => &[66u16],
            11950u16 => &[66u16],
            11951u16 => &[65u16],
            11952u16 => &[65u16],
            11953u16 => &[66u16],
            11954u16 => &[66u16],
            11955u16 => &[67u16],
            11956u16 => &[67u16],
            11957u16 => &[64u16],
            11958u16 => &[64u16],
            11959u16 => &[67u16],
            11960u16 => &[67u16],
            11961u16 => &[66u16],
            11962u16 => &[66u16],
            11963u16 => &[67u16],
            11964u16 => &[67u16],
            11965u16 => &[64u16],
            11966u16 => &[64u16],
            11967u16 => &[67u16],
            11968u16 => &[67u16],
            11969u16 => &[65u16],
            11970u16 => &[65u16],
            11971u16 => &[66u16],
            11972u16 => &[66u16],
            11973u16 => &[67u16],
            11974u16 => &[67u16],
            11975u16 => &[66u16],
            11976u16 => &[66u16],
            11977u16 => &[65u16],
            11978u16 => &[65u16],
            11979u16 => &[66u16],
            11980u16 => &[66u16],
            11981u16 => &[67u16],
            11982u16 => &[67u16],
            11983u16 => &[66u16],
            11984u16 => &[66u16],
            11985u16 => &[67u16],
            11986u16 => &[67u16],
            11987u16 => &[64u16],
            11988u16 => &[64u16],
            11989u16 => &[65u16],
            11990u16 => &[65u16],
            11991u16 => &[64u16],
            11992u16 => &[64u16],
            11993u16 => &[67u16],
            11994u16 => &[67u16],
            11995u16 => &[64u16],
            11996u16 => &[64u16],
            11997u16 => &[65u16],
            11998u16 => &[65u16],
            11999u16 => &[64u16],
            12000u16 => &[64u16],
            12001u16 => &[64u16],
            12002u16 => &[64u16],
            12003u16 => &[65u16],
            12004u16 => &[65u16],
            12005u16 => &[66u16],
            12006u16 => &[66u16],
            12007u16 => &[65u16],
            12008u16 => &[65u16],
            12009u16 => &[64u16],
            12010u16 => &[64u16],
            12011u16 => &[65u16],
            12012u16 => &[65u16],
            12013u16 => &[66u16],
            12014u16 => &[66u16],
            12015u16 => &[65u16],
            12016u16 => &[65u16],
            12017u16 => &[66u16],
            12018u16 => &[66u16],
            12019u16 => &[67u16],
            12020u16 => &[67u16],
            12021u16 => &[64u16],
            12022u16 => &[64u16],
            12023u16 => &[67u16],
            12024u16 => &[67u16],
            12025u16 => &[66u16],
            12026u16 => &[66u16],
            12027u16 => &[67u16],
            12028u16 => &[67u16],
            12029u16 => &[64u16],
            12030u16 => &[64u16],
            12031u16 => &[67u16],
            12032u16 => &[67u16],
            12033u16 => &[65u16],
            12034u16 => &[65u16],
            12035u16 => &[66u16],
            12036u16 => &[66u16],
            12037u16 => &[67u16],
            12038u16 => &[67u16],
            12039u16 => &[66u16],
            12040u16 => &[66u16],
            12041u16 => &[65u16],
            12042u16 => &[65u16],
            12043u16 => &[66u16],
            12044u16 => &[66u16],
            12045u16 => &[67u16],
            12046u16 => &[67u16],
            12047u16 => &[66u16],
            12048u16 => &[66u16],
            12049u16 => &[67u16],
            12050u16 => &[67u16],
            12051u16 => &[64u16],
            12052u16 => &[64u16],
            12053u16 => &[65u16],
            12054u16 => &[65u16],
            12055u16 => &[64u16],
            12056u16 => &[64u16],
            12057u16 => &[67u16],
            12058u16 => &[67u16],
            12059u16 => &[64u16],
            12060u16 => &[64u16],
            12061u16 => &[65u16],
            12062u16 => &[65u16],
            12063u16 => &[64u16],
            12064u16 => &[64u16],
            12065u16 => &[64u16],
            12066u16 => &[64u16],
            12067u16 => &[65u16],
            12068u16 => &[65u16],
            12069u16 => &[66u16],
            12070u16 => &[66u16],
            12071u16 => &[65u16],
            12072u16 => &[65u16],
            12073u16 => &[64u16],
            12074u16 => &[64u16],
            12075u16 => &[65u16],
            12076u16 => &[65u16],
            12077u16 => &[66u16],
            12078u16 => &[66u16],
            12079u16 => &[65u16],
            12080u16 => &[65u16],
            12081u16 => &[66u16],
            12082u16 => &[66u16],
            12083u16 => &[67u16],
            12084u16 => &[67u16],
            12085u16 => &[64u16],
            12086u16 => &[64u16],
            12087u16 => &[67u16],
            12088u16 => &[67u16],
            12089u16 => &[66u16],
            12090u16 => &[66u16],
            12091u16 => &[67u16],
            12092u16 => &[67u16],
            12093u16 => &[64u16],
            12094u16 => &[64u16],
            12095u16 => &[67u16],
            12096u16 => &[67u16],
            12097u16 => &[65u16],
            12098u16 => &[65u16],
            12099u16 => &[66u16],
            12100u16 => &[66u16],
            12101u16 => &[67u16],
            12102u16 => &[67u16],
            12103u16 => &[66u16],
            12104u16 => &[66u16],
            12105u16 => &[65u16],
            12106u16 => &[65u16],
            12107u16 => &[66u16],
            12108u16 => &[66u16],
            12109u16 => &[67u16],
            12110u16 => &[67u16],
            12111u16 => &[66u16],
            12112u16 => &[66u16],
            12113u16 => &[67u16],
            12114u16 => &[67u16],
            12115u16 => &[64u16],
            12116u16 => &[64u16],
            12117u16 => &[65u16],
            12118u16 => &[65u16],
            12119u16 => &[64u16],
            12120u16 => &[64u16],
            12121u16 => &[67u16],
            12122u16 => &[67u16],
            12123u16 => &[64u16],
            12124u16 => &[64u16],
            12125u16 => &[65u16],
            12126u16 => &[65u16],
            12127u16 => &[64u16],
            12128u16 => &[64u16],
            12129u16 => &[64u16],
            12130u16 => &[64u16],
            12131u16 => &[65u16],
            12132u16 => &[65u16],
            12133u16 => &[66u16],
            12134u16 => &[66u16],
            12135u16 => &[65u16],
            12136u16 => &[65u16],
            12137u16 => &[64u16],
            12138u16 => &[64u16],
            12139u16 => &[65u16],
            12140u16 => &[65u16],
            12141u16 => &[66u16],
            12142u16 => &[66u16],
            12143u16 => &[65u16],
            12144u16 => &[65u16],
            12145u16 => &[66u16],
            12146u16 => &[66u16],
            12147u16 => &[67u16],
            12148u16 => &[67u16],
            12149u16 => &[64u16],
            12150u16 => &[64u16],
            12151u16 => &[67u16],
            12152u16 => &[67u16],
            12153u16 => &[66u16],
            12154u16 => &[66u16],
            12155u16 => &[67u16],
            12156u16 => &[67u16],
            12157u16 => &[64u16],
            12158u16 => &[64u16],
            12159u16 => &[67u16],
            12160u16 => &[67u16],
            12161u16 => &[65u16],
            12162u16 => &[65u16],
            12163u16 => &[66u16],
            12164u16 => &[66u16],
            12165u16 => &[67u16],
            12166u16 => &[67u16],
            12167u16 => &[66u16],
            12168u16 => &[66u16],
            12169u16 => &[65u16],
            12170u16 => &[65u16],
            12171u16 => &[66u16],
            12172u16 => &[66u16],
            12173u16 => &[67u16],
            12174u16 => &[67u16],
            12175u16 => &[66u16],
            12176u16 => &[66u16],
            12177u16 => &[67u16],
            12178u16 => &[67u16],
            12179u16 => &[64u16],
            12180u16 => &[64u16],
            12181u16 => &[65u16],
            12182u16 => &[65u16],
            12183u16 => &[64u16],
            12184u16 => &[64u16],
            12185u16 => &[67u16],
            12186u16 => &[67u16],
            12187u16 => &[64u16],
            12188u16 => &[64u16],
            12189u16 => &[65u16],
            12190u16 => &[65u16],
            12191u16 => &[64u16],
            12192u16 => &[64u16],
            12193u16 => &[203u16],
            12194u16 => &[204u16],
            12195u16 => &[203u16],
            12196u16 => &[204u16],
            12197u16 => &[32u16],
            12198u16 => &[32u16],
            12199u16 => &[205u16, 206u16, 207u16, 208u16, 209u16],
            12200u16 => &[205u16, 207u16, 208u16, 209u16],
            12201u16 => &[210u16, 206u16, 207u16, 208u16, 209u16],
            12202u16 => &[210u16, 207u16, 208u16, 209u16],
            12203u16 => &[205u16, 206u16, 207u16, 209u16],
            12204u16 => &[205u16, 207u16, 209u16],
            12205u16 => &[210u16, 206u16, 207u16, 209u16],
            12206u16 => &[210u16, 207u16, 209u16],
            12207u16 => &[205u16, 206u16, 208u16, 209u16],
            12208u16 => &[205u16, 208u16, 209u16],
            12209u16 => &[210u16, 206u16, 208u16, 209u16],
            12210u16 => &[210u16, 208u16, 209u16],
            12211u16 => &[205u16, 206u16, 209u16],
            12212u16 => &[205u16, 209u16],
            12213u16 => &[210u16, 206u16, 209u16],
            12214u16 => &[210u16, 209u16],
            12215u16 => &[205u16, 206u16, 207u16, 208u16],
            12216u16 => &[205u16, 207u16, 208u16],
            12217u16 => &[210u16, 206u16, 207u16, 208u16],
            12218u16 => &[210u16, 207u16, 208u16],
            12219u16 => &[205u16, 206u16, 207u16],
            12220u16 => &[205u16, 207u16],
            12221u16 => &[210u16, 206u16, 207u16],
            12222u16 => &[210u16, 207u16],
            12223u16 => &[205u16, 206u16, 208u16],
            12224u16 => &[205u16, 208u16],
            12225u16 => &[210u16, 206u16, 208u16],
            12226u16 => &[210u16, 208u16],
            12227u16 => &[205u16, 206u16],
            12228u16 => &[205u16],
            12229u16 => &[210u16, 206u16],
            12230u16 => &[210u16],
            12231u16 => &[211u16, 207u16, 208u16, 212u16],
            12232u16 => &[213u16, 209u16, 212u16],
            12233u16 => &[211u16, 207u16, 208u16],
            12234u16 => &[213u16, 209u16],
            12235u16 => &[211u16, 207u16, 212u16],
            12236u16 => &[214u16, 209u16, 212u16],
            12237u16 => &[211u16, 207u16],
            12238u16 => &[214u16, 209u16],
            12239u16 => &[211u16, 208u16, 212u16],
            12240u16 => &[215u16, 209u16, 212u16],
            12241u16 => &[211u16, 208u16],
            12242u16 => &[215u16, 209u16],
            12243u16 => &[211u16, 212u16],
            12244u16 => &[216u16, 212u16],
            12245u16 => &[211u16],
            12246u16 => &[216u16],
            12247u16 => &[217u16, 207u16, 208u16, 212u16],
            12248u16 => &[213u16, 212u16],
            12249u16 => &[217u16, 207u16, 208u16],
            12250u16 => &[213u16],
            12251u16 => &[217u16, 207u16, 212u16],
            12252u16 => &[214u16, 212u16],
            12253u16 => &[217u16, 207u16],
            12254u16 => &[214u16],
            12255u16 => &[217u16, 208u16, 212u16],
            12256u16 => &[215u16, 212u16],
            12257u16 => &[217u16, 208u16],
            12258u16 => &[215u16],
            12259u16 => &[217u16, 212u16],
            12260u16 => &[218u16],
            12261u16 => &[217u16],
            12262u16 => &[219u16],
            12263u16 => &[0u16],
            12264u16 => &[0u16],
            12265u16 => &[0u16],
            12266u16 => &[0u16],
            12267u16 => &[0u16],
            12268u16 => &[0u16],
            12269u16 => &[0u16],
            12270u16 => &[0u16],
            12271u16 => &[0u16],
            12272u16 => &[0u16],
            12273u16 => &[41u16, 42u16],
            12274u16 => &[41u16, 42u16],
            12275u16 => &[43u16, 44u16, 45u16],
            12276u16 => &[43u16, 44u16, 45u16],
            12277u16 => &[41u16, 46u16, 47u16],
            12278u16 => &[41u16, 46u16, 47u16],
            12279u16 => &[48u16, 42u16, 49u16],
            12280u16 => &[48u16, 42u16, 49u16],
            12281u16 => &[44u16, 50u16, 45u16],
            12282u16 => &[44u16, 50u16, 45u16],
            12283u16 => &[51u16, 52u16],
            12284u16 => &[51u16, 52u16],
            12285u16 => &[51u16, 50u16, 49u16],
            12286u16 => &[51u16, 50u16, 49u16],
            12287u16 => &[51u16, 52u16, 45u16],
            12288u16 => &[51u16, 52u16, 45u16],
            12289u16 => &[51u16, 53u16],
            12290u16 => &[51u16, 53u16],
            12291u16 => &[51u16, 49u16],
            12292u16 => &[51u16, 49u16],
            12293u16 => &[54u16, 52u16],
            12294u16 => &[54u16, 52u16],
            12295u16 => &[54u16, 44u16, 53u16],
            12296u16 => &[54u16, 44u16, 53u16],
            12297u16 => &[43u16, 46u16, 49u16],
            12298u16 => &[43u16, 46u16, 49u16],
            12299u16 => &[46u16, 50u16, 49u16],
            12300u16 => &[46u16, 50u16, 49u16],
            12301u16 => &[55u16, 52u16, 45u16],
            12302u16 => &[55u16, 52u16, 45u16],
            12303u16 => &[51u16, 42u16],
            12304u16 => &[51u16, 42u16],
            12305u16 => &[51u16, 42u16, 49u16],
            12306u16 => &[51u16, 42u16, 49u16],
            12307u16 => &[51u16, 50u16, 45u16],
            12308u16 => &[51u16, 50u16, 45u16],
            12309u16 => &[51u16, 45u16],
            12310u16 => &[51u16, 45u16],
            12311u16 => &[51u16, 47u16],
            12312u16 => &[51u16, 47u16],
            12313u16 => &[43u16, 56u16],
            12314u16 => &[43u16, 56u16],
            12315u16 => &[43u16, 46u16, 49u16],
            12316u16 => &[43u16, 46u16, 49u16],
            12317u16 => &[43u16, 44u16, 45u16],
            12318u16 => &[43u16, 44u16, 45u16],
            12319u16 => &[55u16, 52u16, 45u16],
            12320u16 => &[55u16, 52u16, 45u16],
            12321u16 => &[48u16, 42u16, 49u16],
            12322u16 => &[48u16, 42u16, 49u16],
            12323u16 => &[51u16, 50u16],
            12324u16 => &[51u16, 50u16],
            12325u16 => &[51u16, 50u16, 45u16],
            12326u16 => &[51u16, 50u16, 45u16],
            12327u16 => &[51u16, 50u16, 49u16],
            12328u16 => &[51u16, 50u16, 49u16],
            12329u16 => &[51u16, 47u16],
            12330u16 => &[51u16, 47u16],
            12331u16 => &[51u16, 53u16],
            12332u16 => &[51u16, 53u16],
            12333u16 => &[57u16, 50u16],
            12334u16 => &[57u16, 50u16],
            12335u16 => &[41u16, 46u16, 47u16],
            12336u16 => &[41u16, 46u16, 47u16],
            12337u16 => &[54u16, 44u16, 53u16],
            12338u16 => &[54u16, 44u16, 53u16],
            12339u16 => &[44u16, 50u16, 45u16],
            12340u16 => &[44u16, 50u16, 45u16],
            12341u16 => &[46u16, 50u16, 49u16],
            12342u16 => &[46u16, 50u16, 49u16],
            12343u16 => &[51u16, 56u16],
            12344u16 => &[51u16, 56u16],
            12345u16 => &[51u16, 52u16, 45u16],
            12346u16 => &[51u16, 52u16, 45u16],
            12347u16 => &[51u16, 42u16, 49u16],
            12348u16 => &[51u16, 42u16, 49u16],
            12349u16 => &[51u16, 49u16],
            12350u16 => &[51u16, 49u16],
            12351u16 => &[51u16, 45u16],
            12352u16 => &[51u16, 45u16],
            12353u16 => &[0u16],
            12354u16 => &[],
            12355u16 => &[],
            12356u16 => &[220u16],
            12357u16 => &[220u16],
            12358u16 => &[],
            12359u16 => &[221u16],
            12360u16 => &[],
            12361u16 => &[221u16],
            12362u16 => &[],
            12363u16 => &[221u16],
            12364u16 => &[],
            12365u16 => &[221u16],
            12366u16 => &[],
            12367u16 => &[],
            12368u16 => &[],
            12369u16 => &[],
            12370u16 => &[],
            12371u16 => &[],
            12372u16 => &[63u16],
            12373u16 => &[],
            12374u16 => &[0u16],
            12375u16 => &[0u16],
            12376u16 => &[0u16],
            12377u16 => &[0u16],
            12378u16 => &[0u16],
            12379u16 => &[0u16],
            12380u16 => &[0u16],
            12381u16 => &[0u16],
            12382u16 => &[0u16],
            12383u16 => &[0u16],
            12384u16 => &[0u16],
            12385u16 => &[0u16],
            12386u16 => &[0u16],
            12387u16 => &[0u16],
            12388u16 => &[0u16],
            12389u16 => &[0u16],
            12390u16 => &[0u16],
            12391u16 => &[0u16],
            12392u16 => &[0u16],
            12393u16 => &[0u16],
            12394u16 => &[0u16],
            12395u16 => &[0u16],
            12396u16 => &[0u16],
            12397u16 => &[0u16],
            12398u16 => &[0u16],
            12399u16 => &[0u16],
            12400u16 => &[0u16],
            12401u16 => &[0u16],
            12402u16 => &[0u16],
            12403u16 => &[0u16],
            12404u16 => &[0u16],
            12405u16 => &[0u16],
            12406u16 => &[0u16],
            12407u16 => &[0u16],
            12408u16 => &[],
            12409u16 => &[0u16],
            12410u16 => &[0u16],
            12411u16 => &[0u16],
            12412u16 => &[0u16],
            12413u16 => &[0u16],
            12414u16 => &[0u16],
            12415u16 => &[0u16],
            12416u16 => &[0u16],
            12417u16 => &[0u16],
            12418u16 => &[0u16],
            12419u16 => &[0u16],
            12420u16 => &[0u16],
            12421u16 => &[0u16],
            12422u16 => &[0u16],
            12423u16 => &[0u16],
            12424u16 => &[0u16],
            12425u16 => &[0u16],
            12426u16 => &[0u16],
            12427u16 => &[0u16],
            12428u16 => &[0u16],
            12429u16 => &[0u16],
            12430u16 => &[0u16],
            12431u16 => &[0u16],
            12432u16 => &[0u16],
            12433u16 => &[0u16],
            12434u16 => &[0u16],
            12435u16 => &[0u16],
            12436u16 => &[0u16],
            12437u16 => &[0u16],
            12438u16 => &[0u16],
            12439u16 => &[0u16],
            12440u16 => &[0u16],
            12441u16 => &[0u16],
            12442u16 => &[0u16],
            12443u16 => &[0u16],
            12444u16 => &[0u16],
            12445u16 => &[0u16],
            12446u16 => &[0u16],
            12447u16 => &[0u16],
            12448u16 => &[0u16],
            12449u16 => &[0u16],
            12450u16 => &[0u16],
            12451u16 => &[0u16],
            12452u16 => &[0u16],
            12453u16 => &[0u16],
            12454u16 => &[0u16],
            12455u16 => &[0u16],
            12456u16 => &[0u16],
            12457u16 => &[0u16],
            12458u16 => &[0u16],
            12459u16 => &[0u16],
            12460u16 => &[0u16],
            12461u16 => &[0u16],
            12462u16 => &[0u16],
            12463u16 => &[0u16],
            12464u16 => &[0u16],
            12465u16 => &[0u16],
            12466u16 => &[0u16],
            12467u16 => &[0u16],
            12468u16 => &[0u16],
            12469u16 => &[0u16],
            12470u16 => &[0u16],
            12471u16 => &[0u16],
            12472u16 => &[0u16],
            12473u16 => &[0u16],
            12474u16 => &[0u16],
            12475u16 => &[0u16],
            12476u16 => &[0u16],
            12477u16 => &[0u16],
            12478u16 => &[0u16],
            12479u16 => &[0u16],
            12480u16 => &[0u16],
            12481u16 => &[0u16],
            12482u16 => &[0u16],
            12483u16 => &[0u16],
            12484u16 => &[0u16],
            12485u16 => &[0u16],
            12486u16 => &[0u16],
            12487u16 => &[0u16],
            12488u16 => &[0u16],
            12489u16 => &[0u16],
            12490u16 => &[0u16],
            12491u16 => &[0u16],
            12492u16 => &[0u16],
            12493u16 => &[0u16],
            12494u16 => &[0u16],
            12495u16 => &[0u16],
            12496u16 => &[0u16],
            12497u16 => &[0u16],
            12498u16 => &[0u16],
            12499u16 => &[0u16],
            12500u16 => &[0u16],
            12501u16 => &[0u16],
            12502u16 => &[0u16],
            12503u16 => &[0u16],
            12504u16 => &[0u16],
            12505u16 => &[0u16],
            12506u16 => &[0u16],
            12507u16 => &[0u16],
            12508u16 => &[0u16],
            12509u16 => &[0u16],
            12510u16 => &[0u16],
            12511u16 => &[0u16],
            12512u16 => &[0u16],
            12513u16 => &[0u16],
            12514u16 => &[0u16],
            12515u16 => &[0u16],
            12516u16 => &[0u16],
            12517u16 => &[0u16],
            12518u16 => &[0u16],
            12519u16 => &[0u16],
            12520u16 => &[0u16],
            12521u16 => &[0u16],
            12522u16 => &[0u16],
            12523u16 => &[0u16],
            12524u16 => &[0u16],
            12525u16 => &[0u16],
            12526u16 => &[0u16],
            12527u16 => &[0u16],
            12528u16 => &[0u16],
            12529u16 => &[0u16],
            12530u16 => &[0u16],
            12531u16 => &[0u16],
            12532u16 => &[0u16],
            12533u16 => &[0u16],
            12534u16 => &[0u16],
            12535u16 => &[0u16],
            12536u16 => &[0u16],
            12537u16 => &[0u16],
            12538u16 => &[0u16],
            12539u16 => &[0u16],
            12540u16 => &[0u16],
            12541u16 => &[0u16],
            12542u16 => &[0u16],
            12543u16 => &[0u16],
            12544u16 => &[0u16],
            12545u16 => &[0u16],
            12546u16 => &[0u16],
            12547u16 => &[0u16],
            12548u16 => &[0u16],
            12549u16 => &[0u16],
            12550u16 => &[0u16],
            12551u16 => &[0u16],
            12552u16 => &[0u16],
            12553u16 => &[0u16],
            12554u16 => &[0u16],
            12555u16 => &[0u16],
            12556u16 => &[0u16],
            12557u16 => &[0u16],
            12558u16 => &[0u16],
            12559u16 => &[0u16],
            12560u16 => &[0u16],
            12561u16 => &[0u16],
            12562u16 => &[0u16],
            12563u16 => &[0u16],
            12564u16 => &[0u16],
            12565u16 => &[0u16],
            12566u16 => &[0u16],
            12567u16 => &[0u16],
            12568u16 => &[0u16],
            12569u16 => &[0u16],
            12570u16 => &[0u16],
            12571u16 => &[0u16],
            12572u16 => &[0u16],
            12573u16 => &[0u16],
            12574u16 => &[0u16],
            12575u16 => &[0u16],
            12576u16 => &[0u16],
            12577u16 => &[0u16],
            12578u16 => &[0u16],
            12579u16 => &[0u16],
            12580u16 => &[0u16],
            12581u16 => &[0u16],
            12582u16 => &[0u16],
            12583u16 => &[0u16],
            12584u16 => &[0u16],
            12585u16 => &[0u16],
            12586u16 => &[0u16],
            12587u16 => &[0u16],
            12588u16 => &[0u16],
            12589u16 => &[0u16],
            12590u16 => &[0u16],
            12591u16 => &[0u16],
            12592u16 => &[0u16],
            12593u16 => &[0u16],
            12594u16 => &[0u16],
            12595u16 => &[0u16],
            12596u16 => &[0u16],
            12597u16 => &[0u16],
            12598u16 => &[0u16],
            12599u16 => &[0u16],
            12600u16 => &[0u16],
            12601u16 => &[0u16],
            12602u16 => &[0u16],
            12603u16 => &[0u16],
            12604u16 => &[0u16],
            12605u16 => &[0u16],
            12606u16 => &[0u16],
            12607u16 => &[0u16],
            12608u16 => &[0u16],
            12609u16 => &[0u16],
            12610u16 => &[0u16],
            12611u16 => &[0u16],
            12612u16 => &[0u16],
            12613u16 => &[0u16],
            12614u16 => &[0u16],
            12615u16 => &[0u16],
            12616u16 => &[0u16],
            12617u16 => &[0u16],
            12618u16 => &[0u16],
            12619u16 => &[],
            12620u16 => &[],
            12621u16 => &[],
            12622u16 => &[],
            12623u16 => &[],
            12624u16 => &[],
            12625u16 => &[],
            12626u16 => &[],
            12627u16 => &[],
            12628u16 => &[],
            12629u16 => &[],
            12630u16 => &[],
            12631u16 => &[],
            12632u16 => &[],
            12633u16 => &[],
            12634u16 => &[],
            12635u16 => &[],
            12636u16 => &[],
            12637u16 => &[],
            12638u16 => &[],
            12639u16 => &[],
            12640u16 => &[],
            12641u16 => &[],
            12642u16 => &[],
            12643u16 => &[],
            12644u16 => &[],
            12645u16 => &[],
            12646u16 => &[0u16],
            12647u16 => &[222u16],
            12648u16 => &[222u16],
            12649u16 => &[222u16],
            12650u16 => &[223u16],
            12651u16 => &[223u16],
            12652u16 => &[223u16],
            12653u16 => &[223u16],
            12654u16 => &[223u16],
            12655u16 => &[223u16],
            12656u16 => &[223u16],
            12657u16 => &[223u16],
            12658u16 => &[223u16],
            12659u16 => &[224u16],
            12660u16 => &[224u16],
            12661u16 => &[224u16],
            12662u16 => &[0u16],
            12663u16 => &[0u16],
            12664u16 => &[0u16],
            12665u16 => &[0u16],
            12666u16 => &[0u16],
            12667u16 => &[0u16],
            12668u16 => &[0u16],
            12669u16 => &[0u16],
            12670u16 => &[0u16],
            12671u16 => &[0u16],
            12672u16 => &[],
            12673u16 => &[],
            12674u16 => &[],
            12675u16 => &[],
            12676u16 => &[],
            12677u16 => &[],
            12678u16 => &[],
            12679u16 => &[],
            12680u16 => &[],
            12681u16 => &[],
            12682u16 => &[],
            12683u16 => &[],
            12684u16 => &[],
            12685u16 => &[],
            12686u16 => &[],
            12687u16 => &[],
            12688u16 => &[],
            12689u16 => &[],
            12690u16 => &[],
            12691u16 => &[],
            12692u16 => &[],
            12693u16 => &[],
            12694u16 => &[],
            12695u16 => &[],
            12696u16 => &[],
            12697u16 => &[],
            12698u16 => &[],
            12699u16 => &[],
            12700u16 => &[],
            12701u16 => &[],
            12702u16 => &[],
            12703u16 => &[],
            12704u16 => &[],
            12705u16 => &[],
            12706u16 => &[],
            12707u16 => &[],
            12708u16 => &[],
            12709u16 => &[],
            12710u16 => &[],
            12711u16 => &[],
            12712u16 => &[],
            12713u16 => &[],
            12714u16 => &[],
            12715u16 => &[],
            12716u16 => &[],
            12717u16 => &[],
            12718u16 => &[],
            12719u16 => &[],
            12720u16 => &[],
            12721u16 => &[],
            12722u16 => &[],
            12723u16 => &[],
            12724u16 => &[],
            12725u16 => &[],
            12726u16 => &[],
            12727u16 => &[],
            12728u16 => &[],
            12729u16 => &[],
            12730u16 => &[],
            12731u16 => &[],
            12732u16 => &[],
            12733u16 => &[],
            12734u16 => &[],
            12735u16 => &[],
            12736u16 => &[],
            12737u16 => &[],
            12738u16 => &[],
            12739u16 => &[],
            12740u16 => &[],
            12741u16 => &[],
            12742u16 => &[],
            12743u16 => &[],
            12744u16 => &[],
            12745u16 => &[],
            12746u16 => &[],
            12747u16 => &[],
            12748u16 => &[],
            12749u16 => &[],
            12750u16 => &[],
            12751u16 => &[],
            12752u16 => &[],
            12753u16 => &[],
            12754u16 => &[],
            12755u16 => &[],
            12756u16 => &[],
            12757u16 => &[],
            12758u16 => &[],
            12759u16 => &[],
            12760u16 => &[],
            12761u16 => &[],
            12762u16 => &[],
            12763u16 => &[],
            12764u16 => &[],
            12765u16 => &[],
            12766u16 => &[],
            12767u16 => &[],
            12768u16 => &[],
            12769u16 => &[],
            12770u16 => &[],
            12771u16 => &[],
            12772u16 => &[],
            12773u16 => &[],
            12774u16 => &[],
            12775u16 => &[],
            12776u16 => &[],
            12777u16 => &[],
            12778u16 => &[],
            12779u16 => &[],
            12780u16 => &[],
            12781u16 => &[],
            12782u16 => &[],
            12783u16 => &[],
            12784u16 => &[],
            12785u16 => &[],
            12786u16 => &[],
            12787u16 => &[],
            12788u16 => &[],
            12789u16 => &[],
            12790u16 => &[],
            12791u16 => &[],
            12792u16 => &[225u16],
            12793u16 => &[225u16],
            12794u16 => &[226u16],
            12795u16 => &[226u16],
            12796u16 => &[227u16],
            12797u16 => &[227u16],
            12798u16 => &[228u16],
            12799u16 => &[228u16],
            12800u16 => &[0u16],
            12801u16 => &[229u16],
            12802u16 => &[229u16],
            12803u16 => &[],
            12804u16 => &[230u16],
            12805u16 => &[230u16],
            12806u16 => &[230u16],
            12807u16 => &[230u16],
            12808u16 => &[230u16],
            12809u16 => &[230u16],
            12810u16 => &[230u16],
            12811u16 => &[230u16],
            12812u16 => &[230u16],
            12813u16 => &[230u16],
            12814u16 => &[230u16],
            12815u16 => &[230u16],
            12816u16 => &[156u16],
            12817u16 => &[],
            12818u16 => &[],
            12819u16 => &[],
            12820u16 => &[],
            12821u16 => &[41u16, 42u16],
            12822u16 => &[41u16, 42u16],
            12823u16 => &[43u16, 44u16, 45u16],
            12824u16 => &[43u16, 44u16, 45u16],
            12825u16 => &[41u16, 46u16, 47u16],
            12826u16 => &[41u16, 46u16, 47u16],
            12827u16 => &[48u16, 42u16, 49u16],
            12828u16 => &[48u16, 42u16, 49u16],
            12829u16 => &[44u16, 50u16, 45u16],
            12830u16 => &[44u16, 50u16, 45u16],
            12831u16 => &[51u16, 52u16],
            12832u16 => &[51u16, 52u16],
            12833u16 => &[51u16, 50u16, 49u16],
            12834u16 => &[51u16, 50u16, 49u16],
            12835u16 => &[51u16, 52u16, 45u16],
            12836u16 => &[51u16, 52u16, 45u16],
            12837u16 => &[51u16, 53u16],
            12838u16 => &[51u16, 53u16],
            12839u16 => &[51u16, 49u16],
            12840u16 => &[51u16, 49u16],
            12841u16 => &[54u16, 52u16],
            12842u16 => &[54u16, 52u16],
            12843u16 => &[54u16, 44u16, 53u16],
            12844u16 => &[54u16, 44u16, 53u16],
            12845u16 => &[43u16, 46u16, 49u16],
            12846u16 => &[43u16, 46u16, 49u16],
            12847u16 => &[46u16, 50u16, 49u16],
            12848u16 => &[46u16, 50u16, 49u16],
            12849u16 => &[55u16, 52u16, 45u16],
            12850u16 => &[55u16, 52u16, 45u16],
            12851u16 => &[51u16, 42u16],
            12852u16 => &[51u16, 42u16],
            12853u16 => &[51u16, 42u16, 49u16],
            12854u16 => &[51u16, 42u16, 49u16],
            12855u16 => &[51u16, 50u16, 45u16],
            12856u16 => &[51u16, 50u16, 45u16],
            12857u16 => &[51u16, 45u16],
            12858u16 => &[51u16, 45u16],
            12859u16 => &[51u16, 47u16],
            12860u16 => &[51u16, 47u16],
            12861u16 => &[43u16, 56u16],
            12862u16 => &[43u16, 56u16],
            12863u16 => &[43u16, 46u16, 49u16],
            12864u16 => &[43u16, 46u16, 49u16],
            12865u16 => &[43u16, 44u16, 45u16],
            12866u16 => &[43u16, 44u16, 45u16],
            12867u16 => &[55u16, 52u16, 45u16],
            12868u16 => &[55u16, 52u16, 45u16],
            12869u16 => &[48u16, 42u16, 49u16],
            12870u16 => &[48u16, 42u16, 49u16],
            12871u16 => &[51u16, 50u16],
            12872u16 => &[51u16, 50u16],
            12873u16 => &[51u16, 50u16, 45u16],
            12874u16 => &[51u16, 50u16, 45u16],
            12875u16 => &[51u16, 50u16, 49u16],
            12876u16 => &[51u16, 50u16, 49u16],
            12877u16 => &[51u16, 47u16],
            12878u16 => &[51u16, 47u16],
            12879u16 => &[51u16, 53u16],
            12880u16 => &[51u16, 53u16],
            12881u16 => &[57u16, 50u16],
            12882u16 => &[57u16, 50u16],
            12883u16 => &[41u16, 46u16, 47u16],
            12884u16 => &[41u16, 46u16, 47u16],
            12885u16 => &[54u16, 44u16, 53u16],
            12886u16 => &[54u16, 44u16, 53u16],
            12887u16 => &[44u16, 50u16, 45u16],
            12888u16 => &[44u16, 50u16, 45u16],
            12889u16 => &[46u16, 50u16, 49u16],
            12890u16 => &[46u16, 50u16, 49u16],
            12891u16 => &[51u16, 56u16],
            12892u16 => &[51u16, 56u16],
            12893u16 => &[51u16, 52u16, 45u16],
            12894u16 => &[51u16, 52u16, 45u16],
            12895u16 => &[51u16, 42u16, 49u16],
            12896u16 => &[51u16, 42u16, 49u16],
            12897u16 => &[51u16, 49u16],
            12898u16 => &[51u16, 49u16],
            12899u16 => &[51u16, 45u16],
            12900u16 => &[51u16, 45u16],
            12901u16 => &[41u16, 42u16],
            12902u16 => &[41u16, 42u16],
            12903u16 => &[43u16, 44u16, 45u16],
            12904u16 => &[43u16, 44u16, 45u16],
            12905u16 => &[41u16, 46u16, 47u16],
            12906u16 => &[41u16, 46u16, 47u16],
            12907u16 => &[48u16, 42u16, 49u16],
            12908u16 => &[48u16, 42u16, 49u16],
            12909u16 => &[44u16, 50u16, 45u16],
            12910u16 => &[44u16, 50u16, 45u16],
            12911u16 => &[51u16, 52u16],
            12912u16 => &[51u16, 52u16],
            12913u16 => &[51u16, 50u16, 49u16],
            12914u16 => &[51u16, 50u16, 49u16],
            12915u16 => &[51u16, 52u16, 45u16],
            12916u16 => &[51u16, 52u16, 45u16],
            12917u16 => &[51u16, 53u16],
            12918u16 => &[51u16, 53u16],
            12919u16 => &[51u16, 49u16],
            12920u16 => &[51u16, 49u16],
            12921u16 => &[54u16, 52u16],
            12922u16 => &[54u16, 52u16],
            12923u16 => &[54u16, 44u16, 53u16],
            12924u16 => &[54u16, 44u16, 53u16],
            12925u16 => &[43u16, 46u16, 49u16],
            12926u16 => &[43u16, 46u16, 49u16],
            12927u16 => &[46u16, 50u16, 49u16],
            12928u16 => &[46u16, 50u16, 49u16],
            12929u16 => &[55u16, 52u16, 45u16],
            12930u16 => &[55u16, 52u16, 45u16],
            12931u16 => &[51u16, 42u16],
            12932u16 => &[51u16, 42u16],
            12933u16 => &[51u16, 42u16, 49u16],
            12934u16 => &[51u16, 42u16, 49u16],
            12935u16 => &[51u16, 50u16, 45u16],
            12936u16 => &[51u16, 50u16, 45u16],
            12937u16 => &[51u16, 45u16],
            12938u16 => &[51u16, 45u16],
            12939u16 => &[51u16, 47u16],
            12940u16 => &[51u16, 47u16],
            12941u16 => &[43u16, 56u16],
            12942u16 => &[43u16, 56u16],
            12943u16 => &[43u16, 46u16, 49u16],
            12944u16 => &[43u16, 46u16, 49u16],
            12945u16 => &[43u16, 44u16, 45u16],
            12946u16 => &[43u16, 44u16, 45u16],
            12947u16 => &[55u16, 52u16, 45u16],
            12948u16 => &[55u16, 52u16, 45u16],
            12949u16 => &[48u16, 42u16, 49u16],
            12950u16 => &[48u16, 42u16, 49u16],
            12951u16 => &[51u16, 50u16],
            12952u16 => &[51u16, 50u16],
            12953u16 => &[51u16, 50u16, 45u16],
            12954u16 => &[51u16, 50u16, 45u16],
            12955u16 => &[51u16, 50u16, 49u16],
            12956u16 => &[51u16, 50u16, 49u16],
            12957u16 => &[51u16, 47u16],
            12958u16 => &[51u16, 47u16],
            12959u16 => &[51u16, 53u16],
            12960u16 => &[51u16, 53u16],
            12961u16 => &[57u16, 50u16],
            12962u16 => &[57u16, 50u16],
            12963u16 => &[41u16, 46u16, 47u16],
            12964u16 => &[41u16, 46u16, 47u16],
            12965u16 => &[54u16, 44u16, 53u16],
            12966u16 => &[54u16, 44u16, 53u16],
            12967u16 => &[44u16, 50u16, 45u16],
            12968u16 => &[44u16, 50u16, 45u16],
            12969u16 => &[46u16, 50u16, 49u16],
            12970u16 => &[46u16, 50u16, 49u16],
            12971u16 => &[51u16, 56u16],
            12972u16 => &[51u16, 56u16],
            12973u16 => &[51u16, 52u16, 45u16],
            12974u16 => &[51u16, 52u16, 45u16],
            12975u16 => &[51u16, 42u16, 49u16],
            12976u16 => &[51u16, 42u16, 49u16],
            12977u16 => &[51u16, 49u16],
            12978u16 => &[51u16, 49u16],
            12979u16 => &[51u16, 45u16],
            12980u16 => &[51u16, 45u16],
            12981u16 => &[41u16, 42u16],
            12982u16 => &[41u16, 42u16],
            12983u16 => &[43u16, 44u16, 45u16],
            12984u16 => &[43u16, 44u16, 45u16],
            12985u16 => &[41u16, 46u16, 47u16],
            12986u16 => &[41u16, 46u16, 47u16],
            12987u16 => &[48u16, 42u16, 49u16],
            12988u16 => &[48u16, 42u16, 49u16],
            12989u16 => &[44u16, 50u16, 45u16],
            12990u16 => &[44u16, 50u16, 45u16],
            12991u16 => &[51u16, 52u16],
            12992u16 => &[51u16, 52u16],
            12993u16 => &[51u16, 50u16, 49u16],
            12994u16 => &[51u16, 50u16, 49u16],
            12995u16 => &[51u16, 52u16, 45u16],
            12996u16 => &[51u16, 52u16, 45u16],
            12997u16 => &[51u16, 53u16],
            12998u16 => &[51u16, 53u16],
            12999u16 => &[51u16, 49u16],
            13000u16 => &[51u16, 49u16],
            13001u16 => &[54u16, 52u16],
            13002u16 => &[54u16, 52u16],
            13003u16 => &[54u16, 44u16, 53u16],
            13004u16 => &[54u16, 44u16, 53u16],
            13005u16 => &[43u16, 46u16, 49u16],
            13006u16 => &[43u16, 46u16, 49u16],
            13007u16 => &[46u16, 50u16, 49u16],
            13008u16 => &[46u16, 50u16, 49u16],
            13009u16 => &[55u16, 52u16, 45u16],
            13010u16 => &[55u16, 52u16, 45u16],
            13011u16 => &[51u16, 42u16],
            13012u16 => &[51u16, 42u16],
            13013u16 => &[51u16, 42u16, 49u16],
            13014u16 => &[51u16, 42u16, 49u16],
            13015u16 => &[51u16, 50u16, 45u16],
            13016u16 => &[51u16, 50u16, 45u16],
            13017u16 => &[51u16, 45u16],
            13018u16 => &[51u16, 45u16],
            13019u16 => &[51u16, 47u16],
            13020u16 => &[51u16, 47u16],
            13021u16 => &[43u16, 56u16],
            13022u16 => &[43u16, 56u16],
            13023u16 => &[43u16, 46u16, 49u16],
            13024u16 => &[43u16, 46u16, 49u16],
            13025u16 => &[43u16, 44u16, 45u16],
            13026u16 => &[43u16, 44u16, 45u16],
            13027u16 => &[55u16, 52u16, 45u16],
            13028u16 => &[55u16, 52u16, 45u16],
            13029u16 => &[48u16, 42u16, 49u16],
            13030u16 => &[48u16, 42u16, 49u16],
            13031u16 => &[51u16, 50u16],
            13032u16 => &[51u16, 50u16],
            13033u16 => &[51u16, 50u16, 45u16],
            13034u16 => &[51u16, 50u16, 45u16],
            13035u16 => &[51u16, 50u16, 49u16],
            13036u16 => &[51u16, 50u16, 49u16],
            13037u16 => &[51u16, 47u16],
            13038u16 => &[51u16, 47u16],
            13039u16 => &[51u16, 53u16],
            13040u16 => &[51u16, 53u16],
            13041u16 => &[57u16, 50u16],
            13042u16 => &[57u16, 50u16],
            13043u16 => &[41u16, 46u16, 47u16],
            13044u16 => &[41u16, 46u16, 47u16],
            13045u16 => &[54u16, 44u16, 53u16],
            13046u16 => &[54u16, 44u16, 53u16],
            13047u16 => &[44u16, 50u16, 45u16],
            13048u16 => &[44u16, 50u16, 45u16],
            13049u16 => &[46u16, 50u16, 49u16],
            13050u16 => &[46u16, 50u16, 49u16],
            13051u16 => &[51u16, 56u16],
            13052u16 => &[51u16, 56u16],
            13053u16 => &[51u16, 52u16, 45u16],
            13054u16 => &[51u16, 52u16, 45u16],
            13055u16 => &[51u16, 42u16, 49u16],
            13056u16 => &[51u16, 42u16, 49u16],
            13057u16 => &[51u16, 49u16],
            13058u16 => &[51u16, 49u16],
            13059u16 => &[51u16, 45u16],
            13060u16 => &[51u16, 45u16],
            13061u16 => &[41u16, 42u16],
            13062u16 => &[41u16, 42u16],
            13063u16 => &[43u16, 44u16, 45u16],
            13064u16 => &[43u16, 44u16, 45u16],
            13065u16 => &[41u16, 46u16, 47u16],
            13066u16 => &[41u16, 46u16, 47u16],
            13067u16 => &[48u16, 42u16, 49u16],
            13068u16 => &[48u16, 42u16, 49u16],
            13069u16 => &[44u16, 50u16, 45u16],
            13070u16 => &[44u16, 50u16, 45u16],
            13071u16 => &[51u16, 52u16],
            13072u16 => &[51u16, 52u16],
            13073u16 => &[51u16, 50u16, 49u16],
            13074u16 => &[51u16, 50u16, 49u16],
            13075u16 => &[51u16, 52u16, 45u16],
            13076u16 => &[51u16, 52u16, 45u16],
            13077u16 => &[51u16, 53u16],
            13078u16 => &[51u16, 53u16],
            13079u16 => &[51u16, 49u16],
            13080u16 => &[51u16, 49u16],
            13081u16 => &[54u16, 52u16],
            13082u16 => &[54u16, 52u16],
            13083u16 => &[54u16, 44u16, 53u16],
            13084u16 => &[54u16, 44u16, 53u16],
            13085u16 => &[43u16, 46u16, 49u16],
            13086u16 => &[43u16, 46u16, 49u16],
            13087u16 => &[46u16, 50u16, 49u16],
            13088u16 => &[46u16, 50u16, 49u16],
            13089u16 => &[55u16, 52u16, 45u16],
            13090u16 => &[55u16, 52u16, 45u16],
            13091u16 => &[51u16, 42u16],
            13092u16 => &[51u16, 42u16],
            13093u16 => &[51u16, 42u16, 49u16],
            13094u16 => &[51u16, 42u16, 49u16],
            13095u16 => &[51u16, 50u16, 45u16],
            13096u16 => &[51u16, 50u16, 45u16],
            13097u16 => &[51u16, 45u16],
            13098u16 => &[51u16, 45u16],
            13099u16 => &[51u16, 47u16],
            13100u16 => &[51u16, 47u16],
            13101u16 => &[43u16, 56u16],
            13102u16 => &[43u16, 56u16],
            13103u16 => &[43u16, 46u16, 49u16],
            13104u16 => &[43u16, 46u16, 49u16],
            13105u16 => &[43u16, 44u16, 45u16],
            13106u16 => &[43u16, 44u16, 45u16],
            13107u16 => &[55u16, 52u16, 45u16],
            13108u16 => &[55u16, 52u16, 45u16],
            13109u16 => &[48u16, 42u16, 49u16],
            13110u16 => &[48u16, 42u16, 49u16],
            13111u16 => &[51u16, 50u16],
            13112u16 => &[51u16, 50u16],
            13113u16 => &[51u16, 50u16, 45u16],
            13114u16 => &[51u16, 50u16, 45u16],
            13115u16 => &[51u16, 50u16, 49u16],
            13116u16 => &[51u16, 50u16, 49u16],
            13117u16 => &[51u16, 47u16],
            13118u16 => &[51u16, 47u16],
            13119u16 => &[51u16, 53u16],
            13120u16 => &[51u16, 53u16],
            13121u16 => &[57u16, 50u16],
            13122u16 => &[57u16, 50u16],
            13123u16 => &[41u16, 46u16, 47u16],
            13124u16 => &[41u16, 46u16, 47u16],
            13125u16 => &[54u16, 44u16, 53u16],
            13126u16 => &[54u16, 44u16, 53u16],
            13127u16 => &[44u16, 50u16, 45u16],
            13128u16 => &[44u16, 50u16, 45u16],
            13129u16 => &[46u16, 50u16, 49u16],
            13130u16 => &[46u16, 50u16, 49u16],
            13131u16 => &[51u16, 56u16],
            13132u16 => &[51u16, 56u16],
            13133u16 => &[51u16, 52u16, 45u16],
            13134u16 => &[51u16, 52u16, 45u16],
            13135u16 => &[51u16, 42u16, 49u16],
            13136u16 => &[51u16, 42u16, 49u16],
            13137u16 => &[51u16, 49u16],
            13138u16 => &[51u16, 49u16],
            13139u16 => &[51u16, 45u16],
            13140u16 => &[51u16, 45u16],
            13141u16 => &[41u16, 42u16],
            13142u16 => &[41u16, 42u16],
            13143u16 => &[43u16, 44u16, 45u16],
            13144u16 => &[43u16, 44u16, 45u16],
            13145u16 => &[41u16, 46u16, 47u16],
            13146u16 => &[41u16, 46u16, 47u16],
            13147u16 => &[48u16, 42u16, 49u16],
            13148u16 => &[48u16, 42u16, 49u16],
            13149u16 => &[44u16, 50u16, 45u16],
            13150u16 => &[44u16, 50u16, 45u16],
            13151u16 => &[51u16, 52u16],
            13152u16 => &[51u16, 52u16],
            13153u16 => &[51u16, 50u16, 49u16],
            13154u16 => &[51u16, 50u16, 49u16],
            13155u16 => &[51u16, 52u16, 45u16],
            13156u16 => &[51u16, 52u16, 45u16],
            13157u16 => &[51u16, 53u16],
            13158u16 => &[51u16, 53u16],
            13159u16 => &[51u16, 49u16],
            13160u16 => &[51u16, 49u16],
            13161u16 => &[54u16, 52u16],
            13162u16 => &[54u16, 52u16],
            13163u16 => &[54u16, 44u16, 53u16],
            13164u16 => &[54u16, 44u16, 53u16],
            13165u16 => &[43u16, 46u16, 49u16],
            13166u16 => &[43u16, 46u16, 49u16],
            13167u16 => &[46u16, 50u16, 49u16],
            13168u16 => &[46u16, 50u16, 49u16],
            13169u16 => &[55u16, 52u16, 45u16],
            13170u16 => &[55u16, 52u16, 45u16],
            13171u16 => &[51u16, 42u16],
            13172u16 => &[51u16, 42u16],
            13173u16 => &[51u16, 42u16, 49u16],
            13174u16 => &[51u16, 42u16, 49u16],
            13175u16 => &[51u16, 50u16, 45u16],
            13176u16 => &[51u16, 50u16, 45u16],
            13177u16 => &[51u16, 45u16],
            13178u16 => &[51u16, 45u16],
            13179u16 => &[51u16, 47u16],
            13180u16 => &[51u16, 47u16],
            13181u16 => &[43u16, 56u16],
            13182u16 => &[43u16, 56u16],
            13183u16 => &[43u16, 46u16, 49u16],
            13184u16 => &[43u16, 46u16, 49u16],
            13185u16 => &[43u16, 44u16, 45u16],
            13186u16 => &[43u16, 44u16, 45u16],
            13187u16 => &[55u16, 52u16, 45u16],
            13188u16 => &[55u16, 52u16, 45u16],
            13189u16 => &[48u16, 42u16, 49u16],
            13190u16 => &[48u16, 42u16, 49u16],
            13191u16 => &[51u16, 50u16],
            13192u16 => &[51u16, 50u16],
            13193u16 => &[51u16, 50u16, 45u16],
            13194u16 => &[51u16, 50u16, 45u16],
            13195u16 => &[51u16, 50u16, 49u16],
            13196u16 => &[51u16, 50u16, 49u16],
            13197u16 => &[51u16, 47u16],
            13198u16 => &[51u16, 47u16],
            13199u16 => &[51u16, 53u16],
            13200u16 => &[51u16, 53u16],
            13201u16 => &[57u16, 50u16],
            13202u16 => &[57u16, 50u16],
            13203u16 => &[41u16, 46u16, 47u16],
            13204u16 => &[41u16, 46u16, 47u16],
            13205u16 => &[54u16, 44u16, 53u16],
            13206u16 => &[54u16, 44u16, 53u16],
            13207u16 => &[44u16, 50u16, 45u16],
            13208u16 => &[44u16, 50u16, 45u16],
            13209u16 => &[46u16, 50u16, 49u16],
            13210u16 => &[46u16, 50u16, 49u16],
            13211u16 => &[51u16, 56u16],
            13212u16 => &[51u16, 56u16],
            13213u16 => &[51u16, 52u16, 45u16],
            13214u16 => &[51u16, 52u16, 45u16],
            13215u16 => &[51u16, 42u16, 49u16],
            13216u16 => &[51u16, 42u16, 49u16],
            13217u16 => &[51u16, 49u16],
            13218u16 => &[51u16, 49u16],
            13219u16 => &[51u16, 45u16],
            13220u16 => &[51u16, 45u16],
            13221u16 => &[41u16, 42u16],
            13222u16 => &[41u16, 42u16],
            13223u16 => &[43u16, 44u16, 45u16],
            13224u16 => &[43u16, 44u16, 45u16],
            13225u16 => &[41u16, 46u16, 47u16],
            13226u16 => &[41u16, 46u16, 47u16],
            13227u16 => &[48u16, 42u16, 49u16],
            13228u16 => &[48u16, 42u16, 49u16],
            13229u16 => &[44u16, 50u16, 45u16],
            13230u16 => &[44u16, 50u16, 45u16],
            13231u16 => &[51u16, 52u16],
            13232u16 => &[51u16, 52u16],
            13233u16 => &[51u16, 50u16, 49u16],
            13234u16 => &[51u16, 50u16, 49u16],
            13235u16 => &[51u16, 52u16, 45u16],
            13236u16 => &[51u16, 52u16, 45u16],
            13237u16 => &[51u16, 53u16],
            13238u16 => &[51u16, 53u16],
            13239u16 => &[51u16, 49u16],
            13240u16 => &[51u16, 49u16],
            13241u16 => &[54u16, 52u16],
            13242u16 => &[54u16, 52u16],
            13243u16 => &[54u16, 44u16, 53u16],
            13244u16 => &[54u16, 44u16, 53u16],
            13245u16 => &[43u16, 46u16, 49u16],
            13246u16 => &[43u16, 46u16, 49u16],
            13247u16 => &[46u16, 50u16, 49u16],
            13248u16 => &[46u16, 50u16, 49u16],
            13249u16 => &[55u16, 52u16, 45u16],
            13250u16 => &[55u16, 52u16, 45u16],
            13251u16 => &[51u16, 42u16],
            13252u16 => &[51u16, 42u16],
            13253u16 => &[51u16, 42u16, 49u16],
            13254u16 => &[51u16, 42u16, 49u16],
            13255u16 => &[51u16, 50u16, 45u16],
            13256u16 => &[51u16, 50u16, 45u16],
            13257u16 => &[51u16, 45u16],
            13258u16 => &[51u16, 45u16],
            13259u16 => &[51u16, 47u16],
            13260u16 => &[51u16, 47u16],
            13261u16 => &[43u16, 56u16],
            13262u16 => &[43u16, 56u16],
            13263u16 => &[43u16, 46u16, 49u16],
            13264u16 => &[43u16, 46u16, 49u16],
            13265u16 => &[43u16, 44u16, 45u16],
            13266u16 => &[43u16, 44u16, 45u16],
            13267u16 => &[55u16, 52u16, 45u16],
            13268u16 => &[55u16, 52u16, 45u16],
            13269u16 => &[48u16, 42u16, 49u16],
            13270u16 => &[48u16, 42u16, 49u16],
            13271u16 => &[51u16, 50u16],
            13272u16 => &[51u16, 50u16],
            13273u16 => &[51u16, 50u16, 45u16],
            13274u16 => &[51u16, 50u16, 45u16],
            13275u16 => &[51u16, 50u16, 49u16],
            13276u16 => &[51u16, 50u16, 49u16],
            13277u16 => &[51u16, 47u16],
            13278u16 => &[51u16, 47u16],
            13279u16 => &[51u16, 53u16],
            13280u16 => &[51u16, 53u16],
            13281u16 => &[57u16, 50u16],
            13282u16 => &[57u16, 50u16],
            13283u16 => &[41u16, 46u16, 47u16],
            13284u16 => &[41u16, 46u16, 47u16],
            13285u16 => &[54u16, 44u16, 53u16],
            13286u16 => &[54u16, 44u16, 53u16],
            13287u16 => &[44u16, 50u16, 45u16],
            13288u16 => &[44u16, 50u16, 45u16],
            13289u16 => &[46u16, 50u16, 49u16],
            13290u16 => &[46u16, 50u16, 49u16],
            13291u16 => &[51u16, 56u16],
            13292u16 => &[51u16, 56u16],
            13293u16 => &[51u16, 52u16, 45u16],
            13294u16 => &[51u16, 52u16, 45u16],
            13295u16 => &[51u16, 42u16, 49u16],
            13296u16 => &[51u16, 42u16, 49u16],
            13297u16 => &[51u16, 49u16],
            13298u16 => &[51u16, 49u16],
            13299u16 => &[51u16, 45u16],
            13300u16 => &[51u16, 45u16],
            13301u16 => &[41u16, 42u16],
            13302u16 => &[41u16, 42u16],
            13303u16 => &[43u16, 44u16, 45u16],
            13304u16 => &[43u16, 44u16, 45u16],
            13305u16 => &[41u16, 46u16, 47u16],
            13306u16 => &[41u16, 46u16, 47u16],
            13307u16 => &[48u16, 42u16, 49u16],
            13308u16 => &[48u16, 42u16, 49u16],
            13309u16 => &[44u16, 50u16, 45u16],
            13310u16 => &[44u16, 50u16, 45u16],
            13311u16 => &[51u16, 52u16],
            13312u16 => &[51u16, 52u16],
            13313u16 => &[51u16, 50u16, 49u16],
            13314u16 => &[51u16, 50u16, 49u16],
            13315u16 => &[51u16, 52u16, 45u16],
            13316u16 => &[51u16, 52u16, 45u16],
            13317u16 => &[51u16, 53u16],
            13318u16 => &[51u16, 53u16],
            13319u16 => &[51u16, 49u16],
            13320u16 => &[51u16, 49u16],
            13321u16 => &[54u16, 52u16],
            13322u16 => &[54u16, 52u16],
            13323u16 => &[54u16, 44u16, 53u16],
            13324u16 => &[54u16, 44u16, 53u16],
            13325u16 => &[43u16, 46u16, 49u16],
            13326u16 => &[43u16, 46u16, 49u16],
            13327u16 => &[46u16, 50u16, 49u16],
            13328u16 => &[46u16, 50u16, 49u16],
            13329u16 => &[55u16, 52u16, 45u16],
            13330u16 => &[55u16, 52u16, 45u16],
            13331u16 => &[51u16, 42u16],
            13332u16 => &[51u16, 42u16],
            13333u16 => &[51u16, 42u16, 49u16],
            13334u16 => &[51u16, 42u16, 49u16],
            13335u16 => &[51u16, 50u16, 45u16],
            13336u16 => &[51u16, 50u16, 45u16],
            13337u16 => &[51u16, 45u16],
            13338u16 => &[51u16, 45u16],
            13339u16 => &[51u16, 47u16],
            13340u16 => &[51u16, 47u16],
            13341u16 => &[43u16, 56u16],
            13342u16 => &[43u16, 56u16],
            13343u16 => &[43u16, 46u16, 49u16],
            13344u16 => &[43u16, 46u16, 49u16],
            13345u16 => &[43u16, 44u16, 45u16],
            13346u16 => &[43u16, 44u16, 45u16],
            13347u16 => &[55u16, 52u16, 45u16],
            13348u16 => &[55u16, 52u16, 45u16],
            13349u16 => &[48u16, 42u16, 49u16],
            13350u16 => &[48u16, 42u16, 49u16],
            13351u16 => &[51u16, 50u16],
            13352u16 => &[51u16, 50u16],
            13353u16 => &[51u16, 50u16, 45u16],
            13354u16 => &[51u16, 50u16, 45u16],
            13355u16 => &[51u16, 50u16, 49u16],
            13356u16 => &[51u16, 50u16, 49u16],
            13357u16 => &[51u16, 47u16],
            13358u16 => &[51u16, 47u16],
            13359u16 => &[51u16, 53u16],
            13360u16 => &[51u16, 53u16],
            13361u16 => &[57u16, 50u16],
            13362u16 => &[57u16, 50u16],
            13363u16 => &[41u16, 46u16, 47u16],
            13364u16 => &[41u16, 46u16, 47u16],
            13365u16 => &[54u16, 44u16, 53u16],
            13366u16 => &[54u16, 44u16, 53u16],
            13367u16 => &[44u16, 50u16, 45u16],
            13368u16 => &[44u16, 50u16, 45u16],
            13369u16 => &[46u16, 50u16, 49u16],
            13370u16 => &[46u16, 50u16, 49u16],
            13371u16 => &[51u16, 56u16],
            13372u16 => &[51u16, 56u16],
            13373u16 => &[51u16, 52u16, 45u16],
            13374u16 => &[51u16, 52u16, 45u16],
            13375u16 => &[51u16, 42u16, 49u16],
            13376u16 => &[51u16, 42u16, 49u16],
            13377u16 => &[51u16, 49u16],
            13378u16 => &[51u16, 49u16],
            13379u16 => &[51u16, 45u16],
            13380u16 => &[51u16, 45u16],
            13381u16 => &[41u16, 42u16],
            13382u16 => &[41u16, 42u16],
            13383u16 => &[43u16, 44u16, 45u16],
            13384u16 => &[43u16, 44u16, 45u16],
            13385u16 => &[41u16, 46u16, 47u16],
            13386u16 => &[41u16, 46u16, 47u16],
            13387u16 => &[48u16, 42u16, 49u16],
            13388u16 => &[48u16, 42u16, 49u16],
            13389u16 => &[44u16, 50u16, 45u16],
            13390u16 => &[44u16, 50u16, 45u16],
            13391u16 => &[51u16, 52u16],
            13392u16 => &[51u16, 52u16],
            13393u16 => &[51u16, 50u16, 49u16],
            13394u16 => &[51u16, 50u16, 49u16],
            13395u16 => &[51u16, 52u16, 45u16],
            13396u16 => &[51u16, 52u16, 45u16],
            13397u16 => &[51u16, 53u16],
            13398u16 => &[51u16, 53u16],
            13399u16 => &[51u16, 49u16],
            13400u16 => &[51u16, 49u16],
            13401u16 => &[54u16, 52u16],
            13402u16 => &[54u16, 52u16],
            13403u16 => &[54u16, 44u16, 53u16],
            13404u16 => &[54u16, 44u16, 53u16],
            13405u16 => &[43u16, 46u16, 49u16],
            13406u16 => &[43u16, 46u16, 49u16],
            13407u16 => &[46u16, 50u16, 49u16],
            13408u16 => &[46u16, 50u16, 49u16],
            13409u16 => &[55u16, 52u16, 45u16],
            13410u16 => &[55u16, 52u16, 45u16],
            13411u16 => &[51u16, 42u16],
            13412u16 => &[51u16, 42u16],
            13413u16 => &[51u16, 42u16, 49u16],
            13414u16 => &[51u16, 42u16, 49u16],
            13415u16 => &[51u16, 50u16, 45u16],
            13416u16 => &[51u16, 50u16, 45u16],
            13417u16 => &[51u16, 45u16],
            13418u16 => &[51u16, 45u16],
            13419u16 => &[51u16, 47u16],
            13420u16 => &[51u16, 47u16],
            13421u16 => &[43u16, 56u16],
            13422u16 => &[43u16, 56u16],
            13423u16 => &[43u16, 46u16, 49u16],
            13424u16 => &[43u16, 46u16, 49u16],
            13425u16 => &[43u16, 44u16, 45u16],
            13426u16 => &[43u16, 44u16, 45u16],
            13427u16 => &[55u16, 52u16, 45u16],
            13428u16 => &[55u16, 52u16, 45u16],
            13429u16 => &[48u16, 42u16, 49u16],
            13430u16 => &[48u16, 42u16, 49u16],
            13431u16 => &[51u16, 50u16],
            13432u16 => &[51u16, 50u16],
            13433u16 => &[51u16, 50u16, 45u16],
            13434u16 => &[51u16, 50u16, 45u16],
            13435u16 => &[51u16, 50u16, 49u16],
            13436u16 => &[51u16, 50u16, 49u16],
            13437u16 => &[51u16, 47u16],
            13438u16 => &[51u16, 47u16],
            13439u16 => &[51u16, 53u16],
            13440u16 => &[51u16, 53u16],
            13441u16 => &[57u16, 50u16],
            13442u16 => &[57u16, 50u16],
            13443u16 => &[41u16, 46u16, 47u16],
            13444u16 => &[41u16, 46u16, 47u16],
            13445u16 => &[54u16, 44u16, 53u16],
            13446u16 => &[54u16, 44u16, 53u16],
            13447u16 => &[44u16, 50u16, 45u16],
            13448u16 => &[44u16, 50u16, 45u16],
            13449u16 => &[46u16, 50u16, 49u16],
            13450u16 => &[46u16, 50u16, 49u16],
            13451u16 => &[51u16, 56u16],
            13452u16 => &[51u16, 56u16],
            13453u16 => &[51u16, 52u16, 45u16],
            13454u16 => &[51u16, 52u16, 45u16],
            13455u16 => &[51u16, 42u16, 49u16],
            13456u16 => &[51u16, 42u16, 49u16],
            13457u16 => &[51u16, 49u16],
            13458u16 => &[51u16, 49u16],
            13459u16 => &[51u16, 45u16],
            13460u16 => &[51u16, 45u16],
            13461u16 => &[41u16, 42u16],
            13462u16 => &[41u16, 42u16],
            13463u16 => &[43u16, 44u16, 45u16],
            13464u16 => &[43u16, 44u16, 45u16],
            13465u16 => &[41u16, 46u16, 47u16],
            13466u16 => &[41u16, 46u16, 47u16],
            13467u16 => &[48u16, 42u16, 49u16],
            13468u16 => &[48u16, 42u16, 49u16],
            13469u16 => &[44u16, 50u16, 45u16],
            13470u16 => &[44u16, 50u16, 45u16],
            13471u16 => &[51u16, 52u16],
            13472u16 => &[51u16, 52u16],
            13473u16 => &[51u16, 50u16, 49u16],
            13474u16 => &[51u16, 50u16, 49u16],
            13475u16 => &[51u16, 52u16, 45u16],
            13476u16 => &[51u16, 52u16, 45u16],
            13477u16 => &[51u16, 53u16],
            13478u16 => &[51u16, 53u16],
            13479u16 => &[51u16, 49u16],
            13480u16 => &[51u16, 49u16],
            13481u16 => &[54u16, 52u16],
            13482u16 => &[54u16, 52u16],
            13483u16 => &[54u16, 44u16, 53u16],
            13484u16 => &[54u16, 44u16, 53u16],
            13485u16 => &[43u16, 46u16, 49u16],
            13486u16 => &[43u16, 46u16, 49u16],
            13487u16 => &[46u16, 50u16, 49u16],
            13488u16 => &[46u16, 50u16, 49u16],
            13489u16 => &[55u16, 52u16, 45u16],
            13490u16 => &[55u16, 52u16, 45u16],
            13491u16 => &[51u16, 42u16],
            13492u16 => &[51u16, 42u16],
            13493u16 => &[51u16, 42u16, 49u16],
            13494u16 => &[51u16, 42u16, 49u16],
            13495u16 => &[51u16, 50u16, 45u16],
            13496u16 => &[51u16, 50u16, 45u16],
            13497u16 => &[51u16, 45u16],
            13498u16 => &[51u16, 45u16],
            13499u16 => &[51u16, 47u16],
            13500u16 => &[51u16, 47u16],
            13501u16 => &[43u16, 56u16],
            13502u16 => &[43u16, 56u16],
            13503u16 => &[43u16, 46u16, 49u16],
            13504u16 => &[43u16, 46u16, 49u16],
            13505u16 => &[43u16, 44u16, 45u16],
            13506u16 => &[43u16, 44u16, 45u16],
            13507u16 => &[55u16, 52u16, 45u16],
            13508u16 => &[55u16, 52u16, 45u16],
            13509u16 => &[48u16, 42u16, 49u16],
            13510u16 => &[48u16, 42u16, 49u16],
            13511u16 => &[51u16, 50u16],
            13512u16 => &[51u16, 50u16],
            13513u16 => &[51u16, 50u16, 45u16],
            13514u16 => &[51u16, 50u16, 45u16],
            13515u16 => &[51u16, 50u16, 49u16],
            13516u16 => &[51u16, 50u16, 49u16],
            13517u16 => &[51u16, 47u16],
            13518u16 => &[51u16, 47u16],
            13519u16 => &[51u16, 53u16],
            13520u16 => &[51u16, 53u16],
            13521u16 => &[57u16, 50u16],
            13522u16 => &[57u16, 50u16],
            13523u16 => &[41u16, 46u16, 47u16],
            13524u16 => &[41u16, 46u16, 47u16],
            13525u16 => &[54u16, 44u16, 53u16],
            13526u16 => &[54u16, 44u16, 53u16],
            13527u16 => &[44u16, 50u16, 45u16],
            13528u16 => &[44u16, 50u16, 45u16],
            13529u16 => &[46u16, 50u16, 49u16],
            13530u16 => &[46u16, 50u16, 49u16],
            13531u16 => &[51u16, 56u16],
            13532u16 => &[51u16, 56u16],
            13533u16 => &[51u16, 52u16, 45u16],
            13534u16 => &[51u16, 52u16, 45u16],
            13535u16 => &[51u16, 42u16, 49u16],
            13536u16 => &[51u16, 42u16, 49u16],
            13537u16 => &[51u16, 49u16],
            13538u16 => &[51u16, 49u16],
            13539u16 => &[51u16, 45u16],
            13540u16 => &[51u16, 45u16],
            13541u16 => &[41u16, 42u16],
            13542u16 => &[41u16, 42u16],
            13543u16 => &[43u16, 44u16, 45u16],
            13544u16 => &[43u16, 44u16, 45u16],
            13545u16 => &[41u16, 46u16, 47u16],
            13546u16 => &[41u16, 46u16, 47u16],
            13547u16 => &[48u16, 42u16, 49u16],
            13548u16 => &[48u16, 42u16, 49u16],
            13549u16 => &[44u16, 50u16, 45u16],
            13550u16 => &[44u16, 50u16, 45u16],
            13551u16 => &[51u16, 52u16],
            13552u16 => &[51u16, 52u16],
            13553u16 => &[51u16, 50u16, 49u16],
            13554u16 => &[51u16, 50u16, 49u16],
            13555u16 => &[51u16, 52u16, 45u16],
            13556u16 => &[51u16, 52u16, 45u16],
            13557u16 => &[51u16, 53u16],
            13558u16 => &[51u16, 53u16],
            13559u16 => &[51u16, 49u16],
            13560u16 => &[51u16, 49u16],
            13561u16 => &[54u16, 52u16],
            13562u16 => &[54u16, 52u16],
            13563u16 => &[54u16, 44u16, 53u16],
            13564u16 => &[54u16, 44u16, 53u16],
            13565u16 => &[43u16, 46u16, 49u16],
            13566u16 => &[43u16, 46u16, 49u16],
            13567u16 => &[46u16, 50u16, 49u16],
            13568u16 => &[46u16, 50u16, 49u16],
            13569u16 => &[55u16, 52u16, 45u16],
            13570u16 => &[55u16, 52u16, 45u16],
            13571u16 => &[51u16, 42u16],
            13572u16 => &[51u16, 42u16],
            13573u16 => &[51u16, 42u16, 49u16],
            13574u16 => &[51u16, 42u16, 49u16],
            13575u16 => &[51u16, 50u16, 45u16],
            13576u16 => &[51u16, 50u16, 45u16],
            13577u16 => &[51u16, 45u16],
            13578u16 => &[51u16, 45u16],
            13579u16 => &[51u16, 47u16],
            13580u16 => &[51u16, 47u16],
            13581u16 => &[43u16, 56u16],
            13582u16 => &[43u16, 56u16],
            13583u16 => &[43u16, 46u16, 49u16],
            13584u16 => &[43u16, 46u16, 49u16],
            13585u16 => &[43u16, 44u16, 45u16],
            13586u16 => &[43u16, 44u16, 45u16],
            13587u16 => &[55u16, 52u16, 45u16],
            13588u16 => &[55u16, 52u16, 45u16],
            13589u16 => &[48u16, 42u16, 49u16],
            13590u16 => &[48u16, 42u16, 49u16],
            13591u16 => &[51u16, 50u16],
            13592u16 => &[51u16, 50u16],
            13593u16 => &[51u16, 50u16, 45u16],
            13594u16 => &[51u16, 50u16, 45u16],
            13595u16 => &[51u16, 50u16, 49u16],
            13596u16 => &[51u16, 50u16, 49u16],
            13597u16 => &[51u16, 47u16],
            13598u16 => &[51u16, 47u16],
            13599u16 => &[51u16, 53u16],
            13600u16 => &[51u16, 53u16],
            13601u16 => &[57u16, 50u16],
            13602u16 => &[57u16, 50u16],
            13603u16 => &[41u16, 46u16, 47u16],
            13604u16 => &[41u16, 46u16, 47u16],
            13605u16 => &[54u16, 44u16, 53u16],
            13606u16 => &[54u16, 44u16, 53u16],
            13607u16 => &[44u16, 50u16, 45u16],
            13608u16 => &[44u16, 50u16, 45u16],
            13609u16 => &[46u16, 50u16, 49u16],
            13610u16 => &[46u16, 50u16, 49u16],
            13611u16 => &[51u16, 56u16],
            13612u16 => &[51u16, 56u16],
            13613u16 => &[51u16, 52u16, 45u16],
            13614u16 => &[51u16, 52u16, 45u16],
            13615u16 => &[51u16, 42u16, 49u16],
            13616u16 => &[51u16, 42u16, 49u16],
            13617u16 => &[51u16, 49u16],
            13618u16 => &[51u16, 49u16],
            13619u16 => &[51u16, 45u16],
            13620u16 => &[51u16, 45u16],
            13621u16 => &[41u16, 42u16],
            13622u16 => &[41u16, 42u16],
            13623u16 => &[43u16, 44u16, 45u16],
            13624u16 => &[43u16, 44u16, 45u16],
            13625u16 => &[41u16, 46u16, 47u16],
            13626u16 => &[41u16, 46u16, 47u16],
            13627u16 => &[48u16, 42u16, 49u16],
            13628u16 => &[48u16, 42u16, 49u16],
            13629u16 => &[44u16, 50u16, 45u16],
            13630u16 => &[44u16, 50u16, 45u16],
            13631u16 => &[51u16, 52u16],
            13632u16 => &[51u16, 52u16],
            13633u16 => &[51u16, 50u16, 49u16],
            13634u16 => &[51u16, 50u16, 49u16],
            13635u16 => &[51u16, 52u16, 45u16],
            13636u16 => &[51u16, 52u16, 45u16],
            13637u16 => &[51u16, 53u16],
            13638u16 => &[51u16, 53u16],
            13639u16 => &[51u16, 49u16],
            13640u16 => &[51u16, 49u16],
            13641u16 => &[54u16, 52u16],
            13642u16 => &[54u16, 52u16],
            13643u16 => &[54u16, 44u16, 53u16],
            13644u16 => &[54u16, 44u16, 53u16],
            13645u16 => &[43u16, 46u16, 49u16],
            13646u16 => &[43u16, 46u16, 49u16],
            13647u16 => &[46u16, 50u16, 49u16],
            13648u16 => &[46u16, 50u16, 49u16],
            13649u16 => &[55u16, 52u16, 45u16],
            13650u16 => &[55u16, 52u16, 45u16],
            13651u16 => &[51u16, 42u16],
            13652u16 => &[51u16, 42u16],
            13653u16 => &[51u16, 42u16, 49u16],
            13654u16 => &[51u16, 42u16, 49u16],
            13655u16 => &[51u16, 50u16, 45u16],
            13656u16 => &[51u16, 50u16, 45u16],
            13657u16 => &[51u16, 45u16],
            13658u16 => &[51u16, 45u16],
            13659u16 => &[51u16, 47u16],
            13660u16 => &[51u16, 47u16],
            13661u16 => &[43u16, 56u16],
            13662u16 => &[43u16, 56u16],
            13663u16 => &[43u16, 46u16, 49u16],
            13664u16 => &[43u16, 46u16, 49u16],
            13665u16 => &[43u16, 44u16, 45u16],
            13666u16 => &[43u16, 44u16, 45u16],
            13667u16 => &[55u16, 52u16, 45u16],
            13668u16 => &[55u16, 52u16, 45u16],
            13669u16 => &[48u16, 42u16, 49u16],
            13670u16 => &[48u16, 42u16, 49u16],
            13671u16 => &[51u16, 50u16],
            13672u16 => &[51u16, 50u16],
            13673u16 => &[51u16, 50u16, 45u16],
            13674u16 => &[51u16, 50u16, 45u16],
            13675u16 => &[51u16, 50u16, 49u16],
            13676u16 => &[51u16, 50u16, 49u16],
            13677u16 => &[51u16, 47u16],
            13678u16 => &[51u16, 47u16],
            13679u16 => &[51u16, 53u16],
            13680u16 => &[51u16, 53u16],
            13681u16 => &[57u16, 50u16],
            13682u16 => &[57u16, 50u16],
            13683u16 => &[41u16, 46u16, 47u16],
            13684u16 => &[41u16, 46u16, 47u16],
            13685u16 => &[54u16, 44u16, 53u16],
            13686u16 => &[54u16, 44u16, 53u16],
            13687u16 => &[44u16, 50u16, 45u16],
            13688u16 => &[44u16, 50u16, 45u16],
            13689u16 => &[46u16, 50u16, 49u16],
            13690u16 => &[46u16, 50u16, 49u16],
            13691u16 => &[51u16, 56u16],
            13692u16 => &[51u16, 56u16],
            13693u16 => &[51u16, 52u16, 45u16],
            13694u16 => &[51u16, 52u16, 45u16],
            13695u16 => &[51u16, 42u16, 49u16],
            13696u16 => &[51u16, 42u16, 49u16],
            13697u16 => &[51u16, 49u16],
            13698u16 => &[51u16, 49u16],
            13699u16 => &[51u16, 45u16],
            13700u16 => &[51u16, 45u16],
            13701u16 => &[41u16, 42u16],
            13702u16 => &[41u16, 42u16],
            13703u16 => &[43u16, 44u16, 45u16],
            13704u16 => &[43u16, 44u16, 45u16],
            13705u16 => &[41u16, 46u16, 47u16],
            13706u16 => &[41u16, 46u16, 47u16],
            13707u16 => &[48u16, 42u16, 49u16],
            13708u16 => &[48u16, 42u16, 49u16],
            13709u16 => &[44u16, 50u16, 45u16],
            13710u16 => &[44u16, 50u16, 45u16],
            13711u16 => &[51u16, 52u16],
            13712u16 => &[51u16, 52u16],
            13713u16 => &[51u16, 50u16, 49u16],
            13714u16 => &[51u16, 50u16, 49u16],
            13715u16 => &[51u16, 52u16, 45u16],
            13716u16 => &[51u16, 52u16, 45u16],
            13717u16 => &[51u16, 53u16],
            13718u16 => &[51u16, 53u16],
            13719u16 => &[51u16, 49u16],
            13720u16 => &[51u16, 49u16],
            13721u16 => &[54u16, 52u16],
            13722u16 => &[54u16, 52u16],
            13723u16 => &[54u16, 44u16, 53u16],
            13724u16 => &[54u16, 44u16, 53u16],
            13725u16 => &[43u16, 46u16, 49u16],
            13726u16 => &[43u16, 46u16, 49u16],
            13727u16 => &[46u16, 50u16, 49u16],
            13728u16 => &[46u16, 50u16, 49u16],
            13729u16 => &[55u16, 52u16, 45u16],
            13730u16 => &[55u16, 52u16, 45u16],
            13731u16 => &[51u16, 42u16],
            13732u16 => &[51u16, 42u16],
            13733u16 => &[51u16, 42u16, 49u16],
            13734u16 => &[51u16, 42u16, 49u16],
            13735u16 => &[51u16, 50u16, 45u16],
            13736u16 => &[51u16, 50u16, 45u16],
            13737u16 => &[51u16, 45u16],
            13738u16 => &[51u16, 45u16],
            13739u16 => &[51u16, 47u16],
            13740u16 => &[51u16, 47u16],
            13741u16 => &[43u16, 56u16],
            13742u16 => &[43u16, 56u16],
            13743u16 => &[43u16, 46u16, 49u16],
            13744u16 => &[43u16, 46u16, 49u16],
            13745u16 => &[43u16, 44u16, 45u16],
            13746u16 => &[43u16, 44u16, 45u16],
            13747u16 => &[55u16, 52u16, 45u16],
            13748u16 => &[55u16, 52u16, 45u16],
            13749u16 => &[48u16, 42u16, 49u16],
            13750u16 => &[48u16, 42u16, 49u16],
            13751u16 => &[51u16, 50u16],
            13752u16 => &[51u16, 50u16],
            13753u16 => &[51u16, 50u16, 45u16],
            13754u16 => &[51u16, 50u16, 45u16],
            13755u16 => &[51u16, 50u16, 49u16],
            13756u16 => &[51u16, 50u16, 49u16],
            13757u16 => &[51u16, 47u16],
            13758u16 => &[51u16, 47u16],
            13759u16 => &[51u16, 53u16],
            13760u16 => &[51u16, 53u16],
            13761u16 => &[57u16, 50u16],
            13762u16 => &[57u16, 50u16],
            13763u16 => &[41u16, 46u16, 47u16],
            13764u16 => &[41u16, 46u16, 47u16],
            13765u16 => &[54u16, 44u16, 53u16],
            13766u16 => &[54u16, 44u16, 53u16],
            13767u16 => &[44u16, 50u16, 45u16],
            13768u16 => &[44u16, 50u16, 45u16],
            13769u16 => &[46u16, 50u16, 49u16],
            13770u16 => &[46u16, 50u16, 49u16],
            13771u16 => &[51u16, 56u16],
            13772u16 => &[51u16, 56u16],
            13773u16 => &[51u16, 52u16, 45u16],
            13774u16 => &[51u16, 52u16, 45u16],
            13775u16 => &[51u16, 42u16, 49u16],
            13776u16 => &[51u16, 42u16, 49u16],
            13777u16 => &[51u16, 49u16],
            13778u16 => &[51u16, 49u16],
            13779u16 => &[51u16, 45u16],
            13780u16 => &[51u16, 45u16],
            13781u16 => &[41u16, 42u16],
            13782u16 => &[41u16, 42u16],
            13783u16 => &[43u16, 44u16, 45u16],
            13784u16 => &[43u16, 44u16, 45u16],
            13785u16 => &[41u16, 46u16, 47u16],
            13786u16 => &[41u16, 46u16, 47u16],
            13787u16 => &[48u16, 42u16, 49u16],
            13788u16 => &[48u16, 42u16, 49u16],
            13789u16 => &[44u16, 50u16, 45u16],
            13790u16 => &[44u16, 50u16, 45u16],
            13791u16 => &[51u16, 52u16],
            13792u16 => &[51u16, 52u16],
            13793u16 => &[51u16, 50u16, 49u16],
            13794u16 => &[51u16, 50u16, 49u16],
            13795u16 => &[51u16, 52u16, 45u16],
            13796u16 => &[51u16, 52u16, 45u16],
            13797u16 => &[51u16, 53u16],
            13798u16 => &[51u16, 53u16],
            13799u16 => &[51u16, 49u16],
            13800u16 => &[51u16, 49u16],
            13801u16 => &[54u16, 52u16],
            13802u16 => &[54u16, 52u16],
            13803u16 => &[54u16, 44u16, 53u16],
            13804u16 => &[54u16, 44u16, 53u16],
            13805u16 => &[43u16, 46u16, 49u16],
            13806u16 => &[43u16, 46u16, 49u16],
            13807u16 => &[46u16, 50u16, 49u16],
            13808u16 => &[46u16, 50u16, 49u16],
            13809u16 => &[55u16, 52u16, 45u16],
            13810u16 => &[55u16, 52u16, 45u16],
            13811u16 => &[51u16, 42u16],
            13812u16 => &[51u16, 42u16],
            13813u16 => &[51u16, 42u16, 49u16],
            13814u16 => &[51u16, 42u16, 49u16],
            13815u16 => &[51u16, 50u16, 45u16],
            13816u16 => &[51u16, 50u16, 45u16],
            13817u16 => &[51u16, 45u16],
            13818u16 => &[51u16, 45u16],
            13819u16 => &[51u16, 47u16],
            13820u16 => &[51u16, 47u16],
            13821u16 => &[43u16, 56u16],
            13822u16 => &[43u16, 56u16],
            13823u16 => &[43u16, 46u16, 49u16],
            13824u16 => &[43u16, 46u16, 49u16],
            13825u16 => &[43u16, 44u16, 45u16],
            13826u16 => &[43u16, 44u16, 45u16],
            13827u16 => &[55u16, 52u16, 45u16],
            13828u16 => &[55u16, 52u16, 45u16],
            13829u16 => &[48u16, 42u16, 49u16],
            13830u16 => &[48u16, 42u16, 49u16],
            13831u16 => &[51u16, 50u16],
            13832u16 => &[51u16, 50u16],
            13833u16 => &[51u16, 50u16, 45u16],
            13834u16 => &[51u16, 50u16, 45u16],
            13835u16 => &[51u16, 50u16, 49u16],
            13836u16 => &[51u16, 50u16, 49u16],
            13837u16 => &[51u16, 47u16],
            13838u16 => &[51u16, 47u16],
            13839u16 => &[51u16, 53u16],
            13840u16 => &[51u16, 53u16],
            13841u16 => &[57u16, 50u16],
            13842u16 => &[57u16, 50u16],
            13843u16 => &[41u16, 46u16, 47u16],
            13844u16 => &[41u16, 46u16, 47u16],
            13845u16 => &[54u16, 44u16, 53u16],
            13846u16 => &[54u16, 44u16, 53u16],
            13847u16 => &[44u16, 50u16, 45u16],
            13848u16 => &[44u16, 50u16, 45u16],
            13849u16 => &[46u16, 50u16, 49u16],
            13850u16 => &[46u16, 50u16, 49u16],
            13851u16 => &[51u16, 56u16],
            13852u16 => &[51u16, 56u16],
            13853u16 => &[51u16, 52u16, 45u16],
            13854u16 => &[51u16, 52u16, 45u16],
            13855u16 => &[51u16, 42u16, 49u16],
            13856u16 => &[51u16, 42u16, 49u16],
            13857u16 => &[51u16, 49u16],
            13858u16 => &[51u16, 49u16],
            13859u16 => &[51u16, 45u16],
            13860u16 => &[51u16, 45u16],
            13861u16 => &[41u16, 42u16],
            13862u16 => &[41u16, 42u16],
            13863u16 => &[43u16, 44u16, 45u16],
            13864u16 => &[43u16, 44u16, 45u16],
            13865u16 => &[41u16, 46u16, 47u16],
            13866u16 => &[41u16, 46u16, 47u16],
            13867u16 => &[48u16, 42u16, 49u16],
            13868u16 => &[48u16, 42u16, 49u16],
            13869u16 => &[44u16, 50u16, 45u16],
            13870u16 => &[44u16, 50u16, 45u16],
            13871u16 => &[51u16, 52u16],
            13872u16 => &[51u16, 52u16],
            13873u16 => &[51u16, 50u16, 49u16],
            13874u16 => &[51u16, 50u16, 49u16],
            13875u16 => &[51u16, 52u16, 45u16],
            13876u16 => &[51u16, 52u16, 45u16],
            13877u16 => &[51u16, 53u16],
            13878u16 => &[51u16, 53u16],
            13879u16 => &[51u16, 49u16],
            13880u16 => &[51u16, 49u16],
            13881u16 => &[54u16, 52u16],
            13882u16 => &[54u16, 52u16],
            13883u16 => &[54u16, 44u16, 53u16],
            13884u16 => &[54u16, 44u16, 53u16],
            13885u16 => &[43u16, 46u16, 49u16],
            13886u16 => &[43u16, 46u16, 49u16],
            13887u16 => &[46u16, 50u16, 49u16],
            13888u16 => &[46u16, 50u16, 49u16],
            13889u16 => &[55u16, 52u16, 45u16],
            13890u16 => &[55u16, 52u16, 45u16],
            13891u16 => &[51u16, 42u16],
            13892u16 => &[51u16, 42u16],
            13893u16 => &[51u16, 42u16, 49u16],
            13894u16 => &[51u16, 42u16, 49u16],
            13895u16 => &[51u16, 50u16, 45u16],
            13896u16 => &[51u16, 50u16, 45u16],
            13897u16 => &[51u16, 45u16],
            13898u16 => &[51u16, 45u16],
            13899u16 => &[51u16, 47u16],
            13900u16 => &[51u16, 47u16],
            13901u16 => &[43u16, 56u16],
            13902u16 => &[43u16, 56u16],
            13903u16 => &[43u16, 46u16, 49u16],
            13904u16 => &[43u16, 46u16, 49u16],
            13905u16 => &[43u16, 44u16, 45u16],
            13906u16 => &[43u16, 44u16, 45u16],
            13907u16 => &[55u16, 52u16, 45u16],
            13908u16 => &[55u16, 52u16, 45u16],
            13909u16 => &[48u16, 42u16, 49u16],
            13910u16 => &[48u16, 42u16, 49u16],
            13911u16 => &[51u16, 50u16],
            13912u16 => &[51u16, 50u16],
            13913u16 => &[51u16, 50u16, 45u16],
            13914u16 => &[51u16, 50u16, 45u16],
            13915u16 => &[51u16, 50u16, 49u16],
            13916u16 => &[51u16, 50u16, 49u16],
            13917u16 => &[51u16, 47u16],
            13918u16 => &[51u16, 47u16],
            13919u16 => &[51u16, 53u16],
            13920u16 => &[51u16, 53u16],
            13921u16 => &[57u16, 50u16],
            13922u16 => &[57u16, 50u16],
            13923u16 => &[41u16, 46u16, 47u16],
            13924u16 => &[41u16, 46u16, 47u16],
            13925u16 => &[54u16, 44u16, 53u16],
            13926u16 => &[54u16, 44u16, 53u16],
            13927u16 => &[44u16, 50u16, 45u16],
            13928u16 => &[44u16, 50u16, 45u16],
            13929u16 => &[46u16, 50u16, 49u16],
            13930u16 => &[46u16, 50u16, 49u16],
            13931u16 => &[51u16, 56u16],
            13932u16 => &[51u16, 56u16],
            13933u16 => &[51u16, 52u16, 45u16],
            13934u16 => &[51u16, 52u16, 45u16],
            13935u16 => &[51u16, 42u16, 49u16],
            13936u16 => &[51u16, 42u16, 49u16],
            13937u16 => &[51u16, 49u16],
            13938u16 => &[51u16, 49u16],
            13939u16 => &[51u16, 45u16],
            13940u16 => &[51u16, 45u16],
            13941u16 => &[201u16],
            13942u16 => &[201u16],
            13943u16 => &[51u16],
            13944u16 => &[51u16],
            13945u16 => &[0u16],
            13946u16 => &[0u16],
            13947u16 => &[201u16],
            13948u16 => &[201u16],
            13949u16 => &[51u16],
            13950u16 => &[51u16],
            13951u16 => &[0u16],
            13952u16 => &[0u16],
            13953u16 => &[201u16],
            13954u16 => &[201u16],
            13955u16 => &[51u16],
            13956u16 => &[51u16],
            13957u16 => &[0u16],
            13958u16 => &[0u16],
            13959u16 => &[201u16],
            13960u16 => &[201u16],
            13961u16 => &[51u16],
            13962u16 => &[51u16],
            13963u16 => &[0u16],
            13964u16 => &[0u16],
            13965u16 => &[201u16],
            13966u16 => &[201u16],
            13967u16 => &[51u16],
            13968u16 => &[51u16],
            13969u16 => &[0u16],
            13970u16 => &[0u16],
            13971u16 => &[201u16],
            13972u16 => &[201u16],
            13973u16 => &[51u16],
            13974u16 => &[51u16],
            13975u16 => &[0u16],
            13976u16 => &[0u16],
            13977u16 => &[201u16],
            13978u16 => &[201u16],
            13979u16 => &[51u16],
            13980u16 => &[51u16],
            13981u16 => &[0u16],
            13982u16 => &[0u16],
            13983u16 => &[201u16],
            13984u16 => &[201u16],
            13985u16 => &[51u16],
            13986u16 => &[51u16],
            13987u16 => &[0u16],
            13988u16 => &[0u16],
            13989u16 => &[201u16],
            13990u16 => &[201u16],
            13991u16 => &[51u16],
            13992u16 => &[51u16],
            13993u16 => &[0u16],
            13994u16 => &[0u16],
            13995u16 => &[201u16],
            13996u16 => &[201u16],
            13997u16 => &[51u16],
            13998u16 => &[51u16],
            13999u16 => &[0u16],
            14000u16 => &[0u16],
            14001u16 => &[201u16],
            14002u16 => &[201u16],
            14003u16 => &[51u16],
            14004u16 => &[51u16],
            14005u16 => &[0u16],
            14006u16 => &[0u16],
            14007u16 => &[201u16],
            14008u16 => &[201u16],
            14009u16 => &[51u16],
            14010u16 => &[51u16],
            14011u16 => &[0u16],
            14012u16 => &[0u16],
            14013u16 => &[201u16],
            14014u16 => &[201u16],
            14015u16 => &[51u16],
            14016u16 => &[51u16],
            14017u16 => &[0u16],
            14018u16 => &[0u16],
            14019u16 => &[140u16],
            14020u16 => &[141u16, 142u16, 143u16],
            14021u16 => &[141u16, 142u16, 143u16],
            14022u16 => &[140u16],
            14023u16 => &[141u16, 142u16, 143u16],
            14024u16 => &[141u16, 142u16, 143u16],
            14025u16 => &[],
            14026u16 => &[144u16],
            14027u16 => &[144u16],
            14028u16 => &[],
            14029u16 => &[144u16],
            14030u16 => &[144u16],
            14031u16 => &[140u16, 145u16],
            14032u16 => &[141u16, 142u16, 143u16, 145u16],
            14033u16 => &[141u16, 142u16, 143u16, 145u16],
            14034u16 => &[140u16, 145u16],
            14035u16 => &[141u16, 142u16, 143u16, 145u16],
            14036u16 => &[141u16, 142u16, 143u16, 145u16],
            14037u16 => &[146u16],
            14038u16 => &[144u16, 147u16],
            14039u16 => &[144u16, 147u16],
            14040u16 => &[146u16],
            14041u16 => &[144u16, 147u16],
            14042u16 => &[144u16, 147u16],
            14043u16 => &[140u16, 145u16],
            14044u16 => &[141u16, 142u16, 143u16, 145u16],
            14045u16 => &[141u16, 142u16, 143u16, 145u16],
            14046u16 => &[140u16, 145u16],
            14047u16 => &[141u16, 142u16, 143u16, 145u16],
            14048u16 => &[141u16, 142u16, 143u16, 145u16],
            14049u16 => &[146u16],
            14050u16 => &[144u16, 147u16],
            14051u16 => &[144u16, 147u16],
            14052u16 => &[146u16],
            14053u16 => &[144u16, 147u16],
            14054u16 => &[144u16, 147u16],
            14055u16 => &[140u16, 148u16],
            14056u16 => &[141u16, 142u16, 143u16, 148u16],
            14057u16 => &[141u16, 142u16, 143u16, 148u16],
            14058u16 => &[140u16, 148u16],
            14059u16 => &[141u16, 142u16, 143u16, 148u16],
            14060u16 => &[141u16, 142u16, 143u16, 148u16],
            14061u16 => &[149u16],
            14062u16 => &[144u16, 150u16],
            14063u16 => &[144u16, 150u16],
            14064u16 => &[149u16],
            14065u16 => &[144u16, 150u16],
            14066u16 => &[144u16, 150u16],
            14067u16 => &[140u16, 148u16, 145u16],
            14068u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14069u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14070u16 => &[140u16, 148u16, 145u16],
            14071u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14072u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14073u16 => &[151u16],
            14074u16 => &[144u16, 150u16, 147u16],
            14075u16 => &[144u16, 150u16, 147u16],
            14076u16 => &[151u16],
            14077u16 => &[144u16, 150u16, 147u16],
            14078u16 => &[144u16, 150u16, 147u16],
            14079u16 => &[140u16, 148u16, 145u16],
            14080u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14081u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14082u16 => &[140u16, 148u16, 145u16],
            14083u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14084u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14085u16 => &[151u16],
            14086u16 => &[144u16, 150u16, 147u16],
            14087u16 => &[144u16, 150u16, 147u16],
            14088u16 => &[151u16],
            14089u16 => &[144u16, 150u16, 147u16],
            14090u16 => &[144u16, 150u16, 147u16],
            14091u16 => &[140u16, 148u16],
            14092u16 => &[141u16, 142u16, 143u16, 148u16],
            14093u16 => &[141u16, 142u16, 143u16, 148u16],
            14094u16 => &[140u16, 148u16],
            14095u16 => &[141u16, 142u16, 143u16, 148u16],
            14096u16 => &[141u16, 142u16, 143u16, 148u16],
            14097u16 => &[149u16],
            14098u16 => &[144u16, 150u16],
            14099u16 => &[144u16, 150u16],
            14100u16 => &[149u16],
            14101u16 => &[144u16, 150u16],
            14102u16 => &[144u16, 150u16],
            14103u16 => &[140u16, 148u16, 145u16],
            14104u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14105u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14106u16 => &[140u16, 148u16, 145u16],
            14107u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14108u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14109u16 => &[151u16],
            14110u16 => &[144u16, 150u16, 147u16],
            14111u16 => &[144u16, 150u16, 147u16],
            14112u16 => &[151u16],
            14113u16 => &[144u16, 150u16, 147u16],
            14114u16 => &[144u16, 150u16, 147u16],
            14115u16 => &[140u16, 148u16, 145u16],
            14116u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14117u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14118u16 => &[140u16, 148u16, 145u16],
            14119u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14120u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14121u16 => &[151u16],
            14122u16 => &[144u16, 150u16, 147u16],
            14123u16 => &[144u16, 150u16, 147u16],
            14124u16 => &[151u16],
            14125u16 => &[144u16, 150u16, 147u16],
            14126u16 => &[144u16, 150u16, 147u16],
            14127u16 => &[140u16, 152u16],
            14128u16 => &[153u16, 142u16, 143u16],
            14129u16 => &[153u16, 142u16, 143u16],
            14130u16 => &[140u16, 152u16],
            14131u16 => &[153u16, 142u16, 143u16],
            14132u16 => &[153u16, 142u16, 143u16],
            14133u16 => &[154u16],
            14134u16 => &[153u16],
            14135u16 => &[153u16],
            14136u16 => &[154u16],
            14137u16 => &[153u16],
            14138u16 => &[153u16],
            14139u16 => &[140u16, 145u16, 152u16],
            14140u16 => &[153u16, 142u16, 143u16, 145u16],
            14141u16 => &[153u16, 142u16, 143u16, 145u16],
            14142u16 => &[140u16, 145u16, 152u16],
            14143u16 => &[153u16, 142u16, 143u16, 145u16],
            14144u16 => &[153u16, 142u16, 143u16, 145u16],
            14145u16 => &[146u16, 155u16],
            14146u16 => &[153u16, 147u16],
            14147u16 => &[153u16, 147u16],
            14148u16 => &[146u16, 155u16],
            14149u16 => &[153u16, 147u16],
            14150u16 => &[153u16, 147u16],
            14151u16 => &[140u16, 145u16, 152u16],
            14152u16 => &[153u16, 142u16, 143u16, 145u16],
            14153u16 => &[153u16, 142u16, 143u16, 145u16],
            14154u16 => &[140u16, 145u16, 152u16],
            14155u16 => &[153u16, 142u16, 143u16, 145u16],
            14156u16 => &[153u16, 142u16, 143u16, 145u16],
            14157u16 => &[146u16, 155u16],
            14158u16 => &[153u16, 147u16],
            14159u16 => &[153u16, 147u16],
            14160u16 => &[146u16, 155u16],
            14161u16 => &[153u16, 147u16],
            14162u16 => &[153u16, 147u16],
            14163u16 => &[140u16, 148u16, 152u16],
            14164u16 => &[153u16, 142u16, 143u16, 148u16],
            14165u16 => &[153u16, 142u16, 143u16, 148u16],
            14166u16 => &[140u16, 148u16, 152u16],
            14167u16 => &[153u16, 142u16, 143u16, 148u16],
            14168u16 => &[153u16, 142u16, 143u16, 148u16],
            14169u16 => &[149u16, 155u16],
            14170u16 => &[153u16, 150u16],
            14171u16 => &[153u16, 150u16],
            14172u16 => &[149u16, 155u16],
            14173u16 => &[153u16, 150u16],
            14174u16 => &[153u16, 150u16],
            14175u16 => &[140u16, 148u16, 145u16, 152u16],
            14176u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14177u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14178u16 => &[140u16, 148u16, 145u16, 152u16],
            14179u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14180u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14181u16 => &[151u16, 155u16],
            14182u16 => &[153u16, 150u16, 147u16],
            14183u16 => &[153u16, 150u16, 147u16],
            14184u16 => &[151u16, 155u16],
            14185u16 => &[153u16, 150u16, 147u16],
            14186u16 => &[153u16, 150u16, 147u16],
            14187u16 => &[140u16, 148u16, 145u16, 152u16],
            14188u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14189u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14190u16 => &[140u16, 148u16, 145u16, 152u16],
            14191u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14192u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14193u16 => &[151u16, 155u16],
            14194u16 => &[153u16, 150u16, 147u16],
            14195u16 => &[153u16, 150u16, 147u16],
            14196u16 => &[151u16, 155u16],
            14197u16 => &[153u16, 150u16, 147u16],
            14198u16 => &[153u16, 150u16, 147u16],
            14199u16 => &[140u16, 148u16, 152u16],
            14200u16 => &[153u16, 142u16, 143u16, 148u16],
            14201u16 => &[153u16, 142u16, 143u16, 148u16],
            14202u16 => &[140u16, 148u16, 152u16],
            14203u16 => &[153u16, 142u16, 143u16, 148u16],
            14204u16 => &[153u16, 142u16, 143u16, 148u16],
            14205u16 => &[149u16, 155u16],
            14206u16 => &[153u16, 150u16],
            14207u16 => &[153u16, 150u16],
            14208u16 => &[149u16, 155u16],
            14209u16 => &[153u16, 150u16],
            14210u16 => &[153u16, 150u16],
            14211u16 => &[140u16, 148u16, 145u16, 152u16],
            14212u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14213u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14214u16 => &[140u16, 148u16, 145u16, 152u16],
            14215u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14216u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14217u16 => &[151u16, 155u16],
            14218u16 => &[153u16, 150u16, 147u16],
            14219u16 => &[153u16, 150u16, 147u16],
            14220u16 => &[151u16, 155u16],
            14221u16 => &[153u16, 150u16, 147u16],
            14222u16 => &[153u16, 150u16, 147u16],
            14223u16 => &[140u16, 148u16, 145u16, 152u16],
            14224u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14225u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14226u16 => &[140u16, 148u16, 145u16, 152u16],
            14227u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14228u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14229u16 => &[151u16, 155u16],
            14230u16 => &[153u16, 150u16, 147u16],
            14231u16 => &[153u16, 150u16, 147u16],
            14232u16 => &[151u16, 155u16],
            14233u16 => &[153u16, 150u16, 147u16],
            14234u16 => &[153u16, 150u16, 147u16],
            14235u16 => &[140u16, 152u16],
            14236u16 => &[153u16, 142u16, 143u16],
            14237u16 => &[153u16, 142u16, 143u16],
            14238u16 => &[140u16, 152u16],
            14239u16 => &[153u16, 142u16, 143u16],
            14240u16 => &[153u16, 142u16, 143u16],
            14241u16 => &[154u16],
            14242u16 => &[153u16],
            14243u16 => &[153u16],
            14244u16 => &[154u16],
            14245u16 => &[153u16],
            14246u16 => &[153u16],
            14247u16 => &[140u16, 145u16, 152u16],
            14248u16 => &[153u16, 142u16, 143u16, 145u16],
            14249u16 => &[153u16, 142u16, 143u16, 145u16],
            14250u16 => &[140u16, 145u16, 152u16],
            14251u16 => &[153u16, 142u16, 143u16, 145u16],
            14252u16 => &[153u16, 142u16, 143u16, 145u16],
            14253u16 => &[146u16, 155u16],
            14254u16 => &[153u16, 147u16],
            14255u16 => &[153u16, 147u16],
            14256u16 => &[146u16, 155u16],
            14257u16 => &[153u16, 147u16],
            14258u16 => &[153u16, 147u16],
            14259u16 => &[140u16, 145u16, 152u16],
            14260u16 => &[153u16, 142u16, 143u16, 145u16],
            14261u16 => &[153u16, 142u16, 143u16, 145u16],
            14262u16 => &[140u16, 145u16, 152u16],
            14263u16 => &[153u16, 142u16, 143u16, 145u16],
            14264u16 => &[153u16, 142u16, 143u16, 145u16],
            14265u16 => &[146u16, 155u16],
            14266u16 => &[153u16, 147u16],
            14267u16 => &[153u16, 147u16],
            14268u16 => &[146u16, 155u16],
            14269u16 => &[153u16, 147u16],
            14270u16 => &[153u16, 147u16],
            14271u16 => &[140u16, 148u16, 152u16],
            14272u16 => &[153u16, 142u16, 143u16, 148u16],
            14273u16 => &[153u16, 142u16, 143u16, 148u16],
            14274u16 => &[140u16, 148u16, 152u16],
            14275u16 => &[153u16, 142u16, 143u16, 148u16],
            14276u16 => &[153u16, 142u16, 143u16, 148u16],
            14277u16 => &[149u16, 155u16],
            14278u16 => &[153u16, 150u16],
            14279u16 => &[153u16, 150u16],
            14280u16 => &[149u16, 155u16],
            14281u16 => &[153u16, 150u16],
            14282u16 => &[153u16, 150u16],
            14283u16 => &[140u16, 148u16, 145u16, 152u16],
            14284u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14285u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14286u16 => &[140u16, 148u16, 145u16, 152u16],
            14287u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14288u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14289u16 => &[151u16, 155u16],
            14290u16 => &[153u16, 150u16, 147u16],
            14291u16 => &[153u16, 150u16, 147u16],
            14292u16 => &[151u16, 155u16],
            14293u16 => &[153u16, 150u16, 147u16],
            14294u16 => &[153u16, 150u16, 147u16],
            14295u16 => &[140u16, 148u16, 145u16, 152u16],
            14296u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14297u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14298u16 => &[140u16, 148u16, 145u16, 152u16],
            14299u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14300u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14301u16 => &[151u16, 155u16],
            14302u16 => &[153u16, 150u16, 147u16],
            14303u16 => &[153u16, 150u16, 147u16],
            14304u16 => &[151u16, 155u16],
            14305u16 => &[153u16, 150u16, 147u16],
            14306u16 => &[153u16, 150u16, 147u16],
            14307u16 => &[140u16, 148u16, 152u16],
            14308u16 => &[153u16, 142u16, 143u16, 148u16],
            14309u16 => &[153u16, 142u16, 143u16, 148u16],
            14310u16 => &[140u16, 148u16, 152u16],
            14311u16 => &[153u16, 142u16, 143u16, 148u16],
            14312u16 => &[153u16, 142u16, 143u16, 148u16],
            14313u16 => &[149u16, 155u16],
            14314u16 => &[153u16, 150u16],
            14315u16 => &[153u16, 150u16],
            14316u16 => &[149u16, 155u16],
            14317u16 => &[153u16, 150u16],
            14318u16 => &[153u16, 150u16],
            14319u16 => &[140u16, 148u16, 145u16, 152u16],
            14320u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14321u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14322u16 => &[140u16, 148u16, 145u16, 152u16],
            14323u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14324u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14325u16 => &[151u16, 155u16],
            14326u16 => &[153u16, 150u16, 147u16],
            14327u16 => &[153u16, 150u16, 147u16],
            14328u16 => &[151u16, 155u16],
            14329u16 => &[153u16, 150u16, 147u16],
            14330u16 => &[153u16, 150u16, 147u16],
            14331u16 => &[140u16, 148u16, 145u16, 152u16],
            14332u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14333u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14334u16 => &[140u16, 148u16, 145u16, 152u16],
            14335u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14336u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14337u16 => &[151u16, 155u16],
            14338u16 => &[153u16, 150u16, 147u16],
            14339u16 => &[153u16, 150u16, 147u16],
            14340u16 => &[151u16, 155u16],
            14341u16 => &[153u16, 150u16, 147u16],
            14342u16 => &[153u16, 150u16, 147u16],
            14343u16 => &[140u16],
            14344u16 => &[141u16, 142u16, 143u16],
            14345u16 => &[141u16, 142u16, 143u16],
            14346u16 => &[140u16],
            14347u16 => &[141u16, 142u16, 143u16],
            14348u16 => &[141u16, 142u16, 143u16],
            14349u16 => &[],
            14350u16 => &[144u16],
            14351u16 => &[144u16],
            14352u16 => &[],
            14353u16 => &[144u16],
            14354u16 => &[144u16],
            14355u16 => &[140u16, 145u16],
            14356u16 => &[141u16, 142u16, 143u16, 145u16],
            14357u16 => &[141u16, 142u16, 143u16, 145u16],
            14358u16 => &[140u16, 145u16],
            14359u16 => &[141u16, 142u16, 143u16, 145u16],
            14360u16 => &[141u16, 142u16, 143u16, 145u16],
            14361u16 => &[146u16],
            14362u16 => &[144u16, 147u16],
            14363u16 => &[144u16, 147u16],
            14364u16 => &[146u16],
            14365u16 => &[144u16, 147u16],
            14366u16 => &[144u16, 147u16],
            14367u16 => &[140u16, 145u16],
            14368u16 => &[141u16, 142u16, 143u16, 145u16],
            14369u16 => &[141u16, 142u16, 143u16, 145u16],
            14370u16 => &[140u16, 145u16],
            14371u16 => &[141u16, 142u16, 143u16, 145u16],
            14372u16 => &[141u16, 142u16, 143u16, 145u16],
            14373u16 => &[146u16],
            14374u16 => &[144u16, 147u16],
            14375u16 => &[144u16, 147u16],
            14376u16 => &[146u16],
            14377u16 => &[144u16, 147u16],
            14378u16 => &[144u16, 147u16],
            14379u16 => &[140u16, 148u16],
            14380u16 => &[141u16, 142u16, 143u16, 148u16],
            14381u16 => &[141u16, 142u16, 143u16, 148u16],
            14382u16 => &[140u16, 148u16],
            14383u16 => &[141u16, 142u16, 143u16, 148u16],
            14384u16 => &[141u16, 142u16, 143u16, 148u16],
            14385u16 => &[149u16],
            14386u16 => &[144u16, 150u16],
            14387u16 => &[144u16, 150u16],
            14388u16 => &[149u16],
            14389u16 => &[144u16, 150u16],
            14390u16 => &[144u16, 150u16],
            14391u16 => &[140u16, 148u16, 145u16],
            14392u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14393u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14394u16 => &[140u16, 148u16, 145u16],
            14395u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14396u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14397u16 => &[151u16],
            14398u16 => &[144u16, 150u16, 147u16],
            14399u16 => &[144u16, 150u16, 147u16],
            14400u16 => &[151u16],
            14401u16 => &[144u16, 150u16, 147u16],
            14402u16 => &[144u16, 150u16, 147u16],
            14403u16 => &[140u16, 148u16, 145u16],
            14404u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14405u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14406u16 => &[140u16, 148u16, 145u16],
            14407u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14408u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14409u16 => &[151u16],
            14410u16 => &[144u16, 150u16, 147u16],
            14411u16 => &[144u16, 150u16, 147u16],
            14412u16 => &[151u16],
            14413u16 => &[144u16, 150u16, 147u16],
            14414u16 => &[144u16, 150u16, 147u16],
            14415u16 => &[140u16, 148u16],
            14416u16 => &[141u16, 142u16, 143u16, 148u16],
            14417u16 => &[141u16, 142u16, 143u16, 148u16],
            14418u16 => &[140u16, 148u16],
            14419u16 => &[141u16, 142u16, 143u16, 148u16],
            14420u16 => &[141u16, 142u16, 143u16, 148u16],
            14421u16 => &[149u16],
            14422u16 => &[144u16, 150u16],
            14423u16 => &[144u16, 150u16],
            14424u16 => &[149u16],
            14425u16 => &[144u16, 150u16],
            14426u16 => &[144u16, 150u16],
            14427u16 => &[140u16, 148u16, 145u16],
            14428u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14429u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14430u16 => &[140u16, 148u16, 145u16],
            14431u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14432u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14433u16 => &[151u16],
            14434u16 => &[144u16, 150u16, 147u16],
            14435u16 => &[144u16, 150u16, 147u16],
            14436u16 => &[151u16],
            14437u16 => &[144u16, 150u16, 147u16],
            14438u16 => &[144u16, 150u16, 147u16],
            14439u16 => &[140u16, 148u16, 145u16],
            14440u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14441u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14442u16 => &[140u16, 148u16, 145u16],
            14443u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14444u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14445u16 => &[151u16],
            14446u16 => &[144u16, 150u16, 147u16],
            14447u16 => &[144u16, 150u16, 147u16],
            14448u16 => &[151u16],
            14449u16 => &[144u16, 150u16, 147u16],
            14450u16 => &[144u16, 150u16, 147u16],
            14451u16 => &[140u16, 152u16],
            14452u16 => &[153u16, 142u16, 143u16],
            14453u16 => &[153u16, 142u16, 143u16],
            14454u16 => &[140u16, 152u16],
            14455u16 => &[153u16, 142u16, 143u16],
            14456u16 => &[153u16, 142u16, 143u16],
            14457u16 => &[154u16],
            14458u16 => &[153u16],
            14459u16 => &[153u16],
            14460u16 => &[154u16],
            14461u16 => &[153u16],
            14462u16 => &[153u16],
            14463u16 => &[140u16, 145u16, 152u16],
            14464u16 => &[153u16, 142u16, 143u16, 145u16],
            14465u16 => &[153u16, 142u16, 143u16, 145u16],
            14466u16 => &[140u16, 145u16, 152u16],
            14467u16 => &[153u16, 142u16, 143u16, 145u16],
            14468u16 => &[153u16, 142u16, 143u16, 145u16],
            14469u16 => &[146u16, 155u16],
            14470u16 => &[153u16, 147u16],
            14471u16 => &[153u16, 147u16],
            14472u16 => &[146u16, 155u16],
            14473u16 => &[153u16, 147u16],
            14474u16 => &[153u16, 147u16],
            14475u16 => &[140u16, 145u16, 152u16],
            14476u16 => &[153u16, 142u16, 143u16, 145u16],
            14477u16 => &[153u16, 142u16, 143u16, 145u16],
            14478u16 => &[140u16, 145u16, 152u16],
            14479u16 => &[153u16, 142u16, 143u16, 145u16],
            14480u16 => &[153u16, 142u16, 143u16, 145u16],
            14481u16 => &[146u16, 155u16],
            14482u16 => &[153u16, 147u16],
            14483u16 => &[153u16, 147u16],
            14484u16 => &[146u16, 155u16],
            14485u16 => &[153u16, 147u16],
            14486u16 => &[153u16, 147u16],
            14487u16 => &[140u16, 148u16, 152u16],
            14488u16 => &[153u16, 142u16, 143u16, 148u16],
            14489u16 => &[153u16, 142u16, 143u16, 148u16],
            14490u16 => &[140u16, 148u16, 152u16],
            14491u16 => &[153u16, 142u16, 143u16, 148u16],
            14492u16 => &[153u16, 142u16, 143u16, 148u16],
            14493u16 => &[149u16, 155u16],
            14494u16 => &[153u16, 150u16],
            14495u16 => &[153u16, 150u16],
            14496u16 => &[149u16, 155u16],
            14497u16 => &[153u16, 150u16],
            14498u16 => &[153u16, 150u16],
            14499u16 => &[140u16, 148u16, 145u16, 152u16],
            14500u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14501u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14502u16 => &[140u16, 148u16, 145u16, 152u16],
            14503u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14504u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14505u16 => &[151u16, 155u16],
            14506u16 => &[153u16, 150u16, 147u16],
            14507u16 => &[153u16, 150u16, 147u16],
            14508u16 => &[151u16, 155u16],
            14509u16 => &[153u16, 150u16, 147u16],
            14510u16 => &[153u16, 150u16, 147u16],
            14511u16 => &[140u16, 148u16, 145u16, 152u16],
            14512u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14513u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14514u16 => &[140u16, 148u16, 145u16, 152u16],
            14515u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14516u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14517u16 => &[151u16, 155u16],
            14518u16 => &[153u16, 150u16, 147u16],
            14519u16 => &[153u16, 150u16, 147u16],
            14520u16 => &[151u16, 155u16],
            14521u16 => &[153u16, 150u16, 147u16],
            14522u16 => &[153u16, 150u16, 147u16],
            14523u16 => &[140u16, 148u16, 152u16],
            14524u16 => &[153u16, 142u16, 143u16, 148u16],
            14525u16 => &[153u16, 142u16, 143u16, 148u16],
            14526u16 => &[140u16, 148u16, 152u16],
            14527u16 => &[153u16, 142u16, 143u16, 148u16],
            14528u16 => &[153u16, 142u16, 143u16, 148u16],
            14529u16 => &[149u16, 155u16],
            14530u16 => &[153u16, 150u16],
            14531u16 => &[153u16, 150u16],
            14532u16 => &[149u16, 155u16],
            14533u16 => &[153u16, 150u16],
            14534u16 => &[153u16, 150u16],
            14535u16 => &[140u16, 148u16, 145u16, 152u16],
            14536u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14537u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14538u16 => &[140u16, 148u16, 145u16, 152u16],
            14539u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14540u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14541u16 => &[151u16, 155u16],
            14542u16 => &[153u16, 150u16, 147u16],
            14543u16 => &[153u16, 150u16, 147u16],
            14544u16 => &[151u16, 155u16],
            14545u16 => &[153u16, 150u16, 147u16],
            14546u16 => &[153u16, 150u16, 147u16],
            14547u16 => &[140u16, 148u16, 145u16, 152u16],
            14548u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14549u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14550u16 => &[140u16, 148u16, 145u16, 152u16],
            14551u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14552u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14553u16 => &[151u16, 155u16],
            14554u16 => &[153u16, 150u16, 147u16],
            14555u16 => &[153u16, 150u16, 147u16],
            14556u16 => &[151u16, 155u16],
            14557u16 => &[153u16, 150u16, 147u16],
            14558u16 => &[153u16, 150u16, 147u16],
            14559u16 => &[140u16, 152u16],
            14560u16 => &[153u16, 142u16, 143u16],
            14561u16 => &[153u16, 142u16, 143u16],
            14562u16 => &[140u16, 152u16],
            14563u16 => &[153u16, 142u16, 143u16],
            14564u16 => &[153u16, 142u16, 143u16],
            14565u16 => &[154u16],
            14566u16 => &[153u16],
            14567u16 => &[153u16],
            14568u16 => &[154u16],
            14569u16 => &[153u16],
            14570u16 => &[153u16],
            14571u16 => &[140u16, 145u16, 152u16],
            14572u16 => &[153u16, 142u16, 143u16, 145u16],
            14573u16 => &[153u16, 142u16, 143u16, 145u16],
            14574u16 => &[140u16, 145u16, 152u16],
            14575u16 => &[153u16, 142u16, 143u16, 145u16],
            14576u16 => &[153u16, 142u16, 143u16, 145u16],
            14577u16 => &[146u16, 155u16],
            14578u16 => &[153u16, 147u16],
            14579u16 => &[153u16, 147u16],
            14580u16 => &[146u16, 155u16],
            14581u16 => &[153u16, 147u16],
            14582u16 => &[153u16, 147u16],
            14583u16 => &[140u16, 145u16, 152u16],
            14584u16 => &[153u16, 142u16, 143u16, 145u16],
            14585u16 => &[153u16, 142u16, 143u16, 145u16],
            14586u16 => &[140u16, 145u16, 152u16],
            14587u16 => &[153u16, 142u16, 143u16, 145u16],
            14588u16 => &[153u16, 142u16, 143u16, 145u16],
            14589u16 => &[146u16, 155u16],
            14590u16 => &[153u16, 147u16],
            14591u16 => &[153u16, 147u16],
            14592u16 => &[146u16, 155u16],
            14593u16 => &[153u16, 147u16],
            14594u16 => &[153u16, 147u16],
            14595u16 => &[140u16, 148u16, 152u16],
            14596u16 => &[153u16, 142u16, 143u16, 148u16],
            14597u16 => &[153u16, 142u16, 143u16, 148u16],
            14598u16 => &[140u16, 148u16, 152u16],
            14599u16 => &[153u16, 142u16, 143u16, 148u16],
            14600u16 => &[153u16, 142u16, 143u16, 148u16],
            14601u16 => &[149u16, 155u16],
            14602u16 => &[153u16, 150u16],
            14603u16 => &[153u16, 150u16],
            14604u16 => &[149u16, 155u16],
            14605u16 => &[153u16, 150u16],
            14606u16 => &[153u16, 150u16],
            14607u16 => &[140u16, 148u16, 145u16, 152u16],
            14608u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14609u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14610u16 => &[140u16, 148u16, 145u16, 152u16],
            14611u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14612u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14613u16 => &[151u16, 155u16],
            14614u16 => &[153u16, 150u16, 147u16],
            14615u16 => &[153u16, 150u16, 147u16],
            14616u16 => &[151u16, 155u16],
            14617u16 => &[153u16, 150u16, 147u16],
            14618u16 => &[153u16, 150u16, 147u16],
            14619u16 => &[140u16, 148u16, 145u16, 152u16],
            14620u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14621u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14622u16 => &[140u16, 148u16, 145u16, 152u16],
            14623u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14624u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14625u16 => &[151u16, 155u16],
            14626u16 => &[153u16, 150u16, 147u16],
            14627u16 => &[153u16, 150u16, 147u16],
            14628u16 => &[151u16, 155u16],
            14629u16 => &[153u16, 150u16, 147u16],
            14630u16 => &[153u16, 150u16, 147u16],
            14631u16 => &[140u16, 148u16, 152u16],
            14632u16 => &[153u16, 142u16, 143u16, 148u16],
            14633u16 => &[153u16, 142u16, 143u16, 148u16],
            14634u16 => &[140u16, 148u16, 152u16],
            14635u16 => &[153u16, 142u16, 143u16, 148u16],
            14636u16 => &[153u16, 142u16, 143u16, 148u16],
            14637u16 => &[149u16, 155u16],
            14638u16 => &[153u16, 150u16],
            14639u16 => &[153u16, 150u16],
            14640u16 => &[149u16, 155u16],
            14641u16 => &[153u16, 150u16],
            14642u16 => &[153u16, 150u16],
            14643u16 => &[140u16, 148u16, 145u16, 152u16],
            14644u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14645u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14646u16 => &[140u16, 148u16, 145u16, 152u16],
            14647u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14648u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14649u16 => &[151u16, 155u16],
            14650u16 => &[153u16, 150u16, 147u16],
            14651u16 => &[153u16, 150u16, 147u16],
            14652u16 => &[151u16, 155u16],
            14653u16 => &[153u16, 150u16, 147u16],
            14654u16 => &[153u16, 150u16, 147u16],
            14655u16 => &[140u16, 148u16, 145u16, 152u16],
            14656u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14657u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14658u16 => &[140u16, 148u16, 145u16, 152u16],
            14659u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14660u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14661u16 => &[151u16, 155u16],
            14662u16 => &[153u16, 150u16, 147u16],
            14663u16 => &[153u16, 150u16, 147u16],
            14664u16 => &[151u16, 155u16],
            14665u16 => &[153u16, 150u16, 147u16],
            14666u16 => &[153u16, 150u16, 147u16],
            14667u16 => &[140u16],
            14668u16 => &[141u16, 142u16, 143u16],
            14669u16 => &[141u16, 142u16, 143u16],
            14670u16 => &[140u16],
            14671u16 => &[141u16, 142u16, 143u16],
            14672u16 => &[141u16, 142u16, 143u16],
            14673u16 => &[],
            14674u16 => &[144u16],
            14675u16 => &[144u16],
            14676u16 => &[],
            14677u16 => &[144u16],
            14678u16 => &[144u16],
            14679u16 => &[140u16, 145u16],
            14680u16 => &[141u16, 142u16, 143u16, 145u16],
            14681u16 => &[141u16, 142u16, 143u16, 145u16],
            14682u16 => &[140u16, 145u16],
            14683u16 => &[141u16, 142u16, 143u16, 145u16],
            14684u16 => &[141u16, 142u16, 143u16, 145u16],
            14685u16 => &[146u16],
            14686u16 => &[144u16, 147u16],
            14687u16 => &[144u16, 147u16],
            14688u16 => &[146u16],
            14689u16 => &[144u16, 147u16],
            14690u16 => &[144u16, 147u16],
            14691u16 => &[140u16, 145u16],
            14692u16 => &[141u16, 142u16, 143u16, 145u16],
            14693u16 => &[141u16, 142u16, 143u16, 145u16],
            14694u16 => &[140u16, 145u16],
            14695u16 => &[141u16, 142u16, 143u16, 145u16],
            14696u16 => &[141u16, 142u16, 143u16, 145u16],
            14697u16 => &[146u16],
            14698u16 => &[144u16, 147u16],
            14699u16 => &[144u16, 147u16],
            14700u16 => &[146u16],
            14701u16 => &[144u16, 147u16],
            14702u16 => &[144u16, 147u16],
            14703u16 => &[140u16, 148u16],
            14704u16 => &[141u16, 142u16, 143u16, 148u16],
            14705u16 => &[141u16, 142u16, 143u16, 148u16],
            14706u16 => &[140u16, 148u16],
            14707u16 => &[141u16, 142u16, 143u16, 148u16],
            14708u16 => &[141u16, 142u16, 143u16, 148u16],
            14709u16 => &[149u16],
            14710u16 => &[144u16, 150u16],
            14711u16 => &[144u16, 150u16],
            14712u16 => &[149u16],
            14713u16 => &[144u16, 150u16],
            14714u16 => &[144u16, 150u16],
            14715u16 => &[140u16, 148u16, 145u16],
            14716u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14717u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14718u16 => &[140u16, 148u16, 145u16],
            14719u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14720u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14721u16 => &[151u16],
            14722u16 => &[144u16, 150u16, 147u16],
            14723u16 => &[144u16, 150u16, 147u16],
            14724u16 => &[151u16],
            14725u16 => &[144u16, 150u16, 147u16],
            14726u16 => &[144u16, 150u16, 147u16],
            14727u16 => &[140u16, 148u16, 145u16],
            14728u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14729u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14730u16 => &[140u16, 148u16, 145u16],
            14731u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14732u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14733u16 => &[151u16],
            14734u16 => &[144u16, 150u16, 147u16],
            14735u16 => &[144u16, 150u16, 147u16],
            14736u16 => &[151u16],
            14737u16 => &[144u16, 150u16, 147u16],
            14738u16 => &[144u16, 150u16, 147u16],
            14739u16 => &[140u16, 148u16],
            14740u16 => &[141u16, 142u16, 143u16, 148u16],
            14741u16 => &[141u16, 142u16, 143u16, 148u16],
            14742u16 => &[140u16, 148u16],
            14743u16 => &[141u16, 142u16, 143u16, 148u16],
            14744u16 => &[141u16, 142u16, 143u16, 148u16],
            14745u16 => &[149u16],
            14746u16 => &[144u16, 150u16],
            14747u16 => &[144u16, 150u16],
            14748u16 => &[149u16],
            14749u16 => &[144u16, 150u16],
            14750u16 => &[144u16, 150u16],
            14751u16 => &[140u16, 148u16, 145u16],
            14752u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14753u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14754u16 => &[140u16, 148u16, 145u16],
            14755u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14756u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14757u16 => &[151u16],
            14758u16 => &[144u16, 150u16, 147u16],
            14759u16 => &[144u16, 150u16, 147u16],
            14760u16 => &[151u16],
            14761u16 => &[144u16, 150u16, 147u16],
            14762u16 => &[144u16, 150u16, 147u16],
            14763u16 => &[140u16, 148u16, 145u16],
            14764u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14765u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14766u16 => &[140u16, 148u16, 145u16],
            14767u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14768u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            14769u16 => &[151u16],
            14770u16 => &[144u16, 150u16, 147u16],
            14771u16 => &[144u16, 150u16, 147u16],
            14772u16 => &[151u16],
            14773u16 => &[144u16, 150u16, 147u16],
            14774u16 => &[144u16, 150u16, 147u16],
            14775u16 => &[140u16, 152u16],
            14776u16 => &[153u16, 142u16, 143u16],
            14777u16 => &[153u16, 142u16, 143u16],
            14778u16 => &[140u16, 152u16],
            14779u16 => &[153u16, 142u16, 143u16],
            14780u16 => &[153u16, 142u16, 143u16],
            14781u16 => &[154u16],
            14782u16 => &[153u16],
            14783u16 => &[153u16],
            14784u16 => &[154u16],
            14785u16 => &[153u16],
            14786u16 => &[153u16],
            14787u16 => &[140u16, 145u16, 152u16],
            14788u16 => &[153u16, 142u16, 143u16, 145u16],
            14789u16 => &[153u16, 142u16, 143u16, 145u16],
            14790u16 => &[140u16, 145u16, 152u16],
            14791u16 => &[153u16, 142u16, 143u16, 145u16],
            14792u16 => &[153u16, 142u16, 143u16, 145u16],
            14793u16 => &[146u16, 155u16],
            14794u16 => &[153u16, 147u16],
            14795u16 => &[153u16, 147u16],
            14796u16 => &[146u16, 155u16],
            14797u16 => &[153u16, 147u16],
            14798u16 => &[153u16, 147u16],
            14799u16 => &[140u16, 145u16, 152u16],
            14800u16 => &[153u16, 142u16, 143u16, 145u16],
            14801u16 => &[153u16, 142u16, 143u16, 145u16],
            14802u16 => &[140u16, 145u16, 152u16],
            14803u16 => &[153u16, 142u16, 143u16, 145u16],
            14804u16 => &[153u16, 142u16, 143u16, 145u16],
            14805u16 => &[146u16, 155u16],
            14806u16 => &[153u16, 147u16],
            14807u16 => &[153u16, 147u16],
            14808u16 => &[146u16, 155u16],
            14809u16 => &[153u16, 147u16],
            14810u16 => &[153u16, 147u16],
            14811u16 => &[140u16, 148u16, 152u16],
            14812u16 => &[153u16, 142u16, 143u16, 148u16],
            14813u16 => &[153u16, 142u16, 143u16, 148u16],
            14814u16 => &[140u16, 148u16, 152u16],
            14815u16 => &[153u16, 142u16, 143u16, 148u16],
            14816u16 => &[153u16, 142u16, 143u16, 148u16],
            14817u16 => &[149u16, 155u16],
            14818u16 => &[153u16, 150u16],
            14819u16 => &[153u16, 150u16],
            14820u16 => &[149u16, 155u16],
            14821u16 => &[153u16, 150u16],
            14822u16 => &[153u16, 150u16],
            14823u16 => &[140u16, 148u16, 145u16, 152u16],
            14824u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14825u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14826u16 => &[140u16, 148u16, 145u16, 152u16],
            14827u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14828u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14829u16 => &[151u16, 155u16],
            14830u16 => &[153u16, 150u16, 147u16],
            14831u16 => &[153u16, 150u16, 147u16],
            14832u16 => &[151u16, 155u16],
            14833u16 => &[153u16, 150u16, 147u16],
            14834u16 => &[153u16, 150u16, 147u16],
            14835u16 => &[140u16, 148u16, 145u16, 152u16],
            14836u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14837u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14838u16 => &[140u16, 148u16, 145u16, 152u16],
            14839u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14840u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14841u16 => &[151u16, 155u16],
            14842u16 => &[153u16, 150u16, 147u16],
            14843u16 => &[153u16, 150u16, 147u16],
            14844u16 => &[151u16, 155u16],
            14845u16 => &[153u16, 150u16, 147u16],
            14846u16 => &[153u16, 150u16, 147u16],
            14847u16 => &[140u16, 148u16, 152u16],
            14848u16 => &[153u16, 142u16, 143u16, 148u16],
            14849u16 => &[153u16, 142u16, 143u16, 148u16],
            14850u16 => &[140u16, 148u16, 152u16],
            14851u16 => &[153u16, 142u16, 143u16, 148u16],
            14852u16 => &[153u16, 142u16, 143u16, 148u16],
            14853u16 => &[149u16, 155u16],
            14854u16 => &[153u16, 150u16],
            14855u16 => &[153u16, 150u16],
            14856u16 => &[149u16, 155u16],
            14857u16 => &[153u16, 150u16],
            14858u16 => &[153u16, 150u16],
            14859u16 => &[140u16, 148u16, 145u16, 152u16],
            14860u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14861u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14862u16 => &[140u16, 148u16, 145u16, 152u16],
            14863u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14864u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14865u16 => &[151u16, 155u16],
            14866u16 => &[153u16, 150u16, 147u16],
            14867u16 => &[153u16, 150u16, 147u16],
            14868u16 => &[151u16, 155u16],
            14869u16 => &[153u16, 150u16, 147u16],
            14870u16 => &[153u16, 150u16, 147u16],
            14871u16 => &[140u16, 148u16, 145u16, 152u16],
            14872u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14873u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14874u16 => &[140u16, 148u16, 145u16, 152u16],
            14875u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14876u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14877u16 => &[151u16, 155u16],
            14878u16 => &[153u16, 150u16, 147u16],
            14879u16 => &[153u16, 150u16, 147u16],
            14880u16 => &[151u16, 155u16],
            14881u16 => &[153u16, 150u16, 147u16],
            14882u16 => &[153u16, 150u16, 147u16],
            14883u16 => &[140u16, 152u16],
            14884u16 => &[153u16, 142u16, 143u16],
            14885u16 => &[153u16, 142u16, 143u16],
            14886u16 => &[140u16, 152u16],
            14887u16 => &[153u16, 142u16, 143u16],
            14888u16 => &[153u16, 142u16, 143u16],
            14889u16 => &[154u16],
            14890u16 => &[153u16],
            14891u16 => &[153u16],
            14892u16 => &[154u16],
            14893u16 => &[153u16],
            14894u16 => &[153u16],
            14895u16 => &[140u16, 145u16, 152u16],
            14896u16 => &[153u16, 142u16, 143u16, 145u16],
            14897u16 => &[153u16, 142u16, 143u16, 145u16],
            14898u16 => &[140u16, 145u16, 152u16],
            14899u16 => &[153u16, 142u16, 143u16, 145u16],
            14900u16 => &[153u16, 142u16, 143u16, 145u16],
            14901u16 => &[146u16, 155u16],
            14902u16 => &[153u16, 147u16],
            14903u16 => &[153u16, 147u16],
            14904u16 => &[146u16, 155u16],
            14905u16 => &[153u16, 147u16],
            14906u16 => &[153u16, 147u16],
            14907u16 => &[140u16, 145u16, 152u16],
            14908u16 => &[153u16, 142u16, 143u16, 145u16],
            14909u16 => &[153u16, 142u16, 143u16, 145u16],
            14910u16 => &[140u16, 145u16, 152u16],
            14911u16 => &[153u16, 142u16, 143u16, 145u16],
            14912u16 => &[153u16, 142u16, 143u16, 145u16],
            14913u16 => &[146u16, 155u16],
            14914u16 => &[153u16, 147u16],
            14915u16 => &[153u16, 147u16],
            14916u16 => &[146u16, 155u16],
            14917u16 => &[153u16, 147u16],
            14918u16 => &[153u16, 147u16],
            14919u16 => &[140u16, 148u16, 152u16],
            14920u16 => &[153u16, 142u16, 143u16, 148u16],
            14921u16 => &[153u16, 142u16, 143u16, 148u16],
            14922u16 => &[140u16, 148u16, 152u16],
            14923u16 => &[153u16, 142u16, 143u16, 148u16],
            14924u16 => &[153u16, 142u16, 143u16, 148u16],
            14925u16 => &[149u16, 155u16],
            14926u16 => &[153u16, 150u16],
            14927u16 => &[153u16, 150u16],
            14928u16 => &[149u16, 155u16],
            14929u16 => &[153u16, 150u16],
            14930u16 => &[153u16, 150u16],
            14931u16 => &[140u16, 148u16, 145u16, 152u16],
            14932u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14933u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14934u16 => &[140u16, 148u16, 145u16, 152u16],
            14935u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14936u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14937u16 => &[151u16, 155u16],
            14938u16 => &[153u16, 150u16, 147u16],
            14939u16 => &[153u16, 150u16, 147u16],
            14940u16 => &[151u16, 155u16],
            14941u16 => &[153u16, 150u16, 147u16],
            14942u16 => &[153u16, 150u16, 147u16],
            14943u16 => &[140u16, 148u16, 145u16, 152u16],
            14944u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14945u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14946u16 => &[140u16, 148u16, 145u16, 152u16],
            14947u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14948u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14949u16 => &[151u16, 155u16],
            14950u16 => &[153u16, 150u16, 147u16],
            14951u16 => &[153u16, 150u16, 147u16],
            14952u16 => &[151u16, 155u16],
            14953u16 => &[153u16, 150u16, 147u16],
            14954u16 => &[153u16, 150u16, 147u16],
            14955u16 => &[140u16, 148u16, 152u16],
            14956u16 => &[153u16, 142u16, 143u16, 148u16],
            14957u16 => &[153u16, 142u16, 143u16, 148u16],
            14958u16 => &[140u16, 148u16, 152u16],
            14959u16 => &[153u16, 142u16, 143u16, 148u16],
            14960u16 => &[153u16, 142u16, 143u16, 148u16],
            14961u16 => &[149u16, 155u16],
            14962u16 => &[153u16, 150u16],
            14963u16 => &[153u16, 150u16],
            14964u16 => &[149u16, 155u16],
            14965u16 => &[153u16, 150u16],
            14966u16 => &[153u16, 150u16],
            14967u16 => &[140u16, 148u16, 145u16, 152u16],
            14968u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14969u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14970u16 => &[140u16, 148u16, 145u16, 152u16],
            14971u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14972u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14973u16 => &[151u16, 155u16],
            14974u16 => &[153u16, 150u16, 147u16],
            14975u16 => &[153u16, 150u16, 147u16],
            14976u16 => &[151u16, 155u16],
            14977u16 => &[153u16, 150u16, 147u16],
            14978u16 => &[153u16, 150u16, 147u16],
            14979u16 => &[140u16, 148u16, 145u16, 152u16],
            14980u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14981u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14982u16 => &[140u16, 148u16, 145u16, 152u16],
            14983u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14984u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            14985u16 => &[151u16, 155u16],
            14986u16 => &[153u16, 150u16, 147u16],
            14987u16 => &[153u16, 150u16, 147u16],
            14988u16 => &[151u16, 155u16],
            14989u16 => &[153u16, 150u16, 147u16],
            14990u16 => &[153u16, 150u16, 147u16],
            14991u16 => &[140u16],
            14992u16 => &[141u16, 142u16, 143u16],
            14993u16 => &[141u16, 142u16, 143u16],
            14994u16 => &[140u16],
            14995u16 => &[141u16, 142u16, 143u16],
            14996u16 => &[141u16, 142u16, 143u16],
            14997u16 => &[],
            14998u16 => &[144u16],
            14999u16 => &[144u16],
            15000u16 => &[],
            15001u16 => &[144u16],
            15002u16 => &[144u16],
            15003u16 => &[140u16, 145u16],
            15004u16 => &[141u16, 142u16, 143u16, 145u16],
            15005u16 => &[141u16, 142u16, 143u16, 145u16],
            15006u16 => &[140u16, 145u16],
            15007u16 => &[141u16, 142u16, 143u16, 145u16],
            15008u16 => &[141u16, 142u16, 143u16, 145u16],
            15009u16 => &[146u16],
            15010u16 => &[144u16, 147u16],
            15011u16 => &[144u16, 147u16],
            15012u16 => &[146u16],
            15013u16 => &[144u16, 147u16],
            15014u16 => &[144u16, 147u16],
            15015u16 => &[140u16, 145u16],
            15016u16 => &[141u16, 142u16, 143u16, 145u16],
            15017u16 => &[141u16, 142u16, 143u16, 145u16],
            15018u16 => &[140u16, 145u16],
            15019u16 => &[141u16, 142u16, 143u16, 145u16],
            15020u16 => &[141u16, 142u16, 143u16, 145u16],
            15021u16 => &[146u16],
            15022u16 => &[144u16, 147u16],
            15023u16 => &[144u16, 147u16],
            15024u16 => &[146u16],
            15025u16 => &[144u16, 147u16],
            15026u16 => &[144u16, 147u16],
            15027u16 => &[140u16, 148u16],
            15028u16 => &[141u16, 142u16, 143u16, 148u16],
            15029u16 => &[141u16, 142u16, 143u16, 148u16],
            15030u16 => &[140u16, 148u16],
            15031u16 => &[141u16, 142u16, 143u16, 148u16],
            15032u16 => &[141u16, 142u16, 143u16, 148u16],
            15033u16 => &[149u16],
            15034u16 => &[144u16, 150u16],
            15035u16 => &[144u16, 150u16],
            15036u16 => &[149u16],
            15037u16 => &[144u16, 150u16],
            15038u16 => &[144u16, 150u16],
            15039u16 => &[140u16, 148u16, 145u16],
            15040u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15041u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15042u16 => &[140u16, 148u16, 145u16],
            15043u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15044u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15045u16 => &[151u16],
            15046u16 => &[144u16, 150u16, 147u16],
            15047u16 => &[144u16, 150u16, 147u16],
            15048u16 => &[151u16],
            15049u16 => &[144u16, 150u16, 147u16],
            15050u16 => &[144u16, 150u16, 147u16],
            15051u16 => &[140u16, 148u16, 145u16],
            15052u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15053u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15054u16 => &[140u16, 148u16, 145u16],
            15055u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15056u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15057u16 => &[151u16],
            15058u16 => &[144u16, 150u16, 147u16],
            15059u16 => &[144u16, 150u16, 147u16],
            15060u16 => &[151u16],
            15061u16 => &[144u16, 150u16, 147u16],
            15062u16 => &[144u16, 150u16, 147u16],
            15063u16 => &[140u16, 148u16],
            15064u16 => &[141u16, 142u16, 143u16, 148u16],
            15065u16 => &[141u16, 142u16, 143u16, 148u16],
            15066u16 => &[140u16, 148u16],
            15067u16 => &[141u16, 142u16, 143u16, 148u16],
            15068u16 => &[141u16, 142u16, 143u16, 148u16],
            15069u16 => &[149u16],
            15070u16 => &[144u16, 150u16],
            15071u16 => &[144u16, 150u16],
            15072u16 => &[149u16],
            15073u16 => &[144u16, 150u16],
            15074u16 => &[144u16, 150u16],
            15075u16 => &[140u16, 148u16, 145u16],
            15076u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15077u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15078u16 => &[140u16, 148u16, 145u16],
            15079u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15080u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15081u16 => &[151u16],
            15082u16 => &[144u16, 150u16, 147u16],
            15083u16 => &[144u16, 150u16, 147u16],
            15084u16 => &[151u16],
            15085u16 => &[144u16, 150u16, 147u16],
            15086u16 => &[144u16, 150u16, 147u16],
            15087u16 => &[140u16, 148u16, 145u16],
            15088u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15089u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15090u16 => &[140u16, 148u16, 145u16],
            15091u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15092u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15093u16 => &[151u16],
            15094u16 => &[144u16, 150u16, 147u16],
            15095u16 => &[144u16, 150u16, 147u16],
            15096u16 => &[151u16],
            15097u16 => &[144u16, 150u16, 147u16],
            15098u16 => &[144u16, 150u16, 147u16],
            15099u16 => &[140u16, 152u16],
            15100u16 => &[153u16, 142u16, 143u16],
            15101u16 => &[153u16, 142u16, 143u16],
            15102u16 => &[140u16, 152u16],
            15103u16 => &[153u16, 142u16, 143u16],
            15104u16 => &[153u16, 142u16, 143u16],
            15105u16 => &[154u16],
            15106u16 => &[153u16],
            15107u16 => &[153u16],
            15108u16 => &[154u16],
            15109u16 => &[153u16],
            15110u16 => &[153u16],
            15111u16 => &[140u16, 145u16, 152u16],
            15112u16 => &[153u16, 142u16, 143u16, 145u16],
            15113u16 => &[153u16, 142u16, 143u16, 145u16],
            15114u16 => &[140u16, 145u16, 152u16],
            15115u16 => &[153u16, 142u16, 143u16, 145u16],
            15116u16 => &[153u16, 142u16, 143u16, 145u16],
            15117u16 => &[146u16, 155u16],
            15118u16 => &[153u16, 147u16],
            15119u16 => &[153u16, 147u16],
            15120u16 => &[146u16, 155u16],
            15121u16 => &[153u16, 147u16],
            15122u16 => &[153u16, 147u16],
            15123u16 => &[140u16, 145u16, 152u16],
            15124u16 => &[153u16, 142u16, 143u16, 145u16],
            15125u16 => &[153u16, 142u16, 143u16, 145u16],
            15126u16 => &[140u16, 145u16, 152u16],
            15127u16 => &[153u16, 142u16, 143u16, 145u16],
            15128u16 => &[153u16, 142u16, 143u16, 145u16],
            15129u16 => &[146u16, 155u16],
            15130u16 => &[153u16, 147u16],
            15131u16 => &[153u16, 147u16],
            15132u16 => &[146u16, 155u16],
            15133u16 => &[153u16, 147u16],
            15134u16 => &[153u16, 147u16],
            15135u16 => &[140u16, 148u16, 152u16],
            15136u16 => &[153u16, 142u16, 143u16, 148u16],
            15137u16 => &[153u16, 142u16, 143u16, 148u16],
            15138u16 => &[140u16, 148u16, 152u16],
            15139u16 => &[153u16, 142u16, 143u16, 148u16],
            15140u16 => &[153u16, 142u16, 143u16, 148u16],
            15141u16 => &[149u16, 155u16],
            15142u16 => &[153u16, 150u16],
            15143u16 => &[153u16, 150u16],
            15144u16 => &[149u16, 155u16],
            15145u16 => &[153u16, 150u16],
            15146u16 => &[153u16, 150u16],
            15147u16 => &[140u16, 148u16, 145u16, 152u16],
            15148u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15149u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15150u16 => &[140u16, 148u16, 145u16, 152u16],
            15151u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15152u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15153u16 => &[151u16, 155u16],
            15154u16 => &[153u16, 150u16, 147u16],
            15155u16 => &[153u16, 150u16, 147u16],
            15156u16 => &[151u16, 155u16],
            15157u16 => &[153u16, 150u16, 147u16],
            15158u16 => &[153u16, 150u16, 147u16],
            15159u16 => &[140u16, 148u16, 145u16, 152u16],
            15160u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15161u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15162u16 => &[140u16, 148u16, 145u16, 152u16],
            15163u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15164u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15165u16 => &[151u16, 155u16],
            15166u16 => &[153u16, 150u16, 147u16],
            15167u16 => &[153u16, 150u16, 147u16],
            15168u16 => &[151u16, 155u16],
            15169u16 => &[153u16, 150u16, 147u16],
            15170u16 => &[153u16, 150u16, 147u16],
            15171u16 => &[140u16, 148u16, 152u16],
            15172u16 => &[153u16, 142u16, 143u16, 148u16],
            15173u16 => &[153u16, 142u16, 143u16, 148u16],
            15174u16 => &[140u16, 148u16, 152u16],
            15175u16 => &[153u16, 142u16, 143u16, 148u16],
            15176u16 => &[153u16, 142u16, 143u16, 148u16],
            15177u16 => &[149u16, 155u16],
            15178u16 => &[153u16, 150u16],
            15179u16 => &[153u16, 150u16],
            15180u16 => &[149u16, 155u16],
            15181u16 => &[153u16, 150u16],
            15182u16 => &[153u16, 150u16],
            15183u16 => &[140u16, 148u16, 145u16, 152u16],
            15184u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15185u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15186u16 => &[140u16, 148u16, 145u16, 152u16],
            15187u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15188u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15189u16 => &[151u16, 155u16],
            15190u16 => &[153u16, 150u16, 147u16],
            15191u16 => &[153u16, 150u16, 147u16],
            15192u16 => &[151u16, 155u16],
            15193u16 => &[153u16, 150u16, 147u16],
            15194u16 => &[153u16, 150u16, 147u16],
            15195u16 => &[140u16, 148u16, 145u16, 152u16],
            15196u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15197u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15198u16 => &[140u16, 148u16, 145u16, 152u16],
            15199u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15200u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15201u16 => &[151u16, 155u16],
            15202u16 => &[153u16, 150u16, 147u16],
            15203u16 => &[153u16, 150u16, 147u16],
            15204u16 => &[151u16, 155u16],
            15205u16 => &[153u16, 150u16, 147u16],
            15206u16 => &[153u16, 150u16, 147u16],
            15207u16 => &[140u16, 152u16],
            15208u16 => &[153u16, 142u16, 143u16],
            15209u16 => &[153u16, 142u16, 143u16],
            15210u16 => &[140u16, 152u16],
            15211u16 => &[153u16, 142u16, 143u16],
            15212u16 => &[153u16, 142u16, 143u16],
            15213u16 => &[154u16],
            15214u16 => &[153u16],
            15215u16 => &[153u16],
            15216u16 => &[154u16],
            15217u16 => &[153u16],
            15218u16 => &[153u16],
            15219u16 => &[140u16, 145u16, 152u16],
            15220u16 => &[153u16, 142u16, 143u16, 145u16],
            15221u16 => &[153u16, 142u16, 143u16, 145u16],
            15222u16 => &[140u16, 145u16, 152u16],
            15223u16 => &[153u16, 142u16, 143u16, 145u16],
            15224u16 => &[153u16, 142u16, 143u16, 145u16],
            15225u16 => &[146u16, 155u16],
            15226u16 => &[153u16, 147u16],
            15227u16 => &[153u16, 147u16],
            15228u16 => &[146u16, 155u16],
            15229u16 => &[153u16, 147u16],
            15230u16 => &[153u16, 147u16],
            15231u16 => &[140u16, 145u16, 152u16],
            15232u16 => &[153u16, 142u16, 143u16, 145u16],
            15233u16 => &[153u16, 142u16, 143u16, 145u16],
            15234u16 => &[140u16, 145u16, 152u16],
            15235u16 => &[153u16, 142u16, 143u16, 145u16],
            15236u16 => &[153u16, 142u16, 143u16, 145u16],
            15237u16 => &[146u16, 155u16],
            15238u16 => &[153u16, 147u16],
            15239u16 => &[153u16, 147u16],
            15240u16 => &[146u16, 155u16],
            15241u16 => &[153u16, 147u16],
            15242u16 => &[153u16, 147u16],
            15243u16 => &[140u16, 148u16, 152u16],
            15244u16 => &[153u16, 142u16, 143u16, 148u16],
            15245u16 => &[153u16, 142u16, 143u16, 148u16],
            15246u16 => &[140u16, 148u16, 152u16],
            15247u16 => &[153u16, 142u16, 143u16, 148u16],
            15248u16 => &[153u16, 142u16, 143u16, 148u16],
            15249u16 => &[149u16, 155u16],
            15250u16 => &[153u16, 150u16],
            15251u16 => &[153u16, 150u16],
            15252u16 => &[149u16, 155u16],
            15253u16 => &[153u16, 150u16],
            15254u16 => &[153u16, 150u16],
            15255u16 => &[140u16, 148u16, 145u16, 152u16],
            15256u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15257u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15258u16 => &[140u16, 148u16, 145u16, 152u16],
            15259u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15260u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15261u16 => &[151u16, 155u16],
            15262u16 => &[153u16, 150u16, 147u16],
            15263u16 => &[153u16, 150u16, 147u16],
            15264u16 => &[151u16, 155u16],
            15265u16 => &[153u16, 150u16, 147u16],
            15266u16 => &[153u16, 150u16, 147u16],
            15267u16 => &[140u16, 148u16, 145u16, 152u16],
            15268u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15269u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15270u16 => &[140u16, 148u16, 145u16, 152u16],
            15271u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15272u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15273u16 => &[151u16, 155u16],
            15274u16 => &[153u16, 150u16, 147u16],
            15275u16 => &[153u16, 150u16, 147u16],
            15276u16 => &[151u16, 155u16],
            15277u16 => &[153u16, 150u16, 147u16],
            15278u16 => &[153u16, 150u16, 147u16],
            15279u16 => &[140u16, 148u16, 152u16],
            15280u16 => &[153u16, 142u16, 143u16, 148u16],
            15281u16 => &[153u16, 142u16, 143u16, 148u16],
            15282u16 => &[140u16, 148u16, 152u16],
            15283u16 => &[153u16, 142u16, 143u16, 148u16],
            15284u16 => &[153u16, 142u16, 143u16, 148u16],
            15285u16 => &[149u16, 155u16],
            15286u16 => &[153u16, 150u16],
            15287u16 => &[153u16, 150u16],
            15288u16 => &[149u16, 155u16],
            15289u16 => &[153u16, 150u16],
            15290u16 => &[153u16, 150u16],
            15291u16 => &[140u16, 148u16, 145u16, 152u16],
            15292u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15293u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15294u16 => &[140u16, 148u16, 145u16, 152u16],
            15295u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15296u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15297u16 => &[151u16, 155u16],
            15298u16 => &[153u16, 150u16, 147u16],
            15299u16 => &[153u16, 150u16, 147u16],
            15300u16 => &[151u16, 155u16],
            15301u16 => &[153u16, 150u16, 147u16],
            15302u16 => &[153u16, 150u16, 147u16],
            15303u16 => &[140u16, 148u16, 145u16, 152u16],
            15304u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15305u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15306u16 => &[140u16, 148u16, 145u16, 152u16],
            15307u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15308u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15309u16 => &[151u16, 155u16],
            15310u16 => &[153u16, 150u16, 147u16],
            15311u16 => &[153u16, 150u16, 147u16],
            15312u16 => &[151u16, 155u16],
            15313u16 => &[153u16, 150u16, 147u16],
            15314u16 => &[153u16, 150u16, 147u16],
            15315u16 => &[140u16],
            15316u16 => &[141u16, 142u16, 143u16],
            15317u16 => &[141u16, 142u16, 143u16],
            15318u16 => &[140u16],
            15319u16 => &[141u16, 142u16, 143u16],
            15320u16 => &[141u16, 142u16, 143u16],
            15321u16 => &[],
            15322u16 => &[144u16],
            15323u16 => &[144u16],
            15324u16 => &[],
            15325u16 => &[144u16],
            15326u16 => &[144u16],
            15327u16 => &[140u16, 145u16],
            15328u16 => &[141u16, 142u16, 143u16, 145u16],
            15329u16 => &[141u16, 142u16, 143u16, 145u16],
            15330u16 => &[140u16, 145u16],
            15331u16 => &[141u16, 142u16, 143u16, 145u16],
            15332u16 => &[141u16, 142u16, 143u16, 145u16],
            15333u16 => &[146u16],
            15334u16 => &[144u16, 147u16],
            15335u16 => &[144u16, 147u16],
            15336u16 => &[146u16],
            15337u16 => &[144u16, 147u16],
            15338u16 => &[144u16, 147u16],
            15339u16 => &[140u16, 145u16],
            15340u16 => &[141u16, 142u16, 143u16, 145u16],
            15341u16 => &[141u16, 142u16, 143u16, 145u16],
            15342u16 => &[140u16, 145u16],
            15343u16 => &[141u16, 142u16, 143u16, 145u16],
            15344u16 => &[141u16, 142u16, 143u16, 145u16],
            15345u16 => &[146u16],
            15346u16 => &[144u16, 147u16],
            15347u16 => &[144u16, 147u16],
            15348u16 => &[146u16],
            15349u16 => &[144u16, 147u16],
            15350u16 => &[144u16, 147u16],
            15351u16 => &[140u16, 148u16],
            15352u16 => &[141u16, 142u16, 143u16, 148u16],
            15353u16 => &[141u16, 142u16, 143u16, 148u16],
            15354u16 => &[140u16, 148u16],
            15355u16 => &[141u16, 142u16, 143u16, 148u16],
            15356u16 => &[141u16, 142u16, 143u16, 148u16],
            15357u16 => &[149u16],
            15358u16 => &[144u16, 150u16],
            15359u16 => &[144u16, 150u16],
            15360u16 => &[149u16],
            15361u16 => &[144u16, 150u16],
            15362u16 => &[144u16, 150u16],
            15363u16 => &[140u16, 148u16, 145u16],
            15364u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15365u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15366u16 => &[140u16, 148u16, 145u16],
            15367u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15368u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15369u16 => &[151u16],
            15370u16 => &[144u16, 150u16, 147u16],
            15371u16 => &[144u16, 150u16, 147u16],
            15372u16 => &[151u16],
            15373u16 => &[144u16, 150u16, 147u16],
            15374u16 => &[144u16, 150u16, 147u16],
            15375u16 => &[140u16, 148u16, 145u16],
            15376u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15377u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15378u16 => &[140u16, 148u16, 145u16],
            15379u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15380u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15381u16 => &[151u16],
            15382u16 => &[144u16, 150u16, 147u16],
            15383u16 => &[144u16, 150u16, 147u16],
            15384u16 => &[151u16],
            15385u16 => &[144u16, 150u16, 147u16],
            15386u16 => &[144u16, 150u16, 147u16],
            15387u16 => &[140u16, 148u16],
            15388u16 => &[141u16, 142u16, 143u16, 148u16],
            15389u16 => &[141u16, 142u16, 143u16, 148u16],
            15390u16 => &[140u16, 148u16],
            15391u16 => &[141u16, 142u16, 143u16, 148u16],
            15392u16 => &[141u16, 142u16, 143u16, 148u16],
            15393u16 => &[149u16],
            15394u16 => &[144u16, 150u16],
            15395u16 => &[144u16, 150u16],
            15396u16 => &[149u16],
            15397u16 => &[144u16, 150u16],
            15398u16 => &[144u16, 150u16],
            15399u16 => &[140u16, 148u16, 145u16],
            15400u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15401u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15402u16 => &[140u16, 148u16, 145u16],
            15403u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15404u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15405u16 => &[151u16],
            15406u16 => &[144u16, 150u16, 147u16],
            15407u16 => &[144u16, 150u16, 147u16],
            15408u16 => &[151u16],
            15409u16 => &[144u16, 150u16, 147u16],
            15410u16 => &[144u16, 150u16, 147u16],
            15411u16 => &[140u16, 148u16, 145u16],
            15412u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15413u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15414u16 => &[140u16, 148u16, 145u16],
            15415u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15416u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15417u16 => &[151u16],
            15418u16 => &[144u16, 150u16, 147u16],
            15419u16 => &[144u16, 150u16, 147u16],
            15420u16 => &[151u16],
            15421u16 => &[144u16, 150u16, 147u16],
            15422u16 => &[144u16, 150u16, 147u16],
            15423u16 => &[140u16, 152u16],
            15424u16 => &[153u16, 142u16, 143u16],
            15425u16 => &[153u16, 142u16, 143u16],
            15426u16 => &[140u16, 152u16],
            15427u16 => &[153u16, 142u16, 143u16],
            15428u16 => &[153u16, 142u16, 143u16],
            15429u16 => &[154u16],
            15430u16 => &[153u16],
            15431u16 => &[153u16],
            15432u16 => &[154u16],
            15433u16 => &[153u16],
            15434u16 => &[153u16],
            15435u16 => &[140u16, 145u16, 152u16],
            15436u16 => &[153u16, 142u16, 143u16, 145u16],
            15437u16 => &[153u16, 142u16, 143u16, 145u16],
            15438u16 => &[140u16, 145u16, 152u16],
            15439u16 => &[153u16, 142u16, 143u16, 145u16],
            15440u16 => &[153u16, 142u16, 143u16, 145u16],
            15441u16 => &[146u16, 155u16],
            15442u16 => &[153u16, 147u16],
            15443u16 => &[153u16, 147u16],
            15444u16 => &[146u16, 155u16],
            15445u16 => &[153u16, 147u16],
            15446u16 => &[153u16, 147u16],
            15447u16 => &[140u16, 145u16, 152u16],
            15448u16 => &[153u16, 142u16, 143u16, 145u16],
            15449u16 => &[153u16, 142u16, 143u16, 145u16],
            15450u16 => &[140u16, 145u16, 152u16],
            15451u16 => &[153u16, 142u16, 143u16, 145u16],
            15452u16 => &[153u16, 142u16, 143u16, 145u16],
            15453u16 => &[146u16, 155u16],
            15454u16 => &[153u16, 147u16],
            15455u16 => &[153u16, 147u16],
            15456u16 => &[146u16, 155u16],
            15457u16 => &[153u16, 147u16],
            15458u16 => &[153u16, 147u16],
            15459u16 => &[140u16, 148u16, 152u16],
            15460u16 => &[153u16, 142u16, 143u16, 148u16],
            15461u16 => &[153u16, 142u16, 143u16, 148u16],
            15462u16 => &[140u16, 148u16, 152u16],
            15463u16 => &[153u16, 142u16, 143u16, 148u16],
            15464u16 => &[153u16, 142u16, 143u16, 148u16],
            15465u16 => &[149u16, 155u16],
            15466u16 => &[153u16, 150u16],
            15467u16 => &[153u16, 150u16],
            15468u16 => &[149u16, 155u16],
            15469u16 => &[153u16, 150u16],
            15470u16 => &[153u16, 150u16],
            15471u16 => &[140u16, 148u16, 145u16, 152u16],
            15472u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15473u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15474u16 => &[140u16, 148u16, 145u16, 152u16],
            15475u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15476u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15477u16 => &[151u16, 155u16],
            15478u16 => &[153u16, 150u16, 147u16],
            15479u16 => &[153u16, 150u16, 147u16],
            15480u16 => &[151u16, 155u16],
            15481u16 => &[153u16, 150u16, 147u16],
            15482u16 => &[153u16, 150u16, 147u16],
            15483u16 => &[140u16, 148u16, 145u16, 152u16],
            15484u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15485u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15486u16 => &[140u16, 148u16, 145u16, 152u16],
            15487u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15488u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15489u16 => &[151u16, 155u16],
            15490u16 => &[153u16, 150u16, 147u16],
            15491u16 => &[153u16, 150u16, 147u16],
            15492u16 => &[151u16, 155u16],
            15493u16 => &[153u16, 150u16, 147u16],
            15494u16 => &[153u16, 150u16, 147u16],
            15495u16 => &[140u16, 148u16, 152u16],
            15496u16 => &[153u16, 142u16, 143u16, 148u16],
            15497u16 => &[153u16, 142u16, 143u16, 148u16],
            15498u16 => &[140u16, 148u16, 152u16],
            15499u16 => &[153u16, 142u16, 143u16, 148u16],
            15500u16 => &[153u16, 142u16, 143u16, 148u16],
            15501u16 => &[149u16, 155u16],
            15502u16 => &[153u16, 150u16],
            15503u16 => &[153u16, 150u16],
            15504u16 => &[149u16, 155u16],
            15505u16 => &[153u16, 150u16],
            15506u16 => &[153u16, 150u16],
            15507u16 => &[140u16, 148u16, 145u16, 152u16],
            15508u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15509u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15510u16 => &[140u16, 148u16, 145u16, 152u16],
            15511u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15512u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15513u16 => &[151u16, 155u16],
            15514u16 => &[153u16, 150u16, 147u16],
            15515u16 => &[153u16, 150u16, 147u16],
            15516u16 => &[151u16, 155u16],
            15517u16 => &[153u16, 150u16, 147u16],
            15518u16 => &[153u16, 150u16, 147u16],
            15519u16 => &[140u16, 148u16, 145u16, 152u16],
            15520u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15521u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15522u16 => &[140u16, 148u16, 145u16, 152u16],
            15523u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15524u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15525u16 => &[151u16, 155u16],
            15526u16 => &[153u16, 150u16, 147u16],
            15527u16 => &[153u16, 150u16, 147u16],
            15528u16 => &[151u16, 155u16],
            15529u16 => &[153u16, 150u16, 147u16],
            15530u16 => &[153u16, 150u16, 147u16],
            15531u16 => &[140u16, 152u16],
            15532u16 => &[153u16, 142u16, 143u16],
            15533u16 => &[153u16, 142u16, 143u16],
            15534u16 => &[140u16, 152u16],
            15535u16 => &[153u16, 142u16, 143u16],
            15536u16 => &[153u16, 142u16, 143u16],
            15537u16 => &[154u16],
            15538u16 => &[153u16],
            15539u16 => &[153u16],
            15540u16 => &[154u16],
            15541u16 => &[153u16],
            15542u16 => &[153u16],
            15543u16 => &[140u16, 145u16, 152u16],
            15544u16 => &[153u16, 142u16, 143u16, 145u16],
            15545u16 => &[153u16, 142u16, 143u16, 145u16],
            15546u16 => &[140u16, 145u16, 152u16],
            15547u16 => &[153u16, 142u16, 143u16, 145u16],
            15548u16 => &[153u16, 142u16, 143u16, 145u16],
            15549u16 => &[146u16, 155u16],
            15550u16 => &[153u16, 147u16],
            15551u16 => &[153u16, 147u16],
            15552u16 => &[146u16, 155u16],
            15553u16 => &[153u16, 147u16],
            15554u16 => &[153u16, 147u16],
            15555u16 => &[140u16, 145u16, 152u16],
            15556u16 => &[153u16, 142u16, 143u16, 145u16],
            15557u16 => &[153u16, 142u16, 143u16, 145u16],
            15558u16 => &[140u16, 145u16, 152u16],
            15559u16 => &[153u16, 142u16, 143u16, 145u16],
            15560u16 => &[153u16, 142u16, 143u16, 145u16],
            15561u16 => &[146u16, 155u16],
            15562u16 => &[153u16, 147u16],
            15563u16 => &[153u16, 147u16],
            15564u16 => &[146u16, 155u16],
            15565u16 => &[153u16, 147u16],
            15566u16 => &[153u16, 147u16],
            15567u16 => &[140u16, 148u16, 152u16],
            15568u16 => &[153u16, 142u16, 143u16, 148u16],
            15569u16 => &[153u16, 142u16, 143u16, 148u16],
            15570u16 => &[140u16, 148u16, 152u16],
            15571u16 => &[153u16, 142u16, 143u16, 148u16],
            15572u16 => &[153u16, 142u16, 143u16, 148u16],
            15573u16 => &[149u16, 155u16],
            15574u16 => &[153u16, 150u16],
            15575u16 => &[153u16, 150u16],
            15576u16 => &[149u16, 155u16],
            15577u16 => &[153u16, 150u16],
            15578u16 => &[153u16, 150u16],
            15579u16 => &[140u16, 148u16, 145u16, 152u16],
            15580u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15581u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15582u16 => &[140u16, 148u16, 145u16, 152u16],
            15583u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15584u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15585u16 => &[151u16, 155u16],
            15586u16 => &[153u16, 150u16, 147u16],
            15587u16 => &[153u16, 150u16, 147u16],
            15588u16 => &[151u16, 155u16],
            15589u16 => &[153u16, 150u16, 147u16],
            15590u16 => &[153u16, 150u16, 147u16],
            15591u16 => &[140u16, 148u16, 145u16, 152u16],
            15592u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15593u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15594u16 => &[140u16, 148u16, 145u16, 152u16],
            15595u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15596u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15597u16 => &[151u16, 155u16],
            15598u16 => &[153u16, 150u16, 147u16],
            15599u16 => &[153u16, 150u16, 147u16],
            15600u16 => &[151u16, 155u16],
            15601u16 => &[153u16, 150u16, 147u16],
            15602u16 => &[153u16, 150u16, 147u16],
            15603u16 => &[140u16, 148u16, 152u16],
            15604u16 => &[153u16, 142u16, 143u16, 148u16],
            15605u16 => &[153u16, 142u16, 143u16, 148u16],
            15606u16 => &[140u16, 148u16, 152u16],
            15607u16 => &[153u16, 142u16, 143u16, 148u16],
            15608u16 => &[153u16, 142u16, 143u16, 148u16],
            15609u16 => &[149u16, 155u16],
            15610u16 => &[153u16, 150u16],
            15611u16 => &[153u16, 150u16],
            15612u16 => &[149u16, 155u16],
            15613u16 => &[153u16, 150u16],
            15614u16 => &[153u16, 150u16],
            15615u16 => &[140u16, 148u16, 145u16, 152u16],
            15616u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15617u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15618u16 => &[140u16, 148u16, 145u16, 152u16],
            15619u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15620u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15621u16 => &[151u16, 155u16],
            15622u16 => &[153u16, 150u16, 147u16],
            15623u16 => &[153u16, 150u16, 147u16],
            15624u16 => &[151u16, 155u16],
            15625u16 => &[153u16, 150u16, 147u16],
            15626u16 => &[153u16, 150u16, 147u16],
            15627u16 => &[140u16, 148u16, 145u16, 152u16],
            15628u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15629u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15630u16 => &[140u16, 148u16, 145u16, 152u16],
            15631u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15632u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15633u16 => &[151u16, 155u16],
            15634u16 => &[153u16, 150u16, 147u16],
            15635u16 => &[153u16, 150u16, 147u16],
            15636u16 => &[151u16, 155u16],
            15637u16 => &[153u16, 150u16, 147u16],
            15638u16 => &[153u16, 150u16, 147u16],
            15639u16 => &[140u16],
            15640u16 => &[141u16, 142u16, 143u16],
            15641u16 => &[141u16, 142u16, 143u16],
            15642u16 => &[140u16],
            15643u16 => &[141u16, 142u16, 143u16],
            15644u16 => &[141u16, 142u16, 143u16],
            15645u16 => &[],
            15646u16 => &[144u16],
            15647u16 => &[144u16],
            15648u16 => &[],
            15649u16 => &[144u16],
            15650u16 => &[144u16],
            15651u16 => &[140u16, 145u16],
            15652u16 => &[141u16, 142u16, 143u16, 145u16],
            15653u16 => &[141u16, 142u16, 143u16, 145u16],
            15654u16 => &[140u16, 145u16],
            15655u16 => &[141u16, 142u16, 143u16, 145u16],
            15656u16 => &[141u16, 142u16, 143u16, 145u16],
            15657u16 => &[146u16],
            15658u16 => &[144u16, 147u16],
            15659u16 => &[144u16, 147u16],
            15660u16 => &[146u16],
            15661u16 => &[144u16, 147u16],
            15662u16 => &[144u16, 147u16],
            15663u16 => &[140u16, 145u16],
            15664u16 => &[141u16, 142u16, 143u16, 145u16],
            15665u16 => &[141u16, 142u16, 143u16, 145u16],
            15666u16 => &[140u16, 145u16],
            15667u16 => &[141u16, 142u16, 143u16, 145u16],
            15668u16 => &[141u16, 142u16, 143u16, 145u16],
            15669u16 => &[146u16],
            15670u16 => &[144u16, 147u16],
            15671u16 => &[144u16, 147u16],
            15672u16 => &[146u16],
            15673u16 => &[144u16, 147u16],
            15674u16 => &[144u16, 147u16],
            15675u16 => &[140u16, 148u16],
            15676u16 => &[141u16, 142u16, 143u16, 148u16],
            15677u16 => &[141u16, 142u16, 143u16, 148u16],
            15678u16 => &[140u16, 148u16],
            15679u16 => &[141u16, 142u16, 143u16, 148u16],
            15680u16 => &[141u16, 142u16, 143u16, 148u16],
            15681u16 => &[149u16],
            15682u16 => &[144u16, 150u16],
            15683u16 => &[144u16, 150u16],
            15684u16 => &[149u16],
            15685u16 => &[144u16, 150u16],
            15686u16 => &[144u16, 150u16],
            15687u16 => &[140u16, 148u16, 145u16],
            15688u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15689u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15690u16 => &[140u16, 148u16, 145u16],
            15691u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15692u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15693u16 => &[151u16],
            15694u16 => &[144u16, 150u16, 147u16],
            15695u16 => &[144u16, 150u16, 147u16],
            15696u16 => &[151u16],
            15697u16 => &[144u16, 150u16, 147u16],
            15698u16 => &[144u16, 150u16, 147u16],
            15699u16 => &[140u16, 148u16, 145u16],
            15700u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15701u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15702u16 => &[140u16, 148u16, 145u16],
            15703u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15704u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15705u16 => &[151u16],
            15706u16 => &[144u16, 150u16, 147u16],
            15707u16 => &[144u16, 150u16, 147u16],
            15708u16 => &[151u16],
            15709u16 => &[144u16, 150u16, 147u16],
            15710u16 => &[144u16, 150u16, 147u16],
            15711u16 => &[140u16, 148u16],
            15712u16 => &[141u16, 142u16, 143u16, 148u16],
            15713u16 => &[141u16, 142u16, 143u16, 148u16],
            15714u16 => &[140u16, 148u16],
            15715u16 => &[141u16, 142u16, 143u16, 148u16],
            15716u16 => &[141u16, 142u16, 143u16, 148u16],
            15717u16 => &[149u16],
            15718u16 => &[144u16, 150u16],
            15719u16 => &[144u16, 150u16],
            15720u16 => &[149u16],
            15721u16 => &[144u16, 150u16],
            15722u16 => &[144u16, 150u16],
            15723u16 => &[140u16, 148u16, 145u16],
            15724u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15725u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15726u16 => &[140u16, 148u16, 145u16],
            15727u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15728u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15729u16 => &[151u16],
            15730u16 => &[144u16, 150u16, 147u16],
            15731u16 => &[144u16, 150u16, 147u16],
            15732u16 => &[151u16],
            15733u16 => &[144u16, 150u16, 147u16],
            15734u16 => &[144u16, 150u16, 147u16],
            15735u16 => &[140u16, 148u16, 145u16],
            15736u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15737u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15738u16 => &[140u16, 148u16, 145u16],
            15739u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15740u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            15741u16 => &[151u16],
            15742u16 => &[144u16, 150u16, 147u16],
            15743u16 => &[144u16, 150u16, 147u16],
            15744u16 => &[151u16],
            15745u16 => &[144u16, 150u16, 147u16],
            15746u16 => &[144u16, 150u16, 147u16],
            15747u16 => &[140u16, 152u16],
            15748u16 => &[153u16, 142u16, 143u16],
            15749u16 => &[153u16, 142u16, 143u16],
            15750u16 => &[140u16, 152u16],
            15751u16 => &[153u16, 142u16, 143u16],
            15752u16 => &[153u16, 142u16, 143u16],
            15753u16 => &[154u16],
            15754u16 => &[153u16],
            15755u16 => &[153u16],
            15756u16 => &[154u16],
            15757u16 => &[153u16],
            15758u16 => &[153u16],
            15759u16 => &[140u16, 145u16, 152u16],
            15760u16 => &[153u16, 142u16, 143u16, 145u16],
            15761u16 => &[153u16, 142u16, 143u16, 145u16],
            15762u16 => &[140u16, 145u16, 152u16],
            15763u16 => &[153u16, 142u16, 143u16, 145u16],
            15764u16 => &[153u16, 142u16, 143u16, 145u16],
            15765u16 => &[146u16, 155u16],
            15766u16 => &[153u16, 147u16],
            15767u16 => &[153u16, 147u16],
            15768u16 => &[146u16, 155u16],
            15769u16 => &[153u16, 147u16],
            15770u16 => &[153u16, 147u16],
            15771u16 => &[140u16, 145u16, 152u16],
            15772u16 => &[153u16, 142u16, 143u16, 145u16],
            15773u16 => &[153u16, 142u16, 143u16, 145u16],
            15774u16 => &[140u16, 145u16, 152u16],
            15775u16 => &[153u16, 142u16, 143u16, 145u16],
            15776u16 => &[153u16, 142u16, 143u16, 145u16],
            15777u16 => &[146u16, 155u16],
            15778u16 => &[153u16, 147u16],
            15779u16 => &[153u16, 147u16],
            15780u16 => &[146u16, 155u16],
            15781u16 => &[153u16, 147u16],
            15782u16 => &[153u16, 147u16],
            15783u16 => &[140u16, 148u16, 152u16],
            15784u16 => &[153u16, 142u16, 143u16, 148u16],
            15785u16 => &[153u16, 142u16, 143u16, 148u16],
            15786u16 => &[140u16, 148u16, 152u16],
            15787u16 => &[153u16, 142u16, 143u16, 148u16],
            15788u16 => &[153u16, 142u16, 143u16, 148u16],
            15789u16 => &[149u16, 155u16],
            15790u16 => &[153u16, 150u16],
            15791u16 => &[153u16, 150u16],
            15792u16 => &[149u16, 155u16],
            15793u16 => &[153u16, 150u16],
            15794u16 => &[153u16, 150u16],
            15795u16 => &[140u16, 148u16, 145u16, 152u16],
            15796u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15797u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15798u16 => &[140u16, 148u16, 145u16, 152u16],
            15799u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15800u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15801u16 => &[151u16, 155u16],
            15802u16 => &[153u16, 150u16, 147u16],
            15803u16 => &[153u16, 150u16, 147u16],
            15804u16 => &[151u16, 155u16],
            15805u16 => &[153u16, 150u16, 147u16],
            15806u16 => &[153u16, 150u16, 147u16],
            15807u16 => &[140u16, 148u16, 145u16, 152u16],
            15808u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15809u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15810u16 => &[140u16, 148u16, 145u16, 152u16],
            15811u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15812u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15813u16 => &[151u16, 155u16],
            15814u16 => &[153u16, 150u16, 147u16],
            15815u16 => &[153u16, 150u16, 147u16],
            15816u16 => &[151u16, 155u16],
            15817u16 => &[153u16, 150u16, 147u16],
            15818u16 => &[153u16, 150u16, 147u16],
            15819u16 => &[140u16, 148u16, 152u16],
            15820u16 => &[153u16, 142u16, 143u16, 148u16],
            15821u16 => &[153u16, 142u16, 143u16, 148u16],
            15822u16 => &[140u16, 148u16, 152u16],
            15823u16 => &[153u16, 142u16, 143u16, 148u16],
            15824u16 => &[153u16, 142u16, 143u16, 148u16],
            15825u16 => &[149u16, 155u16],
            15826u16 => &[153u16, 150u16],
            15827u16 => &[153u16, 150u16],
            15828u16 => &[149u16, 155u16],
            15829u16 => &[153u16, 150u16],
            15830u16 => &[153u16, 150u16],
            15831u16 => &[140u16, 148u16, 145u16, 152u16],
            15832u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15833u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15834u16 => &[140u16, 148u16, 145u16, 152u16],
            15835u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15836u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15837u16 => &[151u16, 155u16],
            15838u16 => &[153u16, 150u16, 147u16],
            15839u16 => &[153u16, 150u16, 147u16],
            15840u16 => &[151u16, 155u16],
            15841u16 => &[153u16, 150u16, 147u16],
            15842u16 => &[153u16, 150u16, 147u16],
            15843u16 => &[140u16, 148u16, 145u16, 152u16],
            15844u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15845u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15846u16 => &[140u16, 148u16, 145u16, 152u16],
            15847u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15848u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15849u16 => &[151u16, 155u16],
            15850u16 => &[153u16, 150u16, 147u16],
            15851u16 => &[153u16, 150u16, 147u16],
            15852u16 => &[151u16, 155u16],
            15853u16 => &[153u16, 150u16, 147u16],
            15854u16 => &[153u16, 150u16, 147u16],
            15855u16 => &[140u16, 152u16],
            15856u16 => &[153u16, 142u16, 143u16],
            15857u16 => &[153u16, 142u16, 143u16],
            15858u16 => &[140u16, 152u16],
            15859u16 => &[153u16, 142u16, 143u16],
            15860u16 => &[153u16, 142u16, 143u16],
            15861u16 => &[154u16],
            15862u16 => &[153u16],
            15863u16 => &[153u16],
            15864u16 => &[154u16],
            15865u16 => &[153u16],
            15866u16 => &[153u16],
            15867u16 => &[140u16, 145u16, 152u16],
            15868u16 => &[153u16, 142u16, 143u16, 145u16],
            15869u16 => &[153u16, 142u16, 143u16, 145u16],
            15870u16 => &[140u16, 145u16, 152u16],
            15871u16 => &[153u16, 142u16, 143u16, 145u16],
            15872u16 => &[153u16, 142u16, 143u16, 145u16],
            15873u16 => &[146u16, 155u16],
            15874u16 => &[153u16, 147u16],
            15875u16 => &[153u16, 147u16],
            15876u16 => &[146u16, 155u16],
            15877u16 => &[153u16, 147u16],
            15878u16 => &[153u16, 147u16],
            15879u16 => &[140u16, 145u16, 152u16],
            15880u16 => &[153u16, 142u16, 143u16, 145u16],
            15881u16 => &[153u16, 142u16, 143u16, 145u16],
            15882u16 => &[140u16, 145u16, 152u16],
            15883u16 => &[153u16, 142u16, 143u16, 145u16],
            15884u16 => &[153u16, 142u16, 143u16, 145u16],
            15885u16 => &[146u16, 155u16],
            15886u16 => &[153u16, 147u16],
            15887u16 => &[153u16, 147u16],
            15888u16 => &[146u16, 155u16],
            15889u16 => &[153u16, 147u16],
            15890u16 => &[153u16, 147u16],
            15891u16 => &[140u16, 148u16, 152u16],
            15892u16 => &[153u16, 142u16, 143u16, 148u16],
            15893u16 => &[153u16, 142u16, 143u16, 148u16],
            15894u16 => &[140u16, 148u16, 152u16],
            15895u16 => &[153u16, 142u16, 143u16, 148u16],
            15896u16 => &[153u16, 142u16, 143u16, 148u16],
            15897u16 => &[149u16, 155u16],
            15898u16 => &[153u16, 150u16],
            15899u16 => &[153u16, 150u16],
            15900u16 => &[149u16, 155u16],
            15901u16 => &[153u16, 150u16],
            15902u16 => &[153u16, 150u16],
            15903u16 => &[140u16, 148u16, 145u16, 152u16],
            15904u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15905u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15906u16 => &[140u16, 148u16, 145u16, 152u16],
            15907u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15908u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15909u16 => &[151u16, 155u16],
            15910u16 => &[153u16, 150u16, 147u16],
            15911u16 => &[153u16, 150u16, 147u16],
            15912u16 => &[151u16, 155u16],
            15913u16 => &[153u16, 150u16, 147u16],
            15914u16 => &[153u16, 150u16, 147u16],
            15915u16 => &[140u16, 148u16, 145u16, 152u16],
            15916u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15917u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15918u16 => &[140u16, 148u16, 145u16, 152u16],
            15919u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15920u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15921u16 => &[151u16, 155u16],
            15922u16 => &[153u16, 150u16, 147u16],
            15923u16 => &[153u16, 150u16, 147u16],
            15924u16 => &[151u16, 155u16],
            15925u16 => &[153u16, 150u16, 147u16],
            15926u16 => &[153u16, 150u16, 147u16],
            15927u16 => &[140u16, 148u16, 152u16],
            15928u16 => &[153u16, 142u16, 143u16, 148u16],
            15929u16 => &[153u16, 142u16, 143u16, 148u16],
            15930u16 => &[140u16, 148u16, 152u16],
            15931u16 => &[153u16, 142u16, 143u16, 148u16],
            15932u16 => &[153u16, 142u16, 143u16, 148u16],
            15933u16 => &[149u16, 155u16],
            15934u16 => &[153u16, 150u16],
            15935u16 => &[153u16, 150u16],
            15936u16 => &[149u16, 155u16],
            15937u16 => &[153u16, 150u16],
            15938u16 => &[153u16, 150u16],
            15939u16 => &[140u16, 148u16, 145u16, 152u16],
            15940u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15941u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15942u16 => &[140u16, 148u16, 145u16, 152u16],
            15943u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15944u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15945u16 => &[151u16, 155u16],
            15946u16 => &[153u16, 150u16, 147u16],
            15947u16 => &[153u16, 150u16, 147u16],
            15948u16 => &[151u16, 155u16],
            15949u16 => &[153u16, 150u16, 147u16],
            15950u16 => &[153u16, 150u16, 147u16],
            15951u16 => &[140u16, 148u16, 145u16, 152u16],
            15952u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15953u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15954u16 => &[140u16, 148u16, 145u16, 152u16],
            15955u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15956u16 => &[153u16, 142u16, 143u16, 148u16, 145u16],
            15957u16 => &[151u16, 155u16],
            15958u16 => &[153u16, 150u16, 147u16],
            15959u16 => &[153u16, 150u16, 147u16],
            15960u16 => &[151u16, 155u16],
            15961u16 => &[153u16, 150u16, 147u16],
            15962u16 => &[153u16, 150u16, 147u16],
            15963u16 => &[140u16],
            15964u16 => &[141u16, 142u16, 143u16],
            15965u16 => &[141u16, 142u16, 143u16],
            15966u16 => &[140u16],
            15967u16 => &[141u16, 142u16, 143u16],
            15968u16 => &[141u16, 142u16, 143u16],
            15969u16 => &[],
            15970u16 => &[144u16],
            15971u16 => &[144u16],
            15972u16 => &[],
            15973u16 => &[144u16],
            15974u16 => &[144u16],
            15975u16 => &[140u16, 145u16],
            15976u16 => &[141u16, 142u16, 143u16, 145u16],
            15977u16 => &[141u16, 142u16, 143u16, 145u16],
            15978u16 => &[140u16, 145u16],
            15979u16 => &[141u16, 142u16, 143u16, 145u16],
            15980u16 => &[141u16, 142u16, 143u16, 145u16],
            15981u16 => &[146u16],
            15982u16 => &[144u16, 147u16],
            15983u16 => &[144u16, 147u16],
            15984u16 => &[146u16],
            15985u16 => &[144u16, 147u16],
            15986u16 => &[144u16, 147u16],
            15987u16 => &[140u16, 145u16],
            15988u16 => &[141u16, 142u16, 143u16, 145u16],
            15989u16 => &[141u16, 142u16, 143u16, 145u16],
            15990u16 => &[140u16, 145u16],
            15991u16 => &[141u16, 142u16, 143u16, 145u16],
            15992u16 => &[141u16, 142u16, 143u16, 145u16],
            15993u16 => &[146u16],
            15994u16 => &[144u16, 147u16],
            15995u16 => &[144u16, 147u16],
            15996u16 => &[146u16],
            15997u16 => &[144u16, 147u16],
            15998u16 => &[144u16, 147u16],
            15999u16 => &[140u16, 148u16],
            16000u16 => &[141u16, 142u16, 143u16, 148u16],
            16001u16 => &[141u16, 142u16, 143u16, 148u16],
            16002u16 => &[140u16, 148u16],
            16003u16 => &[141u16, 142u16, 143u16, 148u16],
            16004u16 => &[141u16, 142u16, 143u16, 148u16],
            16005u16 => &[149u16],
            16006u16 => &[144u16, 150u16],
            16007u16 => &[144u16, 150u16],
            16008u16 => &[149u16],
            16009u16 => &[144u16, 150u16],
            16010u16 => &[144u16, 150u16],
            16011u16 => &[140u16, 148u16, 145u16],
            16012u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            16013u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            16014u16 => &[140u16, 148u16, 145u16],
            16015u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            16016u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            16017u16 => &[151u16],
            16018u16 => &[144u16, 150u16, 147u16],
            16019u16 => &[144u16, 150u16, 147u16],
            16020u16 => &[151u16],
            16021u16 => &[144u16, 150u16, 147u16],
            16022u16 => &[144u16, 150u16, 147u16],
            16023u16 => &[140u16, 148u16, 145u16],
            16024u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            16025u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            16026u16 => &[140u16, 148u16, 145u16],
            16027u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            16028u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            16029u16 => &[151u16],
            16030u16 => &[144u16, 150u16, 147u16],
            16031u16 => &[144u16, 150u16, 147u16],
            16032u16 => &[151u16],
            16033u16 => &[144u16, 150u16, 147u16],
            16034u16 => &[144u16, 150u16, 147u16],
            16035u16 => &[140u16, 148u16],
            16036u16 => &[141u16, 142u16, 143u16, 148u16],
            16037u16 => &[141u16, 142u16, 143u16, 148u16],
            16038u16 => &[140u16, 148u16],
            16039u16 => &[141u16, 142u16, 143u16, 148u16],
            16040u16 => &[141u16, 142u16, 143u16, 148u16],
            16041u16 => &[149u16],
            16042u16 => &[144u16, 150u16],
            16043u16 => &[144u16, 150u16],
            16044u16 => &[149u16],
            16045u16 => &[144u16, 150u16],
            16046u16 => &[144u16, 150u16],
            16047u16 => &[140u16, 148u16, 145u16],
            16048u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            16049u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            16050u16 => &[140u16, 148u16, 145u16],
            16051u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            16052u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            16053u16 => &[151u16],
            16054u16 => &[144u16, 150u16, 147u16],
            16055u16 => &[144u16, 150u16, 147u16],
            16056u16 => &[151u16],
            16057u16 => &[144u16, 150u16, 147u16],
            16058u16 => &[144u16, 150u16, 147u16],
            16059u16 => &[140u16, 148u16, 145u16],
            16060u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            16061u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            16062u16 => &[140u16, 148u16, 145u16],
            16063u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            16064u16 => &[141u16, 142u16, 143u16, 148u16, 145u16],
            16065u16 => &[151u16],
            16066u16 => &[144u16, 150u16, 147u16],
            16067u16 => &[144u16, 150u16, 147u16],
            16068u16 => &[151u16],
            16069u16 => &[144u16, 150u16, 147u16],
            16070u16 => &[144u16, 150u16, 147u16],
            16071u16 => &[140u16, 152u16],
            16072u16 => &[153u16, 142u16, 143u16],
            16073u16 => &[153u16, 142u16, 143u16],
            16074u16 => &[140u16, 152u16],
            16075u16 => &[153u16, 142u16, 143u16],
            16076u16 => &[153u16, 142u16, 143u16],
            16077u16 => &[154u16],
            16078u16 => &[153u16],
            16079u16 => &[153u16],
            16080u16 => &[154u16],
            16081u16 => &[153u16],
            16082u16 => &[153u16],
            16083u16 => &[140u16, 145u16, 152u16],
            16084u16 => &[153u16, 142u16, 143u16, 145u16],
            16085u16 => &[153u16, 142u16, 143u16, 145u16],
            16086u16 => &[140u16, 145u16, 152u16],
            16087u16 => &[153u16, 142u16, 143u16, 145u16],
            16088u16 => &[153u16, 142u16, 143u16, 145u16],
            16089u16 => &[146u16, 155u16],
            16090u16 => &[153u16, 147u16],
            16091u16 => &[153u16, 147u16],
            16092u16 => &[146u16, 155u16],
            16093u16 => &[153u16, 147u16],
            16094u16 => &[153u16, 147u16],
            16095u16 => &[140u16, 145u16, 152u16],
            16096u16 => &[153u16, 142u16, 143u16, 145u16],
            16097u16 => &[153u16, 142u16, 143u16, 145u16],
            16098u16